/**
 * @version 1.0.0.0
 * @compiler Bridge.NET 17.6.0
 */
Bridge.assembly("TuxPlanetSpeedrunAnyPercent", function ($asm, globals) {
    "use strict";

    Bridge.define("DTLibrary.ByteList", {
        inherits: function () { return [System.IEquatable$1(DTLibrary.ByteList)]; },
        fields: {
            list: null
        },
        alias: ["equalsT", "System$IEquatable$1$DTLibrary$ByteList$equalsT"],
        ctors: {
            ctor: function (list) {
                var $t;
                this.$initialize();
                this.list = new (System.Collections.Generic.List$1(System.Byte)).ctor();
                $t = Bridge.getEnumerator(list);
                try {
                    while ($t.moveNext()) {
                        var b = $t.Current;
                        this.list.add(b);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            }
        },
        methods: {
            GetByte: function (index) {
                return this.list.getItem(index);
            },
            GetCount: function () {
                return this.list.Count;
            },
            GetIterator: function () {
                return new DTLibrary.ByteList.Iterator(this);
            },
            equals: function (obj) {
                return this.equalsT(Bridge.as(obj, DTLibrary.ByteList));
            },
            equalsT: function (other) {
                if (other == null) {
                    return false;
                }

                if (Bridge.referenceEquals(this, other)) {
                    return true;
                }

                if (other.list.Count !== this.list.Count) {
                    return false;
                }

                for (var i = 0; i < this.list.Count; i = (i + 1) | 0) {
                    var b1 = this.list.getItem(i);
                    var b2 = other.list.getItem(i);
                    if (b1 !== b2) {
                        return false;
                    }
                }

                return true;
            },
            getHashCode: function () {
                var hashCode = 0;
                for (var i = 0; i < this.list.Count; i = (i + 1) | 0) {
                    var b = this.list.getItem(i);
                    var bAsInt = b;

                    hashCode = ((Bridge.Int.mul(hashCode, 17) + bAsInt) | 0);
                }

                return hashCode;
            }
        }
    });

    Bridge.define("DTLibrary.ByteList.Builder", {
        $kind: "nested class",
        fields: {
            list: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                this.list = new (System.Collections.Generic.List$1(System.Byte)).ctor();
            }
        },
        methods: {
            ToByteList: function () {
                return new DTLibrary.ByteList(this.list);
            },
            Add: function (b) {
                this.list.add(b);
            },
            AddBool: function (b) {
                if (b) {
                    this.list.add(1);
                } else {
                    this.list.add(0);
                }
            },
            AddNullableBool: function (b) {
                if (b == null) {
                    this.AddBool(false);
                } else {
                    this.AddBool(true);
                    this.AddBool(System.Nullable.getValue(b));
                }
            },
            AddInt: function (i) {
                var b1 = i & 255;
                var b2 = (i >> 8) & 255;
                var b3 = (i >> 16) & 255;
                var b4 = (i >> 24) & 255;

                this.list.add((b1 & 255));
                this.list.add((b2 & 255));
                this.list.add((b3 & 255));
                this.list.add((b4 & 255));
            },
            AddLong: function (l) {
                var b1 = l.and(System.Int64(255));
                var b2 = (l.shr(8)).and(System.Int64(255));
                var b3 = (l.shr(16)).and(System.Int64(255));
                var b4 = (l.shr(24)).and(System.Int64(255));
                var b5 = (l.shr(32)).and(System.Int64(255));
                var b6 = (l.shr(40)).and(System.Int64(255));
                var b7 = (l.shr(48)).and(System.Int64(255));
                var b8 = (l.shr(56)).and(System.Int64(255));

                this.list.add(System.Int64.clipu8(b1));
                this.list.add(System.Int64.clipu8(b2));
                this.list.add(System.Int64.clipu8(b3));
                this.list.add(System.Int64.clipu8(b4));
                this.list.add(System.Int64.clipu8(b5));
                this.list.add(System.Int64.clipu8(b6));
                this.list.add(System.Int64.clipu8(b7));
                this.list.add(System.Int64.clipu8(b8));
            },
            AddNullableInt: function (i) {
                if (i == null) {
                    this.AddBool(false);
                } else {
                    this.AddBool(true);
                    this.AddInt(System.Nullable.getValue(i));
                }
            },
            AddNullableLong: function (l) {
                if (System.Nullable.lifteq("equals", l, System.Int64.lift(null))) {
                    this.AddBool(false);
                } else {
                    this.AddBool(true);
                    this.AddLong(System.Nullable.getValue(l));
                }
            },
            AddIntList: function (list) {
                var $t;
                if (list == null) {
                    this.AddBool(false);
                    return;
                }

                this.AddBool(true);

                this.AddInt(list.Count);

                $t = Bridge.getEnumerator(list);
                try {
                    while ($t.moveNext()) {
                        var i = $t.Current;
                        this.AddInt(i);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            },
            AddIntSet: function (set) {
                if (set == null) {
                    this.AddBool(false);
                    return;
                }

                this.AddBool(true);

                var list = new (System.Collections.Generic.List$1(System.Int32)).$ctor1(set);
                list.Sort();
                this.AddIntList(list);
            },
            AddString: function (str) {
                var $t;
                if (str == null) {
                    this.AddBool(false);
                    return;
                }

                this.AddBool(true);

                this.AddInt(str.length);

                $t = Bridge.getEnumerator(str);
                try {
                    while ($t.moveNext()) {
                        var c = $t.Current;
                        var cAsInt = c;
                        this.AddInt(cAsInt);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            }
        }
    });

    Bridge.define("DTLibrary.ByteList.Iterator", {
        $kind: "nested class",
        fields: {
            byteList: null,
            index: 0
        },
        ctors: {
            ctor: function (byteList) {
                this.$initialize();
                this.byteList = byteList;
                this.index = 0;
            }
        },
        methods: {
            HasNextByte: function () {
                return this.index < this.byteList.GetCount();
            },
            /**
             * Can possibly throw DTDeserializationException
             *
             * @instance
             * @public
             * @this DTLibrary.ByteList.Iterator
             * @memberof DTLibrary.ByteList.Iterator
             * @return  {number}
             */
            TryPop: function () {
                if (this.index >= this.byteList.GetCount()) {
                    throw new DTLibrary.DTDeserializationException();
                }

                var b = this.byteList.GetByte(this.index);

                this.index = (this.index + 1) | 0;

                return b;
            },
            /**
             * Can possibly throw DTDeserializationException
             *
             * @instance
             * @public
             * @this DTLibrary.ByteList.Iterator
             * @memberof DTLibrary.ByteList.Iterator
             * @return  {boolean}
             */
            TryPopBool: function () {
                if (this.index >= this.byteList.GetCount()) {
                    throw new DTLibrary.DTDeserializationException();
                }

                var b = this.byteList.GetByte(this.index);

                this.index = (this.index + 1) | 0;

                if (b === 1) {
                    return true;
                }
                if (b === 0) {
                    return false;
                }

                throw new DTLibrary.DTDeserializationException();
            },
            /**
             * Can possibly throw DTDeserializationException
             *
             * @instance
             * @public
             * @this DTLibrary.ByteList.Iterator
             * @memberof DTLibrary.ByteList.Iterator
             * @return  {?boolean}
             */
            TryPopNullableBool: function () {
                var b = this.TryPopBool();

                if (!b) {
                    return null;
                }

                return this.TryPopBool();
            },
            /**
             * Can possibly throw DTDeserializationException
             *
             * @instance
             * @public
             * @this DTLibrary.ByteList.Iterator
             * @memberof DTLibrary.ByteList.Iterator
             * @return  {number}
             */
            TryPopInt: function () {
                if (((this.index + 3) | 0) >= this.byteList.GetCount()) {
                    throw new DTLibrary.DTDeserializationException();
                }

                var b1 = this.byteList.GetByte(this.index);
                var b2 = this.byteList.GetByte(((this.index + 1) | 0));
                var b3 = this.byteList.GetByte(((this.index + 2) | 0));
                var b4 = this.byteList.GetByte(((this.index + 3) | 0));

                this.index = (this.index + 4) | 0;

                var i1 = b1;
                var i2 = b2 << 8;
                var i3 = b3 << 16;
                var i4 = b4 << 24;

                return i1 | i2 | i3 | i4;
            },
            /**
             * Can possibly throw DTDeserializationException
             *
             * @instance
             * @public
             * @this DTLibrary.ByteList.Iterator
             * @memberof DTLibrary.ByteList.Iterator
             * @return  {System.Int64}
             */
            TryPopLong: function () {
                if (((this.index + 7) | 0) >= this.byteList.GetCount()) {
                    throw new DTLibrary.DTDeserializationException();
                }

                var b1 = System.Int64(this.byteList.GetByte(this.index));
                var b2 = System.Int64(this.byteList.GetByte(((this.index + 1) | 0)));
                var b3 = System.Int64(this.byteList.GetByte(((this.index + 2) | 0)));
                var b4 = System.Int64(this.byteList.GetByte(((this.index + 3) | 0)));
                var b5 = System.Int64(this.byteList.GetByte(((this.index + 4) | 0)));
                var b6 = System.Int64(this.byteList.GetByte(((this.index + 5) | 0)));
                var b7 = System.Int64(this.byteList.GetByte(((this.index + 6) | 0)));
                var b8 = System.Int64(this.byteList.GetByte(((this.index + 7) | 0)));

                this.index = (this.index + 8) | 0;

                var l1 = b1;
                var l2 = b2.shl(8);
                var l3 = b3.shl(16);
                var l4 = b4.shl(24);
                var l5 = b5.shl(32);
                var l6 = b6.shl(40);
                var l7 = b7.shl(48);
                var l8 = b8.shl(56);

                return l1.or(l2).or(l3).or(l4).or(l5).or(l6).or(l7).or(l8);
            },
            /**
             * Can possibly throw DTDeserializationException
             *
             * @instance
             * @public
             * @this DTLibrary.ByteList.Iterator
             * @memberof DTLibrary.ByteList.Iterator
             * @return  {?number}
             */
            TryPopNullableInt: function () {
                var b = this.TryPopBool();

                if (!b) {
                    return null;
                }

                return this.TryPopInt();
            },
            /**
             * Can possibly throw DTDeserializationException
             *
             * @instance
             * @public
             * @this DTLibrary.ByteList.Iterator
             * @memberof DTLibrary.ByteList.Iterator
             * @return  {?System.Int64}
             */
            TryPopNullableLong: function () {
                var b = this.TryPopBool();

                if (!b) {
                    return System.Int64.lift(null);
                }

                return this.TryPopLong();
            },
            /**
             * Can possibly throw DTDeserializationException
             *
             * @instance
             * @public
             * @this DTLibrary.ByteList.Iterator
             * @memberof DTLibrary.ByteList.Iterator
             * @return  {System.Collections.Generic.List$1}
             */
            TryPopIntList: function () {
                var b = this.TryPopBool();

                if (!b) {
                    return null;
                }

                var count = this.TryPopInt();

                var list = new (System.Collections.Generic.List$1(System.Int32)).ctor();

                for (var i = 0; i < count; i = (i + 1) | 0) {
                    list.add(this.TryPopInt());
                }

                return list;
            },
            /**
             * Can possibly throw DTDeserializationException
             *
             * @instance
             * @public
             * @this DTLibrary.ByteList.Iterator
             * @memberof DTLibrary.ByteList.Iterator
             * @return  {System.Collections.Generic.HashSet$1}
             */
            TryPopIntSet: function () {
                var b = this.TryPopBool();

                if (!b) {
                    return null;
                }

                var list = this.TryPopIntList();

                if (list == null) {
                    throw new DTLibrary.DTDeserializationException();
                }

                return new (System.Collections.Generic.HashSet$1(System.Int32)).$ctor1(list);
            },
            /**
             * Can possibly throw DTDeserializationException
             *
             * @instance
             * @public
             * @this DTLibrary.ByteList.Iterator
             * @memberof DTLibrary.ByteList.Iterator
             * @return  {string}
             */
            TryPopString: function () {
                var b = this.TryPopBool();

                if (!b) {
                    return null;
                }

                var count = this.TryPopInt();

                var array = System.Array.init(count, 0, System.Char);

                for (var i = 0; i < count; i = (i + 1) | 0) {
                    var cAsInt = this.TryPopInt();
                    array[System.Array.index(i, array)] = cAsInt & 65535;
                }

                return System.String.fromCharArray(array);
            }
        }
    });

    Bridge.define("DTLibrary.IDTLogger", {
        $kind: "interface"
    });

    Bridge.define("DTLibrary.IKeyboard", {
        $kind: "interface"
    });

    Bridge.define("DTLibrary.IMouse", {
        $kind: "interface"
    });

    Bridge.define("DTLibrary.DisplayExtensions", {
        statics: {
            methods: {
                DrawThickRectangle: function (ImageEnum, FontEnum, displayOutput, x, y, width, height, additionalThickness, color, fill) {
                    displayOutput["DTLibrary$IDisplayOutput$2$" + Bridge.getTypeAlias(ImageEnum) + "$" + Bridge.getTypeAlias(FontEnum) + "$DrawRectangle"](((x - additionalThickness) | 0), ((y - additionalThickness) | 0), ((width + Bridge.Int.mul(additionalThickness, 2)) | 0), ((1 + Bridge.Int.mul(additionalThickness, 2)) | 0), color, true);
                    displayOutput["DTLibrary$IDisplayOutput$2$" + Bridge.getTypeAlias(ImageEnum) + "$" + Bridge.getTypeAlias(FontEnum) + "$DrawRectangle"](((x - additionalThickness) | 0), ((((((height - 1) | 0) + y) | 0) - additionalThickness) | 0), ((width + Bridge.Int.mul(additionalThickness, 2)) | 0), ((1 + Bridge.Int.mul(additionalThickness, 2)) | 0), color, true);
                    displayOutput["DTLibrary$IDisplayOutput$2$" + Bridge.getTypeAlias(ImageEnum) + "$" + Bridge.getTypeAlias(FontEnum) + "$DrawRectangle"](((x - additionalThickness) | 0), ((y - additionalThickness) | 0), ((1 + Bridge.Int.mul(additionalThickness, 2)) | 0), ((height + Bridge.Int.mul(additionalThickness, 2)) | 0), color, true);
                    displayOutput["DTLibrary$IDisplayOutput$2$" + Bridge.getTypeAlias(ImageEnum) + "$" + Bridge.getTypeAlias(FontEnum) + "$DrawRectangle"](((((((width - 1) | 0) + x) | 0) - additionalThickness) | 0), ((y - additionalThickness) | 0), ((1 + Bridge.Int.mul(additionalThickness, 2)) | 0), ((height + Bridge.Int.mul(additionalThickness, 2)) | 0), color, true);

                    if (fill) {
                        displayOutput["DTLibrary$IDisplayOutput$2$" + Bridge.getTypeAlias(ImageEnum) + "$" + Bridge.getTypeAlias(FontEnum) + "$DrawRectangle"](x, y, width, height, color, true);
                    }
                }
            }
        }
    });

    /** @namespace DTLibrary */

    /**
     * Represents a color, containing the standard r, g, b, and alpha values.
     *
     * @public
     * @class DTLibrary.DTColor
     */
    Bridge.define("DTLibrary.DTColor", {
        statics: {
            methods: {
                White: function () {
                    return new DTLibrary.DTColor.ctor(255, 255, 255);
                },
                Black: function () {
                    return new DTLibrary.DTColor.ctor(0, 0, 0);
                }
            }
        },
        fields: {
            r: 0,
            g: 0,
            b: 0,
            alpha: 0
        },
        props: {
            R: {
                get: function () {
                    return this.r;
                }
            },
            G: {
                get: function () {
                    return this.g;
                }
            },
            B: {
                get: function () {
                    return this.b;
                }
            },
            Alpha: {
                get: function () {
                    return this.alpha;
                }
            }
        },
        ctors: {
            ctor: function (r, g, b) {
                this.$initialize();
                this.r = r;
                this.g = g;
                this.b = b;
                this.alpha = 255;
            },
            $ctor1: function (r, g, b, alpha) {
                this.$initialize();
                this.r = r;
                this.g = g;
                this.b = b;
                this.alpha = alpha;
            }
        }
    });

    Bridge.define("DTLibrary.DTDeserializationException", {
        inherits: [System.Exception]
    });

    /**
     * An interface representing a (pseudo) random number generator.
     *
     * @abstract
     * @public
     * @class DTLibrary.IDTRandom
     */
    Bridge.define("DTLibrary.IDTRandom", {
        $kind: "interface"
    });

    Bridge.define("DTLibrary.IDisplayCleanup", {
        $kind: "interface"
    });

    Bridge.definei("DTLibrary.IDisplayOutput$2", function (ImageEnum, FontEnum) { return {
        $kind: "interface"
    }; });

    Bridge.definei("DTLibrary.IDisplayProcessing$1", function (ImageEnum) { return {
        $kind: "interface"
    }; });

    Bridge.define("DTLibrary.DTImmutableList$1", function (T) { return {
        statics: {
            methods: {
                AsImmutableList: function (l) {
                    var immutableList = new (DTLibrary.DTImmutableList$1(T)).ctor();
                    immutableList.list = l;
                    immutableList.count = l.Count;
                    return immutableList;
                },
                EmptyList: function () {
                    return new (DTLibrary.DTImmutableList$1(T)).$ctor2(new (System.Collections.Generic.List$1(T)).ctor());
                }
            }
        },
        fields: {
            list: null,
            count: 0
        },
        props: {
            Count: {
                get: function () {
                    return this.count;
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            },
            $ctor1: function (set) {
                var $t;
                this.$initialize();
                this.list = new (System.Collections.Generic.List$1(T)).$ctor2(set.Count);
                $t = Bridge.getEnumerator(set);
                try {
                    while ($t.moveNext()) {
                        var item = $t.Current;
                        this.list.add(item);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                this.count = set.Count;
            },
            $ctor2: function (list) {
                var $t;
                this.$initialize();
                this.list = new (System.Collections.Generic.List$1(T)).$ctor2(list.Count);
                $t = Bridge.getEnumerator(list);
                try {
                    while ($t.moveNext()) {
                        var item = $t.Current;
                        this.list.add(item);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                this.count = list.Count;
            }
        },
        methods: {
            getItem: function (index) {
                return this.list.getItem(index);
            }
        }
    }; });

    Bridge.define("DTLibrary.DTMath", {
        statics: {
            fields: {
                _sineArray: null,
                _arctanArray: null
            },
            ctors: {
                init: function () {
                    this._sineArray = System.Array.init([
                        0, 
                        1, 
                        1, 
                        2, 
                        2, 
                        3, 
                        3, 
                        4, 
                        4, 
                        5, 
                        6, 
                        6, 
                        7, 
                        7, 
                        8, 
                        8, 
                        9, 
                        9, 
                        10, 
                        11, 
                        11, 
                        12, 
                        12, 
                        13, 
                        13, 
                        14, 
                        15, 
                        15, 
                        16, 
                        16, 
                        17, 
                        17, 
                        18, 
                        18, 
                        19, 
                        20, 
                        20, 
                        21, 
                        21, 
                        22, 
                        22, 
                        23, 
                        23, 
                        24, 
                        25, 
                        25, 
                        26, 
                        26, 
                        27, 
                        27, 
                        28, 
                        28, 
                        29, 
                        30, 
                        30, 
                        31, 
                        31, 
                        32, 
                        32, 
                        33, 
                        34, 
                        34, 
                        35, 
                        35, 
                        36, 
                        36, 
                        37, 
                        37, 
                        38, 
                        39, 
                        39, 
                        40, 
                        40, 
                        41, 
                        41, 
                        42, 
                        42, 
                        43, 
                        44, 
                        44, 
                        45, 
                        45, 
                        46, 
                        46, 
                        47, 
                        47, 
                        48, 
                        49, 
                        49, 
                        50, 
                        50, 
                        51, 
                        51, 
                        52, 
                        52, 
                        53, 
                        54, 
                        54, 
                        55, 
                        55, 
                        56, 
                        56, 
                        57, 
                        57, 
                        58, 
                        59, 
                        59, 
                        60, 
                        60, 
                        61, 
                        61, 
                        62, 
                        63, 
                        63, 
                        64, 
                        64, 
                        65, 
                        65, 
                        66, 
                        66, 
                        67, 
                        68, 
                        68, 
                        69, 
                        69, 
                        70, 
                        70, 
                        71, 
                        71, 
                        72, 
                        73, 
                        73, 
                        74, 
                        74, 
                        75, 
                        75, 
                        76, 
                        76, 
                        77, 
                        78, 
                        78, 
                        79, 
                        79, 
                        80, 
                        80, 
                        81, 
                        81, 
                        82, 
                        83, 
                        83, 
                        84, 
                        84, 
                        85, 
                        85, 
                        86, 
                        86, 
                        87, 
                        88, 
                        88, 
                        89, 
                        89, 
                        90, 
                        90, 
                        91, 
                        91, 
                        92, 
                        93, 
                        93, 
                        94, 
                        94, 
                        95, 
                        95, 
                        96, 
                        96, 
                        97, 
                        98, 
                        98, 
                        99, 
                        99, 
                        100, 
                        100, 
                        101, 
                        101, 
                        102, 
                        103, 
                        103, 
                        104, 
                        104, 
                        105, 
                        105, 
                        106, 
                        106, 
                        107, 
                        108, 
                        108, 
                        109, 
                        109, 
                        110, 
                        110, 
                        111, 
                        111, 
                        112, 
                        113, 
                        113, 
                        114, 
                        114, 
                        115, 
                        115, 
                        116, 
                        116, 
                        117, 
                        118, 
                        118, 
                        119, 
                        119, 
                        120, 
                        120, 
                        121, 
                        121, 
                        122, 
                        123, 
                        123, 
                        124, 
                        124, 
                        125, 
                        125, 
                        126, 
                        126, 
                        127, 
                        128, 
                        128, 
                        129, 
                        129, 
                        130, 
                        130, 
                        131, 
                        131, 
                        132, 
                        133, 
                        133, 
                        134, 
                        134, 
                        135, 
                        135, 
                        136, 
                        136, 
                        137, 
                        138, 
                        138, 
                        139, 
                        139, 
                        140, 
                        140, 
                        141, 
                        141, 
                        142, 
                        143, 
                        143, 
                        144, 
                        144, 
                        145, 
                        145, 
                        146, 
                        146, 
                        147, 
                        147, 
                        148, 
                        149, 
                        149, 
                        150, 
                        150, 
                        151, 
                        151, 
                        152, 
                        152, 
                        153, 
                        154, 
                        154, 
                        155, 
                        155, 
                        156, 
                        156, 
                        157, 
                        157, 
                        158, 
                        159, 
                        159, 
                        160, 
                        160, 
                        161, 
                        161, 
                        162, 
                        162, 
                        163, 
                        163, 
                        164, 
                        165, 
                        165, 
                        166, 
                        166, 
                        167, 
                        167, 
                        168, 
                        168, 
                        169, 
                        170, 
                        170, 
                        171, 
                        171, 
                        172, 
                        172, 
                        173, 
                        173, 
                        174, 
                        175, 
                        175, 
                        176, 
                        176, 
                        177, 
                        177, 
                        178, 
                        178, 
                        179, 
                        179, 
                        180, 
                        181, 
                        181, 
                        182, 
                        182, 
                        183, 
                        183, 
                        184, 
                        184, 
                        185, 
                        186, 
                        186, 
                        187, 
                        187, 
                        188, 
                        188, 
                        189, 
                        189, 
                        190, 
                        190, 
                        191, 
                        192, 
                        192, 
                        193, 
                        193, 
                        194, 
                        194, 
                        195, 
                        195, 
                        196, 
                        196, 
                        197, 
                        198, 
                        198, 
                        199, 
                        199, 
                        200, 
                        200, 
                        201, 
                        201, 
                        202, 
                        203, 
                        203, 
                        204, 
                        204, 
                        205, 
                        205, 
                        206, 
                        206, 
                        207, 
                        207, 
                        208, 
                        209, 
                        209, 
                        210, 
                        210, 
                        211, 
                        211, 
                        212, 
                        212, 
                        213, 
                        213, 
                        214, 
                        215, 
                        215, 
                        216, 
                        216, 
                        217, 
                        217, 
                        218, 
                        218, 
                        219, 
                        219, 
                        220, 
                        221, 
                        221, 
                        222, 
                        222, 
                        223, 
                        223, 
                        224, 
                        224, 
                        225, 
                        225, 
                        226, 
                        227, 
                        227, 
                        228, 
                        228, 
                        229, 
                        229, 
                        230, 
                        230, 
                        231, 
                        231, 
                        232, 
                        233, 
                        233, 
                        234, 
                        234, 
                        235, 
                        235, 
                        236, 
                        236, 
                        237, 
                        237, 
                        238, 
                        239, 
                        239, 
                        240, 
                        240, 
                        241, 
                        241, 
                        242, 
                        242, 
                        243, 
                        243, 
                        244, 
                        244, 
                        245, 
                        246, 
                        246, 
                        247, 
                        247, 
                        248, 
                        248, 
                        249, 
                        249, 
                        250, 
                        250, 
                        251, 
                        252, 
                        252, 
                        253, 
                        253, 
                        254, 
                        254, 
                        255, 
                        255, 
                        256, 
                        256, 
                        257, 
                        257, 
                        258, 
                        259, 
                        259, 
                        260, 
                        260, 
                        261, 
                        261, 
                        262, 
                        262, 
                        263, 
                        263, 
                        264, 
                        264, 
                        265, 
                        266, 
                        266, 
                        267, 
                        267, 
                        268, 
                        268, 
                        269, 
                        269, 
                        270, 
                        270, 
                        271, 
                        271, 
                        272, 
                        273, 
                        273, 
                        274, 
                        274, 
                        275, 
                        275, 
                        276, 
                        276, 
                        277, 
                        277, 
                        278, 
                        278, 
                        279, 
                        280, 
                        280, 
                        281, 
                        281, 
                        282, 
                        282, 
                        283, 
                        283, 
                        284, 
                        284, 
                        285, 
                        285, 
                        286, 
                        287, 
                        287, 
                        288, 
                        288, 
                        289, 
                        289, 
                        290, 
                        290, 
                        291, 
                        291, 
                        292, 
                        292, 
                        293, 
                        294, 
                        294, 
                        295, 
                        295, 
                        296, 
                        296, 
                        297, 
                        297, 
                        298, 
                        298, 
                        299, 
                        299, 
                        300, 
                        300, 
                        301, 
                        302, 
                        302, 
                        303, 
                        303, 
                        304, 
                        304, 
                        305, 
                        305, 
                        306, 
                        306, 
                        307, 
                        307, 
                        308, 
                        308, 
                        309, 
                        310, 
                        310, 
                        311, 
                        311, 
                        312, 
                        312, 
                        313, 
                        313, 
                        314, 
                        314, 
                        315, 
                        315, 
                        316, 
                        316, 
                        317, 
                        317, 
                        318, 
                        319, 
                        319, 
                        320, 
                        320, 
                        321, 
                        321, 
                        322, 
                        322, 
                        323, 
                        323, 
                        324, 
                        324, 
                        325, 
                        325, 
                        326, 
                        327, 
                        327, 
                        328, 
                        328, 
                        329, 
                        329, 
                        330, 
                        330, 
                        331, 
                        331, 
                        332, 
                        332, 
                        333, 
                        333, 
                        334, 
                        334, 
                        335, 
                        335, 
                        336, 
                        337, 
                        337, 
                        338, 
                        338, 
                        339, 
                        339, 
                        340, 
                        340, 
                        341, 
                        341, 
                        342, 
                        342, 
                        343, 
                        343, 
                        344, 
                        344, 
                        345, 
                        346, 
                        346, 
                        347, 
                        347, 
                        348, 
                        348, 
                        349, 
                        349, 
                        350, 
                        350, 
                        351, 
                        351, 
                        352, 
                        352, 
                        353, 
                        353, 
                        354, 
                        354, 
                        355, 
                        355, 
                        356, 
                        357, 
                        357, 
                        358, 
                        358, 
                        359, 
                        359, 
                        360, 
                        360, 
                        361, 
                        361, 
                        362, 
                        362, 
                        363, 
                        363, 
                        364, 
                        364, 
                        365, 
                        365, 
                        366, 
                        366, 
                        367, 
                        367, 
                        368, 
                        369, 
                        369, 
                        370, 
                        370, 
                        371, 
                        371, 
                        372, 
                        372, 
                        373, 
                        373, 
                        374, 
                        374, 
                        375, 
                        375, 
                        376, 
                        376, 
                        377, 
                        377, 
                        378, 
                        378, 
                        379, 
                        379, 
                        380, 
                        380, 
                        381, 
                        382, 
                        382, 
                        383, 
                        383, 
                        384, 
                        384, 
                        385, 
                        385, 
                        386, 
                        386, 
                        387, 
                        387, 
                        388, 
                        388, 
                        389, 
                        389, 
                        390, 
                        390, 
                        391, 
                        391, 
                        392, 
                        392, 
                        393, 
                        393, 
                        394, 
                        394, 
                        395, 
                        395, 
                        396, 
                        397, 
                        397, 
                        398, 
                        398, 
                        399, 
                        399, 
                        400, 
                        400, 
                        401, 
                        401, 
                        402, 
                        402, 
                        403, 
                        403, 
                        404, 
                        404, 
                        405, 
                        405, 
                        406, 
                        406, 
                        407, 
                        407, 
                        408, 
                        408, 
                        409, 
                        409, 
                        410, 
                        410, 
                        411, 
                        411, 
                        412, 
                        412, 
                        413, 
                        413, 
                        414, 
                        414, 
                        415, 
                        415, 
                        416, 
                        416, 
                        417, 
                        418, 
                        418, 
                        419, 
                        419, 
                        420, 
                        420, 
                        421, 
                        421, 
                        422, 
                        422, 
                        423, 
                        423, 
                        424, 
                        424, 
                        425, 
                        425, 
                        426, 
                        426, 
                        427, 
                        427, 
                        428, 
                        428, 
                        429, 
                        429, 
                        430, 
                        430, 
                        431, 
                        431, 
                        432, 
                        432, 
                        433, 
                        433, 
                        434, 
                        434, 
                        435, 
                        435, 
                        436, 
                        436, 
                        437, 
                        437, 
                        438, 
                        438, 
                        439, 
                        439, 
                        440, 
                        440, 
                        441, 
                        441, 
                        442, 
                        442, 
                        443, 
                        443, 
                        444, 
                        444, 
                        445, 
                        445, 
                        446, 
                        446, 
                        447, 
                        447, 
                        448, 
                        448, 
                        449, 
                        449, 
                        450, 
                        450, 
                        451, 
                        451, 
                        452, 
                        452, 
                        453, 
                        453, 
                        454, 
                        454, 
                        455, 
                        455, 
                        456, 
                        456, 
                        457, 
                        457, 
                        458, 
                        458, 
                        459, 
                        459, 
                        460, 
                        460, 
                        461, 
                        461, 
                        462, 
                        462, 
                        463, 
                        463, 
                        464, 
                        464, 
                        465, 
                        465, 
                        466, 
                        466, 
                        467, 
                        467, 
                        468, 
                        468, 
                        469, 
                        469, 
                        470, 
                        470, 
                        471, 
                        471, 
                        472, 
                        472, 
                        473, 
                        473, 
                        474, 
                        474, 
                        475, 
                        475, 
                        476, 
                        476, 
                        477, 
                        477, 
                        478, 
                        478, 
                        479, 
                        479, 
                        480, 
                        480, 
                        481, 
                        481, 
                        482, 
                        482, 
                        483, 
                        483, 
                        484, 
                        484, 
                        485, 
                        485, 
                        486, 
                        486, 
                        487, 
                        487, 
                        488, 
                        488, 
                        489, 
                        489, 
                        490, 
                        490, 
                        491, 
                        491, 
                        492, 
                        492, 
                        493, 
                        493, 
                        494, 
                        494, 
                        494, 
                        495, 
                        495, 
                        496, 
                        496, 
                        497, 
                        497, 
                        498, 
                        498, 
                        499, 
                        499, 
                        500, 
                        500, 
                        501, 
                        501, 
                        502, 
                        502, 
                        503, 
                        503, 
                        504, 
                        504, 
                        505, 
                        505, 
                        506, 
                        506, 
                        507, 
                        507, 
                        508, 
                        508, 
                        509, 
                        509, 
                        510, 
                        510, 
                        511, 
                        511, 
                        512, 
                        512, 
                        512, 
                        513, 
                        513, 
                        514, 
                        514, 
                        515, 
                        515, 
                        516, 
                        516, 
                        517, 
                        517, 
                        518, 
                        518, 
                        519, 
                        519, 
                        520, 
                        520, 
                        521, 
                        521, 
                        522, 
                        522, 
                        523, 
                        523, 
                        524, 
                        524, 
                        525, 
                        525, 
                        525, 
                        526, 
                        526, 
                        527, 
                        527, 
                        528, 
                        528, 
                        529, 
                        529, 
                        530, 
                        530, 
                        531, 
                        531, 
                        532, 
                        532, 
                        533, 
                        533, 
                        534, 
                        534, 
                        535, 
                        535, 
                        536, 
                        536, 
                        536, 
                        537, 
                        537, 
                        538, 
                        538, 
                        539, 
                        539, 
                        540, 
                        540, 
                        541, 
                        541, 
                        542, 
                        542, 
                        543, 
                        543, 
                        544, 
                        544, 
                        545, 
                        545, 
                        545, 
                        546, 
                        546, 
                        547, 
                        547, 
                        548, 
                        548, 
                        549, 
                        549, 
                        550, 
                        550, 
                        551, 
                        551, 
                        552, 
                        552, 
                        553, 
                        553, 
                        553, 
                        554, 
                        554, 
                        555, 
                        555, 
                        556, 
                        556, 
                        557, 
                        557, 
                        558, 
                        558, 
                        559, 
                        559, 
                        560, 
                        560, 
                        561, 
                        561, 
                        561, 
                        562, 
                        562, 
                        563, 
                        563, 
                        564, 
                        564, 
                        565, 
                        565, 
                        566, 
                        566, 
                        567, 
                        567, 
                        568, 
                        568, 
                        568, 
                        569, 
                        569, 
                        570, 
                        570, 
                        571, 
                        571, 
                        572, 
                        572, 
                        573, 
                        573, 
                        574, 
                        574, 
                        574, 
                        575, 
                        575, 
                        576, 
                        576, 
                        577, 
                        577, 
                        578, 
                        578, 
                        579, 
                        579, 
                        580, 
                        580, 
                        580, 
                        581, 
                        581, 
                        582, 
                        582, 
                        583, 
                        583, 
                        584, 
                        584, 
                        585, 
                        585, 
                        586, 
                        586, 
                        586, 
                        587, 
                        587, 
                        588, 
                        588, 
                        589, 
                        589, 
                        590, 
                        590, 
                        591, 
                        591, 
                        591, 
                        592, 
                        592, 
                        593, 
                        593, 
                        594, 
                        594, 
                        595, 
                        595, 
                        596, 
                        596, 
                        596, 
                        597, 
                        597, 
                        598, 
                        598, 
                        599, 
                        599, 
                        600, 
                        600, 
                        601, 
                        601, 
                        601, 
                        602, 
                        602, 
                        603, 
                        603, 
                        604, 
                        604, 
                        605, 
                        605, 
                        606, 
                        606, 
                        606, 
                        607, 
                        607, 
                        608, 
                        608, 
                        609, 
                        609, 
                        610, 
                        610, 
                        610, 
                        611, 
                        611, 
                        612, 
                        612, 
                        613, 
                        613, 
                        614, 
                        614, 
                        614, 
                        615, 
                        615, 
                        616, 
                        616, 
                        617, 
                        617, 
                        618, 
                        618, 
                        618, 
                        619, 
                        619, 
                        620, 
                        620, 
                        621, 
                        621, 
                        622, 
                        622, 
                        622, 
                        623, 
                        623, 
                        624, 
                        624, 
                        625, 
                        625, 
                        626, 
                        626, 
                        626, 
                        627, 
                        627, 
                        628, 
                        628, 
                        629, 
                        629, 
                        630, 
                        630, 
                        630, 
                        631, 
                        631, 
                        632, 
                        632, 
                        633, 
                        633, 
                        634, 
                        634, 
                        634, 
                        635, 
                        635, 
                        636, 
                        636, 
                        637, 
                        637, 
                        637, 
                        638, 
                        638, 
                        639, 
                        639, 
                        640, 
                        640, 
                        641, 
                        641, 
                        641, 
                        642, 
                        642, 
                        643, 
                        643, 
                        644, 
                        644, 
                        644, 
                        645, 
                        645, 
                        646, 
                        646, 
                        647, 
                        647, 
                        647, 
                        648, 
                        648, 
                        649, 
                        649, 
                        650, 
                        650, 
                        650, 
                        651, 
                        651, 
                        652, 
                        652, 
                        653, 
                        653, 
                        653, 
                        654, 
                        654, 
                        655, 
                        655, 
                        656, 
                        656, 
                        657, 
                        657, 
                        657, 
                        658, 
                        658, 
                        659, 
                        659, 
                        659, 
                        660, 
                        660, 
                        661, 
                        661, 
                        662, 
                        662, 
                        662, 
                        663, 
                        663, 
                        664, 
                        664, 
                        665, 
                        665, 
                        665, 
                        666, 
                        666, 
                        667, 
                        667, 
                        668, 
                        668, 
                        668, 
                        669, 
                        669, 
                        670, 
                        670, 
                        671, 
                        671, 
                        671, 
                        672, 
                        672, 
                        673, 
                        673, 
                        673, 
                        674, 
                        674, 
                        675, 
                        675, 
                        676, 
                        676, 
                        676, 
                        677, 
                        677, 
                        678, 
                        678, 
                        679, 
                        679, 
                        679, 
                        680, 
                        680, 
                        681, 
                        681, 
                        681, 
                        682, 
                        682, 
                        683, 
                        683, 
                        684, 
                        684, 
                        684, 
                        685, 
                        685, 
                        686, 
                        686, 
                        686, 
                        687, 
                        687, 
                        688, 
                        688, 
                        689, 
                        689, 
                        689, 
                        690, 
                        690, 
                        691, 
                        691, 
                        691, 
                        692, 
                        692, 
                        693, 
                        693, 
                        693, 
                        694, 
                        694, 
                        695, 
                        695, 
                        696, 
                        696, 
                        696, 
                        697, 
                        697, 
                        698, 
                        698, 
                        698, 
                        699, 
                        699, 
                        700, 
                        700, 
                        700, 
                        701, 
                        701, 
                        702, 
                        702, 
                        702, 
                        703, 
                        703, 
                        704, 
                        704, 
                        704, 
                        705, 
                        705, 
                        706, 
                        706, 
                        706, 
                        707, 
                        707, 
                        708, 
                        708, 
                        709, 
                        709, 
                        709, 
                        710, 
                        710, 
                        711, 
                        711, 
                        711, 
                        712, 
                        712, 
                        713, 
                        713, 
                        713, 
                        714, 
                        714, 
                        715, 
                        715, 
                        715, 
                        716, 
                        716, 
                        717, 
                        717, 
                        717, 
                        718, 
                        718, 
                        719, 
                        719, 
                        719, 
                        720, 
                        720, 
                        721, 
                        721, 
                        721, 
                        722, 
                        722, 
                        722, 
                        723, 
                        723, 
                        724, 
                        724, 
                        724, 
                        725, 
                        725, 
                        726, 
                        726, 
                        726, 
                        727, 
                        727, 
                        728, 
                        728, 
                        728, 
                        729, 
                        729, 
                        730, 
                        730, 
                        730, 
                        731, 
                        731, 
                        732, 
                        732, 
                        732, 
                        733, 
                        733, 
                        733, 
                        734, 
                        734, 
                        735, 
                        735, 
                        735, 
                        736, 
                        736, 
                        737, 
                        737, 
                        737, 
                        738, 
                        738, 
                        739, 
                        739, 
                        739, 
                        740, 
                        740, 
                        740, 
                        741, 
                        741, 
                        742, 
                        742, 
                        742, 
                        743, 
                        743, 
                        744, 
                        744, 
                        744, 
                        745, 
                        745, 
                        745, 
                        746, 
                        746, 
                        747, 
                        747, 
                        747, 
                        748, 
                        748, 
                        749, 
                        749, 
                        749, 
                        750, 
                        750, 
                        750, 
                        751, 
                        751, 
                        752, 
                        752, 
                        752, 
                        753, 
                        753, 
                        753, 
                        754, 
                        754, 
                        755, 
                        755, 
                        755, 
                        756, 
                        756, 
                        756, 
                        757, 
                        757, 
                        758, 
                        758, 
                        758, 
                        759, 
                        759, 
                        759, 
                        760, 
                        760, 
                        761, 
                        761, 
                        761, 
                        762, 
                        762, 
                        762, 
                        763, 
                        763, 
                        764, 
                        764, 
                        764, 
                        765, 
                        765, 
                        765, 
                        766, 
                        766, 
                        767, 
                        767, 
                        767, 
                        768, 
                        768, 
                        768, 
                        769, 
                        769, 
                        770, 
                        770, 
                        770, 
                        771, 
                        771, 
                        771, 
                        772, 
                        772, 
                        772, 
                        773, 
                        773, 
                        774, 
                        774, 
                        774, 
                        775, 
                        775, 
                        775, 
                        776, 
                        776, 
                        776, 
                        777, 
                        777, 
                        778, 
                        778, 
                        778, 
                        779, 
                        779, 
                        779, 
                        780, 
                        780, 
                        780, 
                        781, 
                        781, 
                        782, 
                        782, 
                        782, 
                        783, 
                        783, 
                        783, 
                        784, 
                        784, 
                        784, 
                        785, 
                        785, 
                        786, 
                        786, 
                        786, 
                        787, 
                        787, 
                        787, 
                        788, 
                        788, 
                        788, 
                        789, 
                        789, 
                        789, 
                        790, 
                        790, 
                        790, 
                        791, 
                        791, 
                        792, 
                        792, 
                        792, 
                        793, 
                        793, 
                        793, 
                        794, 
                        794, 
                        794, 
                        795, 
                        795, 
                        795, 
                        796, 
                        796, 
                        796, 
                        797, 
                        797, 
                        798, 
                        798, 
                        798, 
                        799, 
                        799, 
                        799, 
                        800, 
                        800, 
                        800, 
                        801, 
                        801, 
                        801, 
                        802, 
                        802, 
                        802, 
                        803, 
                        803, 
                        803, 
                        804, 
                        804, 
                        805, 
                        805, 
                        805, 
                        806, 
                        806, 
                        806, 
                        807, 
                        807, 
                        807, 
                        808, 
                        808, 
                        808, 
                        809, 
                        809, 
                        809, 
                        810, 
                        810, 
                        810, 
                        811, 
                        811, 
                        811, 
                        812, 
                        812, 
                        812, 
                        813, 
                        813, 
                        813, 
                        814, 
                        814, 
                        814, 
                        815, 
                        815, 
                        815, 
                        816, 
                        816, 
                        816, 
                        817, 
                        817, 
                        817, 
                        818, 
                        818, 
                        818, 
                        819, 
                        819, 
                        819, 
                        820, 
                        820, 
                        820, 
                        821, 
                        821, 
                        821, 
                        822, 
                        822, 
                        822, 
                        823, 
                        823, 
                        823, 
                        824, 
                        824, 
                        824, 
                        825, 
                        825, 
                        825, 
                        826, 
                        826, 
                        826, 
                        827, 
                        827, 
                        827, 
                        828, 
                        828, 
                        828, 
                        829, 
                        829, 
                        829, 
                        830, 
                        830, 
                        830, 
                        831, 
                        831, 
                        831, 
                        832, 
                        832, 
                        832, 
                        833, 
                        833, 
                        833, 
                        834, 
                        834, 
                        834, 
                        835, 
                        835, 
                        835, 
                        836, 
                        836, 
                        836, 
                        837, 
                        837, 
                        837, 
                        838, 
                        838, 
                        838, 
                        838, 
                        839, 
                        839, 
                        839, 
                        840, 
                        840, 
                        840, 
                        841, 
                        841, 
                        841, 
                        842, 
                        842, 
                        842, 
                        843, 
                        843, 
                        843, 
                        844, 
                        844, 
                        844, 
                        845, 
                        845, 
                        845, 
                        845, 
                        846, 
                        846, 
                        846, 
                        847, 
                        847, 
                        847, 
                        848, 
                        848, 
                        848, 
                        849, 
                        849, 
                        849, 
                        850, 
                        850, 
                        850, 
                        850, 
                        851, 
                        851, 
                        851, 
                        852, 
                        852, 
                        852, 
                        853, 
                        853, 
                        853, 
                        854, 
                        854, 
                        854, 
                        855, 
                        855, 
                        855, 
                        855, 
                        856, 
                        856, 
                        856, 
                        857, 
                        857, 
                        857, 
                        858, 
                        858, 
                        858, 
                        858, 
                        859, 
                        859, 
                        859, 
                        860, 
                        860, 
                        860, 
                        861, 
                        861, 
                        861, 
                        862, 
                        862, 
                        862, 
                        862, 
                        863, 
                        863, 
                        863, 
                        864, 
                        864, 
                        864, 
                        865, 
                        865, 
                        865, 
                        865, 
                        866, 
                        866, 
                        866, 
                        867, 
                        867, 
                        867, 
                        868, 
                        868, 
                        868, 
                        868, 
                        869, 
                        869, 
                        869, 
                        870, 
                        870, 
                        870, 
                        870, 
                        871, 
                        871, 
                        871, 
                        872, 
                        872, 
                        872, 
                        873, 
                        873, 
                        873, 
                        873, 
                        874, 
                        874, 
                        874, 
                        875, 
                        875, 
                        875, 
                        875, 
                        876, 
                        876, 
                        876, 
                        877, 
                        877, 
                        877, 
                        877, 
                        878, 
                        878, 
                        878, 
                        879, 
                        879, 
                        879, 
                        879, 
                        880, 
                        880, 
                        880, 
                        881, 
                        881, 
                        881, 
                        881, 
                        882, 
                        882, 
                        882, 
                        883, 
                        883, 
                        883, 
                        883, 
                        884, 
                        884, 
                        884, 
                        885, 
                        885, 
                        885, 
                        885, 
                        886, 
                        886, 
                        886, 
                        887, 
                        887, 
                        887, 
                        887, 
                        888, 
                        888, 
                        888, 
                        888, 
                        889, 
                        889, 
                        889, 
                        890, 
                        890, 
                        890, 
                        890, 
                        891, 
                        891, 
                        891, 
                        892, 
                        892, 
                        892, 
                        892, 
                        893, 
                        893, 
                        893, 
                        893, 
                        894, 
                        894, 
                        894, 
                        895, 
                        895, 
                        895, 
                        895, 
                        896, 
                        896, 
                        896, 
                        896, 
                        897, 
                        897, 
                        897, 
                        897, 
                        898, 
                        898, 
                        898, 
                        899, 
                        899, 
                        899, 
                        899, 
                        900, 
                        900, 
                        900, 
                        900, 
                        901, 
                        901, 
                        901, 
                        902, 
                        902, 
                        902, 
                        902, 
                        903, 
                        903, 
                        903, 
                        903, 
                        904, 
                        904, 
                        904, 
                        904, 
                        905, 
                        905, 
                        905, 
                        905, 
                        906, 
                        906, 
                        906, 
                        906, 
                        907, 
                        907, 
                        907, 
                        908, 
                        908, 
                        908, 
                        908, 
                        909, 
                        909, 
                        909, 
                        909, 
                        910, 
                        910, 
                        910, 
                        910, 
                        911, 
                        911, 
                        911, 
                        911, 
                        912, 
                        912, 
                        912, 
                        912, 
                        913, 
                        913, 
                        913, 
                        913, 
                        914, 
                        914, 
                        914, 
                        914, 
                        915, 
                        915, 
                        915, 
                        915, 
                        916, 
                        916, 
                        916, 
                        916, 
                        917, 
                        917, 
                        917, 
                        917, 
                        918, 
                        918, 
                        918, 
                        918, 
                        919, 
                        919, 
                        919, 
                        919, 
                        920, 
                        920, 
                        920, 
                        920, 
                        921, 
                        921, 
                        921, 
                        921, 
                        922, 
                        922, 
                        922, 
                        922, 
                        923, 
                        923, 
                        923, 
                        923, 
                        924, 
                        924, 
                        924, 
                        924, 
                        924, 
                        925, 
                        925, 
                        925, 
                        925, 
                        926, 
                        926, 
                        926, 
                        926, 
                        927, 
                        927, 
                        927, 
                        927, 
                        928, 
                        928, 
                        928, 
                        928, 
                        929, 
                        929, 
                        929, 
                        929, 
                        929, 
                        930, 
                        930, 
                        930, 
                        930, 
                        931, 
                        931, 
                        931, 
                        931, 
                        932, 
                        932, 
                        932, 
                        932, 
                        932, 
                        933, 
                        933, 
                        933, 
                        933, 
                        934, 
                        934, 
                        934, 
                        934, 
                        935, 
                        935, 
                        935, 
                        935, 
                        935, 
                        936, 
                        936, 
                        936, 
                        936, 
                        937, 
                        937, 
                        937, 
                        937, 
                        938, 
                        938, 
                        938, 
                        938, 
                        938, 
                        939, 
                        939, 
                        939, 
                        939, 
                        940, 
                        940, 
                        940, 
                        940, 
                        940, 
                        941, 
                        941, 
                        941, 
                        941, 
                        942, 
                        942, 
                        942, 
                        942, 
                        942, 
                        943, 
                        943, 
                        943, 
                        943, 
                        943, 
                        944, 
                        944, 
                        944, 
                        944, 
                        945, 
                        945, 
                        945, 
                        945, 
                        945, 
                        946, 
                        946, 
                        946, 
                        946, 
                        946, 
                        947, 
                        947, 
                        947, 
                        947, 
                        948, 
                        948, 
                        948, 
                        948, 
                        948, 
                        949, 
                        949, 
                        949, 
                        949, 
                        949, 
                        950, 
                        950, 
                        950, 
                        950, 
                        950, 
                        951, 
                        951, 
                        951, 
                        951, 
                        952, 
                        952, 
                        952, 
                        952, 
                        952, 
                        953, 
                        953, 
                        953, 
                        953, 
                        953, 
                        954, 
                        954, 
                        954, 
                        954, 
                        954, 
                        955, 
                        955, 
                        955, 
                        955, 
                        955, 
                        956, 
                        956, 
                        956, 
                        956, 
                        956, 
                        957, 
                        957, 
                        957, 
                        957, 
                        957, 
                        958, 
                        958, 
                        958, 
                        958, 
                        958, 
                        959, 
                        959, 
                        959, 
                        959, 
                        959, 
                        960, 
                        960, 
                        960, 
                        960, 
                        960, 
                        961, 
                        961, 
                        961, 
                        961, 
                        961, 
                        961, 
                        962, 
                        962, 
                        962, 
                        962, 
                        962, 
                        963, 
                        963, 
                        963, 
                        963, 
                        963, 
                        964, 
                        964, 
                        964, 
                        964, 
                        964, 
                        965, 
                        965, 
                        965, 
                        965, 
                        965, 
                        965, 
                        966, 
                        966, 
                        966, 
                        966, 
                        966, 
                        967, 
                        967, 
                        967, 
                        967, 
                        967, 
                        967, 
                        968, 
                        968, 
                        968, 
                        968, 
                        968, 
                        969, 
                        969, 
                        969, 
                        969, 
                        969, 
                        969, 
                        970, 
                        970, 
                        970, 
                        970, 
                        970, 
                        971, 
                        971, 
                        971, 
                        971, 
                        971, 
                        971, 
                        972, 
                        972, 
                        972, 
                        972, 
                        972, 
                        972, 
                        973, 
                        973, 
                        973, 
                        973, 
                        973, 
                        974, 
                        974, 
                        974, 
                        974, 
                        974, 
                        974, 
                        975, 
                        975, 
                        975, 
                        975, 
                        975, 
                        975, 
                        976, 
                        976, 
                        976, 
                        976, 
                        976, 
                        976, 
                        977, 
                        977, 
                        977, 
                        977, 
                        977, 
                        977, 
                        978, 
                        978, 
                        978, 
                        978, 
                        978, 
                        978, 
                        979, 
                        979, 
                        979, 
                        979, 
                        979, 
                        979, 
                        980, 
                        980, 
                        980, 
                        980, 
                        980, 
                        980, 
                        981, 
                        981, 
                        981, 
                        981, 
                        981, 
                        981, 
                        982, 
                        982, 
                        982, 
                        982, 
                        982, 
                        982, 
                        982, 
                        983, 
                        983, 
                        983, 
                        983, 
                        983, 
                        983, 
                        984, 
                        984, 
                        984, 
                        984, 
                        984, 
                        984, 
                        984, 
                        985, 
                        985, 
                        985, 
                        985, 
                        985, 
                        985, 
                        986, 
                        986, 
                        986, 
                        986, 
                        986, 
                        986, 
                        986, 
                        987, 
                        987, 
                        987, 
                        987, 
                        987, 
                        987, 
                        988, 
                        988, 
                        988, 
                        988, 
                        988, 
                        988, 
                        988, 
                        989, 
                        989, 
                        989, 
                        989, 
                        989, 
                        989, 
                        989, 
                        990, 
                        990, 
                        990, 
                        990, 
                        990, 
                        990, 
                        990, 
                        991, 
                        991, 
                        991, 
                        991, 
                        991, 
                        991, 
                        991, 
                        992, 
                        992, 
                        992, 
                        992, 
                        992, 
                        992, 
                        992, 
                        992, 
                        993, 
                        993, 
                        993, 
                        993, 
                        993, 
                        993, 
                        993, 
                        994, 
                        994, 
                        994, 
                        994, 
                        994, 
                        994, 
                        994, 
                        995, 
                        995, 
                        995, 
                        995, 
                        995, 
                        995, 
                        995, 
                        995, 
                        996, 
                        996, 
                        996, 
                        996, 
                        996, 
                        996, 
                        996, 
                        996, 
                        997, 
                        997, 
                        997, 
                        997, 
                        997, 
                        997, 
                        997, 
                        998, 
                        998, 
                        998, 
                        998, 
                        998, 
                        998, 
                        998, 
                        998, 
                        999, 
                        999, 
                        999, 
                        999, 
                        999, 
                        999, 
                        999, 
                        999, 
                        999, 
                        1000, 
                        1000, 
                        1000, 
                        1000, 
                        1000, 
                        1000, 
                        1000, 
                        1000, 
                        1001, 
                        1001, 
                        1001, 
                        1001, 
                        1001, 
                        1001, 
                        1001, 
                        1001, 
                        1002, 
                        1002, 
                        1002, 
                        1002, 
                        1002, 
                        1002, 
                        1002, 
                        1002, 
                        1002, 
                        1003, 
                        1003, 
                        1003, 
                        1003, 
                        1003, 
                        1003, 
                        1003, 
                        1003, 
                        1003, 
                        1004, 
                        1004, 
                        1004, 
                        1004, 
                        1004, 
                        1004, 
                        1004, 
                        1004, 
                        1004, 
                        1005, 
                        1005, 
                        1005, 
                        1005, 
                        1005, 
                        1005, 
                        1005, 
                        1005, 
                        1005, 
                        1006, 
                        1006, 
                        1006, 
                        1006, 
                        1006, 
                        1006, 
                        1006, 
                        1006, 
                        1006, 
                        1006, 
                        1007, 
                        1007, 
                        1007, 
                        1007, 
                        1007, 
                        1007, 
                        1007, 
                        1007, 
                        1007, 
                        1007, 
                        1008, 
                        1008, 
                        1008, 
                        1008, 
                        1008, 
                        1008, 
                        1008, 
                        1008, 
                        1008, 
                        1008, 
                        1009, 
                        1009, 
                        1009, 
                        1009, 
                        1009, 
                        1009, 
                        1009, 
                        1009, 
                        1009, 
                        1009, 
                        1009, 
                        1010, 
                        1010, 
                        1010, 
                        1010, 
                        1010, 
                        1010, 
                        1010, 
                        1010, 
                        1010, 
                        1010, 
                        1011, 
                        1011, 
                        1011, 
                        1011, 
                        1011, 
                        1011, 
                        1011, 
                        1011, 
                        1011, 
                        1011, 
                        1011, 
                        1011, 
                        1012, 
                        1012, 
                        1012, 
                        1012, 
                        1012, 
                        1012, 
                        1012, 
                        1012, 
                        1012, 
                        1012, 
                        1012, 
                        1013, 
                        1013, 
                        1013, 
                        1013, 
                        1013, 
                        1013, 
                        1013, 
                        1013, 
                        1013, 
                        1013, 
                        1013, 
                        1013, 
                        1013, 
                        1014, 
                        1014, 
                        1014, 
                        1014, 
                        1014, 
                        1014, 
                        1014, 
                        1014, 
                        1014, 
                        1014, 
                        1014, 
                        1014, 
                        1014, 
                        1015, 
                        1015, 
                        1015, 
                        1015, 
                        1015, 
                        1015, 
                        1015, 
                        1015, 
                        1015, 
                        1015, 
                        1015, 
                        1015, 
                        1015, 
                        1016, 
                        1016, 
                        1016, 
                        1016, 
                        1016, 
                        1016, 
                        1016, 
                        1016, 
                        1016, 
                        1016, 
                        1016, 
                        1016, 
                        1016, 
                        1016, 
                        1017, 
                        1017, 
                        1017, 
                        1017, 
                        1017, 
                        1017, 
                        1017, 
                        1017, 
                        1017, 
                        1017, 
                        1017, 
                        1017, 
                        1017, 
                        1017, 
                        1017, 
                        1017, 
                        1018, 
                        1018, 
                        1018, 
                        1018, 
                        1018, 
                        1018, 
                        1018, 
                        1018, 
                        1018, 
                        1018, 
                        1018, 
                        1018, 
                        1018, 
                        1018, 
                        1018, 
                        1018, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1018, 
                        1018, 
                        1018, 
                        1018, 
                        1018, 
                        1018, 
                        1018, 
                        1018, 
                        1018, 
                        1018, 
                        1018, 
                        1018, 
                        1018, 
                        1018, 
                        1018, 
                        1018, 
                        1017, 
                        1017, 
                        1017, 
                        1017, 
                        1017, 
                        1017, 
                        1017, 
                        1017, 
                        1017, 
                        1017, 
                        1017, 
                        1017, 
                        1017, 
                        1017, 
                        1017, 
                        1017, 
                        1016, 
                        1016, 
                        1016, 
                        1016, 
                        1016, 
                        1016, 
                        1016, 
                        1016, 
                        1016, 
                        1016, 
                        1016, 
                        1016, 
                        1016, 
                        1016, 
                        1015, 
                        1015, 
                        1015, 
                        1015, 
                        1015, 
                        1015, 
                        1015, 
                        1015, 
                        1015, 
                        1015, 
                        1015, 
                        1015, 
                        1015, 
                        1014, 
                        1014, 
                        1014, 
                        1014, 
                        1014, 
                        1014, 
                        1014, 
                        1014, 
                        1014, 
                        1014, 
                        1014, 
                        1014, 
                        1014, 
                        1013, 
                        1013, 
                        1013, 
                        1013, 
                        1013, 
                        1013, 
                        1013, 
                        1013, 
                        1013, 
                        1013, 
                        1013, 
                        1013, 
                        1013, 
                        1012, 
                        1012, 
                        1012, 
                        1012, 
                        1012, 
                        1012, 
                        1012, 
                        1012, 
                        1012, 
                        1012, 
                        1012, 
                        1011, 
                        1011, 
                        1011, 
                        1011, 
                        1011, 
                        1011, 
                        1011, 
                        1011, 
                        1011, 
                        1011, 
                        1011, 
                        1011, 
                        1010, 
                        1010, 
                        1010, 
                        1010, 
                        1010, 
                        1010, 
                        1010, 
                        1010, 
                        1010, 
                        1010, 
                        1009, 
                        1009, 
                        1009, 
                        1009, 
                        1009, 
                        1009, 
                        1009, 
                        1009, 
                        1009, 
                        1009, 
                        1009, 
                        1008, 
                        1008, 
                        1008, 
                        1008, 
                        1008, 
                        1008, 
                        1008, 
                        1008, 
                        1008, 
                        1008, 
                        1007, 
                        1007, 
                        1007, 
                        1007, 
                        1007, 
                        1007, 
                        1007, 
                        1007, 
                        1007, 
                        1007, 
                        1006, 
                        1006, 
                        1006, 
                        1006, 
                        1006, 
                        1006, 
                        1006, 
                        1006, 
                        1006, 
                        1006, 
                        1005, 
                        1005, 
                        1005, 
                        1005, 
                        1005, 
                        1005, 
                        1005, 
                        1005, 
                        1005, 
                        1004, 
                        1004, 
                        1004, 
                        1004, 
                        1004, 
                        1004, 
                        1004, 
                        1004, 
                        1004, 
                        1003, 
                        1003, 
                        1003, 
                        1003, 
                        1003, 
                        1003, 
                        1003, 
                        1003, 
                        1003, 
                        1002, 
                        1002, 
                        1002, 
                        1002, 
                        1002, 
                        1002, 
                        1002, 
                        1002, 
                        1002, 
                        1001, 
                        1001, 
                        1001, 
                        1001, 
                        1001, 
                        1001, 
                        1001, 
                        1001, 
                        1000, 
                        1000, 
                        1000, 
                        1000, 
                        1000, 
                        1000, 
                        1000, 
                        1000, 
                        999, 
                        999, 
                        999, 
                        999, 
                        999, 
                        999, 
                        999, 
                        999, 
                        999, 
                        998, 
                        998, 
                        998, 
                        998, 
                        998, 
                        998, 
                        998, 
                        998, 
                        997, 
                        997, 
                        997, 
                        997, 
                        997, 
                        997, 
                        997, 
                        996, 
                        996, 
                        996, 
                        996, 
                        996, 
                        996, 
                        996, 
                        996, 
                        995, 
                        995, 
                        995, 
                        995, 
                        995, 
                        995, 
                        995, 
                        995, 
                        994, 
                        994, 
                        994, 
                        994, 
                        994, 
                        994, 
                        994, 
                        993, 
                        993, 
                        993, 
                        993, 
                        993, 
                        993, 
                        993, 
                        992, 
                        992, 
                        992, 
                        992, 
                        992, 
                        992, 
                        992, 
                        992, 
                        991, 
                        991, 
                        991, 
                        991, 
                        991, 
                        991, 
                        991, 
                        990, 
                        990, 
                        990, 
                        990, 
                        990, 
                        990, 
                        990, 
                        989, 
                        989, 
                        989, 
                        989, 
                        989, 
                        989, 
                        989, 
                        988, 
                        988, 
                        988, 
                        988, 
                        988, 
                        988, 
                        988, 
                        987, 
                        987, 
                        987, 
                        987, 
                        987, 
                        987, 
                        986, 
                        986, 
                        986, 
                        986, 
                        986, 
                        986, 
                        986, 
                        985, 
                        985, 
                        985, 
                        985, 
                        985, 
                        985, 
                        984, 
                        984, 
                        984, 
                        984, 
                        984, 
                        984, 
                        984, 
                        983, 
                        983, 
                        983, 
                        983, 
                        983, 
                        983, 
                        982, 
                        982, 
                        982, 
                        982, 
                        982, 
                        982, 
                        982, 
                        981, 
                        981, 
                        981, 
                        981, 
                        981, 
                        981, 
                        980, 
                        980, 
                        980, 
                        980, 
                        980, 
                        980, 
                        979, 
                        979, 
                        979, 
                        979, 
                        979, 
                        979, 
                        978, 
                        978, 
                        978, 
                        978, 
                        978, 
                        978, 
                        977, 
                        977, 
                        977, 
                        977, 
                        977, 
                        977, 
                        976, 
                        976, 
                        976, 
                        976, 
                        976, 
                        976, 
                        975, 
                        975, 
                        975, 
                        975, 
                        975, 
                        975, 
                        974, 
                        974, 
                        974, 
                        974, 
                        974, 
                        974, 
                        973, 
                        973, 
                        973, 
                        973, 
                        973, 
                        972, 
                        972, 
                        972, 
                        972, 
                        972, 
                        972, 
                        971, 
                        971, 
                        971, 
                        971, 
                        971, 
                        971, 
                        970, 
                        970, 
                        970, 
                        970, 
                        970, 
                        969, 
                        969, 
                        969, 
                        969, 
                        969, 
                        969, 
                        968, 
                        968, 
                        968, 
                        968, 
                        968, 
                        967, 
                        967, 
                        967, 
                        967, 
                        967, 
                        967, 
                        966, 
                        966, 
                        966, 
                        966, 
                        966, 
                        965, 
                        965, 
                        965, 
                        965, 
                        965, 
                        965, 
                        964, 
                        964, 
                        964, 
                        964, 
                        964, 
                        963, 
                        963, 
                        963, 
                        963, 
                        963, 
                        962, 
                        962, 
                        962, 
                        962, 
                        962, 
                        961, 
                        961, 
                        961, 
                        961, 
                        961, 
                        961, 
                        960, 
                        960, 
                        960, 
                        960, 
                        960, 
                        959, 
                        959, 
                        959, 
                        959, 
                        959, 
                        958, 
                        958, 
                        958, 
                        958, 
                        958, 
                        957, 
                        957, 
                        957, 
                        957, 
                        957, 
                        956, 
                        956, 
                        956, 
                        956, 
                        956, 
                        955, 
                        955, 
                        955, 
                        955, 
                        955, 
                        954, 
                        954, 
                        954, 
                        954, 
                        954, 
                        953, 
                        953, 
                        953, 
                        953, 
                        953, 
                        952, 
                        952, 
                        952, 
                        952, 
                        952, 
                        951, 
                        951, 
                        951, 
                        951, 
                        950, 
                        950, 
                        950, 
                        950, 
                        950, 
                        949, 
                        949, 
                        949, 
                        949, 
                        949, 
                        948, 
                        948, 
                        948, 
                        948, 
                        948, 
                        947, 
                        947, 
                        947, 
                        947, 
                        946, 
                        946, 
                        946, 
                        946, 
                        946, 
                        945, 
                        945, 
                        945, 
                        945, 
                        945, 
                        944, 
                        944, 
                        944, 
                        944, 
                        943, 
                        943, 
                        943, 
                        943, 
                        943, 
                        942, 
                        942, 
                        942, 
                        942, 
                        942, 
                        941, 
                        941, 
                        941, 
                        941, 
                        940, 
                        940, 
                        940, 
                        940, 
                        940, 
                        939, 
                        939, 
                        939, 
                        939, 
                        938, 
                        938, 
                        938, 
                        938, 
                        938, 
                        937, 
                        937, 
                        937, 
                        937, 
                        936, 
                        936, 
                        936, 
                        936, 
                        935, 
                        935, 
                        935, 
                        935, 
                        935, 
                        934, 
                        934, 
                        934, 
                        934, 
                        933, 
                        933, 
                        933, 
                        933, 
                        932, 
                        932, 
                        932, 
                        932, 
                        932, 
                        931, 
                        931, 
                        931, 
                        931, 
                        930, 
                        930, 
                        930, 
                        930, 
                        929, 
                        929, 
                        929, 
                        929, 
                        929, 
                        928, 
                        928, 
                        928, 
                        928, 
                        927, 
                        927, 
                        927, 
                        927, 
                        926, 
                        926, 
                        926, 
                        926, 
                        925, 
                        925, 
                        925, 
                        925, 
                        924, 
                        924, 
                        924, 
                        924, 
                        924, 
                        923, 
                        923, 
                        923, 
                        923, 
                        922, 
                        922, 
                        922, 
                        922, 
                        921, 
                        921, 
                        921, 
                        921, 
                        920, 
                        920, 
                        920, 
                        920, 
                        919, 
                        919, 
                        919, 
                        919, 
                        918, 
                        918, 
                        918, 
                        918, 
                        917, 
                        917, 
                        917, 
                        917, 
                        916, 
                        916, 
                        916, 
                        916, 
                        915, 
                        915, 
                        915, 
                        915, 
                        914, 
                        914, 
                        914, 
                        914, 
                        913, 
                        913, 
                        913, 
                        913, 
                        912, 
                        912, 
                        912, 
                        912, 
                        911, 
                        911, 
                        911, 
                        911, 
                        910, 
                        910, 
                        910, 
                        910, 
                        909, 
                        909, 
                        909, 
                        909, 
                        908, 
                        908, 
                        908, 
                        908, 
                        907, 
                        907, 
                        907, 
                        906, 
                        906, 
                        906, 
                        906, 
                        905, 
                        905, 
                        905, 
                        905, 
                        904, 
                        904, 
                        904, 
                        904, 
                        903, 
                        903, 
                        903, 
                        903, 
                        902, 
                        902, 
                        902, 
                        902, 
                        901, 
                        901, 
                        901, 
                        900, 
                        900, 
                        900, 
                        900, 
                        899, 
                        899, 
                        899, 
                        899, 
                        898, 
                        898, 
                        898, 
                        897, 
                        897, 
                        897, 
                        897, 
                        896, 
                        896, 
                        896, 
                        896, 
                        895, 
                        895, 
                        895, 
                        895, 
                        894, 
                        894, 
                        894, 
                        893, 
                        893, 
                        893, 
                        893, 
                        892, 
                        892, 
                        892, 
                        892, 
                        891, 
                        891, 
                        891, 
                        890, 
                        890, 
                        890, 
                        890, 
                        889, 
                        889, 
                        889, 
                        888, 
                        888, 
                        888, 
                        888, 
                        887, 
                        887, 
                        887, 
                        887, 
                        886, 
                        886, 
                        886, 
                        885, 
                        885, 
                        885, 
                        885, 
                        884, 
                        884, 
                        884, 
                        883, 
                        883, 
                        883, 
                        883, 
                        882, 
                        882, 
                        882, 
                        881, 
                        881, 
                        881, 
                        881, 
                        880, 
                        880, 
                        880, 
                        879, 
                        879, 
                        879, 
                        879, 
                        878, 
                        878, 
                        878, 
                        877, 
                        877, 
                        877, 
                        877, 
                        876, 
                        876, 
                        876, 
                        875, 
                        875, 
                        875, 
                        875, 
                        874, 
                        874, 
                        874, 
                        873, 
                        873, 
                        873, 
                        873, 
                        872, 
                        872, 
                        872, 
                        871, 
                        871, 
                        871, 
                        870, 
                        870, 
                        870, 
                        870, 
                        869, 
                        869, 
                        869, 
                        868, 
                        868, 
                        868, 
                        868, 
                        867, 
                        867, 
                        867, 
                        866, 
                        866, 
                        866, 
                        865, 
                        865, 
                        865, 
                        865, 
                        864, 
                        864, 
                        864, 
                        863, 
                        863, 
                        863, 
                        862, 
                        862, 
                        862, 
                        862, 
                        861, 
                        861, 
                        861, 
                        860, 
                        860, 
                        860, 
                        859, 
                        859, 
                        859, 
                        858, 
                        858, 
                        858, 
                        858, 
                        857, 
                        857, 
                        857, 
                        856, 
                        856, 
                        856, 
                        855, 
                        855, 
                        855, 
                        855, 
                        854, 
                        854, 
                        854, 
                        853, 
                        853, 
                        853, 
                        852, 
                        852, 
                        852, 
                        851, 
                        851, 
                        851, 
                        850, 
                        850, 
                        850, 
                        850, 
                        849, 
                        849, 
                        849, 
                        848, 
                        848, 
                        848, 
                        847, 
                        847, 
                        847, 
                        846, 
                        846, 
                        846, 
                        845, 
                        845, 
                        845, 
                        845, 
                        844, 
                        844, 
                        844, 
                        843, 
                        843, 
                        843, 
                        842, 
                        842, 
                        842, 
                        841, 
                        841, 
                        841, 
                        840, 
                        840, 
                        840, 
                        839, 
                        839, 
                        839, 
                        838, 
                        838, 
                        838, 
                        838, 
                        837, 
                        837, 
                        837, 
                        836, 
                        836, 
                        836, 
                        835, 
                        835, 
                        835, 
                        834, 
                        834, 
                        834, 
                        833, 
                        833, 
                        833, 
                        832, 
                        832, 
                        832, 
                        831, 
                        831, 
                        831, 
                        830, 
                        830, 
                        830, 
                        829, 
                        829, 
                        829, 
                        828, 
                        828, 
                        828, 
                        827, 
                        827, 
                        827, 
                        826, 
                        826, 
                        826, 
                        825, 
                        825, 
                        825, 
                        824, 
                        824, 
                        824, 
                        823, 
                        823, 
                        823, 
                        822, 
                        822, 
                        822, 
                        821, 
                        821, 
                        821, 
                        820, 
                        820, 
                        820, 
                        819, 
                        819, 
                        819, 
                        818, 
                        818, 
                        818, 
                        817, 
                        817, 
                        817, 
                        816, 
                        816, 
                        816, 
                        815, 
                        815, 
                        815, 
                        814, 
                        814, 
                        814, 
                        813, 
                        813, 
                        813, 
                        812, 
                        812, 
                        812, 
                        811, 
                        811, 
                        811, 
                        810, 
                        810, 
                        810, 
                        809, 
                        809, 
                        809, 
                        808, 
                        808, 
                        808, 
                        807, 
                        807, 
                        807, 
                        806, 
                        806, 
                        806, 
                        805, 
                        805, 
                        805, 
                        804, 
                        804, 
                        803, 
                        803, 
                        803, 
                        802, 
                        802, 
                        802, 
                        801, 
                        801, 
                        801, 
                        800, 
                        800, 
                        800, 
                        799, 
                        799, 
                        799, 
                        798, 
                        798, 
                        798, 
                        797, 
                        797, 
                        796, 
                        796, 
                        796, 
                        795, 
                        795, 
                        795, 
                        794, 
                        794, 
                        794, 
                        793, 
                        793, 
                        793, 
                        792, 
                        792, 
                        792, 
                        791, 
                        791, 
                        790, 
                        790, 
                        790, 
                        789, 
                        789, 
                        789, 
                        788, 
                        788, 
                        788, 
                        787, 
                        787, 
                        787, 
                        786, 
                        786, 
                        786, 
                        785, 
                        785, 
                        784, 
                        784, 
                        784, 
                        783, 
                        783, 
                        783, 
                        782, 
                        782, 
                        782, 
                        781, 
                        781, 
                        780, 
                        780, 
                        780, 
                        779, 
                        779, 
                        779, 
                        778, 
                        778, 
                        778, 
                        777, 
                        777, 
                        776, 
                        776, 
                        776, 
                        775, 
                        775, 
                        775, 
                        774, 
                        774, 
                        774, 
                        773, 
                        773, 
                        772, 
                        772, 
                        772, 
                        771, 
                        771, 
                        771, 
                        770, 
                        770, 
                        770, 
                        769, 
                        769, 
                        768, 
                        768, 
                        768, 
                        767, 
                        767, 
                        767, 
                        766, 
                        766, 
                        765, 
                        765, 
                        765, 
                        764, 
                        764, 
                        764, 
                        763, 
                        763, 
                        762, 
                        762, 
                        762, 
                        761, 
                        761, 
                        761, 
                        760, 
                        760, 
                        759, 
                        759, 
                        759, 
                        758, 
                        758, 
                        758, 
                        757, 
                        757, 
                        756, 
                        756, 
                        756, 
                        755, 
                        755, 
                        755, 
                        754, 
                        754, 
                        753, 
                        753, 
                        753, 
                        752, 
                        752, 
                        752, 
                        751, 
                        751, 
                        750, 
                        750, 
                        750, 
                        749, 
                        749, 
                        749, 
                        748, 
                        748, 
                        747, 
                        747, 
                        747, 
                        746, 
                        746, 
                        745, 
                        745, 
                        745, 
                        744, 
                        744, 
                        744, 
                        743, 
                        743, 
                        742, 
                        742, 
                        742, 
                        741, 
                        741, 
                        740, 
                        740, 
                        740, 
                        739, 
                        739, 
                        739, 
                        738, 
                        738, 
                        737, 
                        737, 
                        737, 
                        736, 
                        736, 
                        735, 
                        735, 
                        735, 
                        734, 
                        734, 
                        733, 
                        733, 
                        733, 
                        732, 
                        732, 
                        732, 
                        731, 
                        731, 
                        730, 
                        730, 
                        730, 
                        729, 
                        729, 
                        728, 
                        728, 
                        728, 
                        727, 
                        727, 
                        726, 
                        726, 
                        726, 
                        725, 
                        725, 
                        724, 
                        724, 
                        724, 
                        723, 
                        723, 
                        722, 
                        722, 
                        722, 
                        721, 
                        721, 
                        721, 
                        720, 
                        720, 
                        719, 
                        719, 
                        719, 
                        718, 
                        718, 
                        717, 
                        717, 
                        717, 
                        716, 
                        716, 
                        715, 
                        715, 
                        715, 
                        714, 
                        714, 
                        713, 
                        713, 
                        713, 
                        712, 
                        712, 
                        711, 
                        711, 
                        711, 
                        710, 
                        710, 
                        709, 
                        709, 
                        709, 
                        708, 
                        708, 
                        707, 
                        707, 
                        706, 
                        706, 
                        706, 
                        705, 
                        705, 
                        704, 
                        704, 
                        704, 
                        703, 
                        703, 
                        702, 
                        702, 
                        702, 
                        701, 
                        701, 
                        700, 
                        700, 
                        700, 
                        699, 
                        699, 
                        698, 
                        698, 
                        698, 
                        697, 
                        697, 
                        696, 
                        696, 
                        696, 
                        695, 
                        695, 
                        694, 
                        694, 
                        693, 
                        693, 
                        693, 
                        692, 
                        692, 
                        691, 
                        691, 
                        691, 
                        690, 
                        690, 
                        689, 
                        689, 
                        689, 
                        688, 
                        688, 
                        687, 
                        687, 
                        686, 
                        686, 
                        686, 
                        685, 
                        685, 
                        684, 
                        684, 
                        684, 
                        683, 
                        683, 
                        682, 
                        682, 
                        681, 
                        681, 
                        681, 
                        680, 
                        680, 
                        679, 
                        679, 
                        679, 
                        678, 
                        678, 
                        677, 
                        677, 
                        676, 
                        676, 
                        676, 
                        675, 
                        675, 
                        674, 
                        674, 
                        673, 
                        673, 
                        673, 
                        672, 
                        672, 
                        671, 
                        671, 
                        671, 
                        670, 
                        670, 
                        669, 
                        669, 
                        668, 
                        668, 
                        668, 
                        667, 
                        667, 
                        666, 
                        666, 
                        665, 
                        665, 
                        665, 
                        664, 
                        664, 
                        663, 
                        663, 
                        662, 
                        662, 
                        662, 
                        661, 
                        661, 
                        660, 
                        660, 
                        659, 
                        659, 
                        659, 
                        658, 
                        658, 
                        657, 
                        657, 
                        657, 
                        656, 
                        656, 
                        655, 
                        655, 
                        654, 
                        654, 
                        653, 
                        653, 
                        653, 
                        652, 
                        652, 
                        651, 
                        651, 
                        650, 
                        650, 
                        650, 
                        649, 
                        649, 
                        648, 
                        648, 
                        647, 
                        647, 
                        647, 
                        646, 
                        646, 
                        645, 
                        645, 
                        644, 
                        644, 
                        644, 
                        643, 
                        643, 
                        642, 
                        642, 
                        641, 
                        641, 
                        641, 
                        640, 
                        640, 
                        639, 
                        639, 
                        638, 
                        638, 
                        637, 
                        637, 
                        637, 
                        636, 
                        636, 
                        635, 
                        635, 
                        634, 
                        634, 
                        634, 
                        633, 
                        633, 
                        632, 
                        632, 
                        631, 
                        631, 
                        630, 
                        630, 
                        630, 
                        629, 
                        629, 
                        628, 
                        628, 
                        627, 
                        627, 
                        626, 
                        626, 
                        626, 
                        625, 
                        625, 
                        624, 
                        624, 
                        623, 
                        623, 
                        622, 
                        622, 
                        622, 
                        621, 
                        621, 
                        620, 
                        620, 
                        619, 
                        619, 
                        618, 
                        618, 
                        618, 
                        617, 
                        617, 
                        616, 
                        616, 
                        615, 
                        615, 
                        614, 
                        614, 
                        614, 
                        613, 
                        613, 
                        612, 
                        612, 
                        611, 
                        611, 
                        610, 
                        610, 
                        610, 
                        609, 
                        609, 
                        608, 
                        608, 
                        607, 
                        607, 
                        606, 
                        606, 
                        606, 
                        605, 
                        605, 
                        604, 
                        604, 
                        603, 
                        603, 
                        602, 
                        602, 
                        601, 
                        601, 
                        601, 
                        600, 
                        600, 
                        599, 
                        599, 
                        598, 
                        598, 
                        597, 
                        597, 
                        596, 
                        596, 
                        596, 
                        595, 
                        595, 
                        594, 
                        594, 
                        593, 
                        593, 
                        592, 
                        592, 
                        591, 
                        591, 
                        591, 
                        590, 
                        590, 
                        589, 
                        589, 
                        588, 
                        588, 
                        587, 
                        587, 
                        586, 
                        586, 
                        586, 
                        585, 
                        585, 
                        584, 
                        584, 
                        583, 
                        583, 
                        582, 
                        582, 
                        581, 
                        581, 
                        580, 
                        580, 
                        580, 
                        579, 
                        579, 
                        578, 
                        578, 
                        577, 
                        577, 
                        576, 
                        576, 
                        575, 
                        575, 
                        574, 
                        574, 
                        574, 
                        573, 
                        573, 
                        572, 
                        572, 
                        571, 
                        571, 
                        570, 
                        570, 
                        569, 
                        569, 
                        568, 
                        568, 
                        568, 
                        567, 
                        567, 
                        566, 
                        566, 
                        565, 
                        565, 
                        564, 
                        564, 
                        563, 
                        563, 
                        562, 
                        562, 
                        561, 
                        561, 
                        561, 
                        560, 
                        560, 
                        559, 
                        559, 
                        558, 
                        558, 
                        557, 
                        557, 
                        556, 
                        556, 
                        555, 
                        555, 
                        554, 
                        554, 
                        553, 
                        553, 
                        553, 
                        552, 
                        552, 
                        551, 
                        551, 
                        550, 
                        550, 
                        549, 
                        549, 
                        548, 
                        548, 
                        547, 
                        547, 
                        546, 
                        546, 
                        545, 
                        545, 
                        545, 
                        544, 
                        544, 
                        543, 
                        543, 
                        542, 
                        542, 
                        541, 
                        541, 
                        540, 
                        540, 
                        539, 
                        539, 
                        538, 
                        538, 
                        537, 
                        537, 
                        536, 
                        536, 
                        536, 
                        535, 
                        535, 
                        534, 
                        534, 
                        533, 
                        533, 
                        532, 
                        532, 
                        531, 
                        531, 
                        530, 
                        530, 
                        529, 
                        529, 
                        528, 
                        528, 
                        527, 
                        527, 
                        526, 
                        526, 
                        525, 
                        525, 
                        525, 
                        524, 
                        524, 
                        523, 
                        523, 
                        522, 
                        522, 
                        521, 
                        521, 
                        520, 
                        520, 
                        519, 
                        519, 
                        518, 
                        518, 
                        517, 
                        517, 
                        516, 
                        516, 
                        515, 
                        515, 
                        514, 
                        514, 
                        513, 
                        513, 
                        512, 
                        512, 
                        512, 
                        511, 
                        511, 
                        510, 
                        510, 
                        509, 
                        509, 
                        508, 
                        508, 
                        507, 
                        507, 
                        506, 
                        506, 
                        505, 
                        505, 
                        504, 
                        504, 
                        503, 
                        503, 
                        502, 
                        502, 
                        501, 
                        501, 
                        500, 
                        500, 
                        499, 
                        499, 
                        498, 
                        498, 
                        497, 
                        497, 
                        496, 
                        496, 
                        495, 
                        495, 
                        494, 
                        494, 
                        494, 
                        493, 
                        493, 
                        492, 
                        492, 
                        491, 
                        491, 
                        490, 
                        490, 
                        489, 
                        489, 
                        488, 
                        488, 
                        487, 
                        487, 
                        486, 
                        486, 
                        485, 
                        485, 
                        484, 
                        484, 
                        483, 
                        483, 
                        482, 
                        482, 
                        481, 
                        481, 
                        480, 
                        480, 
                        479, 
                        479, 
                        478, 
                        478, 
                        477, 
                        477, 
                        476, 
                        476, 
                        475, 
                        475, 
                        474, 
                        474, 
                        473, 
                        473, 
                        472, 
                        472, 
                        471, 
                        471, 
                        470, 
                        470, 
                        469, 
                        469, 
                        468, 
                        468, 
                        467, 
                        467, 
                        466, 
                        466, 
                        465, 
                        465, 
                        464, 
                        464, 
                        463, 
                        463, 
                        462, 
                        462, 
                        461, 
                        461, 
                        460, 
                        460, 
                        459, 
                        459, 
                        458, 
                        458, 
                        457, 
                        457, 
                        456, 
                        456, 
                        455, 
                        455, 
                        454, 
                        454, 
                        453, 
                        453, 
                        452, 
                        452, 
                        451, 
                        451, 
                        450, 
                        450, 
                        449, 
                        449, 
                        448, 
                        448, 
                        447, 
                        447, 
                        446, 
                        446, 
                        445, 
                        445, 
                        444, 
                        444, 
                        443, 
                        443, 
                        442, 
                        442, 
                        441, 
                        441, 
                        440, 
                        440, 
                        439, 
                        439, 
                        438, 
                        438, 
                        437, 
                        437, 
                        436, 
                        436, 
                        435, 
                        435, 
                        434, 
                        434, 
                        433, 
                        433, 
                        432, 
                        432, 
                        431, 
                        431, 
                        430, 
                        430, 
                        429, 
                        429, 
                        428, 
                        428, 
                        427, 
                        427, 
                        426, 
                        426, 
                        425, 
                        425, 
                        424, 
                        424, 
                        423, 
                        423, 
                        422, 
                        422, 
                        421, 
                        421, 
                        420, 
                        420, 
                        419, 
                        419, 
                        418, 
                        418, 
                        417, 
                        416, 
                        416, 
                        415, 
                        415, 
                        414, 
                        414, 
                        413, 
                        413, 
                        412, 
                        412, 
                        411, 
                        411, 
                        410, 
                        410, 
                        409, 
                        409, 
                        408, 
                        408, 
                        407, 
                        407, 
                        406, 
                        406, 
                        405, 
                        405, 
                        404, 
                        404, 
                        403, 
                        403, 
                        402, 
                        402, 
                        401, 
                        401, 
                        400, 
                        400, 
                        399, 
                        399, 
                        398, 
                        398, 
                        397, 
                        397, 
                        396, 
                        395, 
                        395, 
                        394, 
                        394, 
                        393, 
                        393, 
                        392, 
                        392, 
                        391, 
                        391, 
                        390, 
                        390, 
                        389, 
                        389, 
                        388, 
                        388, 
                        387, 
                        387, 
                        386, 
                        386, 
                        385, 
                        385, 
                        384, 
                        384, 
                        383, 
                        383, 
                        382, 
                        382, 
                        381, 
                        380, 
                        380, 
                        379, 
                        379, 
                        378, 
                        378, 
                        377, 
                        377, 
                        376, 
                        376, 
                        375, 
                        375, 
                        374, 
                        374, 
                        373, 
                        373, 
                        372, 
                        372, 
                        371, 
                        371, 
                        370, 
                        370, 
                        369, 
                        369, 
                        368, 
                        367, 
                        367, 
                        366, 
                        366, 
                        365, 
                        365, 
                        364, 
                        364, 
                        363, 
                        363, 
                        362, 
                        362, 
                        361, 
                        361, 
                        360, 
                        360, 
                        359, 
                        359, 
                        358, 
                        358, 
                        357, 
                        357, 
                        356, 
                        355, 
                        355, 
                        354, 
                        354, 
                        353, 
                        353, 
                        352, 
                        352, 
                        351, 
                        351, 
                        350, 
                        350, 
                        349, 
                        349, 
                        348, 
                        348, 
                        347, 
                        347, 
                        346, 
                        346, 
                        345, 
                        344, 
                        344, 
                        343, 
                        343, 
                        342, 
                        342, 
                        341, 
                        341, 
                        340, 
                        340, 
                        339, 
                        339, 
                        338, 
                        338, 
                        337, 
                        337, 
                        336, 
                        335, 
                        335, 
                        334, 
                        334, 
                        333, 
                        333, 
                        332, 
                        332, 
                        331, 
                        331, 
                        330, 
                        330, 
                        329, 
                        329, 
                        328, 
                        328, 
                        327, 
                        327, 
                        326, 
                        325, 
                        325, 
                        324, 
                        324, 
                        323, 
                        323, 
                        322, 
                        322, 
                        321, 
                        321, 
                        320, 
                        320, 
                        319, 
                        319, 
                        318, 
                        317, 
                        317, 
                        316, 
                        316, 
                        315, 
                        315, 
                        314, 
                        314, 
                        313, 
                        313, 
                        312, 
                        312, 
                        311, 
                        311, 
                        310, 
                        310, 
                        309, 
                        308, 
                        308, 
                        307, 
                        307, 
                        306, 
                        306, 
                        305, 
                        305, 
                        304, 
                        304, 
                        303, 
                        303, 
                        302, 
                        302, 
                        301, 
                        300, 
                        300, 
                        299, 
                        299, 
                        298, 
                        298, 
                        297, 
                        297, 
                        296, 
                        296, 
                        295, 
                        295, 
                        294, 
                        294, 
                        293, 
                        292, 
                        292, 
                        291, 
                        291, 
                        290, 
                        290, 
                        289, 
                        289, 
                        288, 
                        288, 
                        287, 
                        287, 
                        286, 
                        285, 
                        285, 
                        284, 
                        284, 
                        283, 
                        283, 
                        282, 
                        282, 
                        281, 
                        281, 
                        280, 
                        280, 
                        279, 
                        278, 
                        278, 
                        277, 
                        277, 
                        276, 
                        276, 
                        275, 
                        275, 
                        274, 
                        274, 
                        273, 
                        273, 
                        272, 
                        271, 
                        271, 
                        270, 
                        270, 
                        269, 
                        269, 
                        268, 
                        268, 
                        267, 
                        267, 
                        266, 
                        266, 
                        265, 
                        264, 
                        264, 
                        263, 
                        263, 
                        262, 
                        262, 
                        261, 
                        261, 
                        260, 
                        260, 
                        259, 
                        259, 
                        258, 
                        257, 
                        257, 
                        256, 
                        256, 
                        255, 
                        255, 
                        254, 
                        254, 
                        253, 
                        253, 
                        252, 
                        252, 
                        251, 
                        250, 
                        250, 
                        249, 
                        249, 
                        248, 
                        248, 
                        247, 
                        247, 
                        246, 
                        246, 
                        245, 
                        244, 
                        244, 
                        243, 
                        243, 
                        242, 
                        242, 
                        241, 
                        241, 
                        240, 
                        240, 
                        239, 
                        239, 
                        238, 
                        237, 
                        237, 
                        236, 
                        236, 
                        235, 
                        235, 
                        234, 
                        234, 
                        233, 
                        233, 
                        232, 
                        231, 
                        231, 
                        230, 
                        230, 
                        229, 
                        229, 
                        228, 
                        228, 
                        227, 
                        227, 
                        226, 
                        225, 
                        225, 
                        224, 
                        224, 
                        223, 
                        223, 
                        222, 
                        222, 
                        221, 
                        221, 
                        220, 
                        219, 
                        219, 
                        218, 
                        218, 
                        217, 
                        217, 
                        216, 
                        216, 
                        215, 
                        215, 
                        214, 
                        213, 
                        213, 
                        212, 
                        212, 
                        211, 
                        211, 
                        210, 
                        210, 
                        209, 
                        209, 
                        208, 
                        207, 
                        207, 
                        206, 
                        206, 
                        205, 
                        205, 
                        204, 
                        204, 
                        203, 
                        203, 
                        202, 
                        201, 
                        201, 
                        200, 
                        200, 
                        199, 
                        199, 
                        198, 
                        198, 
                        197, 
                        196, 
                        196, 
                        195, 
                        195, 
                        194, 
                        194, 
                        193, 
                        193, 
                        192, 
                        192, 
                        191, 
                        190, 
                        190, 
                        189, 
                        189, 
                        188, 
                        188, 
                        187, 
                        187, 
                        186, 
                        186, 
                        185, 
                        184, 
                        184, 
                        183, 
                        183, 
                        182, 
                        182, 
                        181, 
                        181, 
                        180, 
                        179, 
                        179, 
                        178, 
                        178, 
                        177, 
                        177, 
                        176, 
                        176, 
                        175, 
                        175, 
                        174, 
                        173, 
                        173, 
                        172, 
                        172, 
                        171, 
                        171, 
                        170, 
                        170, 
                        169, 
                        168, 
                        168, 
                        167, 
                        167, 
                        166, 
                        166, 
                        165, 
                        165, 
                        164, 
                        163, 
                        163, 
                        162, 
                        162, 
                        161, 
                        161, 
                        160, 
                        160, 
                        159, 
                        159, 
                        158, 
                        157, 
                        157, 
                        156, 
                        156, 
                        155, 
                        155, 
                        154, 
                        154, 
                        153, 
                        152, 
                        152, 
                        151, 
                        151, 
                        150, 
                        150, 
                        149, 
                        149, 
                        148, 
                        147, 
                        147, 
                        146, 
                        146, 
                        145, 
                        145, 
                        144, 
                        144, 
                        143, 
                        143, 
                        142, 
                        141, 
                        141, 
                        140, 
                        140, 
                        139, 
                        139, 
                        138, 
                        138, 
                        137, 
                        136, 
                        136, 
                        135, 
                        135, 
                        134, 
                        134, 
                        133, 
                        133, 
                        132, 
                        131, 
                        131, 
                        130, 
                        130, 
                        129, 
                        129, 
                        128, 
                        128, 
                        127, 
                        126, 
                        126, 
                        125, 
                        125, 
                        124, 
                        124, 
                        123, 
                        123, 
                        122, 
                        121, 
                        121, 
                        120, 
                        120, 
                        119, 
                        119, 
                        118, 
                        118, 
                        117, 
                        116, 
                        116, 
                        115, 
                        115, 
                        114, 
                        114, 
                        113, 
                        113, 
                        112, 
                        111, 
                        111, 
                        110, 
                        110, 
                        109, 
                        109, 
                        108, 
                        108, 
                        107, 
                        106, 
                        106, 
                        105, 
                        105, 
                        104, 
                        104, 
                        103, 
                        103, 
                        102, 
                        101, 
                        101, 
                        100, 
                        100, 
                        99, 
                        99, 
                        98, 
                        98, 
                        97, 
                        96, 
                        96, 
                        95, 
                        95, 
                        94, 
                        94, 
                        93, 
                        93, 
                        92, 
                        91, 
                        91, 
                        90, 
                        90, 
                        89, 
                        89, 
                        88, 
                        88, 
                        87, 
                        86, 
                        86, 
                        85, 
                        85, 
                        84, 
                        84, 
                        83, 
                        83, 
                        82, 
                        81, 
                        81, 
                        80, 
                        80, 
                        79, 
                        79, 
                        78, 
                        78, 
                        77, 
                        76, 
                        76, 
                        75, 
                        75, 
                        74, 
                        74, 
                        73, 
                        73, 
                        72, 
                        71, 
                        71, 
                        70, 
                        70, 
                        69, 
                        69, 
                        68, 
                        68, 
                        67, 
                        66, 
                        66, 
                        65, 
                        65, 
                        64, 
                        64, 
                        63, 
                        63, 
                        62, 
                        61, 
                        61, 
                        60, 
                        60, 
                        59, 
                        59, 
                        58, 
                        57, 
                        57, 
                        56, 
                        56, 
                        55, 
                        55, 
                        54, 
                        54, 
                        53, 
                        52, 
                        52, 
                        51, 
                        51, 
                        50, 
                        50, 
                        49, 
                        49, 
                        48, 
                        47, 
                        47, 
                        46, 
                        46, 
                        45, 
                        45, 
                        44, 
                        44, 
                        43, 
                        42, 
                        42, 
                        41, 
                        41, 
                        40, 
                        40, 
                        39, 
                        39, 
                        38, 
                        37, 
                        37, 
                        36, 
                        36, 
                        35, 
                        35, 
                        34, 
                        34, 
                        33, 
                        32, 
                        32, 
                        31, 
                        31, 
                        30, 
                        30, 
                        29, 
                        28, 
                        28, 
                        27, 
                        27, 
                        26, 
                        26, 
                        25, 
                        25, 
                        24, 
                        23, 
                        23, 
                        22, 
                        22, 
                        21, 
                        21, 
                        20, 
                        20, 
                        19, 
                        18, 
                        18, 
                        17, 
                        17, 
                        16, 
                        16, 
                        15, 
                        15, 
                        14, 
                        13, 
                        13, 
                        12, 
                        12, 
                        11, 
                        11, 
                        10, 
                        9, 
                        9, 
                        8, 
                        8, 
                        7, 
                        7, 
                        6, 
                        6, 
                        5, 
                        4, 
                        4, 
                        3, 
                        3, 
                        2, 
                        2, 
                        1, 
                        1
                    ], System.Int32);
                    this._arctanArray = System.Array.init([
                        0, 
                        57, 
                        115, 
                        172, 
                        229, 
                        286, 
                        344, 
                        401, 
                        458, 
                        515, 
                        572, 
                        629, 
                        686, 
                        742, 
                        799, 
                        856, 
                        912, 
                        968, 
                        1025, 
                        1081, 
                        1137, 
                        1193, 
                        1248, 
                        1304, 
                        1359, 
                        1415, 
                        1470, 
                        1525, 
                        1579, 
                        1634, 
                        1688, 
                        1743, 
                        1797, 
                        1850, 
                        1904, 
                        1958, 
                        2011, 
                        2064, 
                        2116, 
                        2169, 
                        2221, 
                        2273, 
                        2325, 
                        2377, 
                        2428, 
                        2479, 
                        2530, 
                        2581, 
                        2631, 
                        2681, 
                        2731, 
                        2781, 
                        2830, 
                        2879, 
                        2928, 
                        2976, 
                        3025, 
                        3073, 
                        3120, 
                        3168, 
                        3215, 
                        3262, 
                        3308, 
                        3354, 
                        3400, 
                        3446, 
                        3491, 
                        3537, 
                        3581, 
                        3626, 
                        3670, 
                        3714, 
                        3758, 
                        3801, 
                        3844, 
                        3887, 
                        3930, 
                        3972, 
                        4014, 
                        4055, 
                        4097, 
                        4138, 
                        4179, 
                        4219, 
                        4259, 
                        4299, 
                        4339, 
                        4378, 
                        4417, 
                        4456, 
                        4494, 
                        4533, 
                        4570, 
                        4608, 
                        4645, 
                        4683, 
                        4719, 
                        4756, 
                        4792, 
                        4828, 
                        4864, 
                        4899, 
                        4934, 
                        4969, 
                        5004, 
                        5038, 
                        5073, 
                        5106, 
                        5140, 
                        5173, 
                        5206, 
                        5239, 
                        5272, 
                        5304, 
                        5336, 
                        5368, 
                        5400, 
                        5431, 
                        5462, 
                        5493, 
                        5524, 
                        5554, 
                        5584, 
                        5614, 
                        5644, 
                        5673, 
                        5702, 
                        5731, 
                        5760, 
                        5789, 
                        5817, 
                        5845, 
                        5873, 
                        5900, 
                        5928, 
                        5955, 
                        5982, 
                        6009, 
                        6036, 
                        6062, 
                        6088, 
                        6114, 
                        6140, 
                        6166, 
                        6191, 
                        6216, 
                        6241, 
                        6266, 
                        6291, 
                        6315, 
                        6339, 
                        6363, 
                        6387, 
                        6411, 
                        6434, 
                        6458, 
                        6481, 
                        6504, 
                        6526, 
                        6549, 
                        6572, 
                        6594, 
                        6616, 
                        6638, 
                        6660, 
                        6681, 
                        6703, 
                        6724, 
                        6745, 
                        6766, 
                        6787, 
                        6808, 
                        6828, 
                        6848, 
                        6869, 
                        6889, 
                        6908, 
                        6928, 
                        6948, 
                        6967, 
                        6987, 
                        7006, 
                        7025, 
                        7044, 
                        7062, 
                        7081, 
                        7100, 
                        7118, 
                        7136, 
                        7154, 
                        7172, 
                        7190, 
                        7208, 
                        7225, 
                        7243, 
                        7260, 
                        7277, 
                        7294, 
                        7311, 
                        7328, 
                        7345, 
                        7361, 
                        7378, 
                        7394, 
                        7410, 
                        7427, 
                        7443, 
                        7458, 
                        7474, 
                        7490, 
                        7505, 
                        7521, 
                        7536, 
                        7552, 
                        7567, 
                        7582, 
                        7597, 
                        7612, 
                        7626, 
                        7641, 
                        7655, 
                        7670, 
                        7684, 
                        7699, 
                        7713, 
                        7727, 
                        7741, 
                        7755, 
                        7768, 
                        7782, 
                        7796, 
                        7809, 
                        7823, 
                        7836, 
                        7849, 
                        7862, 
                        7875, 
                        7888, 
                        7901, 
                        7914, 
                        7927, 
                        7939, 
                        7952, 
                        7964, 
                        7977, 
                        7989, 
                        8001, 
                        8014, 
                        8026, 
                        8038, 
                        8050, 
                        8061, 
                        8073, 
                        8085, 
                        8097, 
                        8108, 
                        8120, 
                        8131, 
                        8142, 
                        8154, 
                        8165, 
                        8176, 
                        8187, 
                        8198, 
                        8209, 
                        8220, 
                        8231, 
                        8242, 
                        8252, 
                        8263, 
                        8273, 
                        8284, 
                        8294, 
                        8305, 
                        8315, 
                        8325, 
                        8335, 
                        8345, 
                        8355, 
                        8365, 
                        8375, 
                        8385, 
                        8395, 
                        8405, 
                        8415, 
                        8424, 
                        8434, 
                        8443, 
                        8453, 
                        8462, 
                        8472, 
                        8481, 
                        8490, 
                        8499, 
                        8509, 
                        8518, 
                        8527, 
                        8536, 
                        8545, 
                        8554, 
                        8562, 
                        8571, 
                        8580, 
                        8589, 
                        8597, 
                        8606, 
                        8614, 
                        8623, 
                        8631, 
                        8640, 
                        8648, 
                        8657, 
                        8665, 
                        8673, 
                        8681, 
                        8689, 
                        8697, 
                        8706, 
                        8714, 
                        8721, 
                        8729, 
                        8737, 
                        8745, 
                        8753, 
                        8761, 
                        8768, 
                        8776, 
                        8784, 
                        8791, 
                        8799, 
                        8806, 
                        8814, 
                        8821, 
                        8829, 
                        8836, 
                        8843, 
                        8851, 
                        8858, 
                        8865, 
                        8872, 
                        8879, 
                        8886, 
                        8894, 
                        8901, 
                        8908, 
                        8914, 
                        8921, 
                        8928, 
                        8935, 
                        8942, 
                        8949, 
                        8955, 
                        8962, 
                        8969, 
                        8975, 
                        8982, 
                        8989, 
                        8995, 
                        9002, 
                        9008, 
                        9015, 
                        9021, 
                        9027, 
                        9034, 
                        9040, 
                        9046, 
                        9053, 
                        9059, 
                        9065, 
                        9071, 
                        9077, 
                        9084, 
                        9090, 
                        9096, 
                        9102, 
                        9108, 
                        9114, 
                        9120, 
                        9125, 
                        9131, 
                        9137, 
                        9143, 
                        9149, 
                        9155, 
                        9160, 
                        9166, 
                        9172, 
                        9177, 
                        9183, 
                        9189, 
                        9194, 
                        9200, 
                        9205, 
                        9211, 
                        9216, 
                        9222, 
                        9227, 
                        9233, 
                        9238, 
                        9243, 
                        9249, 
                        9254, 
                        9259, 
                        9265, 
                        9270, 
                        9275, 
                        9280, 
                        9285, 
                        9290, 
                        9296, 
                        9301, 
                        9306, 
                        9311, 
                        9316, 
                        9321, 
                        9326, 
                        9331, 
                        9336, 
                        9341, 
                        9346, 
                        9350, 
                        9355, 
                        9360, 
                        9365, 
                        9370, 
                        9375, 
                        9379, 
                        9384, 
                        9389, 
                        9393, 
                        9398, 
                        9403, 
                        9407, 
                        9412, 
                        9417, 
                        9421, 
                        9426, 
                        9430, 
                        9435, 
                        9439, 
                        9444, 
                        9448, 
                        9453, 
                        9457, 
                        9462, 
                        9466, 
                        9470, 
                        9475, 
                        9479, 
                        9483, 
                        9488, 
                        9492, 
                        9496, 
                        9500, 
                        9505, 
                        9509, 
                        9513, 
                        9517, 
                        9521, 
                        9525, 
                        9530, 
                        9534, 
                        9538, 
                        9542, 
                        9546, 
                        9550, 
                        9554, 
                        9558, 
                        9562, 
                        9566, 
                        9570, 
                        9574, 
                        9578, 
                        9582, 
                        9586, 
                        9590, 
                        9593, 
                        9597, 
                        9601, 
                        9605, 
                        9609, 
                        9613, 
                        9616, 
                        9620, 
                        9624, 
                        9628, 
                        9631, 
                        9635, 
                        9639, 
                        9642, 
                        9646, 
                        9650, 
                        9653, 
                        9657, 
                        9661, 
                        9664, 
                        9668, 
                        9671, 
                        9675, 
                        9678, 
                        9682, 
                        9686, 
                        9689, 
                        9693, 
                        9696, 
                        9699, 
                        9703, 
                        9706, 
                        9710, 
                        9713, 
                        9717, 
                        9720, 
                        9723, 
                        9727, 
                        9730, 
                        9733, 
                        9737, 
                        9740, 
                        9743, 
                        9747, 
                        9750, 
                        9753, 
                        9756, 
                        9760, 
                        9763, 
                        9766, 
                        9769, 
                        9773, 
                        9776, 
                        9779, 
                        9782, 
                        9785, 
                        9788, 
                        9792, 
                        9795, 
                        9798, 
                        9801, 
                        9804, 
                        9807, 
                        9810, 
                        9813, 
                        9816, 
                        9819, 
                        9822, 
                        9825, 
                        9828, 
                        9831, 
                        9834, 
                        9837, 
                        9840, 
                        9843, 
                        9846, 
                        9849, 
                        9852, 
                        9855, 
                        9858, 
                        9861, 
                        9863, 
                        9866, 
                        9869, 
                        9872, 
                        9875, 
                        9878, 
                        9880, 
                        9883, 
                        9886, 
                        9889, 
                        9892, 
                        9894, 
                        9897, 
                        9900, 
                        9903, 
                        9905, 
                        9908, 
                        9911, 
                        9914, 
                        9916, 
                        9919, 
                        9922, 
                        9924, 
                        9927, 
                        9930, 
                        9932, 
                        9935, 
                        9938, 
                        9940, 
                        9943, 
                        9945, 
                        9948, 
                        9951, 
                        9953, 
                        9956, 
                        9958, 
                        9961, 
                        9963, 
                        9966, 
                        9969, 
                        9971, 
                        9974, 
                        9976, 
                        9979, 
                        9981, 
                        9984, 
                        9986, 
                        9988, 
                        9991, 
                        9993, 
                        9996, 
                        9998, 
                        10001, 
                        10003, 
                        10006, 
                        10008, 
                        10010, 
                        10013, 
                        10015, 
                        10017, 
                        10020, 
                        10022, 
                        10025, 
                        10027, 
                        10029, 
                        10032, 
                        10034, 
                        10036, 
                        10039, 
                        10041, 
                        10043, 
                        10045, 
                        10048, 
                        10050, 
                        10052, 
                        10054, 
                        10057, 
                        10059, 
                        10061, 
                        10063, 
                        10066, 
                        10068, 
                        10070, 
                        10072, 
                        10075, 
                        10077, 
                        10079, 
                        10081, 
                        10083, 
                        10085, 
                        10088, 
                        10090, 
                        10092, 
                        10094, 
                        10096, 
                        10098, 
                        10100, 
                        10103, 
                        10105, 
                        10107, 
                        10109, 
                        10111, 
                        10113, 
                        10115, 
                        10117, 
                        10119, 
                        10121, 
                        10123, 
                        10125, 
                        10127, 
                        10130, 
                        10132, 
                        10134, 
                        10136, 
                        10138, 
                        10140, 
                        10142, 
                        10144, 
                        10146, 
                        10148, 
                        10150, 
                        10152, 
                        10154, 
                        10155, 
                        10157, 
                        10159, 
                        10161, 
                        10163, 
                        10165, 
                        10167, 
                        10169, 
                        10171, 
                        10173, 
                        10175, 
                        10177, 
                        10179, 
                        10181, 
                        10182, 
                        10184, 
                        10186, 
                        10188, 
                        10190, 
                        10192, 
                        10194, 
                        10195, 
                        10197, 
                        10199, 
                        10201, 
                        10203, 
                        10205, 
                        10206, 
                        10208, 
                        10210, 
                        10212, 
                        10214, 
                        10215, 
                        10217, 
                        10219, 
                        10221, 
                        10223, 
                        10224, 
                        10226, 
                        10228, 
                        10230, 
                        10231, 
                        10233, 
                        10235, 
                        10237, 
                        10238, 
                        10240, 
                        10242, 
                        10244, 
                        10245, 
                        10247, 
                        10249, 
                        10250, 
                        10252, 
                        10254, 
                        10255, 
                        10257, 
                        10259, 
                        10261, 
                        10262, 
                        10264, 
                        10266, 
                        10267, 
                        10269, 
                        10270, 
                        10272, 
                        10274, 
                        10275, 
                        10277, 
                        10279, 
                        10280, 
                        10282, 
                        10284, 
                        10285, 
                        10287, 
                        10288, 
                        10290, 
                        10292, 
                        10293, 
                        10295, 
                        10296, 
                        10298, 
                        10299, 
                        10301, 
                        10303, 
                        10304, 
                        10306, 
                        10307, 
                        10309, 
                        10310, 
                        10312, 
                        10313, 
                        10315, 
                        10317, 
                        10318, 
                        10320, 
                        10321, 
                        10323, 
                        10324, 
                        10326, 
                        10327, 
                        10329, 
                        10330, 
                        10332, 
                        10333, 
                        10335, 
                        10336, 
                        10338, 
                        10339, 
                        10340, 
                        10342, 
                        10343, 
                        10345, 
                        10346, 
                        10348, 
                        10349, 
                        10351, 
                        10352, 
                        10354, 
                        10355, 
                        10356, 
                        10358, 
                        10359, 
                        10361, 
                        10362, 
                        10364, 
                        10365, 
                        10366, 
                        10368, 
                        10369, 
                        10371, 
                        10372, 
                        10373, 
                        10375, 
                        10376, 
                        10378, 
                        10379, 
                        10380, 
                        10382, 
                        10383, 
                        10384, 
                        10386, 
                        10387, 
                        10388, 
                        10390, 
                        10391, 
                        10392, 
                        10394, 
                        10395, 
                        10397, 
                        10398, 
                        10399, 
                        10400, 
                        10402, 
                        10403, 
                        10404, 
                        10406, 
                        10407, 
                        10408, 
                        10410, 
                        10411, 
                        10412, 
                        10414, 
                        10415, 
                        10416, 
                        10417, 
                        10419, 
                        10420, 
                        10421, 
                        10423, 
                        10424, 
                        10425, 
                        10426, 
                        10428, 
                        10429, 
                        10430, 
                        10431, 
                        10433, 
                        10434, 
                        10435, 
                        10436, 
                        10438, 
                        10439, 
                        10440, 
                        10441, 
                        10443, 
                        10444, 
                        10445, 
                        10446, 
                        10447, 
                        10449, 
                        10450, 
                        10451, 
                        10452, 
                        10454, 
                        10455, 
                        10456, 
                        10457, 
                        10458, 
                        10459, 
                        10461, 
                        10462, 
                        10463, 
                        10464, 
                        10465, 
                        10467, 
                        10468, 
                        10469, 
                        10470, 
                        10471, 
                        10472, 
                        10474, 
                        10475, 
                        10476, 
                        10477, 
                        10478, 
                        10479, 
                        10480, 
                        10482, 
                        10483, 
                        10484, 
                        10485, 
                        10486, 
                        10487, 
                        10488, 
                        10490, 
                        10491, 
                        10492, 
                        10493, 
                        10494, 
                        10495, 
                        10496, 
                        10497, 
                        10498, 
                        10500, 
                        10501, 
                        10502, 
                        10503, 
                        10504, 
                        10505, 
                        10506, 
                        10507, 
                        10508, 
                        10509, 
                        10510, 
                        10512, 
                        10513, 
                        10514, 
                        10515, 
                        10516, 
                        10517, 
                        10518, 
                        10519, 
                        10520, 
                        10521, 
                        10522, 
                        10523, 
                        10524, 
                        10525, 
                        10526, 
                        10527, 
                        10528, 
                        10530, 
                        10531, 
                        10532, 
                        10533, 
                        10534, 
                        10535, 
                        10536, 
                        10537, 
                        10538, 
                        10539, 
                        10540, 
                        10541, 
                        10542, 
                        10543, 
                        10544, 
                        10545, 
                        10546, 
                        10547, 
                        10548, 
                        10549, 
                        10550, 
                        10551, 
                        10552, 
                        10553, 
                        10554, 
                        10555, 
                        10556, 
                        10557, 
                        10558, 
                        10559, 
                        10560, 
                        10561, 
                        10562, 
                        10563, 
                        10564, 
                        10565, 
                        10566, 
                        10567, 
                        10568, 
                        10568, 
                        10569, 
                        10570, 
                        10571, 
                        10572, 
                        10573, 
                        10574, 
                        10575, 
                        10576, 
                        10577, 
                        10578, 
                        10579, 
                        10580, 
                        10581, 
                        10582, 
                        10583, 
                        10584, 
                        10584, 
                        10585, 
                        10586, 
                        10587, 
                        10588, 
                        10589, 
                        10590, 
                        10591, 
                        10592, 
                        10593, 
                        10594, 
                        10595, 
                        10595, 
                        10596, 
                        10597, 
                        10598, 
                        10599, 
                        10600, 
                        10601, 
                        10602, 
                        10603, 
                        10604, 
                        10604, 
                        10605, 
                        10606, 
                        10607, 
                        10608, 
                        10609, 
                        10610, 
                        10611, 
                        10612, 
                        10612, 
                        10613, 
                        10614, 
                        10615, 
                        10616, 
                        10617, 
                        10618, 
                        10618, 
                        10619, 
                        10620, 
                        10621, 
                        10622, 
                        10623, 
                        10624, 
                        10624, 
                        10625, 
                        10626, 
                        10627, 
                        10628, 
                        10629, 
                        10630, 
                        10630, 
                        10631, 
                        10632, 
                        10633, 
                        10634, 
                        10635, 
                        10635, 
                        10636, 
                        10637, 
                        10638, 
                        10639, 
                        10639, 
                        10640, 
                        10641, 
                        10642, 
                        10643, 
                        10644, 
                        10644, 
                        10645, 
                        10646, 
                        10647, 
                        10648, 
                        10648, 
                        10649, 
                        10650, 
                        10651, 
                        10652, 
                        10652, 
                        10653, 
                        10654, 
                        10655, 
                        10656, 
                        10656, 
                        10657, 
                        10658, 
                        10659, 
                        10660, 
                        10660, 
                        10661, 
                        10662, 
                        10663, 
                        10663, 
                        10664, 
                        10665, 
                        10666, 
                        10667, 
                        10667, 
                        10668, 
                        10669, 
                        10670, 
                        10670, 
                        10671, 
                        10672, 
                        10673, 
                        10673, 
                        10674, 
                        10675, 
                        10676, 
                        10677, 
                        10677, 
                        10678, 
                        10679, 
                        10680, 
                        10680, 
                        10681, 
                        10682, 
                        10683, 
                        10683, 
                        10684, 
                        10685, 
                        10685, 
                        10686, 
                        10687, 
                        10688, 
                        10688, 
                        10689, 
                        10690, 
                        10691, 
                        10691, 
                        10692, 
                        10693, 
                        10694, 
                        10694, 
                        10695, 
                        10696, 
                        10696, 
                        10697, 
                        10698, 
                        10699, 
                        10699, 
                        10700, 
                        10701, 
                        10701, 
                        10702, 
                        10703, 
                        10704, 
                        10704, 
                        10705, 
                        10706, 
                        10706, 
                        10707, 
                        10708, 
                        10708, 
                        10709, 
                        10710, 
                        10711, 
                        10711, 
                        10712, 
                        10713, 
                        10713, 
                        10714, 
                        10715, 
                        10715, 
                        10716, 
                        10717, 
                        10717, 
                        10718, 
                        10719, 
                        10719, 
                        10720, 
                        10721, 
                        10722, 
                        10722, 
                        10723, 
                        10724, 
                        10724, 
                        10725, 
                        10726, 
                        10726, 
                        10727, 
                        10728, 
                        10728, 
                        10729, 
                        10730, 
                        10730, 
                        10731, 
                        10732, 
                        10732, 
                        10733, 
                        10734, 
                        10734, 
                        10735, 
                        10735, 
                        10736, 
                        10737, 
                        10737, 
                        10738, 
                        10739, 
                        10739, 
                        10740, 
                        10741, 
                        10741, 
                        10742, 
                        10743, 
                        10743, 
                        10744, 
                        10745, 
                        10745, 
                        10746, 
                        10746, 
                        10747, 
                        10748, 
                        10748, 
                        10749, 
                        10750, 
                        10750, 
                        10751, 
                        10751, 
                        10752, 
                        10753, 
                        10753, 
                        10754, 
                        10755, 
                        10755, 
                        10756, 
                        10756, 
                        10757, 
                        10758, 
                        10758, 
                        10759, 
                        10760, 
                        10760, 
                        10761, 
                        10761, 
                        10762, 
                        10763, 
                        10763, 
                        10764, 
                        10764, 
                        10765, 
                        10766, 
                        10766, 
                        10767, 
                        10767, 
                        10768, 
                        10769, 
                        10769, 
                        10770, 
                        10770, 
                        10771, 
                        10772, 
                        10772, 
                        10773, 
                        10773, 
                        10774, 
                        10775, 
                        10775, 
                        10776, 
                        10776, 
                        10777, 
                        10778, 
                        10778, 
                        10779, 
                        10779, 
                        10780, 
                        10780, 
                        10781, 
                        10782, 
                        10782, 
                        10783, 
                        10783, 
                        10784, 
                        10784, 
                        10785, 
                        10786, 
                        10786, 
                        10787, 
                        10787, 
                        10788, 
                        10788, 
                        10789, 
                        10790, 
                        10790, 
                        10791, 
                        10791, 
                        10792, 
                        10792, 
                        10793, 
                        10794, 
                        10794, 
                        10795, 
                        10795, 
                        10796, 
                        10796, 
                        10797, 
                        10797, 
                        10798, 
                        10799, 
                        10799, 
                        10800, 
                        10800, 
                        10801, 
                        10801, 
                        10802, 
                        10802, 
                        10803, 
                        10804, 
                        10804, 
                        10805, 
                        10805, 
                        10806, 
                        10806, 
                        10807, 
                        10807, 
                        10808, 
                        10808, 
                        10809, 
                        10809, 
                        10810, 
                        10811, 
                        10811, 
                        10812, 
                        10812, 
                        10813, 
                        10813, 
                        10814, 
                        10814, 
                        10815, 
                        10815, 
                        10816, 
                        10816, 
                        10817, 
                        10817, 
                        10818, 
                        10818, 
                        10819, 
                        10819, 
                        10820, 
                        10821, 
                        10821, 
                        10822, 
                        10822, 
                        10823, 
                        10823, 
                        10824, 
                        10824, 
                        10825, 
                        10825, 
                        10826, 
                        10826, 
                        10827, 
                        10827, 
                        10828, 
                        10828, 
                        10829, 
                        10829, 
                        10830, 
                        10830, 
                        10831, 
                        10831, 
                        10832, 
                        10832, 
                        10833, 
                        10833, 
                        10834, 
                        10834, 
                        10835, 
                        10835, 
                        10836, 
                        10836, 
                        10837, 
                        10837, 
                        10838, 
                        10838, 
                        10839, 
                        10839, 
                        10840, 
                        10840, 
                        10841, 
                        10841, 
                        10842, 
                        10842, 
                        10843, 
                        10843, 
                        10844, 
                        10844, 
                        10845, 
                        10845, 
                        10846, 
                        10846, 
                        10847, 
                        10847, 
                        10848, 
                        10848, 
                        10848, 
                        10849, 
                        10849, 
                        10850, 
                        10850, 
                        10851, 
                        10851, 
                        10852, 
                        10852, 
                        10853, 
                        10853, 
                        10854, 
                        10854, 
                        10855, 
                        10855, 
                        10856, 
                        10856, 
                        10857, 
                        10857, 
                        10857, 
                        10858, 
                        10858, 
                        10859, 
                        10859, 
                        10860, 
                        10860, 
                        10861, 
                        10861, 
                        10862, 
                        10862, 
                        10863, 
                        10863, 
                        10863, 
                        10864, 
                        10864, 
                        10865, 
                        10865, 
                        10866, 
                        10866, 
                        10867, 
                        10867, 
                        10868, 
                        10868, 
                        10868, 
                        10869, 
                        10869, 
                        10870, 
                        10870, 
                        10871, 
                        10871, 
                        10872, 
                        10872, 
                        10872, 
                        10873, 
                        10873, 
                        10874, 
                        10874, 
                        10875, 
                        10875, 
                        10876, 
                        10876, 
                        10876, 
                        10877, 
                        10877, 
                        10878, 
                        10878, 
                        10879, 
                        10879, 
                        10880, 
                        10880, 
                        10880, 
                        10881, 
                        10881, 
                        10882, 
                        10882, 
                        10883, 
                        10883, 
                        10883, 
                        10884, 
                        10884, 
                        10885, 
                        10885, 
                        10886, 
                        10886, 
                        10886, 
                        10887, 
                        10887, 
                        10888, 
                        10888, 
                        10889, 
                        10889, 
                        10889, 
                        10890, 
                        10890, 
                        10891, 
                        10891, 
                        10892, 
                        10892, 
                        10892, 
                        10893, 
                        10893, 
                        10894, 
                        10894, 
                        10894, 
                        10895, 
                        10895, 
                        10896, 
                        10896, 
                        10897, 
                        10897, 
                        10897, 
                        10898, 
                        10898, 
                        10899, 
                        10899, 
                        10899, 
                        10900, 
                        10900, 
                        10901, 
                        10901, 
                        10901, 
                        10902, 
                        10902, 
                        10903, 
                        10903, 
                        10903, 
                        10904, 
                        10904, 
                        10905, 
                        10905, 
                        10905, 
                        10906, 
                        10906, 
                        10907, 
                        10907, 
                        10907, 
                        10908, 
                        10908, 
                        10909, 
                        10909, 
                        10909, 
                        10910, 
                        10910, 
                        10911, 
                        10911, 
                        10911, 
                        10912, 
                        10912, 
                        10913, 
                        10913, 
                        10913, 
                        10914, 
                        10914, 
                        10915, 
                        10915, 
                        10915, 
                        10916, 
                        10916, 
                        10917, 
                        10917, 
                        10917, 
                        10918, 
                        10918, 
                        10918, 
                        10919, 
                        10919, 
                        10920, 
                        10920, 
                        10920, 
                        10921, 
                        10921, 
                        10922, 
                        10922, 
                        10922, 
                        10923, 
                        10923, 
                        10923, 
                        10924, 
                        10924, 
                        10925, 
                        10925, 
                        10925, 
                        10926, 
                        10926, 
                        10926, 
                        10927, 
                        10927, 
                        10928, 
                        10928, 
                        10928, 
                        10929, 
                        10929, 
                        10929, 
                        10930, 
                        10930, 
                        10931, 
                        10931, 
                        10931, 
                        10932, 
                        10932, 
                        10932, 
                        10933, 
                        10933, 
                        10933, 
                        10934, 
                        10934, 
                        10935, 
                        10935, 
                        10935, 
                        10936, 
                        10936, 
                        10936, 
                        10937, 
                        10937, 
                        10937, 
                        10938, 
                        10938, 
                        10939, 
                        10939, 
                        10939, 
                        10940, 
                        10940, 
                        10940, 
                        10941, 
                        10941, 
                        10941, 
                        10942, 
                        10942, 
                        10942, 
                        10943, 
                        10943, 
                        10944, 
                        10944, 
                        10944, 
                        10945, 
                        10945, 
                        10945, 
                        10946, 
                        10946, 
                        10946, 
                        10947, 
                        10947, 
                        10947, 
                        10948, 
                        10948, 
                        10948, 
                        10949, 
                        10949, 
                        10949, 
                        10950, 
                        10950, 
                        10950, 
                        10951, 
                        10951, 
                        10952, 
                        10952, 
                        10952, 
                        10953, 
                        10953, 
                        10953, 
                        10954, 
                        10954, 
                        10954, 
                        10955, 
                        10955, 
                        10955, 
                        10956, 
                        10956, 
                        10956, 
                        10957, 
                        10957, 
                        10957, 
                        10958, 
                        10958, 
                        10958, 
                        10959, 
                        10959, 
                        10959, 
                        10960, 
                        10960, 
                        10960, 
                        10961, 
                        10961, 
                        10961, 
                        10962, 
                        10962, 
                        10962, 
                        10963, 
                        10963, 
                        10963, 
                        10964, 
                        10964, 
                        10964, 
                        10965, 
                        10965, 
                        10965, 
                        10966, 
                        10966, 
                        10966, 
                        10967, 
                        10967, 
                        10967, 
                        10968, 
                        10968, 
                        10968, 
                        10969, 
                        10969, 
                        10969, 
                        10969, 
                        10970, 
                        10970, 
                        10970, 
                        10971, 
                        10971, 
                        10971, 
                        10972, 
                        10972, 
                        10972, 
                        10973, 
                        10973, 
                        10973, 
                        10974, 
                        10974, 
                        10974, 
                        10975, 
                        10975, 
                        10975, 
                        10976, 
                        10976, 
                        10976, 
                        10976, 
                        10977, 
                        10977, 
                        10977, 
                        10978, 
                        10978, 
                        10978, 
                        10979, 
                        10979, 
                        10979, 
                        10980, 
                        10980, 
                        10980, 
                        10981, 
                        10981, 
                        10981, 
                        10981, 
                        10982, 
                        10982, 
                        10982, 
                        10983, 
                        10983, 
                        10983, 
                        10984, 
                        10984, 
                        10984, 
                        10985, 
                        10985, 
                        10985, 
                        10985, 
                        10986, 
                        10986, 
                        10986, 
                        10987, 
                        10987, 
                        10987, 
                        10988, 
                        10988, 
                        10988, 
                        10988, 
                        10989, 
                        10989, 
                        10989, 
                        10990, 
                        10990, 
                        10990, 
                        10991, 
                        10991, 
                        10991, 
                        10991, 
                        10992, 
                        10992, 
                        10992, 
                        10993, 
                        10993, 
                        10993, 
                        10994, 
                        10994, 
                        10994, 
                        10994, 
                        10995, 
                        10995, 
                        10995, 
                        10996, 
                        10996, 
                        10996, 
                        10996, 
                        10997, 
                        10997, 
                        10997, 
                        10998, 
                        10998, 
                        10998, 
                        10998, 
                        10999, 
                        10999, 
                        10999, 
                        11000, 
                        11000, 
                        11000, 
                        11001, 
                        11001, 
                        11001, 
                        11001, 
                        11002, 
                        11002, 
                        11002, 
                        11003, 
                        11003, 
                        11003, 
                        11003, 
                        11004, 
                        11004, 
                        11004, 
                        11004, 
                        11005, 
                        11005, 
                        11005, 
                        11006, 
                        11006, 
                        11006, 
                        11006, 
                        11007, 
                        11007, 
                        11007, 
                        11008, 
                        11008, 
                        11008, 
                        11008, 
                        11009, 
                        11009, 
                        11009, 
                        11010, 
                        11010, 
                        11010, 
                        11010, 
                        11011, 
                        11011, 
                        11011, 
                        11011, 
                        11012, 
                        11012, 
                        11012, 
                        11013, 
                        11013, 
                        11013, 
                        11013, 
                        11014, 
                        11014, 
                        11014, 
                        11014, 
                        11015, 
                        11015, 
                        11015, 
                        11016, 
                        11016, 
                        11016, 
                        11016, 
                        11017, 
                        11017, 
                        11017, 
                        11017, 
                        11018, 
                        11018, 
                        11018, 
                        11019, 
                        11019, 
                        11019, 
                        11019, 
                        11020, 
                        11020, 
                        11020, 
                        11020, 
                        11021, 
                        11021, 
                        11021, 
                        11021, 
                        11022, 
                        11022, 
                        11022, 
                        11022, 
                        11023, 
                        11023, 
                        11023, 
                        11024, 
                        11024, 
                        11024, 
                        11024, 
                        11025, 
                        11025, 
                        11025, 
                        11025, 
                        11026, 
                        11026, 
                        11026, 
                        11026, 
                        11027, 
                        11027, 
                        11027, 
                        11027, 
                        11028, 
                        11028, 
                        11028, 
                        11028, 
                        11029, 
                        11029, 
                        11029, 
                        11030, 
                        11030, 
                        11030, 
                        11030, 
                        11031, 
                        11031, 
                        11031, 
                        11031, 
                        11032, 
                        11032, 
                        11032, 
                        11032, 
                        11033, 
                        11033, 
                        11033, 
                        11033, 
                        11034, 
                        11034, 
                        11034, 
                        11034, 
                        11035, 
                        11035, 
                        11035, 
                        11035, 
                        11036, 
                        11036, 
                        11036, 
                        11036, 
                        11037, 
                        11037, 
                        11037, 
                        11037, 
                        11038, 
                        11038, 
                        11038, 
                        11038, 
                        11039, 
                        11039, 
                        11039, 
                        11039, 
                        11040, 
                        11040, 
                        11040, 
                        11040, 
                        11041, 
                        11041, 
                        11041, 
                        11041, 
                        11041, 
                        11042, 
                        11042, 
                        11042, 
                        11042, 
                        11043, 
                        11043, 
                        11043, 
                        11043, 
                        11044, 
                        11044, 
                        11044, 
                        11044, 
                        11045, 
                        11045, 
                        11045, 
                        11045, 
                        11046, 
                        11046, 
                        11046, 
                        11046, 
                        11047, 
                        11047, 
                        11047, 
                        11047, 
                        11048, 
                        11048, 
                        11048, 
                        11048, 
                        11048, 
                        11049, 
                        11049, 
                        11049, 
                        11049, 
                        11050, 
                        11050, 
                        11050, 
                        11050, 
                        11051, 
                        11051, 
                        11051, 
                        11051, 
                        11052, 
                        11052, 
                        11052, 
                        11052, 
                        11052, 
                        11053, 
                        11053, 
                        11053, 
                        11053, 
                        11054, 
                        11054, 
                        11054, 
                        11054, 
                        11055, 
                        11055, 
                        11055, 
                        11055, 
                        11055, 
                        11056, 
                        11056, 
                        11056, 
                        11056, 
                        11057, 
                        11057, 
                        11057, 
                        11057, 
                        11057, 
                        11058, 
                        11058, 
                        11058, 
                        11058, 
                        11059, 
                        11059, 
                        11059, 
                        11059, 
                        11060, 
                        11060, 
                        11060, 
                        11060, 
                        11060, 
                        11061, 
                        11061, 
                        11061, 
                        11061, 
                        11062, 
                        11062, 
                        11062, 
                        11062, 
                        11062, 
                        11063, 
                        11063, 
                        11063, 
                        11063, 
                        11064, 
                        11064, 
                        11064, 
                        11064, 
                        11064, 
                        11065, 
                        11065, 
                        11065, 
                        11065, 
                        11066, 
                        11066, 
                        11066, 
                        11066, 
                        11066, 
                        11067, 
                        11067, 
                        11067, 
                        11067, 
                        11068, 
                        11068, 
                        11068, 
                        11068, 
                        11068, 
                        11069, 
                        11069, 
                        11069, 
                        11069, 
                        11069, 
                        11070, 
                        11070, 
                        11070, 
                        11070, 
                        11071, 
                        11071, 
                        11071, 
                        11071, 
                        11071, 
                        11072, 
                        11072, 
                        11072, 
                        11072, 
                        11072, 
                        11073, 
                        11073, 
                        11073, 
                        11073, 
                        11074, 
                        11074, 
                        11074, 
                        11074, 
                        11074, 
                        11075, 
                        11075, 
                        11075, 
                        11075, 
                        11075, 
                        11076, 
                        11076, 
                        11076, 
                        11076, 
                        11076, 
                        11077, 
                        11077, 
                        11077, 
                        11077, 
                        11078, 
                        11078, 
                        11078, 
                        11078, 
                        11078, 
                        11079, 
                        11079, 
                        11079, 
                        11079, 
                        11079, 
                        11080, 
                        11080, 
                        11080, 
                        11080, 
                        11080, 
                        11081, 
                        11081, 
                        11081, 
                        11081, 
                        11081, 
                        11082, 
                        11082, 
                        11082, 
                        11082, 
                        11082, 
                        11083, 
                        11083, 
                        11083, 
                        11083, 
                        11083, 
                        11084, 
                        11084, 
                        11084, 
                        11084, 
                        11085, 
                        11085, 
                        11085, 
                        11085, 
                        11085, 
                        11086, 
                        11086, 
                        11086, 
                        11086, 
                        11086, 
                        11087, 
                        11087, 
                        11087, 
                        11087, 
                        11087, 
                        11088, 
                        11088, 
                        11088, 
                        11088, 
                        11088, 
                        11088, 
                        11089, 
                        11089, 
                        11089, 
                        11089, 
                        11089, 
                        11090, 
                        11090, 
                        11090, 
                        11090, 
                        11090, 
                        11091, 
                        11091, 
                        11091, 
                        11091, 
                        11091, 
                        11092, 
                        11092, 
                        11092, 
                        11092, 
                        11092, 
                        11093, 
                        11093, 
                        11093, 
                        11093, 
                        11093, 
                        11094, 
                        11094, 
                        11094, 
                        11094, 
                        11094, 
                        11095, 
                        11095, 
                        11095, 
                        11095, 
                        11095, 
                        11096, 
                        11096, 
                        11096, 
                        11096, 
                        11096, 
                        11096, 
                        11097, 
                        11097, 
                        11097, 
                        11097, 
                        11097, 
                        11098, 
                        11098, 
                        11098, 
                        11098, 
                        11098, 
                        11099, 
                        11099, 
                        11099, 
                        11099, 
                        11099, 
                        11100, 
                        11100, 
                        11100, 
                        11100, 
                        11100, 
                        11100, 
                        11101, 
                        11101, 
                        11101, 
                        11101, 
                        11101, 
                        11102, 
                        11102, 
                        11102, 
                        11102, 
                        11102, 
                        11102, 
                        11103, 
                        11103, 
                        11103, 
                        11103, 
                        11103, 
                        11104, 
                        11104, 
                        11104, 
                        11104, 
                        11104, 
                        11105, 
                        11105, 
                        11105, 
                        11105, 
                        11105, 
                        11105, 
                        11106, 
                        11106, 
                        11106, 
                        11106, 
                        11106, 
                        11107, 
                        11107, 
                        11107, 
                        11107, 
                        11107, 
                        11107, 
                        11108, 
                        11108, 
                        11108, 
                        11108, 
                        11108, 
                        11109, 
                        11109, 
                        11109, 
                        11109, 
                        11109, 
                        11109, 
                        11110, 
                        11110, 
                        11110, 
                        11110, 
                        11110, 
                        11110, 
                        11111, 
                        11111, 
                        11111, 
                        11111, 
                        11111, 
                        11112, 
                        11112, 
                        11112, 
                        11112, 
                        11112, 
                        11112, 
                        11113, 
                        11113, 
                        11113, 
                        11113, 
                        11113, 
                        11114, 
                        11114, 
                        11114, 
                        11114, 
                        11114, 
                        11114, 
                        11115, 
                        11115, 
                        11115, 
                        11115, 
                        11115, 
                        11115, 
                        11116, 
                        11116, 
                        11116, 
                        11116, 
                        11116, 
                        11116, 
                        11117, 
                        11117, 
                        11117, 
                        11117, 
                        11117, 
                        11118, 
                        11118, 
                        11118, 
                        11118, 
                        11118, 
                        11118, 
                        11119, 
                        11119, 
                        11119, 
                        11119, 
                        11119, 
                        11119, 
                        11120, 
                        11120, 
                        11120, 
                        11120, 
                        11120, 
                        11120, 
                        11121, 
                        11121, 
                        11121, 
                        11121, 
                        11121, 
                        11121, 
                        11122, 
                        11122, 
                        11122, 
                        11122, 
                        11122, 
                        11122, 
                        11123, 
                        11123, 
                        11123, 
                        11123, 
                        11123, 
                        11123, 
                        11124, 
                        11124, 
                        11124, 
                        11124, 
                        11124, 
                        11124, 
                        11125, 
                        11125, 
                        11125, 
                        11125, 
                        11125, 
                        11125, 
                        11126, 
                        11126, 
                        11126, 
                        11126, 
                        11126, 
                        11126, 
                        11127, 
                        11127, 
                        11127, 
                        11127, 
                        11127, 
                        11127, 
                        11128, 
                        11128, 
                        11128, 
                        11128, 
                        11128, 
                        11128, 
                        11129, 
                        11129, 
                        11129, 
                        11129, 
                        11129, 
                        11129, 
                        11130, 
                        11130, 
                        11130, 
                        11130, 
                        11130, 
                        11130, 
                        11131, 
                        11131, 
                        11131, 
                        11131, 
                        11131, 
                        11131, 
                        11131, 
                        11132, 
                        11132, 
                        11132, 
                        11132, 
                        11132, 
                        11132, 
                        11133, 
                        11133, 
                        11133, 
                        11133, 
                        11133, 
                        11133, 
                        11134, 
                        11134, 
                        11134, 
                        11134, 
                        11134, 
                        11134, 
                        11135, 
                        11135, 
                        11135, 
                        11135, 
                        11135, 
                        11135, 
                        11135, 
                        11136, 
                        11136, 
                        11136, 
                        11136, 
                        11136, 
                        11136, 
                        11137, 
                        11137, 
                        11137, 
                        11137, 
                        11137, 
                        11137, 
                        11138, 
                        11138, 
                        11138, 
                        11138, 
                        11138, 
                        11138, 
                        11138, 
                        11139, 
                        11139, 
                        11139, 
                        11139, 
                        11139, 
                        11139, 
                        11140, 
                        11140, 
                        11140, 
                        11140, 
                        11140, 
                        11140, 
                        11140, 
                        11141, 
                        11141, 
                        11141, 
                        11141, 
                        11141, 
                        11141, 
                        11142, 
                        11142, 
                        11142, 
                        11142, 
                        11142, 
                        11142, 
                        11142, 
                        11143, 
                        11143, 
                        11143, 
                        11143, 
                        11143, 
                        11143, 
                        11143, 
                        11144, 
                        11144, 
                        11144, 
                        11144, 
                        11144, 
                        11144, 
                        11145, 
                        11145, 
                        11145, 
                        11145, 
                        11145, 
                        11145, 
                        11145, 
                        11146, 
                        11146, 
                        11146, 
                        11146, 
                        11146, 
                        11146, 
                        11146, 
                        11147, 
                        11147, 
                        11147, 
                        11147, 
                        11147, 
                        11147, 
                        11148, 
                        11148, 
                        11148, 
                        11148, 
                        11148, 
                        11148, 
                        11148, 
                        11149, 
                        11149, 
                        11149, 
                        11149, 
                        11149, 
                        11149, 
                        11149, 
                        11150, 
                        11150, 
                        11150, 
                        11150, 
                        11150, 
                        11150, 
                        11150, 
                        11151, 
                        11151, 
                        11151, 
                        11151, 
                        11151, 
                        11151, 
                        11151, 
                        11152, 
                        11152, 
                        11152, 
                        11152, 
                        11152, 
                        11152, 
                        11152, 
                        11153, 
                        11153, 
                        11153, 
                        11153, 
                        11153, 
                        11153, 
                        11153, 
                        11154, 
                        11154, 
                        11154, 
                        11154, 
                        11154, 
                        11154, 
                        11154, 
                        11155, 
                        11155, 
                        11155, 
                        11155, 
                        11155, 
                        11155, 
                        11155, 
                        11156, 
                        11156, 
                        11156, 
                        11156, 
                        11156, 
                        11156, 
                        11156, 
                        11157, 
                        11157, 
                        11157, 
                        11157, 
                        11157, 
                        11157, 
                        11157, 
                        11158, 
                        11158, 
                        11158, 
                        11158, 
                        11158, 
                        11158, 
                        11158, 
                        11159, 
                        11159, 
                        11159, 
                        11159, 
                        11159, 
                        11159, 
                        11159, 
                        11160, 
                        11160, 
                        11160, 
                        11160, 
                        11160, 
                        11160, 
                        11160, 
                        11160, 
                        11161, 
                        11161, 
                        11161, 
                        11161, 
                        11161, 
                        11161, 
                        11161, 
                        11162, 
                        11162, 
                        11162, 
                        11162, 
                        11162, 
                        11162, 
                        11162, 
                        11163, 
                        11163, 
                        11163, 
                        11163, 
                        11163, 
                        11163, 
                        11163, 
                        11163, 
                        11164, 
                        11164, 
                        11164, 
                        11164, 
                        11164, 
                        11164, 
                        11164, 
                        11165, 
                        11165, 
                        11165, 
                        11165, 
                        11165, 
                        11165, 
                        11165, 
                        11166, 
                        11166, 
                        11166, 
                        11166, 
                        11166, 
                        11166, 
                        11166, 
                        11166, 
                        11167, 
                        11167, 
                        11167, 
                        11167, 
                        11167, 
                        11167, 
                        11167, 
                        11167, 
                        11168, 
                        11168, 
                        11168, 
                        11168, 
                        11168, 
                        11168, 
                        11168, 
                        11169, 
                        11169, 
                        11169, 
                        11169, 
                        11169, 
                        11169, 
                        11169, 
                        11169, 
                        11170, 
                        11170, 
                        11170, 
                        11170, 
                        11170, 
                        11170, 
                        11170, 
                        11171, 
                        11171, 
                        11171, 
                        11171, 
                        11171, 
                        11171, 
                        11171, 
                        11171, 
                        11172, 
                        11172, 
                        11172, 
                        11172, 
                        11172, 
                        11172, 
                        11172, 
                        11172, 
                        11173, 
                        11173, 
                        11173, 
                        11173, 
                        11173, 
                        11173, 
                        11173, 
                        11173, 
                        11174, 
                        11174, 
                        11174, 
                        11174, 
                        11174, 
                        11174, 
                        11174, 
                        11174, 
                        11175, 
                        11175, 
                        11175, 
                        11175, 
                        11175, 
                        11175, 
                        11175, 
                        11176, 
                        11176, 
                        11176, 
                        11176, 
                        11176, 
                        11176, 
                        11176, 
                        11176, 
                        11177, 
                        11177, 
                        11177, 
                        11177, 
                        11177, 
                        11177, 
                        11177, 
                        11177, 
                        11178, 
                        11178, 
                        11178, 
                        11178, 
                        11178, 
                        11178, 
                        11178, 
                        11178, 
                        11179, 
                        11179, 
                        11179, 
                        11179, 
                        11179, 
                        11179, 
                        11179, 
                        11179, 
                        11180, 
                        11180, 
                        11180, 
                        11180, 
                        11180, 
                        11180, 
                        11180, 
                        11180, 
                        11180, 
                        11181, 
                        11181, 
                        11181, 
                        11181, 
                        11181, 
                        11181, 
                        11181, 
                        11181, 
                        11182, 
                        11182, 
                        11182, 
                        11182, 
                        11182, 
                        11182, 
                        11182, 
                        11182, 
                        11183, 
                        11183, 
                        11183, 
                        11183, 
                        11183, 
                        11183, 
                        11183, 
                        11183, 
                        11184, 
                        11184, 
                        11184, 
                        11184, 
                        11184, 
                        11184, 
                        11184, 
                        11184, 
                        11184, 
                        11185, 
                        11185, 
                        11185, 
                        11185, 
                        11185, 
                        11185, 
                        11185, 
                        11185, 
                        11186, 
                        11186, 
                        11186, 
                        11186, 
                        11186, 
                        11186, 
                        11186, 
                        11186, 
                        11187, 
                        11187, 
                        11187, 
                        11187, 
                        11187, 
                        11187, 
                        11187, 
                        11187, 
                        11187, 
                        11188, 
                        11188, 
                        11188, 
                        11188, 
                        11188, 
                        11188, 
                        11188, 
                        11188, 
                        11189, 
                        11189, 
                        11189, 
                        11189, 
                        11189, 
                        11189, 
                        11189, 
                        11189, 
                        11189, 
                        11190, 
                        11190, 
                        11190, 
                        11190, 
                        11190, 
                        11190, 
                        11190, 
                        11190, 
                        11190, 
                        11191, 
                        11191, 
                        11191, 
                        11191, 
                        11191, 
                        11191, 
                        11191, 
                        11191, 
                        11192, 
                        11192, 
                        11192, 
                        11192, 
                        11192, 
                        11192, 
                        11192, 
                        11192, 
                        11192, 
                        11193, 
                        11193, 
                        11193, 
                        11193, 
                        11193, 
                        11193, 
                        11193, 
                        11193, 
                        11193, 
                        11194, 
                        11194, 
                        11194, 
                        11194, 
                        11194, 
                        11194, 
                        11194, 
                        11194, 
                        11194, 
                        11195, 
                        11195, 
                        11195, 
                        11195, 
                        11195, 
                        11195, 
                        11195, 
                        11195, 
                        11196, 
                        11196, 
                        11196, 
                        11196, 
                        11196, 
                        11196, 
                        11196, 
                        11196, 
                        11196, 
                        11197, 
                        11197, 
                        11197, 
                        11197, 
                        11197, 
                        11197, 
                        11197, 
                        11197, 
                        11197, 
                        11198, 
                        11198, 
                        11198, 
                        11198, 
                        11198, 
                        11198, 
                        11198, 
                        11198, 
                        11198, 
                        11199, 
                        11199, 
                        11199, 
                        11199, 
                        11199, 
                        11199, 
                        11199, 
                        11199, 
                        11199, 
                        11199, 
                        11200, 
                        11200, 
                        11200, 
                        11200, 
                        11200, 
                        11200, 
                        11200, 
                        11200, 
                        11200, 
                        11201, 
                        11201, 
                        11201, 
                        11201, 
                        11201, 
                        11201, 
                        11201, 
                        11201, 
                        11201, 
                        11202, 
                        11202, 
                        11202, 
                        11202, 
                        11202, 
                        11202, 
                        11202, 
                        11202, 
                        11202, 
                        11203, 
                        11203, 
                        11203, 
                        11203, 
                        11203, 
                        11203, 
                        11203, 
                        11203, 
                        11203, 
                        11203, 
                        11204, 
                        11204, 
                        11204, 
                        11204, 
                        11204, 
                        11204, 
                        11204, 
                        11204, 
                        11204, 
                        11205, 
                        11205, 
                        11205, 
                        11205, 
                        11205, 
                        11205, 
                        11205, 
                        11205, 
                        11205, 
                        11205, 
                        11206, 
                        11206, 
                        11206, 
                        11206, 
                        11206, 
                        11206, 
                        11206, 
                        11206, 
                        11206, 
                        11207, 
                        11207, 
                        11207, 
                        11207, 
                        11207, 
                        11207, 
                        11207, 
                        11207, 
                        11207, 
                        11207, 
                        11208, 
                        11208, 
                        11208, 
                        11208, 
                        11208, 
                        11208, 
                        11208, 
                        11208, 
                        11208, 
                        11209, 
                        11209, 
                        11209, 
                        11209, 
                        11209, 
                        11209, 
                        11209, 
                        11209, 
                        11209, 
                        11209, 
                        11210, 
                        11210, 
                        11210, 
                        11210, 
                        11210, 
                        11210, 
                        11210, 
                        11210, 
                        11210, 
                        11210, 
                        11211, 
                        11211, 
                        11211, 
                        11211, 
                        11211, 
                        11211, 
                        11211, 
                        11211, 
                        11211, 
                        11211, 
                        11212, 
                        11212, 
                        11212, 
                        11212, 
                        11212, 
                        11212, 
                        11212, 
                        11212, 
                        11212, 
                        11212, 
                        11213, 
                        11213, 
                        11213, 
                        11213, 
                        11213, 
                        11213, 
                        11213, 
                        11213, 
                        11213, 
                        11214, 
                        11214, 
                        11214, 
                        11214, 
                        11214, 
                        11214, 
                        11214, 
                        11214, 
                        11214, 
                        11214, 
                        11214, 
                        11215, 
                        11215, 
                        11215, 
                        11215, 
                        11215, 
                        11215, 
                        11215, 
                        11215, 
                        11215, 
                        11215, 
                        11216, 
                        11216, 
                        11216, 
                        11216, 
                        11216, 
                        11216, 
                        11216, 
                        11216, 
                        11216, 
                        11216, 
                        11217, 
                        11217, 
                        11217, 
                        11217, 
                        11217, 
                        11217, 
                        11217, 
                        11217, 
                        11217, 
                        11217, 
                        11218, 
                        11218, 
                        11218, 
                        11218, 
                        11218, 
                        11218, 
                        11218, 
                        11218, 
                        11218, 
                        11218, 
                        11219, 
                        11219, 
                        11219, 
                        11219, 
                        11219, 
                        11219, 
                        11219, 
                        11219, 
                        11219, 
                        11219, 
                        11219, 
                        11220, 
                        11220, 
                        11220, 
                        11220, 
                        11220, 
                        11220, 
                        11220, 
                        11220, 
                        11220, 
                        11220, 
                        11221, 
                        11221, 
                        11221, 
                        11221, 
                        11221, 
                        11221, 
                        11221, 
                        11221, 
                        11221, 
                        11221, 
                        11221, 
                        11222, 
                        11222, 
                        11222, 
                        11222, 
                        11222, 
                        11222, 
                        11222, 
                        11222, 
                        11222, 
                        11222, 
                        11223, 
                        11223, 
                        11223, 
                        11223, 
                        11223, 
                        11223, 
                        11223, 
                        11223, 
                        11223, 
                        11223, 
                        11223, 
                        11224, 
                        11224, 
                        11224, 
                        11224, 
                        11224, 
                        11224, 
                        11224, 
                        11224, 
                        11224, 
                        11224, 
                        11224, 
                        11225, 
                        11225, 
                        11225, 
                        11225, 
                        11225, 
                        11225, 
                        11225, 
                        11225, 
                        11225, 
                        11225, 
                        11226, 
                        11226, 
                        11226, 
                        11226, 
                        11226, 
                        11226, 
                        11226, 
                        11226, 
                        11226, 
                        11226, 
                        11226, 
                        11227, 
                        11227, 
                        11227, 
                        11227, 
                        11227, 
                        11227, 
                        11227, 
                        11227, 
                        11227, 
                        11227, 
                        11227, 
                        11228, 
                        11228, 
                        11228, 
                        11228, 
                        11228, 
                        11228, 
                        11228, 
                        11228, 
                        11228, 
                        11228, 
                        11228, 
                        11229, 
                        11229, 
                        11229, 
                        11229, 
                        11229, 
                        11229, 
                        11229, 
                        11229, 
                        11229, 
                        11229, 
                        11229, 
                        11230, 
                        11230, 
                        11230, 
                        11230, 
                        11230, 
                        11230, 
                        11230, 
                        11230, 
                        11230, 
                        11230, 
                        11230, 
                        11231, 
                        11231, 
                        11231, 
                        11231, 
                        11231, 
                        11231, 
                        11231, 
                        11231, 
                        11231, 
                        11231, 
                        11231, 
                        11231, 
                        11232, 
                        11232, 
                        11232, 
                        11232, 
                        11232, 
                        11232, 
                        11232, 
                        11232, 
                        11232, 
                        11232, 
                        11232, 
                        11233, 
                        11233, 
                        11233, 
                        11233, 
                        11233, 
                        11233, 
                        11233, 
                        11233, 
                        11233, 
                        11233, 
                        11233, 
                        11234, 
                        11234, 
                        11234, 
                        11234, 
                        11234, 
                        11234, 
                        11234, 
                        11234, 
                        11234, 
                        11234, 
                        11234, 
                        11234, 
                        11235, 
                        11235, 
                        11235, 
                        11235, 
                        11235, 
                        11235, 
                        11235, 
                        11235, 
                        11235, 
                        11235, 
                        11235, 
                        11236, 
                        11236, 
                        11236, 
                        11236, 
                        11236, 
                        11236, 
                        11236, 
                        11236, 
                        11236, 
                        11236, 
                        11236, 
                        11236, 
                        11237, 
                        11237, 
                        11237, 
                        11237, 
                        11237, 
                        11237, 
                        11237, 
                        11237, 
                        11237, 
                        11237, 
                        11237, 
                        11237, 
                        11238, 
                        11238, 
                        11238, 
                        11238, 
                        11238, 
                        11238, 
                        11238, 
                        11238, 
                        11238, 
                        11238, 
                        11238, 
                        11238, 
                        11239, 
                        11239, 
                        11239, 
                        11239, 
                        11239, 
                        11239, 
                        11239, 
                        11239, 
                        11239, 
                        11239, 
                        11239, 
                        11239, 
                        11240, 
                        11240, 
                        11240, 
                        11240, 
                        11240, 
                        11240, 
                        11240, 
                        11240, 
                        11240, 
                        11240, 
                        11240, 
                        11241, 
                        11241, 
                        11241, 
                        11241, 
                        11241, 
                        11241, 
                        11241, 
                        11241, 
                        11241, 
                        11241, 
                        11241, 
                        11241, 
                        11241, 
                        11242, 
                        11242, 
                        11242, 
                        11242, 
                        11242, 
                        11242, 
                        11242, 
                        11242, 
                        11242, 
                        11242, 
                        11242, 
                        11242, 
                        11243, 
                        11243, 
                        11243, 
                        11243, 
                        11243, 
                        11243, 
                        11243, 
                        11243, 
                        11243, 
                        11243, 
                        11243, 
                        11243, 
                        11244, 
                        11244, 
                        11244, 
                        11244, 
                        11244, 
                        11244, 
                        11244, 
                        11244, 
                        11244, 
                        11244, 
                        11244, 
                        11244, 
                        11245, 
                        11245, 
                        11245, 
                        11245, 
                        11245, 
                        11245, 
                        11245, 
                        11245, 
                        11245, 
                        11245, 
                        11245, 
                        11245, 
                        11245, 
                        11246, 
                        11246, 
                        11246, 
                        11246, 
                        11246, 
                        11246, 
                        11246, 
                        11246, 
                        11246, 
                        11246, 
                        11246, 
                        11246, 
                        11247, 
                        11247, 
                        11247, 
                        11247, 
                        11247, 
                        11247, 
                        11247, 
                        11247, 
                        11247, 
                        11247, 
                        11247, 
                        11247, 
                        11247, 
                        11248, 
                        11248, 
                        11248, 
                        11248, 
                        11248, 
                        11248, 
                        11248, 
                        11248, 
                        11248, 
                        11248, 
                        11248, 
                        11248, 
                        11248, 
                        11249, 
                        11249, 
                        11249, 
                        11249, 
                        11249, 
                        11249, 
                        11249, 
                        11249, 
                        11249, 
                        11249, 
                        11249, 
                        11249, 
                        11250, 
                        11250, 
                        11250, 
                        11250, 
                        11250, 
                        11250, 
                        11250, 
                        11250, 
                        11250, 
                        11250, 
                        11250, 
                        11250, 
                        11250, 
                        11251, 
                        11251, 
                        11251, 
                        11251, 
                        11251, 
                        11251, 
                        11251, 
                        11251, 
                        11251, 
                        11251, 
                        11251, 
                        11251, 
                        11251, 
                        11252, 
                        11252, 
                        11252, 
                        11252, 
                        11252, 
                        11252, 
                        11252, 
                        11252, 
                        11252, 
                        11252, 
                        11252, 
                        11252, 
                        11252, 
                        11253, 
                        11253, 
                        11253, 
                        11253, 
                        11253, 
                        11253, 
                        11253, 
                        11253, 
                        11253, 
                        11253, 
                        11253, 
                        11253, 
                        11253, 
                        11254, 
                        11254, 
                        11254, 
                        11254, 
                        11254, 
                        11254, 
                        11254, 
                        11254, 
                        11254, 
                        11254, 
                        11254, 
                        11254, 
                        11254, 
                        11254, 
                        11255, 
                        11255, 
                        11255, 
                        11255, 
                        11255, 
                        11255, 
                        11255, 
                        11255, 
                        11255, 
                        11255, 
                        11255, 
                        11255, 
                        11255, 
                        11256, 
                        11256, 
                        11256, 
                        11256, 
                        11256, 
                        11256, 
                        11256, 
                        11256, 
                        11256, 
                        11256, 
                        11256, 
                        11256, 
                        11256, 
                        11256, 
                        11257, 
                        11257, 
                        11257, 
                        11257, 
                        11257, 
                        11257, 
                        11257, 
                        11257, 
                        11257, 
                        11257, 
                        11257, 
                        11257, 
                        11257, 
                        11258, 
                        11258, 
                        11258, 
                        11258, 
                        11258, 
                        11258, 
                        11258, 
                        11258, 
                        11258, 
                        11258, 
                        11258, 
                        11258, 
                        11258, 
                        11258, 
                        11259, 
                        11259, 
                        11259, 
                        11259, 
                        11259, 
                        11259, 
                        11259, 
                        11259, 
                        11259, 
                        11259, 
                        11259, 
                        11259, 
                        11259, 
                        11259, 
                        11260, 
                        11260, 
                        11260, 
                        11260, 
                        11260, 
                        11260, 
                        11260, 
                        11260, 
                        11260, 
                        11260, 
                        11260, 
                        11260, 
                        11260, 
                        11261, 
                        11261, 
                        11261, 
                        11261, 
                        11261, 
                        11261, 
                        11261, 
                        11261, 
                        11261, 
                        11261, 
                        11261, 
                        11261, 
                        11261, 
                        11261, 
                        11262, 
                        11262, 
                        11262, 
                        11262, 
                        11262, 
                        11262, 
                        11262, 
                        11262, 
                        11262, 
                        11262, 
                        11262, 
                        11262, 
                        11262, 
                        11262, 
                        11262, 
                        11263, 
                        11263, 
                        11263, 
                        11263, 
                        11263, 
                        11263, 
                        11263, 
                        11263, 
                        11263, 
                        11263, 
                        11263, 
                        11263, 
                        11263, 
                        11263, 
                        11264, 
                        11264, 
                        11264, 
                        11264, 
                        11264, 
                        11264, 
                        11264, 
                        11264, 
                        11264, 
                        11264, 
                        11264, 
                        11264, 
                        11264, 
                        11264, 
                        11265, 
                        11265, 
                        11265, 
                        11265, 
                        11265, 
                        11265, 
                        11265, 
                        11265, 
                        11265, 
                        11265, 
                        11265, 
                        11265, 
                        11265, 
                        11265, 
                        11265, 
                        11266, 
                        11266, 
                        11266, 
                        11266, 
                        11266, 
                        11266, 
                        11266, 
                        11266, 
                        11266, 
                        11266, 
                        11266, 
                        11266, 
                        11266, 
                        11266, 
                        11267, 
                        11267, 
                        11267, 
                        11267, 
                        11267, 
                        11267, 
                        11267, 
                        11267, 
                        11267, 
                        11267, 
                        11267, 
                        11267, 
                        11267, 
                        11267, 
                        11267, 
                        11268, 
                        11268, 
                        11268, 
                        11268, 
                        11268, 
                        11268, 
                        11268, 
                        11268, 
                        11268, 
                        11268, 
                        11268, 
                        11268, 
                        11268, 
                        11268, 
                        11268, 
                        11269, 
                        11269, 
                        11269, 
                        11269, 
                        11269, 
                        11269, 
                        11269, 
                        11269, 
                        11269, 
                        11269, 
                        11269, 
                        11269, 
                        11269, 
                        11269, 
                        11270, 
                        11270, 
                        11270, 
                        11270, 
                        11270, 
                        11270, 
                        11270, 
                        11270, 
                        11270, 
                        11270, 
                        11270, 
                        11270, 
                        11270, 
                        11270, 
                        11270, 
                        11270, 
                        11271, 
                        11271, 
                        11271, 
                        11271, 
                        11271, 
                        11271, 
                        11271, 
                        11271, 
                        11271, 
                        11271, 
                        11271, 
                        11271, 
                        11271, 
                        11271, 
                        11271, 
                        11272, 
                        11272, 
                        11272, 
                        11272, 
                        11272, 
                        11272, 
                        11272, 
                        11272, 
                        11272, 
                        11272, 
                        11272, 
                        11272, 
                        11272, 
                        11272, 
                        11272, 
                        11273, 
                        11273, 
                        11273, 
                        11273, 
                        11273, 
                        11273, 
                        11273, 
                        11273, 
                        11273, 
                        11273, 
                        11273, 
                        11273, 
                        11273, 
                        11273, 
                        11273, 
                        11274, 
                        11274, 
                        11274, 
                        11274, 
                        11274, 
                        11274, 
                        11274, 
                        11274, 
                        11274, 
                        11274, 
                        11274, 
                        11274, 
                        11274, 
                        11274, 
                        11274, 
                        11274, 
                        11275, 
                        11275, 
                        11275, 
                        11275, 
                        11275, 
                        11275, 
                        11275, 
                        11275, 
                        11275, 
                        11275, 
                        11275, 
                        11275, 
                        11275, 
                        11275, 
                        11275, 
                        11276, 
                        11276, 
                        11276, 
                        11276, 
                        11276, 
                        11276, 
                        11276, 
                        11276, 
                        11276, 
                        11276, 
                        11276, 
                        11276, 
                        11276, 
                        11276, 
                        11276, 
                        11276, 
                        11277, 
                        11277, 
                        11277, 
                        11277, 
                        11277, 
                        11277, 
                        11277, 
                        11277, 
                        11277, 
                        11277, 
                        11277, 
                        11277, 
                        11277, 
                        11277, 
                        11277, 
                        11277, 
                        11278, 
                        11278, 
                        11278, 
                        11278, 
                        11278, 
                        11278, 
                        11278, 
                        11278, 
                        11278, 
                        11278, 
                        11278, 
                        11278, 
                        11278, 
                        11278, 
                        11278, 
                        11278, 
                        11279, 
                        11279, 
                        11279, 
                        11279, 
                        11279, 
                        11279, 
                        11279, 
                        11279, 
                        11279, 
                        11279, 
                        11279, 
                        11279, 
                        11279, 
                        11279, 
                        11279, 
                        11279, 
                        11280, 
                        11280, 
                        11280, 
                        11280, 
                        11280, 
                        11280, 
                        11280, 
                        11280, 
                        11280, 
                        11280, 
                        11280, 
                        11280, 
                        11280, 
                        11280, 
                        11280, 
                        11280, 
                        11280, 
                        11281, 
                        11281, 
                        11281, 
                        11281, 
                        11281, 
                        11281, 
                        11281, 
                        11281, 
                        11281, 
                        11281, 
                        11281, 
                        11281, 
                        11281, 
                        11281, 
                        11281, 
                        11281, 
                        11282, 
                        11282, 
                        11282, 
                        11282, 
                        11282, 
                        11282, 
                        11282, 
                        11282, 
                        11282, 
                        11282, 
                        11282, 
                        11282, 
                        11282, 
                        11282, 
                        11282, 
                        11282, 
                        11282, 
                        11283, 
                        11283, 
                        11283, 
                        11283, 
                        11283, 
                        11283, 
                        11283, 
                        11283, 
                        11283, 
                        11283, 
                        11283, 
                        11283, 
                        11283, 
                        11283, 
                        11283, 
                        11283, 
                        11284, 
                        11284, 
                        11284, 
                        11284, 
                        11284, 
                        11284, 
                        11284, 
                        11284, 
                        11284, 
                        11284, 
                        11284, 
                        11284, 
                        11284, 
                        11284, 
                        11284, 
                        11284, 
                        11284, 
                        11285, 
                        11285, 
                        11285, 
                        11285, 
                        11285, 
                        11285, 
                        11285, 
                        11285, 
                        11285, 
                        11285, 
                        11285, 
                        11285, 
                        11285, 
                        11285, 
                        11285, 
                        11285, 
                        11285, 
                        11286, 
                        11286, 
                        11286, 
                        11286, 
                        11286, 
                        11286, 
                        11286, 
                        11286, 
                        11286, 
                        11286, 
                        11286, 
                        11286, 
                        11286, 
                        11286, 
                        11286, 
                        11286, 
                        11286, 
                        11287, 
                        11287, 
                        11287, 
                        11287, 
                        11287, 
                        11287, 
                        11287, 
                        11287, 
                        11287, 
                        11287, 
                        11287, 
                        11287, 
                        11287, 
                        11287, 
                        11287, 
                        11287, 
                        11287, 
                        11287, 
                        11288, 
                        11288, 
                        11288, 
                        11288, 
                        11288, 
                        11288, 
                        11288, 
                        11288, 
                        11288, 
                        11288, 
                        11288, 
                        11288, 
                        11288, 
                        11288, 
                        11288, 
                        11288, 
                        11288, 
                        11289, 
                        11289, 
                        11289, 
                        11289, 
                        11289, 
                        11289, 
                        11289, 
                        11289, 
                        11289, 
                        11289, 
                        11289, 
                        11289, 
                        11289, 
                        11289, 
                        11289, 
                        11289, 
                        11289, 
                        11289, 
                        11290, 
                        11290, 
                        11290, 
                        11290, 
                        11290, 
                        11290, 
                        11290, 
                        11290, 
                        11290, 
                        11290, 
                        11290, 
                        11290, 
                        11290, 
                        11290, 
                        11290, 
                        11290, 
                        11290, 
                        11290, 
                        11291, 
                        11291, 
                        11291, 
                        11291, 
                        11291, 
                        11291, 
                        11291, 
                        11291, 
                        11291, 
                        11291, 
                        11291, 
                        11291, 
                        11291, 
                        11291, 
                        11291, 
                        11291, 
                        11291, 
                        11292, 
                        11292, 
                        11292, 
                        11292, 
                        11292, 
                        11292, 
                        11292, 
                        11292, 
                        11292, 
                        11292, 
                        11292, 
                        11292, 
                        11292, 
                        11292, 
                        11292, 
                        11292, 
                        11292, 
                        11292, 
                        11293, 
                        11293, 
                        11293, 
                        11293, 
                        11293, 
                        11293, 
                        11293, 
                        11293, 
                        11293, 
                        11293, 
                        11293, 
                        11293, 
                        11293, 
                        11293, 
                        11293, 
                        11293, 
                        11293, 
                        11293, 
                        11293, 
                        11294, 
                        11294, 
                        11294, 
                        11294, 
                        11294, 
                        11294, 
                        11294, 
                        11294, 
                        11294, 
                        11294, 
                        11294, 
                        11294, 
                        11294, 
                        11294, 
                        11294, 
                        11294, 
                        11294, 
                        11294, 
                        11295, 
                        11295, 
                        11295, 
                        11295, 
                        11295, 
                        11295, 
                        11295, 
                        11295, 
                        11295, 
                        11295, 
                        11295, 
                        11295, 
                        11295, 
                        11295, 
                        11295, 
                        11295, 
                        11295, 
                        11295, 
                        11295, 
                        11296, 
                        11296, 
                        11296, 
                        11296, 
                        11296, 
                        11296, 
                        11296, 
                        11296, 
                        11296, 
                        11296, 
                        11296, 
                        11296, 
                        11296, 
                        11296, 
                        11296, 
                        11296, 
                        11296, 
                        11296, 
                        11297, 
                        11297, 
                        11297, 
                        11297, 
                        11297, 
                        11297, 
                        11297, 
                        11297, 
                        11297, 
                        11297, 
                        11297, 
                        11297, 
                        11297, 
                        11297, 
                        11297, 
                        11297, 
                        11297, 
                        11297, 
                        11297, 
                        11298, 
                        11298, 
                        11298, 
                        11298, 
                        11298, 
                        11298, 
                        11298, 
                        11298, 
                        11298, 
                        11298, 
                        11298, 
                        11298, 
                        11298, 
                        11298, 
                        11298, 
                        11298, 
                        11298, 
                        11298, 
                        11298, 
                        11299, 
                        11299, 
                        11299, 
                        11299, 
                        11299, 
                        11299, 
                        11299, 
                        11299, 
                        11299, 
                        11299, 
                        11299, 
                        11299, 
                        11299, 
                        11299, 
                        11299, 
                        11299, 
                        11299, 
                        11299, 
                        11299, 
                        11299, 
                        11300, 
                        11300, 
                        11300, 
                        11300, 
                        11300, 
                        11300, 
                        11300, 
                        11300, 
                        11300, 
                        11300, 
                        11300, 
                        11300, 
                        11300, 
                        11300, 
                        11300, 
                        11300, 
                        11300, 
                        11300, 
                        11300, 
                        11301, 
                        11301, 
                        11301, 
                        11301, 
                        11301, 
                        11301, 
                        11301, 
                        11301, 
                        11301, 
                        11301, 
                        11301, 
                        11301, 
                        11301, 
                        11301, 
                        11301, 
                        11301, 
                        11301, 
                        11301, 
                        11301, 
                        11302, 
                        11302, 
                        11302, 
                        11302, 
                        11302, 
                        11302, 
                        11302, 
                        11302, 
                        11302, 
                        11302, 
                        11302, 
                        11302, 
                        11302, 
                        11302, 
                        11302, 
                        11302, 
                        11302, 
                        11302, 
                        11302, 
                        11302, 
                        11303, 
                        11303, 
                        11303, 
                        11303, 
                        11303, 
                        11303, 
                        11303, 
                        11303, 
                        11303, 
                        11303, 
                        11303, 
                        11303, 
                        11303, 
                        11303, 
                        11303, 
                        11303, 
                        11303, 
                        11303, 
                        11303, 
                        11303, 
                        11304, 
                        11304, 
                        11304, 
                        11304, 
                        11304, 
                        11304, 
                        11304, 
                        11304, 
                        11304, 
                        11304, 
                        11304, 
                        11304, 
                        11304, 
                        11304, 
                        11304, 
                        11304, 
                        11304, 
                        11304, 
                        11304, 
                        11304, 
                        11305, 
                        11305, 
                        11305, 
                        11305, 
                        11305, 
                        11305, 
                        11305, 
                        11305, 
                        11305, 
                        11305, 
                        11305, 
                        11305, 
                        11305, 
                        11305, 
                        11305, 
                        11305, 
                        11305, 
                        11305, 
                        11305, 
                        11305, 
                        11305, 
                        11306, 
                        11306, 
                        11306, 
                        11306, 
                        11306, 
                        11306, 
                        11306, 
                        11306, 
                        11306, 
                        11306, 
                        11306, 
                        11306, 
                        11306, 
                        11306, 
                        11306, 
                        11306, 
                        11306, 
                        11306, 
                        11306, 
                        11306, 
                        11307, 
                        11307, 
                        11307, 
                        11307, 
                        11307, 
                        11307, 
                        11307, 
                        11307, 
                        11307, 
                        11307, 
                        11307, 
                        11307, 
                        11307, 
                        11307, 
                        11307, 
                        11307, 
                        11307, 
                        11307, 
                        11307, 
                        11307, 
                        11307, 
                        11308, 
                        11308, 
                        11308, 
                        11308, 
                        11308, 
                        11308, 
                        11308, 
                        11308, 
                        11308, 
                        11308, 
                        11308, 
                        11308, 
                        11308, 
                        11308, 
                        11308, 
                        11308, 
                        11308, 
                        11308, 
                        11308, 
                        11308, 
                        11308, 
                        11309, 
                        11309, 
                        11309, 
                        11309, 
                        11309, 
                        11309, 
                        11309, 
                        11309, 
                        11309, 
                        11309, 
                        11309, 
                        11309, 
                        11309, 
                        11309, 
                        11309, 
                        11309, 
                        11309, 
                        11309, 
                        11309, 
                        11309, 
                        11309, 
                        11310, 
                        11310, 
                        11310, 
                        11310, 
                        11310, 
                        11310, 
                        11310, 
                        11310, 
                        11310, 
                        11310, 
                        11310, 
                        11310, 
                        11310, 
                        11310, 
                        11310, 
                        11310, 
                        11310, 
                        11310, 
                        11310, 
                        11310, 
                        11310, 
                        11311, 
                        11311, 
                        11311, 
                        11311, 
                        11311, 
                        11311, 
                        11311, 
                        11311, 
                        11311, 
                        11311, 
                        11311, 
                        11311, 
                        11311, 
                        11311, 
                        11311, 
                        11311, 
                        11311, 
                        11311, 
                        11311, 
                        11311, 
                        11311, 
                        11311, 
                        11312, 
                        11312, 
                        11312, 
                        11312, 
                        11312, 
                        11312, 
                        11312, 
                        11312, 
                        11312, 
                        11312, 
                        11312, 
                        11312, 
                        11312, 
                        11312, 
                        11312, 
                        11312, 
                        11312, 
                        11312, 
                        11312, 
                        11312, 
                        11312, 
                        11313, 
                        11313, 
                        11313, 
                        11313, 
                        11313, 
                        11313, 
                        11313, 
                        11313, 
                        11313, 
                        11313, 
                        11313, 
                        11313, 
                        11313, 
                        11313, 
                        11313, 
                        11313, 
                        11313, 
                        11313, 
                        11313, 
                        11313, 
                        11313, 
                        11313, 
                        11314, 
                        11314, 
                        11314, 
                        11314, 
                        11314, 
                        11314, 
                        11314, 
                        11314, 
                        11314, 
                        11314, 
                        11314, 
                        11314, 
                        11314, 
                        11314, 
                        11314, 
                        11314, 
                        11314, 
                        11314, 
                        11314, 
                        11314, 
                        11314, 
                        11314, 
                        11315, 
                        11315, 
                        11315, 
                        11315, 
                        11315, 
                        11315, 
                        11315, 
                        11315, 
                        11315, 
                        11315, 
                        11315, 
                        11315, 
                        11315, 
                        11315, 
                        11315, 
                        11315, 
                        11315, 
                        11315, 
                        11315, 
                        11315, 
                        11315, 
                        11315, 
                        11315, 
                        11316, 
                        11316, 
                        11316, 
                        11316, 
                        11316, 
                        11316, 
                        11316, 
                        11316, 
                        11316, 
                        11316, 
                        11316, 
                        11316, 
                        11316, 
                        11316, 
                        11316, 
                        11316, 
                        11316, 
                        11316, 
                        11316, 
                        11316, 
                        11316, 
                        11316, 
                        11317, 
                        11317, 
                        11317, 
                        11317, 
                        11317, 
                        11317, 
                        11317, 
                        11317, 
                        11317, 
                        11317, 
                        11317, 
                        11317, 
                        11317, 
                        11317, 
                        11317, 
                        11317, 
                        11317, 
                        11317, 
                        11317, 
                        11317, 
                        11317, 
                        11317, 
                        11317, 
                        11318, 
                        11318, 
                        11318, 
                        11318, 
                        11318, 
                        11318, 
                        11318, 
                        11318, 
                        11318, 
                        11318, 
                        11318, 
                        11318, 
                        11318, 
                        11318, 
                        11318, 
                        11318, 
                        11318, 
                        11318, 
                        11318, 
                        11318, 
                        11318, 
                        11318, 
                        11318, 
                        11319, 
                        11319, 
                        11319, 
                        11319, 
                        11319, 
                        11319, 
                        11319, 
                        11319, 
                        11319, 
                        11319, 
                        11319, 
                        11319, 
                        11319, 
                        11319, 
                        11319, 
                        11319, 
                        11319, 
                        11319, 
                        11319, 
                        11319, 
                        11319, 
                        11319, 
                        11319, 
                        11320, 
                        11320, 
                        11320, 
                        11320, 
                        11320, 
                        11320, 
                        11320, 
                        11320, 
                        11320, 
                        11320, 
                        11320, 
                        11320, 
                        11320, 
                        11320, 
                        11320, 
                        11320, 
                        11320, 
                        11320, 
                        11320, 
                        11320, 
                        11320, 
                        11320, 
                        11320, 
                        11320, 
                        11321, 
                        11321, 
                        11321, 
                        11321, 
                        11321, 
                        11321, 
                        11321, 
                        11321, 
                        11321, 
                        11321, 
                        11321, 
                        11321, 
                        11321, 
                        11321, 
                        11321, 
                        11321, 
                        11321, 
                        11321, 
                        11321, 
                        11321, 
                        11321, 
                        11321, 
                        11321, 
                        11322, 
                        11322, 
                        11322, 
                        11322, 
                        11322, 
                        11322, 
                        11322, 
                        11322, 
                        11322, 
                        11322, 
                        11322, 
                        11322, 
                        11322, 
                        11322, 
                        11322, 
                        11322, 
                        11322, 
                        11322, 
                        11322, 
                        11322, 
                        11322, 
                        11322, 
                        11322, 
                        11322, 
                        11323, 
                        11323, 
                        11323, 
                        11323, 
                        11323, 
                        11323, 
                        11323, 
                        11323, 
                        11323, 
                        11323, 
                        11323, 
                        11323, 
                        11323, 
                        11323, 
                        11323, 
                        11323, 
                        11323, 
                        11323, 
                        11323, 
                        11323, 
                        11323, 
                        11323, 
                        11323, 
                        11323, 
                        11323, 
                        11324, 
                        11324, 
                        11324, 
                        11324, 
                        11324, 
                        11324, 
                        11324, 
                        11324, 
                        11324, 
                        11324, 
                        11324, 
                        11324, 
                        11324, 
                        11324, 
                        11324, 
                        11324, 
                        11324, 
                        11324, 
                        11324, 
                        11324, 
                        11324, 
                        11324, 
                        11324, 
                        11324, 
                        11325, 
                        11325, 
                        11325, 
                        11325, 
                        11325, 
                        11325, 
                        11325, 
                        11325, 
                        11325, 
                        11325, 
                        11325, 
                        11325, 
                        11325, 
                        11325, 
                        11325, 
                        11325, 
                        11325, 
                        11325, 
                        11325, 
                        11325, 
                        11325, 
                        11325, 
                        11325, 
                        11325, 
                        11325, 
                        11326, 
                        11326, 
                        11326, 
                        11326, 
                        11326, 
                        11326, 
                        11326, 
                        11326, 
                        11326, 
                        11326, 
                        11326, 
                        11326, 
                        11326, 
                        11326, 
                        11326, 
                        11326, 
                        11326, 
                        11326, 
                        11326, 
                        11326, 
                        11326, 
                        11326, 
                        11326, 
                        11326, 
                        11326, 
                        11327, 
                        11327, 
                        11327, 
                        11327, 
                        11327, 
                        11327, 
                        11327, 
                        11327, 
                        11327, 
                        11327, 
                        11327, 
                        11327, 
                        11327, 
                        11327, 
                        11327, 
                        11327, 
                        11327, 
                        11327, 
                        11327, 
                        11327, 
                        11327, 
                        11327, 
                        11327, 
                        11327, 
                        11327, 
                        11328, 
                        11328, 
                        11328, 
                        11328, 
                        11328, 
                        11328, 
                        11328, 
                        11328, 
                        11328, 
                        11328, 
                        11328, 
                        11328, 
                        11328, 
                        11328, 
                        11328, 
                        11328, 
                        11328, 
                        11328, 
                        11328, 
                        11328, 
                        11328, 
                        11328, 
                        11328, 
                        11328, 
                        11328, 
                        11329, 
                        11329, 
                        11329, 
                        11329, 
                        11329, 
                        11329, 
                        11329, 
                        11329, 
                        11329, 
                        11329, 
                        11329, 
                        11329, 
                        11329, 
                        11329, 
                        11329, 
                        11329, 
                        11329, 
                        11329, 
                        11329, 
                        11329, 
                        11329, 
                        11329, 
                        11329, 
                        11329, 
                        11329, 
                        11329, 
                        11330, 
                        11330, 
                        11330, 
                        11330, 
                        11330, 
                        11330, 
                        11330, 
                        11330, 
                        11330, 
                        11330, 
                        11330, 
                        11330, 
                        11330, 
                        11330, 
                        11330, 
                        11330, 
                        11330, 
                        11330, 
                        11330, 
                        11330, 
                        11330, 
                        11330, 
                        11330, 
                        11330, 
                        11330, 
                        11330, 
                        11331, 
                        11331, 
                        11331, 
                        11331, 
                        11331, 
                        11331, 
                        11331, 
                        11331, 
                        11331, 
                        11331, 
                        11331, 
                        11331, 
                        11331, 
                        11331, 
                        11331, 
                        11331, 
                        11331, 
                        11331, 
                        11331, 
                        11331, 
                        11331, 
                        11331, 
                        11331, 
                        11331, 
                        11331, 
                        11331, 
                        11332, 
                        11332, 
                        11332, 
                        11332, 
                        11332, 
                        11332, 
                        11332, 
                        11332, 
                        11332, 
                        11332, 
                        11332, 
                        11332, 
                        11332, 
                        11332, 
                        11332, 
                        11332, 
                        11332, 
                        11332, 
                        11332, 
                        11332, 
                        11332, 
                        11332, 
                        11332, 
                        11332, 
                        11332, 
                        11332, 
                        11332, 
                        11333, 
                        11333, 
                        11333, 
                        11333, 
                        11333, 
                        11333, 
                        11333, 
                        11333, 
                        11333, 
                        11333, 
                        11333, 
                        11333, 
                        11333, 
                        11333, 
                        11333, 
                        11333, 
                        11333, 
                        11333, 
                        11333, 
                        11333, 
                        11333, 
                        11333, 
                        11333, 
                        11333, 
                        11333, 
                        11333, 
                        11333, 
                        11334, 
                        11334, 
                        11334, 
                        11334, 
                        11334, 
                        11334, 
                        11334, 
                        11334, 
                        11334, 
                        11334, 
                        11334, 
                        11334, 
                        11334, 
                        11334, 
                        11334, 
                        11334, 
                        11334, 
                        11334, 
                        11334, 
                        11334, 
                        11334, 
                        11334, 
                        11334, 
                        11334, 
                        11334, 
                        11334, 
                        11334, 
                        11335, 
                        11335, 
                        11335, 
                        11335, 
                        11335, 
                        11335, 
                        11335, 
                        11335, 
                        11335, 
                        11335, 
                        11335, 
                        11335, 
                        11335, 
                        11335, 
                        11335, 
                        11335, 
                        11335, 
                        11335, 
                        11335, 
                        11335, 
                        11335, 
                        11335, 
                        11335, 
                        11335, 
                        11335, 
                        11335, 
                        11335, 
                        11336, 
                        11336, 
                        11336, 
                        11336, 
                        11336, 
                        11336, 
                        11336, 
                        11336, 
                        11336, 
                        11336, 
                        11336, 
                        11336, 
                        11336, 
                        11336, 
                        11336, 
                        11336, 
                        11336, 
                        11336, 
                        11336, 
                        11336, 
                        11336, 
                        11336, 
                        11336, 
                        11336, 
                        11336, 
                        11336, 
                        11336, 
                        11336, 
                        11337, 
                        11337, 
                        11337, 
                        11337, 
                        11337, 
                        11337, 
                        11337, 
                        11337, 
                        11337, 
                        11337, 
                        11337, 
                        11337, 
                        11337, 
                        11337, 
                        11337, 
                        11337, 
                        11337, 
                        11337, 
                        11337, 
                        11337, 
                        11337, 
                        11337, 
                        11337, 
                        11337, 
                        11337, 
                        11337, 
                        11337, 
                        11337, 
                        11338, 
                        11338, 
                        11338, 
                        11338, 
                        11338, 
                        11338, 
                        11338, 
                        11338, 
                        11338, 
                        11338, 
                        11338, 
                        11338, 
                        11338, 
                        11338, 
                        11338, 
                        11338, 
                        11338, 
                        11338, 
                        11338, 
                        11338, 
                        11338, 
                        11338, 
                        11338, 
                        11338, 
                        11338, 
                        11338, 
                        11338, 
                        11338, 
                        11338, 
                        11339, 
                        11339, 
                        11339, 
                        11339, 
                        11339, 
                        11339, 
                        11339, 
                        11339, 
                        11339, 
                        11339, 
                        11339, 
                        11339, 
                        11339, 
                        11339, 
                        11339, 
                        11339, 
                        11339, 
                        11339, 
                        11339, 
                        11339, 
                        11339, 
                        11339, 
                        11339, 
                        11339, 
                        11339, 
                        11339, 
                        11339, 
                        11339, 
                        11340, 
                        11340, 
                        11340, 
                        11340, 
                        11340, 
                        11340, 
                        11340, 
                        11340, 
                        11340, 
                        11340, 
                        11340, 
                        11340, 
                        11340, 
                        11340, 
                        11340, 
                        11340, 
                        11340, 
                        11340, 
                        11340, 
                        11340, 
                        11340, 
                        11340, 
                        11340, 
                        11340, 
                        11340, 
                        11340, 
                        11340, 
                        11340, 
                        11340, 
                        11341, 
                        11341, 
                        11341, 
                        11341, 
                        11341, 
                        11341, 
                        11341, 
                        11341, 
                        11341, 
                        11341, 
                        11341, 
                        11341, 
                        11341, 
                        11341, 
                        11341, 
                        11341, 
                        11341, 
                        11341, 
                        11341, 
                        11341, 
                        11341, 
                        11341, 
                        11341, 
                        11341, 
                        11341, 
                        11341, 
                        11341, 
                        11341, 
                        11341, 
                        11342, 
                        11342, 
                        11342, 
                        11342, 
                        11342, 
                        11342, 
                        11342, 
                        11342, 
                        11342, 
                        11342, 
                        11342, 
                        11342, 
                        11342, 
                        11342, 
                        11342, 
                        11342, 
                        11342, 
                        11342, 
                        11342, 
                        11342, 
                        11342, 
                        11342, 
                        11342, 
                        11342, 
                        11342, 
                        11342, 
                        11342, 
                        11342, 
                        11342, 
                        11342, 
                        11343, 
                        11343, 
                        11343, 
                        11343, 
                        11343, 
                        11343, 
                        11343, 
                        11343, 
                        11343, 
                        11343, 
                        11343, 
                        11343, 
                        11343, 
                        11343, 
                        11343, 
                        11343, 
                        11343, 
                        11343, 
                        11343, 
                        11343, 
                        11343, 
                        11343, 
                        11343, 
                        11343, 
                        11343, 
                        11343, 
                        11343, 
                        11343, 
                        11343, 
                        11343, 
                        11344, 
                        11344, 
                        11344, 
                        11344, 
                        11344, 
                        11344, 
                        11344, 
                        11344, 
                        11344, 
                        11344, 
                        11344, 
                        11344, 
                        11344, 
                        11344, 
                        11344, 
                        11344, 
                        11344, 
                        11344, 
                        11344, 
                        11344, 
                        11344, 
                        11344, 
                        11344, 
                        11344, 
                        11344, 
                        11344, 
                        11344, 
                        11344, 
                        11344, 
                        11344, 
                        11345, 
                        11345, 
                        11345, 
                        11345, 
                        11345, 
                        11345, 
                        11345, 
                        11345, 
                        11345, 
                        11345, 
                        11345, 
                        11345, 
                        11345, 
                        11345, 
                        11345, 
                        11345, 
                        11345, 
                        11345, 
                        11345, 
                        11345, 
                        11345, 
                        11345, 
                        11345, 
                        11345, 
                        11345, 
                        11345, 
                        11345, 
                        11345, 
                        11345, 
                        11345, 
                        11345, 
                        11346, 
                        11346, 
                        11346, 
                        11346, 
                        11346, 
                        11346, 
                        11346, 
                        11346, 
                        11346, 
                        11346, 
                        11346, 
                        11346, 
                        11346, 
                        11346, 
                        11346, 
                        11346, 
                        11346, 
                        11346, 
                        11346, 
                        11346, 
                        11346, 
                        11346, 
                        11346, 
                        11346, 
                        11346, 
                        11346, 
                        11346, 
                        11346, 
                        11346, 
                        11346, 
                        11346, 
                        11347, 
                        11347, 
                        11347, 
                        11347, 
                        11347, 
                        11347, 
                        11347, 
                        11347, 
                        11347, 
                        11347, 
                        11347, 
                        11347, 
                        11347, 
                        11347, 
                        11347, 
                        11347, 
                        11347, 
                        11347, 
                        11347, 
                        11347, 
                        11347, 
                        11347, 
                        11347, 
                        11347, 
                        11347, 
                        11347, 
                        11347, 
                        11347, 
                        11347, 
                        11347, 
                        11347, 
                        11348, 
                        11348, 
                        11348, 
                        11348, 
                        11348, 
                        11348, 
                        11348, 
                        11348, 
                        11348, 
                        11348, 
                        11348, 
                        11348, 
                        11348, 
                        11348, 
                        11348, 
                        11348, 
                        11348, 
                        11348, 
                        11348, 
                        11348, 
                        11348, 
                        11348, 
                        11348, 
                        11348, 
                        11348, 
                        11348, 
                        11348, 
                        11348, 
                        11348, 
                        11348, 
                        11348, 
                        11348, 
                        11349, 
                        11349, 
                        11349, 
                        11349, 
                        11349, 
                        11349, 
                        11349, 
                        11349, 
                        11349, 
                        11349, 
                        11349, 
                        11349, 
                        11349, 
                        11349, 
                        11349, 
                        11349, 
                        11349, 
                        11349, 
                        11349, 
                        11349, 
                        11349, 
                        11349, 
                        11349, 
                        11349, 
                        11349, 
                        11349, 
                        11349, 
                        11349, 
                        11349, 
                        11349, 
                        11349, 
                        11349, 
                        11350, 
                        11350, 
                        11350, 
                        11350, 
                        11350, 
                        11350, 
                        11350, 
                        11350, 
                        11350, 
                        11350, 
                        11350, 
                        11350, 
                        11350, 
                        11350, 
                        11350, 
                        11350, 
                        11350, 
                        11350, 
                        11350, 
                        11350, 
                        11350, 
                        11350, 
                        11350, 
                        11350, 
                        11350, 
                        11350, 
                        11350, 
                        11350, 
                        11350, 
                        11350, 
                        11350, 
                        11350, 
                        11350, 
                        11351, 
                        11351, 
                        11351, 
                        11351, 
                        11351, 
                        11351, 
                        11351, 
                        11351, 
                        11351, 
                        11351, 
                        11351, 
                        11351, 
                        11351, 
                        11351, 
                        11351, 
                        11351, 
                        11351, 
                        11351, 
                        11351, 
                        11351, 
                        11351, 
                        11351, 
                        11351, 
                        11351, 
                        11351, 
                        11351, 
                        11351, 
                        11351, 
                        11351, 
                        11351, 
                        11351, 
                        11351, 
                        11351, 
                        11352, 
                        11352, 
                        11352, 
                        11352, 
                        11352, 
                        11352, 
                        11352, 
                        11352, 
                        11352, 
                        11352, 
                        11352, 
                        11352, 
                        11352, 
                        11352, 
                        11352, 
                        11352, 
                        11352, 
                        11352, 
                        11352, 
                        11352, 
                        11352, 
                        11352, 
                        11352, 
                        11352, 
                        11352, 
                        11352, 
                        11352, 
                        11352, 
                        11352, 
                        11352, 
                        11352, 
                        11352, 
                        11352, 
                        11353, 
                        11353, 
                        11353, 
                        11353, 
                        11353, 
                        11353, 
                        11353, 
                        11353, 
                        11353, 
                        11353, 
                        11353, 
                        11353, 
                        11353, 
                        11353, 
                        11353, 
                        11353, 
                        11353, 
                        11353, 
                        11353, 
                        11353, 
                        11353, 
                        11353, 
                        11353, 
                        11353, 
                        11353, 
                        11353, 
                        11353, 
                        11353, 
                        11353, 
                        11353, 
                        11353, 
                        11353, 
                        11353, 
                        11353, 
                        11354, 
                        11354, 
                        11354, 
                        11354, 
                        11354, 
                        11354, 
                        11354, 
                        11354, 
                        11354, 
                        11354, 
                        11354, 
                        11354, 
                        11354, 
                        11354, 
                        11354, 
                        11354, 
                        11354, 
                        11354, 
                        11354, 
                        11354, 
                        11354, 
                        11354, 
                        11354, 
                        11354, 
                        11354, 
                        11354, 
                        11354, 
                        11354, 
                        11354, 
                        11354, 
                        11354, 
                        11354, 
                        11354, 
                        11354, 
                        11355, 
                        11355, 
                        11355, 
                        11355, 
                        11355, 
                        11355, 
                        11355, 
                        11355, 
                        11355, 
                        11355, 
                        11355, 
                        11355, 
                        11355, 
                        11355, 
                        11355, 
                        11355, 
                        11355, 
                        11355, 
                        11355, 
                        11355, 
                        11355, 
                        11355, 
                        11355, 
                        11355, 
                        11355, 
                        11355, 
                        11355, 
                        11355, 
                        11355, 
                        11355, 
                        11355, 
                        11355, 
                        11355, 
                        11355, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11447, 
                        11447, 
                        11447, 
                        11447, 
                        11447, 
                        11447, 
                        11447, 
                        11447, 
                        11447, 
                        11447, 
                        11447, 
                        11447, 
                        11447, 
                        11447, 
                        11447, 
                        11447, 
                        11447, 
                        11447, 
                        11447, 
                        11447, 
                        11447, 
                        11447, 
                        11447, 
                        11447, 
                        11447, 
                        11447, 
                        11447, 
                        11447
                    ], System.Int32);
                }
            },
            methods: {
                NormalizeDegreesScaled: function (degreesScaled) {
                    if (degreesScaled >= 0 && degreesScaled < 46080) {
                        return degreesScaled;
                    }

                    if (degreesScaled < 0) {
                        degreesScaled = (degreesScaled + 92160) | 0;
                    }

                    var multiple = (Bridge.Int.div(degreesScaled, (46080))) | 0;

                    degreesScaled = (degreesScaled - Bridge.Int.mul(multiple, (46080))) | 0;

                    while (degreesScaled < 0) {
                        degreesScaled = (degreesScaled + 46080) | 0;
                    }
                    while (degreesScaled >= 46080) {
                        degreesScaled = (degreesScaled - 46080) | 0;
                    }

                    return degreesScaled;
                },
                SineScaled: function (degreesScaled) {
                    if (degreesScaled === -2147483648) {
                        return DTLibrary.DTMath.SineScaled(((degreesScaled + 46080) | 0));
                    }

                    if (degreesScaled < 0) {
                        return ((-DTLibrary.DTMath.SineScaled(((-degreesScaled) | 0))) | 0);
                    }

                    var degreesTimes32 = degreesScaled >> 2;

                    var newDegreesTimes32;

                    if (degreesTimes32 < 11520) {
                        newDegreesTimes32 = degreesTimes32;
                    } else {
                        var division = (Bridge.Int.div(degreesTimes32, (11520))) | 0;
                        newDegreesTimes32 = (degreesTimes32 - Bridge.Int.mul(11520, division)) | 0;
                    }

                    if (newDegreesTimes32 < 5760) {
                        return DTLibrary.DTMath._sineArray[System.Array.index(newDegreesTimes32, DTLibrary.DTMath._sineArray)];
                    } else {
                        var translatedDegrees = (newDegreesTimes32 - 5760) | 0;
                        return ((-DTLibrary.DTMath._sineArray[System.Array.index(translatedDegrees, DTLibrary.DTMath._sineArray)]) | 0);
                    }
                },
                CosineScaled: function (degreesScaled) {
                    if (degreesScaled === -2147483648) {
                        return DTLibrary.DTMath.CosineScaled(((degreesScaled + 46080) | 0));
                    }

                    if (degreesScaled < 0) {
                        degreesScaled = (-degreesScaled) | 0;
                    }

                    if (degreesScaled >= 46080) {
                        var division = (Bridge.Int.div(degreesScaled, (46080))) | 0;
                        degreesScaled = (degreesScaled - Bridge.Int.mul(46080, division)) | 0;
                    }

                    var newDegrees = (degreesScaled + 11520) | 0;

                    if (newDegrees >= 46080) {
                        newDegrees = (newDegrees - (46080)) | 0;
                    }

                    return DTLibrary.DTMath.SineScaled(newDegrees);
                },
                ArcTangentScaled: function (x, y) {
                    if (x === 0) {
                        if (y > 0) {
                            return 11520;
                        } else {
                            return -11520;
                        }
                    }

                    if (y === 0) {
                        if (x > 0) {
                            return 0;
                        } else {
                            return 23040;
                        }
                    }

                    if (x > 0 && y > 0) {
                        var result;

                        if (x >= 15000000 || y >= 15000000) {
                            var xLong = System.Int64(x);
                            var yLong = System.Int64(y);

                            var resultLong = (yLong.mul(System.Int64(128))).div(xLong);
                            if (resultLong.gte(System.Int64(1000000000))) {
                                resultLong = System.Int64(1000000000);
                            }
                            result = System.Int64.clip32(resultLong);
                        } else {
                            result = (Bridge.Int.div((y << 7), x)) | 0;
                        }

                        if (result >= DTLibrary.DTMath._arctanArray.length) {
                            result = (DTLibrary.DTMath._arctanArray.length - 1) | 0;
                        }

                        var angle = DTLibrary.DTMath._arctanArray[System.Array.index(result, DTLibrary.DTMath._arctanArray)];
                        return angle;
                    }
                    if (x < 0 && y > 0) {
                        var negativeX;
                        if (x === -2147483648) {
                            negativeX = 2147483647;
                        } else {
                            negativeX = (-x) | 0;
                        }
                        return ((11520 + DTLibrary.DTMath.ArcTangentScaled(y, negativeX)) | 0);
                    }
                    if (y < 0) {
                        var negativeY;
                        if (y === -2147483648) {
                            negativeY = 2147483647;
                        } else {
                            negativeY = (-y) | 0;
                        }
                        return ((-DTLibrary.DTMath.ArcTangentScaled(x, negativeY)) | 0);
                    }

                    throw new System.Exception("Unreachable");
                }
            }
        }
    });

    Bridge.define("DTLibrary.IMusicCleanup", {
        $kind: "interface"
    });

    Bridge.define("DTLibrary.IMusicProcessing", {
        $kind: "interface"
    });

    Bridge.definei("DTLibrary.IMusicOutput$1", function (MusicEnum) { return {
        $kind: "interface"
    }; });

    Bridge.definei("DTLibrary.ISoundOutput$1", function (SoundEnum) { return {
        $kind: "interface"
    }; });

    Bridge.define("DTLibrary.GlobalConfigurationManager", {
        statics: {
            methods: {
                /**
                 * If no saved configuration is found (or the saved configuration is invalid), returns a default GlobalConfiguration.
                 *
                 * @static
                 * @public
                 * @this DTLibrary.GlobalConfigurationManager
                 * @memberof DTLibrary.GlobalConfigurationManager
                 * @param   {DTLibrary.IFileIO}                                           fileIO    
                 * @param   {number}                                                      fileId
                 * @return  {DTLibrary.GlobalConfigurationManager.GlobalConfiguration}
                 */
                GetGlobalConfiguration: function (fileIO, fileId) {
                    var byteList = fileIO.DTLibrary$IFileIO$FetchData(fileId);

                    if (byteList == null) {
                        return new DTLibrary.GlobalConfigurationManager.GlobalConfiguration(DTLibrary.GlobalConfigurationManager.GlobalConfiguration.DEFAULT_FPS, DTLibrary.GlobalConfigurationManager.GlobalConfiguration.DEFAULT_DEBUG_MODE);
                    }

                    var iterator = byteList.GetIterator();

                    var fps = DTLibrary.GlobalConfigurationManager.GlobalConfiguration.DEFAULT_FPS;
                    var debugMode = DTLibrary.GlobalConfigurationManager.GlobalConfiguration.DEFAULT_DEBUG_MODE;

                    try {
                        while (true) {
                            if (!iterator.HasNextByte()) {
                                break;
                            }

                            var str = DTLibrary.GlobalConfigurationManager.TryDeserializeAsciiLineOfInput(iterator);

                            var array = System.String.split(str, [61].map(function (i) {{ return String.fromCharCode(i); }}));

                            if (array.length < 2) {
                                continue;
                            }

                            if (Bridge.referenceEquals(array[System.Array.index(0, array)], "fps")) {
                                var fpsString = array[System.Array.index(1, array)];

                                var possibleFpsValue = DTLibrary.StringUtil.TryParseInt(fpsString);

                                if (System.Nullable.hasValue(possibleFpsValue)) {
                                    fps = System.Nullable.getValue(possibleFpsValue);
                                }
                            }

                            if (Bridge.referenceEquals(array[System.Array.index(0, array)], "debugmode")) {
                                if (Bridge.referenceEquals(array[System.Array.index(1, array)], "true")) {
                                    debugMode = true;
                                }
                                if (Bridge.referenceEquals(array[System.Array.index(1, array)], "false")) {
                                    debugMode = false;
                                }
                            }
                        }
                    } catch ($e1) {
                        $e1 = System.Exception.create($e1);
                        if (Bridge.is($e1, DTLibrary.DTDeserializationException)) {
                        } else {
                            throw $e1;
                        }
                    }

                    if (fps < DTLibrary.GlobalConfigurationManager.GlobalConfiguration.MIN_FPS) {
                        fps = DTLibrary.GlobalConfigurationManager.GlobalConfiguration.MIN_FPS;
                    }
                    if (fps > DTLibrary.GlobalConfigurationManager.GlobalConfiguration.MAX_FPS) {
                        fps = DTLibrary.GlobalConfigurationManager.GlobalConfiguration.MAX_FPS;
                    }

                    return new DTLibrary.GlobalConfigurationManager.GlobalConfiguration(fps, debugMode);
                },
                SaveGlobalConfiguration: function (globalConfiguration, fileIO, fileId) {
                    var builder = new DTLibrary.ByteList.Builder();

                    var fps = globalConfiguration.Fps;
                    var fpsString = "fps=" + (DTLibrary.StringUtil.ToStringCultureInvariant(fps) || "");

                    DTLibrary.GlobalConfigurationManager.SerializeAsciiLineOfInput(fpsString, builder);

                    var debugMode = globalConfiguration.DebugMode;
                    var debugModeString = "debugmode=" + ((debugMode ? "true" : "false") || "");

                    DTLibrary.GlobalConfigurationManager.SerializeAsciiLineOfInput(debugModeString, builder);

                    fileIO.DTLibrary$IFileIO$PersistData(fileId, builder.ToByteList());
                },
                /**
                 * Can possibly throw DTDeserializationException
                 *
                 * @static
                 * @private
                 * @this DTLibrary.GlobalConfigurationManager
                 * @memberof DTLibrary.GlobalConfigurationManager
                 * @param   {DTLibrary.ByteList.Iterator}    byteListIterator
                 * @return  {string}
                 */
                TryDeserializeAsciiLineOfInput: function (byteListIterator) {
                    var line = "";

                    while (true) {
                        if (!byteListIterator.HasNextByte()) {
                            return line;
                        }

                        var b = byteListIterator.TryPop();
                        var c = b;

                        if (c === 10) {
                            return line;
                        }

                        line = (line || "") + ((String.fromCharCode(c)) || "");
                    }
                },
                SerializeAsciiLineOfInput: function (asciiString, byteListBuilder) {
                    var $t;
                    $t = Bridge.getEnumerator(asciiString);
                    try {
                        while ($t.moveNext()) {
                            var c = $t.Current;
                            var b = c & 255;
                            byteListBuilder.Add(b);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    var newline = 10;
                    var newLineAsByte = newline & 255;
                    byteListBuilder.Add(newLineAsByte);
                }
            }
        }
    });

    Bridge.define("DTLibrary.GlobalConfigurationManager.GlobalConfiguration", {
        $kind: "nested class",
        statics: {
            fields: {
                DEFAULT_FPS: 0,
                MIN_FPS: 0,
                MAX_FPS: 0,
                DEFAULT_DEBUG_MODE: false
            },
            ctors: {
                init: function () {
                    this.DEFAULT_FPS = 60;
                    this.MIN_FPS = 10;
                    this.MAX_FPS = 300;
                    this.DEFAULT_DEBUG_MODE = false;
                }
            }
        },
        fields: {
            Fps: 0,
            DebugMode: false
        },
        ctors: {
            ctor: function (fps, debugMode) {
                this.$initialize();
                this.Fps = fps;
                this.DebugMode = debugMode;
            }
        }
    });

    Bridge.define("DTLibrary.GuidGenerator", {
        statics: {
            methods: {
                IntToString: function (i) {
                    switch (i) {
                        case 0: 
                            return "0";
                        case 1: 
                            return "1";
                        case 2: 
                            return "2";
                        case 3: 
                            return "3";
                        case 4: 
                            return "4";
                        case 5: 
                            return "5";
                        case 6: 
                            return "6";
                        case 7: 
                            return "7";
                        case 8: 
                            return "8";
                        case 9: 
                            return "9";
                    }

                    if (i < 0) {
                        return "-" + (DTLibrary.GuidGenerator.IntToString(((-i) | 0)) || "");
                    }

                    var x = (Bridge.Int.div(i, 10)) | 0;
                    var y = i % 10;

                    return (DTLibrary.GuidGenerator.IntToString(x) || "") + (DTLibrary.GuidGenerator.IntToString(y) || "");
                }
            }
        },
        fields: {
            currentValue1: 0,
            currentValue2: 0,
            guidString: null
        },
        ctors: {
            ctor: function (guidString) {
                this.$initialize();
                this.currentValue1 = 0;
                this.currentValue2 = 0;
                this.guidString = guidString;
            }
        },
        methods: {
            NextGuid: function () {
                if (this.currentValue1 === 2147483647) {
                    this.currentValue1 = 0;
                    this.currentValue2 = (this.currentValue2 + 1) | 0;
                } else {
                    this.currentValue1 = (this.currentValue1 + 1) | 0;
                }

                var currentValue1AsString = DTLibrary.GuidGenerator.IntToString(this.currentValue1);
                var currentValue2AsString = this.currentValue2 === 0 ? "0" : DTLibrary.GuidGenerator.IntToString(this.currentValue2);
                return "g=" + (this.guidString || "") + "," + (currentValue1AsString || "") + "," + (currentValue2AsString || "");
            }
        }
    });

    Bridge.define("DTLibrary.IFileIO", {
        $kind: "interface"
    });

    Bridge.definei("DTLibrary.IFrame$4", function (ImageEnum, FontEnum, SoundEnum, MusicEnum) { return {
        $kind: "interface"
    }; });

    Bridge.define("DTLibrary.IntTupleEqualityComparer", {
        inherits: [System.Collections.Generic.IEqualityComparer$1(System.Tuple$2(System.Int32,System.Int32))],
        alias: [
            "equals2", ["System$Collections$Generic$IEqualityComparer$1$System$Tuple$2$System$Int32$System$Int32$equals2", "System$Collections$Generic$IEqualityComparer$1$equals2"],
            "getHashCode2", ["System$Collections$Generic$IEqualityComparer$1$System$Tuple$2$System$Int32$System$Int32$getHashCode2", "System$Collections$Generic$IEqualityComparer$1$getHashCode2"]
        ],
        methods: {
            equals2: function (x, y) {
                if (x == null && y == null) {
                    return true;
                }

                if (x == null || y == null) {
                    return false;
                }

                return x.Item1 === y.Item1 && x.Item2 === y.Item2;
            },
            getHashCode2: function (obj) {
                var a = obj.Item1 << 4;

                return ((((a + obj.Item1) | 0) + obj.Item2) | 0);
            }
        }
    });

    Bridge.define("DTLibrary.ITimer", {
        $kind: "interface"
    });

    Bridge.define("DTLibrary.Key", {
        $kind: "enum",
        statics: {
            fields: {
                A: 0,
                B: 1,
                C: 2,
                D: 3,
                E: 4,
                F: 5,
                G: 6,
                H: 7,
                I: 8,
                J: 9,
                K: 10,
                L: 11,
                M: 12,
                N: 13,
                O: 14,
                P: 15,
                Q: 16,
                R: 17,
                S: 18,
                T: 19,
                U: 20,
                V: 21,
                W: 22,
                X: 23,
                Y: 24,
                Z: 25,
                Zero: 26,
                One: 27,
                Two: 28,
                Three: 29,
                Four: 30,
                Five: 31,
                Six: 32,
                Seven: 33,
                Eight: 34,
                Nine: 35,
                UpArrow: 36,
                DownArrow: 37,
                LeftArrow: 38,
                RightArrow: 39,
                Delete: 40,
                Backspace: 41,
                Enter: 42,
                Shift: 43,
                Space: 44,
                Esc: 45
            }
        }
    });

    Bridge.define("DTLibrary.ListUtil", {
        statics: {
            methods: {
                Shuffle: function (T, list, random) {
                    for (var i = (list.Count - 1) | 0; i > 0; i = (i - 1) | 0) {
                        var index = random.DTLibrary$IDTRandom$NextInt(((i + 1) | 0));
                        if (index !== i) {
                            var element = list.getItem(index);
                            list.setItem(index, list.getItem(i));
                            list.setItem(i, element);
                        }
                    }
                }
            }
        }
    });

    Bridge.define("DTLibrary.StringConcatenation", {
        statics: {
            methods: {
                Concat: function (s, i) {
                    return (s || "") + (DTLibrary.StringUtil.ToStringCultureInvariant(i) || "");
                }
            }
        }
    });

    Bridge.define("DTLibrary.StringUtil", {
        statics: {
            methods: {
                IsDigit: function (c) {
                    return c === 48 || c === 49 || c === 50 || c === 51 || c === 52 || c === 53 || c === 54 || c === 55 || c === 56 || c === 57;
                },
                TryParseInt: function (str) {
                    if (str == null) {
                        return null;
                    }

                    if (Bridge.referenceEquals(str, "")) {
                        return null;
                    }

                    if (str.charCodeAt(0) !== 45 && !DTLibrary.StringUtil.IsDigit(str.charCodeAt(0))) {
                        return null;
                    }

                    if (Bridge.referenceEquals(str, "-")) {
                        return null;
                    }

                    for (var i = 1; i < str.length; i = (i + 1) | 0) {
                        if (!DTLibrary.StringUtil.IsDigit(str.charCodeAt(i))) {
                            return null;
                        }
                    }

                    if (Bridge.referenceEquals(str, "-2147483648")) {
                        return -2147483648;
                    }

                    if (str.charCodeAt(0) === 45) {
                        var result = DTLibrary.StringUtil.TryParseInt(str.substr(1));
                        if (result == null) {
                            return null;
                        }
                        return Bridge.Int.clip32(-(System.Nullable.getValue(result)));
                    }

                    return DTLibrary.StringUtil.TryParseIntHelper(str);
                },
                TryParseIntHelper: function (str) {
                    if (str.length === 1) {
                        if (Bridge.referenceEquals(str, "0")) {
                            return 0;
                        }
                        if (Bridge.referenceEquals(str, "1")) {
                            return 1;
                        }
                        if (Bridge.referenceEquals(str, "2")) {
                            return 2;
                        }
                        if (Bridge.referenceEquals(str, "3")) {
                            return 3;
                        }
                        if (Bridge.referenceEquals(str, "4")) {
                            return 4;
                        }
                        if (Bridge.referenceEquals(str, "5")) {
                            return 5;
                        }
                        if (Bridge.referenceEquals(str, "6")) {
                            return 6;
                        }
                        if (Bridge.referenceEquals(str, "7")) {
                            return 7;
                        }
                        if (Bridge.referenceEquals(str, "8")) {
                            return 8;
                        }
                        if (Bridge.referenceEquals(str, "9")) {
                            return 9;
                        }
                    }

                    var leastSignificantDigit = DTLibrary.StringUtil.TryParseIntHelper(str.substr(((str.length - 1) | 0)));
                    var restOfNumber = DTLibrary.StringUtil.TryParseIntHelper(str.substr(0, ((str.length - 1) | 0)));

                    if (leastSignificantDigit == null || restOfNumber == null) {
                        return null;
                    }

                    try {
                        var number = Bridge.Int.check(System.Nullable.getValue(leastSignificantDigit) + Bridge.Int.mul(10, System.Nullable.getValue(restOfNumber), 1), System.Int32);
                        return number;
                    } catch ($e1) {
                        $e1 = System.Exception.create($e1);
                        if (Bridge.is($e1, System.OverflowException)) {
                            return null;
                        } else {
                            throw $e1;
                        }
                    }
                },
                ParseAsIntCultureInvariant: function (str) {
                    return DTLibrary.StringUtil.ParseInt(str);
                },
                ParseInt: function (str) {
                    var val = DTLibrary.StringUtil.TryParseInt(str);

                    if (val == null) {
                        throw new System.Exception("str does not represent an int: " + (str || ""));
                    }

                    return System.Nullable.getValue(val);
                },
                /**
                 * Returns null if the string does not represent a long
                 *
                 * @static
                 * @public
                 * @this DTLibrary.StringUtil
                 * @memberof DTLibrary.StringUtil
                 * @param   {string}           str
                 * @return  {?System.Int64}
                 */
                TryParseLong: function (str) {
                    if (str == null) {
                        return System.Int64.lift(null);
                    }

                    if (Bridge.referenceEquals(str, "")) {
                        return System.Int64.lift(null);
                    }

                    if (str.charCodeAt(0) !== 45 && !DTLibrary.StringUtil.IsDigit(str.charCodeAt(0))) {
                        return System.Int64.lift(null);
                    }

                    if (Bridge.referenceEquals(str, "-")) {
                        return System.Int64.lift(null);
                    }

                    for (var i = 1; i < str.length; i = (i + 1) | 0) {
                        if (!DTLibrary.StringUtil.IsDigit(str.charCodeAt(i))) {
                            return System.Int64.lift(null);
                        }
                    }

                    if (Bridge.referenceEquals(str, "-9223372036854775808")) {
                        return System.Int64.MinValue;
                    }

                    if (str.charCodeAt(0) === 45) {
                        var result = DTLibrary.StringUtil.TryParseLong(str.substr(1));
                        if (System.Nullable.lifteq("equals", result, System.Int64.lift(null))) {
                            return System.Int64.lift(null);
                        }
                        return System.Int64(-1).mul(System.Nullable.getValue(result));
                    }

                    if (str.length === 1) {
                        if (Bridge.referenceEquals(str, "0")) {
                            return System.Int64(0);
                        }
                        if (Bridge.referenceEquals(str, "1")) {
                            return System.Int64(1);
                        }
                        if (Bridge.referenceEquals(str, "2")) {
                            return System.Int64(2);
                        }
                        if (Bridge.referenceEquals(str, "3")) {
                            return System.Int64(3);
                        }
                        if (Bridge.referenceEquals(str, "4")) {
                            return System.Int64(4);
                        }
                        if (Bridge.referenceEquals(str, "5")) {
                            return System.Int64(5);
                        }
                        if (Bridge.referenceEquals(str, "6")) {
                            return System.Int64(6);
                        }
                        if (Bridge.referenceEquals(str, "7")) {
                            return System.Int64(7);
                        }
                        if (Bridge.referenceEquals(str, "8")) {
                            return System.Int64(8);
                        }
                        if (Bridge.referenceEquals(str, "9")) {
                            return System.Int64(9);
                        }
                    }

                    var leastSignificantDigit = DTLibrary.StringUtil.TryParseLong(str.substr(((str.length - 1) | 0)));
                    var restOfNumber = DTLibrary.StringUtil.TryParseLong(str.substr(0, ((str.length - 1) | 0)));

                    if (System.Nullable.lifteq("equals", leastSignificantDigit, System.Int64.lift(null)) || System.Nullable.lifteq("equals", restOfNumber, System.Int64.lift(null))) {
                        return System.Int64.lift(null);
                    }

                    try {
                        var number = System.Nullable.getValue(leastSignificantDigit).add(System.Int64(10).mul(System.Nullable.getValue(restOfNumber), 1), 1);
                        return number;
                    } catch ($e1) {
                        $e1 = System.Exception.create($e1);
                        if (Bridge.is($e1, System.OverflowException)) {
                            return System.Int64.lift(null);
                        } else {
                            throw $e1;
                        }
                    }
                },
                ToUpperCaseCultureInvariant: function (str) {
                    var array = System.Array.init(str.length, 0, System.Char);

                    for (var i = 0; i < array.length; i = (i + 1) | 0) {
                        var c = str.charCodeAt(i);

                        if (c < 97 || c > 122) {
                            array[System.Array.index(i, array)] = c;
                        } else {
                            array[System.Array.index(i, array)] = (((c - 32) | 0)) & 65535;
                        }
                    }

                    return System.String.fromCharArray(array);
                },
                ToStringCultureInvariant: function (i) {
                    if (i === -2147483648) {
                        return "-2147483648";
                    }

                    return DTLibrary.StringUtil.IntToStringHelper(i);
                },
                ToStringCultureInvariant$1: function (l) {
                    if (l.equals(System.Int64.MinValue)) {
                        return "-9223372036854775808";
                    }

                    return DTLibrary.StringUtil.LongToStringHelper(l);
                },
                IntToStringHelper: function (i) {
                    switch (i) {
                        case 0: 
                            return "0";
                        case 1: 
                            return "1";
                        case 2: 
                            return "2";
                        case 3: 
                            return "3";
                        case 4: 
                            return "4";
                        case 5: 
                            return "5";
                        case 6: 
                            return "6";
                        case 7: 
                            return "7";
                        case 8: 
                            return "8";
                        case 9: 
                            return "9";
                    }

                    if (i < 0) {
                        return "-" + (DTLibrary.StringUtil.IntToStringHelper(((-i) | 0)) || "");
                    }

                    var x = (Bridge.Int.div(i, 10)) | 0;
                    var y = i % 10;

                    return (DTLibrary.StringUtil.IntToStringHelper(x) || "") + (DTLibrary.StringUtil.IntToStringHelper(y) || "");
                },
                LongToStringHelper: function (l) {
                    switch (l.toString()) {
                        case "0": 
                            return "0";
                        case "1": 
                            return "1";
                        case "2": 
                            return "2";
                        case "3": 
                            return "3";
                        case "4": 
                            return "4";
                        case "5": 
                            return "5";
                        case "6": 
                            return "6";
                        case "7": 
                            return "7";
                        case "8": 
                            return "8";
                        case "9": 
                            return "9";
                    }

                    if (l.lt(System.Int64(0))) {
                        return "-" + (DTLibrary.StringUtil.LongToStringHelper(l.neg()) || "");
                    }

                    var x = l.div(System.Int64(10));
                    var y = l.mod(System.Int64(10));

                    return (DTLibrary.StringUtil.LongToStringHelper(x) || "") + (DTLibrary.StringUtil.LongToStringHelper(y) || "");
                }
            }
        }
    });

    Bridge.define("DTLibrary.StringUtil.CultureInvariantComparer", {
        inherits: [System.Collections.Generic.IComparer$1(System.String)],
        $kind: "nested class",
        alias: ["compare", ["System$Collections$Generic$IComparer$1$System$String$compare", "System$Collections$Generic$IComparer$1$compare"]],
        methods: {
            compare: function (x, y) {
                if (x == null && y == null) {
                    return 0;
                }

                if (x == null) {
                    return -1;
                }

                if (y == null) {
                    return 1;
                }

                var index = 0;

                while (true) {
                    if (index === x.length && index === y.length) {
                        return 0;
                    }

                    if (index === x.length) {
                        return -1;
                    }

                    if (index === y.length) {
                        return 1;
                    }

                    var c1 = x.charCodeAt(index);
                    var c2 = y.charCodeAt(index);

                    if (c1 < c2) {
                        return -1;
                    }

                    if (c1 > c2) {
                        return 1;
                    }

                    index = (index + 1) | 0;
                }
            }
        }
    });

    Bridge.define("DTLibrary.VolumeUtil", {
        statics: {
            methods: {
                GetVolumeSmoothed: function (elapsedMicrosPerFrame, currentVolume, desiredVolume) {
                    var maxChangePerFrame = (Bridge.Int.div(elapsedMicrosPerFrame, 5000)) | 0;
                    if (maxChangePerFrame <= 0) {
                        maxChangePerFrame = 1;
                    }

                    if (Math.abs(((desiredVolume - currentVolume) | 0)) <= maxChangePerFrame) {
                        return desiredVolume;
                    } else {
                        if (desiredVolume > currentVolume) {
                            return ((currentVolume + maxChangePerFrame) | 0);
                        } else {
                            return ((currentVolume - maxChangePerFrame) | 0);
                        }
                    }
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercent.BridgeDisplayFont", {
        fields: {
            windowHeight: 0
        },
        ctors: {
            ctor: function (windowHeight) {
                this.$initialize();
                this.windowHeight = windowHeight;

                eval("\r\n\t\t\t\twindow.BridgeDisplayFontJavascript = ((function () {\r\n\t\t\t\t\t'use strict';\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar fontDictionary = {};\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar context = null;\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar fontFamilyCount = 0;\r\n\t\t\t\t\tvar numberOfFontObjectsLoaded = 0;\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar finishedLoading = false;\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar loadFonts = function (fontNames) {\r\n\t\t\t\t\t\tvar fontNamesArray = fontNames.split(',');\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tvar numberOfFontObjects = fontNamesArray.length;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tfor (var i = 0; i < fontNamesArray.length; i++) {\r\n\t\t\t\t\t\t\tvar fontName = fontNamesArray[i];\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif (fontDictionary[fontName])\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tvar fontFamilyName = 'DTFontFamily' + fontFamilyCount;\r\n\t\t\t\t\t\t\tfontFamilyCount++;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tvar font = new FontFace(fontFamilyName, 'url(Data/Font/' + fontName + ')');\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tfontDictionary[fontName] = {\r\n\t\t\t\t\t\t\t\tfont: font,\r\n\t\t\t\t\t\t\t\tfontFamilyName: fontFamilyName\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tfont.load().then((function (f) {\r\n\t\t\t\t\t\t\t\treturn function () {\r\n\t\t\t\t\t\t\t\t\tdocument.fonts.add(f);\r\n\t\t\t\t\t\t\t\t\tnumberOfFontObjectsLoaded++;\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t})(font));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tfinishedLoading = numberOfFontObjects === numberOfFontObjectsLoaded;\r\n\t\t\t\t\t\treturn finishedLoading;\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\t\r\n\t\t\t\t\tvar drawText = function (x, y, str, fontName, javascriptFontSize, lineHeight, red, green, blue, alpha) {\r\n\t\t\t\t\t\tif (context === null) {\r\n\t\t\t\t\t\t\tvar canvas = document.getElementById('bridgeCanvas');\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif (canvas === null)\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tcontext = canvas.getContext('2d', { alpha: false });\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tlineHeight = parseFloat(lineHeight);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tcontext.textBaseline = 'top';\r\n\t\t\t\t\t\tcontext.fillStyle = 'rgba(' + red.toString() + ', ' + green.toString() + ', ' + blue.toString() + ', ' + (alpha / 255).toString() + ')';\r\n\t\t\t\t\t\tcontext.strokeStyle = 'rgba(' + red.toString() + ', ' + green.toString() + ', ' + blue.toString() + ', ' + (alpha / 255).toString() + ')';\r\n\t\t\t\t\t\tcontext.font = javascriptFontSize + 'px \"' + fontDictionary[fontName].fontFamilyName + '\"';\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tvar strArray = str.split('\\n');\r\n\t\t\t\t\t\tvar lineY = y;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tfor (var i = 0; i < strArray.length; i++) {\r\n\t\t\t\t\t\t\tcontext.fillText(strArray[i], x, Math.round(lineY));\r\n\t\t\t\t\t\t\tlineY += lineHeight;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\t\r\n\t\t\t\t\tvar tryDrawText = function (x, y, str, fontName, javascriptFontSize, lineHeight, red, green, blue, alpha) {\r\n\t\t\t\t\t\tif (!finishedLoading)\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tdrawText(x, y, str, fontName, javascriptFontSize, lineHeight, red, green, blue, alpha);\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\t\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tloadFonts: loadFonts,\r\n\t\t\t\t\t\tdrawText: drawText,\r\n\t\t\t\t\t\ttryDrawText: tryDrawText\r\n\t\t\t\t\t};\r\n\t\t\t\t})());\r\n\t\t\t");
            }
        },
        methods: {
            LoadFonts: function () {
                var $t, $t1;
                var woffFontFilenames = new (System.Collections.Generic.HashSet$1(System.String)).ctor();

                $t = Bridge.getEnumerator(System.Enum.getValues(TuxPlanetSpeedrunAnyPercentLibrary.GameFont));
                try {
                    while ($t.moveNext()) {
                        var font = Bridge.cast($t.Current, TuxPlanetSpeedrunAnyPercentLibrary.GameFont);
                        woffFontFilenames.add(TuxPlanetSpeedrunAnyPercentLibrary.GameFontUtil.GetFontInfo(font).WoffFontFilename);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }

                var woffFontFilenamesAsString = "";
                var isFirst = true;
                $t1 = Bridge.getEnumerator(woffFontFilenames);
                try {
                    while ($t1.moveNext()) {
                        var woffFontFilename = $t1.Current;
                        if (isFirst) {
                            isFirst = false;
                        } else {
                            woffFontFilenamesAsString = (woffFontFilenamesAsString || "") + ",";
                        }
                        woffFontFilenamesAsString = (woffFontFilenamesAsString || "") + (woffFontFilename || "");
                    }
                } finally {
                    if (Bridge.is($t1, System.IDisposable)) {
                        $t1.System$IDisposable$Dispose();
                    }
                }

                if (Bridge.referenceEquals(woffFontFilenamesAsString, "")) {
                    return true;
                }

                return eval("window.BridgeDisplayFontJavascript.loadFonts('" + (woffFontFilenamesAsString || "") + "')");
            },
            DrawText: function (x, y, text, font, color) {
                y = (((this.windowHeight - y) | 0) - 1) | 0;

                var red = color.R;
                var green = color.G;
                var blue = color.B;
                var alpha = color.Alpha;

                var fontInfo = TuxPlanetSpeedrunAnyPercentLibrary.GameFontUtil.GetFontInfo(font);

                window.BridgeDisplayFontJavascript.drawText(x, y, text, fontInfo.WoffFontFilename, fontInfo.JavascriptFontSize, fontInfo.LineHeight, red, green, blue, alpha);
            },
            TryDrawText: function (x, y, text, font, color) {
                y = (((this.windowHeight - y) | 0) - 1) | 0;

                var red = color.R;
                var green = color.G;
                var blue = color.B;
                var alpha = color.Alpha;

                var fontInfo = TuxPlanetSpeedrunAnyPercentLibrary.GameFontUtil.GetFontInfo(font);

                window.BridgeDisplayFontJavascript.tryDrawText(x, y, text, fontInfo.WoffFontFilename, fontInfo.JavascriptFontSize, fontInfo.LineHeight, red, green, blue, alpha);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercent.BridgeDisplayImages", {
        fields: {
            widthDictionary: null,
            heightDictionary: null,
            windowHeight: 0
        },
        ctors: {
            ctor: function (windowHeight) {
                this.$initialize();
                this.windowHeight = windowHeight;

                this.widthDictionary = new (System.Collections.Generic.Dictionary$2(TuxPlanetSpeedrunAnyPercentLibrary.GameImage,System.Int32))();
                this.heightDictionary = new (System.Collections.Generic.Dictionary$2(TuxPlanetSpeedrunAnyPercentLibrary.GameImage,System.Int32))();
                eval("\r\n\t\t\t\twindow.BridgeDisplayImagesJavascript = ((function () {\r\n\t\t\t\t\t'use strict';\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar imgDict = {};\r\n\t\t\t\t\tvar widthDict = {};\r\n\t\t\t\t\tvar heightDict = {};\r\n\t\t\t\t\tvar canvas = null;\r\n\t\t\t\t\tvar context = null;\r\n\t\t\t\t\tvar radianConversion = 1.0 / 128.0 * (2.0 * Math.PI / 360.0);\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar numberOfImagesLoaded = 0;\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar loadImages = function (imageNames) {\r\n\t\t\t\t\t\tvar imageNamesArray = imageNames.split(',');\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tvar count = 0;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tfor (var i = 0; i < imageNamesArray.length; i++) {\r\n\t\t\t\t\t\t\tvar imageName = imageNamesArray[i];\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif (imgDict[imageName])\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tvar imgPath = 'Data/Images/' + imageName;\r\n\t\t\t\t\t\t\tvar img = new Image();\r\n\t\t\t\t\t\t\timg.addEventListener('load', (function (a, b) {\r\n\t\t\t\t\t\t\t\treturn function () {\r\n\t\t\t\t\t\t\t\t\tnumberOfImagesLoaded++;\r\n\t\t\t\t\t\t\t\t\twidthDict[a] = b.naturalWidth;\r\n\t\t\t\t\t\t\t\t\theightDict[a] = b.naturalHeight;\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t})(imageName, img));\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\timg.src = imgPath;\r\n\t\t\t\t\t\t\timgDict[imageName] = img;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\t\tif (count === 15) // arbitrary\r\n\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\treturn numberOfImagesLoaded === imageNamesArray.length;\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar drawImageRotatedClockwise = function (imageName, x, y, degreesScaled, scalingFactorScaled) {\r\n\t\t\t\t\t\tif (canvas === null) {\r\n\t\t\t\t\t\t\tcanvas = document.getElementById('bridgeCanvas');\r\n\t\t\t\t\t\t\tif (canvas !== null)\r\n\t\t\t\t\t\t\t\tcontext = canvas.getContext('2d', { alpha: false });\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tvar img = imgDict[imageName];\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tcontext.imageSmoothingEnabled = false;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (degreesScaled === 0 && scalingFactorScaled === 128) {\r\n\t\t\t\t\t\t\tcontext.drawImage(img, x, y);\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tvar scalingFactor = scalingFactorScaled / 128.0;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tcontext.translate(x, y);\r\n\t\t\t\t\t\tcontext.scale(scalingFactor, scalingFactor);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (degreesScaled !== 0) {\r\n\t\t\t\t\t\t\tcontext.translate(img.width / 2, img.height / 2);\r\n\t\t\t\t\t\t\tcontext.rotate(degreesScaled * radianConversion);\r\n\t\t\t\t\t\t\tcontext.translate(-img.width / 2, -img.height / 2);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tcontext.drawImage(img, 0, 0);\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tcontext.setTransform(1, 0, 0, 1, 0, 0);\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar drawImageRotatedClockwise2 = function (imageName, imageX, imageY, imageWidth, imageHeight, x, y, degreesScaled, scalingFactorScaled) {\r\n\t\t\t\t\t\tif (canvas === null) {\r\n\t\t\t\t\t\t\tcanvas = document.getElementById('bridgeCanvas');\r\n\t\t\t\t\t\t\tif (canvas !== null)\r\n\t\t\t\t\t\t\t\tcontext = canvas.getContext('2d', { alpha: false });\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tvar img = imgDict[imageName];\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tcontext.imageSmoothingEnabled = false;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tvar scalingFactor = scalingFactorScaled / 128.0;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tcontext.translate(x, y);\r\n\t\t\t\t\t\tcontext.scale(scalingFactor, scalingFactor);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (degreesScaled !== 0) {\r\n\t\t\t\t\t\t\tcontext.translate(imageWidth / 2, imageHeight / 2);\r\n\t\t\t\t\t\t\tcontext.rotate(degreesScaled * radianConversion);\r\n\t\t\t\t\t\t\tcontext.translate(-imageWidth / 2, -imageHeight / 2);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tcontext.drawImage(img, imageX, imageY, imageWidth, imageHeight, 0, 0, imageWidth, imageHeight);\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tcontext.setTransform(1, 0, 0, 1, 0, 0);\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar getWidth = function (imageName) {\r\n\t\t\t\t\t\treturn widthDict[imageName];\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar getHeight = function (imageName) {\r\n\t\t\t\t\t\treturn heightDict[imageName];\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tloadImages: loadImages,\r\n\t\t\t\t\t\tdrawImageRotatedClockwise: drawImageRotatedClockwise,\r\n\t\t\t\t\t\tdrawImageRotatedClockwise2: drawImageRotatedClockwise2,\r\n\t\t\t\t\t\tgetWidth: getWidth,\r\n\t\t\t\t\t\tgetHeight: getHeight\r\n\t\t\t\t\t};\r\n\t\t\t\t})());\r\n\t\t\t");
            }
        },
        methods: {
            LoadImages: function () {
                var $t;
                var imageNames = "";
                var isFirst = true;

                $t = Bridge.getEnumerator(System.Enum.getValues(TuxPlanetSpeedrunAnyPercentLibrary.GameImage));
                try {
                    while ($t.moveNext()) {
                        var gameImage = Bridge.cast($t.Current, TuxPlanetSpeedrunAnyPercentLibrary.GameImage);
                        if (isFirst) {
                            isFirst = false;
                        } else {
                            imageNames = (imageNames || "") + ",";
                        }
                        imageNames = (imageNames || "") + (TuxPlanetSpeedrunAnyPercentLibrary.GameImageUtil.GetImageFilename(gameImage) || "");
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }

                if (Bridge.referenceEquals(imageNames, "")) {
                    return true;
                }

                var result = eval("window.BridgeDisplayImagesJavascript.loadImages('" + (imageNames || "") + "')");

                if (result) {
                    return true;
                }
                return false;
            },
            DrawImageRotatedClockwise: function (image, x, y, degreesScaled, scalingFactorScaled) {
                var height = this.GetHeight(image);
                var scaledHeight = (Bridge.Int.div(Bridge.Int.mul(height, scalingFactorScaled), 128)) | 0;
                y = (((this.windowHeight - y) | 0) - scaledHeight) | 0;

                window.BridgeDisplayImagesJavascript.drawImageRotatedClockwise(TuxPlanetSpeedrunAnyPercentLibrary.GameImageUtil.GetImageFilename(image), x, y, degreesScaled, scalingFactorScaled);
            },
            DrawImageRotatedClockwise$1: function (image, imageX, imageY, imageWidth, imageHeight, x, y, degreesScaled, scalingFactorScaled) {
                var height = imageHeight;
                var scaledHeight = (Bridge.Int.div(Bridge.Int.mul(height, scalingFactorScaled), 128)) | 0;
                y = (((this.windowHeight - y) | 0) - scaledHeight) | 0;

                window.BridgeDisplayImagesJavascript.drawImageRotatedClockwise2(TuxPlanetSpeedrunAnyPercentLibrary.GameImageUtil.GetImageFilename(image), imageX, imageY, imageWidth, imageHeight, x, y, degreesScaled, scalingFactorScaled);
            },
            GetWidth: function (image) {
                if (this.widthDictionary.containsKey(image)) {
                    return this.widthDictionary.get(image);
                }

                var width = this.GetWidthFromJavascript(image);
                this.widthDictionary.set(image, width);
                return width;
            },
            GetWidthFromJavascript: function (image) {
                return eval("window.BridgeDisplayImagesJavascript.getWidth('" + (TuxPlanetSpeedrunAnyPercentLibrary.GameImageUtil.GetImageFilename(image) || "") + "')");
            },
            GetHeight: function (image) {
                if (this.heightDictionary.containsKey(image)) {
                    return this.heightDictionary.get(image);
                }

                var height = this.GetHeightFromJavascript(image);
                this.heightDictionary.set(image, height);
                return height;
            },
            GetHeightFromJavascript: function (image) {
                return eval("window.BridgeDisplayImagesJavascript.getHeight('" + (TuxPlanetSpeedrunAnyPercentLibrary.GameImageUtil.GetImageFilename(image) || "") + "')");
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercent.BridgeDisplayRectangle", {
        fields: {
            windowHeight: 0
        },
        ctors: {
            ctor: function (windowHeight) {
                this.$initialize();
                this.windowHeight = windowHeight;

                eval("\r\n\t\t\t\twindow.BridgeDisplayRectangleJavascript = ((function () {\r\n\t\t\t\t\t'use strict';\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar canvas = null;\r\n\t\t\t\t\tvar context = null;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\tvar drawRectangle = function (x, y, width, height, red, green, blue, alpha, fill) {\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (canvas === null) {\r\n\t\t\t\t\t\t\tcanvas = document.getElementById('bridgeCanvas');\t\t\r\n\t\t\t\t\t\t\tif (canvas === null)\r\n\t\t\t\t\t\t\t\treturn;\t\r\n\t\t\t\t\t\t\tcontext = canvas.getContext('2d', { alpha: false });\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tcontext.fillStyle = 'rgba(' + red.toString() + ', ' + green.toString() + ', ' + blue.toString() + ', ' + (alpha / 255).toString() + ')';\r\n\t\t\t\t\t\tcontext.strokeStyle = 'rgba(' + red.toString() + ', ' + green.toString() + ', ' + blue.toString() + ', ' + (alpha / 255).toString() + ')';\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (fill)\r\n\t\t\t\t\t\t\tcontext.fillRect(x, y, width, height);\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tcontext.strokeRect(x, y, width, height);\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tdrawRectangle: drawRectangle\r\n\t\t\t\t\t};\r\n\t\t\t\t})());\r\n\t\t\t");
            }
        },
        methods: {
            DrawRectangle: function (x, y, width, height, color, fill) {
                y = (((this.windowHeight - y) | 0) - height) | 0;

                var red = color.R;
                var green = color.G;
                var blue = color.B;
                var alpha = color.Alpha;

                window.BridgeDisplayRectangleJavascript.drawRectangle(x, y, width, height, red, green, blue, alpha, fill);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercent.GameInitializer", {
        statics: {
            fields: {
                bridgeKeyboard: null,
                bridgeMouse: null,
                previousKeyboard: null,
                previousMouse: null,
                display: null,
                soundOutput: null,
                music: null,
                displayLogger: null,
                shouldRenderDisplayLogger: false,
                completedAchievements: null,
                score: null,
                frame: null,
                hasInitializedClearCanvasJavascript: false,
                clickUrl: null
            },
            methods: {
                InitializeClearCanvasJavascript: function () {
                    eval("\r\n\t\t\t\twindow.BridgeClearCanvasJavascript = ((function () {\r\n\t\t\t\t\t'use strict';\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar canvas = null;\r\n\t\t\t\t\tvar context = null;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\tvar clearCanvas = function () {\r\n\t\t\t\t\t\tif (canvas === null) {\r\n\t\t\t\t\t\t\tcanvas = document.getElementById('bridgeCanvas');\r\n\t\t\t\t\t\t\tif (canvas === null)\r\n\t\t\t\t\t\t\t\treturn;\t\r\n\t\t\t\t\t\t\tcontext = canvas.getContext('2d', { alpha: false });\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tcontext.clearRect(0, 0, canvas.width, canvas.height);\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tclearCanvas: clearCanvas\r\n\t\t\t\t\t};\r\n\t\t\t\t})());\r\n\t\t\t");
                },
                ClearCanvas: function () {
                    if (!TuxPlanetSpeedrunAnyPercent.GameInitializer.hasInitializedClearCanvasJavascript) {
                        TuxPlanetSpeedrunAnyPercent.GameInitializer.InitializeClearCanvasJavascript();
                        TuxPlanetSpeedrunAnyPercent.GameInitializer.hasInitializedClearCanvasJavascript = true;
                    }

                    window.BridgeClearCanvasJavascript.clearCanvas();
                },
                ClearClickUrl: function () {
                    eval("window.bridgeClickUrl = null;");
                },
                UpdateClickUrl: function (clickUrl) {
                    eval("window.bridgeClickUrl = '" + (clickUrl || "") + "';");
                },
                AddClickUrlListener: function () {
                    eval("\r\n\t\t\t\tdocument.addEventListener('click', function (e) {\r\n\t\t\t\t\tif (window.bridgeClickUrl !== undefined\r\n\t\t\t\t\t\t\t&& window.bridgeClickUrl !== null\r\n\t\t\t\t\t\t\t&& window.bridgeClickUrl !== '')\r\n\t\t\t\t\t\twindow.open(window.bridgeClickUrl, '_blank');\r\n\t\t\t\t}, false);\r\n\t\t\t");
                },
                RemoveMarginOnBody: function () {
                    eval("\r\n\t\t\t\t((function () {\r\n\t\t\t\t\tvar removeMargin;\r\n\t\t\t\t\t\r\n\t\t\t\t\tremoveMargin = function () {\r\n\t\t\t\t\t\tvar bodyElement = document.body;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (!bodyElement) {\r\n\t\t\t\t\t\t\tsetTimeout(removeMargin, 50);\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tbodyElement.style.margin = '0px';\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\r\n\t\t\t\t\tremoveMargin();\r\n\t\t\t\t})());\r\n\t\t\t");
                },
                Start: function (fps, isWebPortalVersion, debugMode) {
                    TuxPlanetSpeedrunAnyPercent.GameInitializer.hasInitializedClearCanvasJavascript = false;

                    TuxPlanetSpeedrunAnyPercent.GameInitializer.clickUrl = null;

                    TuxPlanetSpeedrunAnyPercent.GameInitializer.completedAchievements = new (System.Collections.Generic.HashSet$1(System.String)).ctor();
                    TuxPlanetSpeedrunAnyPercent.GameInitializer.score = null;

                    TuxPlanetSpeedrunAnyPercent.GameInitializer.ClearClickUrl();

                    TuxPlanetSpeedrunAnyPercent.GameInitializer.AddClickUrlListener();

                    if (isWebPortalVersion) {
                        TuxPlanetSpeedrunAnyPercent.GameInitializer.RemoveMarginOnBody();
                    }

                    TuxPlanetSpeedrunAnyPercent.GameInitializer.shouldRenderDisplayLogger = true;

                    var logger;
                    if (debugMode) {
                        TuxPlanetSpeedrunAnyPercent.GameInitializer.displayLogger = new DTLibrary.DisplayLogger(5, 95);
                        logger = TuxPlanetSpeedrunAnyPercent.GameInitializer.displayLogger;
                    } else {
                        TuxPlanetSpeedrunAnyPercent.GameInitializer.displayLogger = null;
                        logger = new DTLibrary.EmptyLogger();
                    }

                    var windowWidth = 1000;
                    var windowHeight = 700;

                    var globalState = new TuxPlanetSpeedrunAnyPercentLibrary.GlobalState(windowWidth, windowHeight, fps, new DTLibrary.DTRandom(), new DTLibrary.GuidGenerator("391523846186017403"), logger, new DTLibrary.SimpleTimer(), new TuxPlanetSpeedrunAnyPercent.BridgeFileIO(), true, isWebPortalVersion, debugMode, null);

                    TuxPlanetSpeedrunAnyPercent.GameInitializer.frame = TuxPlanetSpeedrunAnyPercentLibrary.TuxPlanetSpeedrunAnyPercent.GetFirstFrame(globalState);

                    TuxPlanetSpeedrunAnyPercent.GameInitializer.bridgeKeyboard = new TuxPlanetSpeedrunAnyPercent.BridgeKeyboard(isWebPortalVersion);
                    TuxPlanetSpeedrunAnyPercent.GameInitializer.bridgeMouse = new TuxPlanetSpeedrunAnyPercent.BridgeMouse();

                    TuxPlanetSpeedrunAnyPercent.GameInitializer.display = new TuxPlanetSpeedrunAnyPercent.BridgeDisplay(windowHeight);
                    TuxPlanetSpeedrunAnyPercent.GameInitializer.soundOutput = new TuxPlanetSpeedrunAnyPercent.BridgeSoundOutput(globalState.ElapsedMicrosPerFrame);
                    TuxPlanetSpeedrunAnyPercent.GameInitializer.music = new TuxPlanetSpeedrunAnyPercent.BridgeMusic();

                    TuxPlanetSpeedrunAnyPercent.GameInitializer.previousKeyboard = new DTLibrary.EmptyKeyboard();
                    TuxPlanetSpeedrunAnyPercent.GameInitializer.previousMouse = new DTLibrary.EmptyMouse();

                    TuxPlanetSpeedrunAnyPercent.GameInitializer.ClearCanvas();
                    TuxPlanetSpeedrunAnyPercent.GameInitializer.frame.DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$Render(TuxPlanetSpeedrunAnyPercent.GameInitializer.display);
                    TuxPlanetSpeedrunAnyPercent.GameInitializer.frame.DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$RenderMusic(TuxPlanetSpeedrunAnyPercent.GameInitializer.music);
                    if (TuxPlanetSpeedrunAnyPercent.GameInitializer.displayLogger != null && TuxPlanetSpeedrunAnyPercent.GameInitializer.shouldRenderDisplayLogger) {
                        TuxPlanetSpeedrunAnyPercent.GameInitializer.displayLogger.Render(TuxPlanetSpeedrunAnyPercentLibrary.GameImage, TuxPlanetSpeedrunAnyPercentLibrary.GameFont, TuxPlanetSpeedrunAnyPercent.GameInitializer.display, TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont14Pt, DTLibrary.DTColor.Black());
                    }
                },
                ProcessExtraTime: function (milliseconds) {
                    TuxPlanetSpeedrunAnyPercent.GameInitializer.frame.DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessExtraTime(milliseconds);
                },
                AddAchievementToJavascriptArray: function (achievement) {
                    eval("if (!window.BridgeCompletedAchievements) window.BridgeCompletedAchievements = [];");
                    eval("window.BridgeCompletedAchievements.push('" + (achievement || "") + "');");
                },
                AddScoreInJavascript: function (score) {
                    eval("window.BridgeScore = '" + (score || "") + "';");
                },
                ComputeAndRenderNextFrame: function () {
                    var $t;
                    var currentKeyboard = new DTLibrary.CopiedKeyboard(TuxPlanetSpeedrunAnyPercent.GameInitializer.bridgeKeyboard);
                    var currentMouse = new DTLibrary.CopiedMouse(TuxPlanetSpeedrunAnyPercent.GameInitializer.bridgeMouse);

                    TuxPlanetSpeedrunAnyPercent.GameInitializer.frame = TuxPlanetSpeedrunAnyPercent.GameInitializer.frame.DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetNextFrame(currentKeyboard, currentMouse, TuxPlanetSpeedrunAnyPercent.GameInitializer.previousKeyboard, TuxPlanetSpeedrunAnyPercent.GameInitializer.previousMouse, TuxPlanetSpeedrunAnyPercent.GameInitializer.display, TuxPlanetSpeedrunAnyPercent.GameInitializer.soundOutput, TuxPlanetSpeedrunAnyPercent.GameInitializer.music);
                    TuxPlanetSpeedrunAnyPercent.GameInitializer.frame.DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessMusic();
                    TuxPlanetSpeedrunAnyPercent.GameInitializer.soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$ProcessFrame();
                    TuxPlanetSpeedrunAnyPercent.GameInitializer.ClearCanvas();
                    TuxPlanetSpeedrunAnyPercent.GameInitializer.frame.DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$Render(TuxPlanetSpeedrunAnyPercent.GameInitializer.display);
                    TuxPlanetSpeedrunAnyPercent.GameInitializer.frame.DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$RenderMusic(TuxPlanetSpeedrunAnyPercent.GameInitializer.music);

                    var newCompletedAchievements = TuxPlanetSpeedrunAnyPercent.GameInitializer.frame.DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetCompletedAchievements();

                    if (newCompletedAchievements != null) {
                        $t = Bridge.getEnumerator(newCompletedAchievements);
                        try {
                            while ($t.moveNext()) {
                                var completedAchievement = $t.Current;
                                var wasAdded = TuxPlanetSpeedrunAnyPercent.GameInitializer.completedAchievements.add(completedAchievement);

                                if (wasAdded) {
                                    TuxPlanetSpeedrunAnyPercent.GameInitializer.AddAchievementToJavascriptArray(completedAchievement);
                                }
                            }
                        } finally {
                            if (Bridge.is($t, System.IDisposable)) {
                                $t.System$IDisposable$Dispose();
                            }
                        }
                    }

                    var newScore = TuxPlanetSpeedrunAnyPercent.GameInitializer.frame.DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetScore();

                    if (newScore != null && (TuxPlanetSpeedrunAnyPercent.GameInitializer.score == null || !Bridge.referenceEquals(newScore, TuxPlanetSpeedrunAnyPercent.GameInitializer.score))) {
                        TuxPlanetSpeedrunAnyPercent.GameInitializer.score = newScore;
                        TuxPlanetSpeedrunAnyPercent.GameInitializer.AddScoreInJavascript(newScore);
                    }

                    var newClickUrl = TuxPlanetSpeedrunAnyPercent.GameInitializer.frame.DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetClickUrl();

                    if (!Bridge.referenceEquals(TuxPlanetSpeedrunAnyPercent.GameInitializer.clickUrl, newClickUrl)) {
                        TuxPlanetSpeedrunAnyPercent.GameInitializer.clickUrl = newClickUrl;
                        if (TuxPlanetSpeedrunAnyPercent.GameInitializer.clickUrl == null) {
                            TuxPlanetSpeedrunAnyPercent.GameInitializer.ClearClickUrl();
                        } else {
                            TuxPlanetSpeedrunAnyPercent.GameInitializer.UpdateClickUrl(TuxPlanetSpeedrunAnyPercent.GameInitializer.clickUrl);
                        }
                    }

                    if (TuxPlanetSpeedrunAnyPercent.GameInitializer.displayLogger != null && TuxPlanetSpeedrunAnyPercent.GameInitializer.shouldRenderDisplayLogger) {
                        TuxPlanetSpeedrunAnyPercent.GameInitializer.displayLogger.Render(TuxPlanetSpeedrunAnyPercentLibrary.GameImage, TuxPlanetSpeedrunAnyPercentLibrary.GameFont, TuxPlanetSpeedrunAnyPercent.GameInitializer.display, TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont14Pt, DTLibrary.DTColor.Black());
                    }

                    if (currentKeyboard.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.L) && !TuxPlanetSpeedrunAnyPercent.GameInitializer.previousKeyboard.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.L)) {
                        TuxPlanetSpeedrunAnyPercent.GameInitializer.shouldRenderDisplayLogger = !TuxPlanetSpeedrunAnyPercent.GameInitializer.shouldRenderDisplayLogger;
                    }

                    TuxPlanetSpeedrunAnyPercent.GameInitializer.previousKeyboard = currentKeyboard;
                    TuxPlanetSpeedrunAnyPercent.GameInitializer.previousMouse = currentMouse;
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercent.Program", {
        main: function Main (args) {
            TuxPlanetSpeedrunAnyPercent.Program.AddFpsDisplayJavascript();
            TuxPlanetSpeedrunAnyPercent.Program.Initialize();
        },
        statics: {
            methods: {
                AddFpsDisplayJavascript: function () {
                    eval("\n\t\t\t\twindow.FpsDisplayJavascript = ((function () {\n\t\t\t\t\t'use strict';\n\t\t\t\t\t\n\t\t\t\t\tvar numberOfFrames = 0;\n\t\t\t\t\tvar hasAddedFpsLabel = false;\n\t\t\t\t\tvar startTimeMillis = Date.now();\n\t\t\t\t\tvar fpsNode = null;\n\t\t\t\t\t\n\t\t\t\t\tvar frameComputedAndRendered = function () {\n\t\t\t\t\t\tnumberOfFrames++;\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tvar displayFps = function () {\n\t\t\t\t\t\tif (!hasAddedFpsLabel) {\n\t\t\t\t\t\t\tvar fpsLabelNode = document.getElementById('fpsLabel');\n\t\t\t\t\t\t\tif (fpsLabelNode !== null) {\n\t\t\t\t\t\t\t\tfpsLabelNode.textContent = 'FPS: ';\n\t\t\t\t\t\t\t\thasAddedFpsLabel = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar currentTimeMillis = Date.now();\n\t\t\t\t\t\tif (currentTimeMillis - startTimeMillis > 2000) {\n\t\t\t\t\t\t\tvar actualFps = numberOfFrames / 2;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (fpsNode === null)\n\t\t\t\t\t\t\t\tfpsNode = document.getElementById('fps');\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (fpsNode !== null)\n\t\t\t\t\t\t\t\tfpsNode.textContent = actualFps.toString();\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tnumberOfFrames = 0;\n\t\t\t\t\t\t\tstartTimeMillis = currentTimeMillis;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\treturn {\n\t\t\t\t\t\tframeComputedAndRendered: frameComputedAndRendered,\n\t\t\t\t\t\tdisplayFps: displayFps\n\t\t\t\t\t};\n\t\t\t\t})());\n\t\t\t");
                },
                Initialize: function () {
                    eval("\n\t\t\t\t((function () {\n\t\t\t\t\t'use strict';\n\t\t\t\t\t\n\t\t\t\t\tvar isWebPortalVersion = false;\n\t\t\t\t\t\n\t\t\t\t\tvar urlParams = (new URL(document.location)).searchParams;\n\t\t\t\t\t\n\t\t\t\t\tvar showFps = urlParams.get('showfps') !== null\n\t\t\t\t\t\t? (urlParams.get('showfps') === 'true')\n\t\t\t\t\t\t: false;\n\t\t\t\t\tvar fps = urlParams.get('fps') !== null\n\t\t\t\t\t\t? parseInt(urlParams.get('fps'), 10)\n\t\t\t\t\t\t: 60;\n\t\t\t\t\tvar debugMode = urlParams.get('debugmode') !== null\n\t\t\t\t\t\t? (urlParams.get('debugmode') === 'true')\n\t\t\t\t\t\t: false;\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\twindow.TuxPlanetSpeedrunAnyPercent.GameInitializer.Start(fps, isWebPortalVersion, debugMode);\n\t\t\t\t\t\n\t\t\t\t\tvar computeAndRenderNextFrame;\n\t\t\t\t\t\n\t\t\t\t\tvar nextTimeToAct = Date.now() + (1000.0 / fps);\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\tcomputeAndRenderNextFrame = function () {\n\t\t\t\t\t\tvar now = Date.now();\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (nextTimeToAct > now) {\n\t\t\t\t\t\t\trequestAnimationFrame(computeAndRenderNextFrame);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (nextTimeToAct < now - 5.0*(1000.0 / fps))\n\t\t\t\t\t\t\tnextTimeToAct = now - 5.0*(1000.0 / fps);\n\t\t\t\t\t\t\n\t\t\t\t\t\tnextTimeToAct = nextTimeToAct + (1000.0 / fps);\n\t\t\t\t\t\t\n\t\t\t\t\t\twindow.TuxPlanetSpeedrunAnyPercent.GameInitializer.ComputeAndRenderNextFrame();\n\t\t\t\t\t\twindow.FpsDisplayJavascript.frameComputedAndRendered();\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (showFps)\n\t\t\t\t\t\t\twindow.FpsDisplayJavascript.displayFps();\n\t\t\t\t\t\t\n\t\t\t\t\t\trequestAnimationFrame(computeAndRenderNextFrame);\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\trequestAnimationFrame(computeAndRenderNextFrame);\n\t\t\t\t})());\n\t\t\t");
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.Achievements", {
        statics: {
            methods: {
                GetCompletedAchievements: function (numCompletedLevels) {
                    var completedAchievements = new (System.Collections.Generic.HashSet$1(System.String)).ctor();

                    if (numCompletedLevels >= 1) {
                        completedAchievements.add("completed_1_level");
                    }

                    for (var i = 2; i <= numCompletedLevels; i = (i + 1) | 0) {
                        var completedLevelsString = "completed_" + (DTLibrary.StringUtil.ToStringCultureInvariant(i) || "") + "_levels";
                        completedAchievements.add(completedLevelsString);
                    }

                    return completedAchievements;
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.ArrayUtil", {
        statics: {
            methods: {
                ShallowCopyTArray: function (T, array) {
                    var $t, $t1;
                    var newArray = System.Array.init(array.length, null, System.Array.type(T));

                    for (var i = 0; i < newArray.length; i = (i + 1) | 0) {
                        newArray[System.Array.index(i, newArray)] = System.Array.init(array[System.Array.index(i, array)].length, function (){
                            return Bridge.getDefaultValue(T);
                        }, T);
                        for (var j = 0; j < newArray[System.Array.index(i, newArray)].length; j = (j + 1) | 0) {
                            ($t = newArray[System.Array.index(i, newArray)])[System.Array.index(j, $t)] = ($t1 = array[System.Array.index(i, array)])[System.Array.index(j, $t1)];
                        }
                    }

                    return newArray;
                },
                CopyBoolArray: function (array) {
                    var $t, $t1;
                    var newArray = System.Array.init(array.length, null, System.Array.type(System.Boolean));

                    for (var i = 0; i < newArray.length; i = (i + 1) | 0) {
                        newArray[System.Array.index(i, newArray)] = System.Array.init(array[System.Array.index(i, array)].length, false, System.Boolean);
                        for (var j = 0; j < newArray[System.Array.index(i, newArray)].length; j = (j + 1) | 0) {
                            ($t = newArray[System.Array.index(i, newArray)])[System.Array.index(j, $t)] = ($t1 = array[System.Array.index(i, array)])[System.Array.index(j, $t1)];
                        }
                    }

                    return newArray;
                },
                EmptyBoolArray: function (length1, length2) {
                    var $t;
                    var array = System.Array.init(length1, null, System.Array.type(System.Boolean));

                    for (var i = 0; i < length1; i = (i + 1) | 0) {
                        array[System.Array.index(i, array)] = System.Array.init(length2, false, System.Boolean);
                        for (var j = 0; j < length2; j = (j + 1) | 0) {
                            ($t = array[System.Array.index(i, array)])[System.Array.index(j, $t)] = false;
                        }
                    }

                    return array;
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.IBackground", {
        $kind: "interface"
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.BackgroundUtil", {
        statics: {
            methods: {
                GetRandomBackground: function (random) {
                    switch (random.DTLibrary$IDTRandom$NextInt(2)) {
                        case 0: 
                            return new TuxPlanetSpeedrunAnyPercentLibrary.Background_Ocean();
                        case 1: 
                            return new TuxPlanetSpeedrunAnyPercentLibrary.Background_Arctis();
                        default: 
                            throw new System.Exception();
                    }
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.ITilemap", {
        $kind: "interface"
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.Button", {
        statics: {
            methods: {
                GetStandardPrimaryBackgroundColor: function () {
                    return new DTLibrary.DTColor.ctor(235, 235, 235);
                },
                GetStandardSecondaryBackgroundColor: function () {
                    return new DTLibrary.DTColor.ctor(200, 200, 200);
                },
                GetStandardHoverColor: function () {
                    return new DTLibrary.DTColor.ctor(250, 249, 200);
                },
                GetStandardClickColor: function () {
                    return new DTLibrary.DTColor.ctor(252, 251, 154);
                }
            }
        },
        fields: {
            x: 0,
            y: 0,
            width: 0,
            height: 0,
            backgroundColor: null,
            hoverColor: null,
            clickColor: null,
            text: null,
            textXOffset: 0,
            textYOffset: 0,
            font: 0,
            isHover: false,
            isClicked: false,
            previousMouseInput: null
        },
        ctors: {
            ctor: function (x, y, width, height, backgroundColor, hoverColor, clickColor, text, textXOffset, textYOffset, font) {
                this.$initialize();
                this.x = x;
                this.y = y;
                this.width = width;
                this.height = height;
                this.backgroundColor = backgroundColor;
                this.hoverColor = hoverColor;
                this.clickColor = clickColor;
                this.text = text;
                this.textXOffset = textXOffset;
                this.textYOffset = textYOffset;
                this.font = font;

                this.isHover = false;
                this.isClicked = false;

                this.previousMouseInput = null;
            }
        },
        methods: {
            IsHover: function (mouseInput) {
                var mouseX = mouseInput.DTLibrary$IMouse$GetX();
                var mouseY = mouseInput.DTLibrary$IMouse$GetY();
                return this.x <= mouseX && mouseX <= ((this.x + this.width) | 0) && this.y <= mouseY && mouseY <= ((this.y + this.height) | 0);
            },
            /**
             * Returns whether or not the user has clicked the button
             *
             * @instance
             * @public
             * @this TuxPlanetSpeedrunAnyPercentLibrary.Button
             * @memberof TuxPlanetSpeedrunAnyPercentLibrary.Button
             * @param   {DTLibrary.IMouse}    mouseInput            
             * @param   {DTLibrary.IMouse}    previousMouseInput
             * @return  {boolean}
             */
            ProcessFrame: function (mouseInput, previousMouseInput) {
                if (this.previousMouseInput != null) {
                    previousMouseInput = this.previousMouseInput;
                }

                this.previousMouseInput = new DTLibrary.CopiedMouse(mouseInput);

                var inRange = this.IsHover(mouseInput);

                this.isHover = inRange;

                if (mouseInput.DTLibrary$IMouse$IsLeftMouseButtonPressed() && !previousMouseInput.DTLibrary$IMouse$IsLeftMouseButtonPressed()) {
                    if (inRange) {
                        this.isClicked = true;
                    }
                }

                if (this.isClicked && !mouseInput.DTLibrary$IMouse$IsLeftMouseButtonPressed() && previousMouseInput.DTLibrary$IMouse$IsLeftMouseButtonPressed()) {
                    this.isClicked = false;

                    if (inRange) {
                        return true;
                    }
                }

                return false;
            },
            Render: function (displayOutput) {
                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle(this.x, this.y, ((this.width - 1) | 0), ((this.height - 1) | 0), this.isClicked ? this.clickColor : (this.isHover ? this.hoverColor : this.backgroundColor), true);

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle(this.x, this.y, this.width, this.height, DTLibrary.DTColor.Black(), false);

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText(((this.x + this.textXOffset) | 0), ((((this.y + this.height) | 0) - this.textYOffset) | 0), this.text, this.font, DTLibrary.DTColor.Black());
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.CameraState", {
        statics: {
            fields: {
                CUTSCENE_CAMERA_SPEED: 0
            },
            ctors: {
                init: function () {
                    this.CUTSCENE_CAMERA_SPEED = 500;
                }
            },
            methods: {
                GetCameraState: function (x, y) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.CameraState(x, y);
                },
                SmoothCameraState: function (currentCameraX, currentCameraY, destinationCameraX, destinationCameraY, elapsedMicrosPerFrame, cameraSpeedInPixelsPerSecond) {
                    var maxDistancePerFrame = (Bridge.Int.div(Bridge.Int.mul((elapsedMicrosPerFrame >> 3), cameraSpeedInPixelsPerSecond), (125000))) | 0;

                    if (maxDistancePerFrame <= 0) {
                        maxDistancePerFrame = 1;
                    }

                    var newX;
                    var newY;

                    if (Math.abs(((currentCameraX - destinationCameraX) | 0)) <= maxDistancePerFrame) {
                        newX = destinationCameraX;
                    } else {
                        newX = currentCameraX < destinationCameraX ? (((currentCameraX + maxDistancePerFrame) | 0)) : (((currentCameraX - maxDistancePerFrame) | 0));
                    }

                    if (Math.abs(((currentCameraY - destinationCameraY) | 0)) <= maxDistancePerFrame) {
                        newY = destinationCameraY;
                    } else {
                        newY = currentCameraY < destinationCameraY ? (((currentCameraY + maxDistancePerFrame) | 0)) : (((currentCameraY - maxDistancePerFrame) | 0));
                    }

                    return new TuxPlanetSpeedrunAnyPercentLibrary.CameraState(newX, newY);
                },
                SmoothCameraState$1: function (currentCamera, destinationCameraX, destinationCameraY, elapsedMicrosPerFrame, cameraSpeedInPixelsPerSecond) {
                    return TuxPlanetSpeedrunAnyPercentLibrary.CameraState.SmoothCameraState(currentCamera.X, currentCamera.Y, destinationCameraX, destinationCameraY, elapsedMicrosPerFrame, cameraSpeedInPixelsPerSecond);
                },
                SmoothCameraState$2: function (currentCamera, destinationCamera, elapsedMicrosPerFrame, cameraSpeedInPixelsPerSecond) {
                    return TuxPlanetSpeedrunAnyPercentLibrary.CameraState.SmoothCameraState(currentCamera.X, currentCamera.Y, destinationCamera.X, destinationCamera.Y, elapsedMicrosPerFrame, cameraSpeedInPixelsPerSecond);
                }
            }
        },
        fields: {
            X: 0,
            Y: 0
        },
        ctors: {
            ctor: function (x, y) {
                this.$initialize();
                this.X = x;
                this.Y = y;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.CameraStateProcessing", {
        statics: {
            methods: {
                ComputeCameraState: function (tuxXMibi, tuxYMibi, tuxTeleportStartingLocation, tuxTeleportInProgressElapsedMicros, tilemap, windowWidth, windowHeight) {
                    if (tuxTeleportInProgressElapsedMicros != null) {
                        var deltaX = System.Int64(tuxXMibi - tuxTeleportStartingLocation.Item1);
                        var deltaY = System.Int64(tuxYMibi - tuxTeleportStartingLocation.Item2);

                        tuxXMibi = System.Int64.clip32(System.Int64(tuxTeleportStartingLocation.Item1).add(deltaX.mul(System.Int64(System.Nullable.getValue(tuxTeleportInProgressElapsedMicros))).div(System.Int64(TuxPlanetSpeedrunAnyPercentLibrary.TuxState.TELEPORT_DURATION))));
                        tuxYMibi = System.Int64.clip32(System.Int64(tuxTeleportStartingLocation.Item2).add(deltaY.mul(System.Int64(System.Nullable.getValue(tuxTeleportInProgressElapsedMicros))).div(System.Int64(TuxPlanetSpeedrunAnyPercentLibrary.TuxState.TELEPORT_DURATION))));
                    }

                    var x = tuxXMibi >> 10;
                    var y = tuxYMibi >> 10;

                    var halfWindowWidth = windowWidth >> 1;
                    var halfWindowHeight = windowHeight >> 1;

                    var maxX = (tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetWidth() - halfWindowWidth) | 0;
                    var maxY = (tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetHeight() - halfWindowHeight) | 0;

                    if (x > maxX) {
                        x = maxX;
                    }
                    if (x < halfWindowWidth) {
                        x = halfWindowWidth;
                    }

                    if (y > maxY) {
                        y = maxY;
                    }

                    if (y < halfWindowHeight) {
                        y = halfWindowHeight;
                    }

                    return TuxPlanetSpeedrunAnyPercentLibrary.CameraState.GetCameraState(x, y);
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.CollisionProcessing_Tux", {
        statics: {
            methods: {
                ProcessFrame: function (tuxState, enemiesImmutable, debug_tuxInvulnerable, soundOutput) {
                    if (tuxState.IsDead || tuxState.TeleportInProgressElapsedMicros != null || tuxState.HasFinishedLevel) {
                        return new TuxPlanetSpeedrunAnyPercentLibrary.CollisionProcessing_Tux.Result(tuxState, enemiesImmutable, null);
                    }

                    var newEnemies = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).$ctor2(System.Array.getCount(enemiesImmutable, TuxPlanetSpeedrunAnyPercentLibrary.IEnemy));
                    var newlyKilledEnemies = null;

                    var tuxHitbox = tuxState.GetHitbox();

                    var newTuxState = tuxState;
                    var isTuxDead = false;

                    var numEnemies = System.Array.getCount(enemiesImmutable, TuxPlanetSpeedrunAnyPercentLibrary.IEnemy);
                    for (var enemiesIndex = 0; enemiesIndex < numEnemies; enemiesIndex = (enemiesIndex + 1) | 0) {
                        var enemy = System.Array.getItem(enemiesImmutable, enemiesIndex, TuxPlanetSpeedrunAnyPercentLibrary.IEnemy);

                        var enemyDamageBoxes = enemy.TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDamageBoxes();

                        var isSquished = false;
                        var hasCollided = false;

                        if (enemyDamageBoxes != null) {
                            var numDamageBoxes = System.Array.getCount(enemyDamageBoxes, TuxPlanetSpeedrunAnyPercentLibrary.Hitbox);
                            for (var i = 0; i < numDamageBoxes; i = (i + 1) | 0) {
                                var enemyDamageBox = System.Array.getItem(enemyDamageBoxes, i, TuxPlanetSpeedrunAnyPercentLibrary.Hitbox);

                                if (TuxPlanetSpeedrunAnyPercentLibrary.CollisionProcessing_Tux.HasCollided(tuxHitbox, enemyDamageBox)) {
                                    isSquished = tuxHitbox.Y > ((enemyDamageBox.Y + (enemyDamageBox.Height >> 1)) | 0) || tuxState.YSpeedInMibipixelsPerSecond < 0;
                                    break;
                                }
                            }
                        }

                        if (!isSquished) {
                            var enemyHitboxes = enemy.TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetHitboxes();
                            if (enemyHitboxes != null) {
                                var numHitboxes = System.Array.getCount(enemyHitboxes, TuxPlanetSpeedrunAnyPercentLibrary.Hitbox);
                                for (var i1 = 0; i1 < numHitboxes; i1 = (i1 + 1) | 0) {
                                    var enemyHitbox = System.Array.getItem(enemyHitboxes, i1, TuxPlanetSpeedrunAnyPercentLibrary.Hitbox);
                                    if (TuxPlanetSpeedrunAnyPercentLibrary.CollisionProcessing_Tux.HasCollided(tuxHitbox, enemyHitbox)) {
                                        hasCollided = true;
                                        break;
                                    }
                                }
                            }
                        }

                        if (isSquished) {
                            soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$PlaySound(TuxPlanetSpeedrunAnyPercentLibrary.GameSound.Squish);
                            if (newlyKilledEnemies == null) {
                                newlyKilledEnemies = new (System.Collections.Generic.List$1(System.String)).ctor();
                            }
                            newlyKilledEnemies.add(enemy.TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId);
                            newEnemies.add(enemy.TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDeadEnemy());

                            newTuxState = newTuxState.SetYSpeedInMibipixelsPerSecond(TuxPlanetSpeedrunAnyPercentLibrary.TuxState.JUMP_Y_SPEED).SetIsStillHoldingJumpButton(true).SetLastTimeOnGround(null).SetHasAlreadyUsedTeleport(false);
                        } else if (hasCollided && !debug_tuxInvulnerable) {
                            isTuxDead = true;
                            newEnemies.add(enemy);
                        } else {
                            newEnemies.add(enemy);
                        }
                    }

                    if (isTuxDead) {
                        newTuxState = newTuxState.Kill();
                    }

                    return new TuxPlanetSpeedrunAnyPercentLibrary.CollisionProcessing_Tux.Result(newTuxState, newEnemies, newlyKilledEnemies);
                },
                HasCollided: function (a, b) {
                    if (a.X > ((b.X + b.Width) | 0)) {
                        return false;
                    }

                    if (b.X > ((a.X + a.Width) | 0)) {
                        return false;
                    }

                    if (a.Y > ((b.Y + b.Height) | 0)) {
                        return false;
                    }

                    if (b.Y > ((a.Y + a.Height) | 0)) {
                        return false;
                    }

                    return true;
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.CollisionProcessing_Tux.Result", {
        $kind: "nested class",
        fields: {
            NewTuxState: null,
            NewEnemies: null,
            NewlyKilledEnemiesNullable: null
        },
        ctors: {
            ctor: function (newTuxState, newEnemiesImmutable, newlyKilledEnemiesImmutableNullable) {
                this.$initialize();
                this.NewTuxState = newTuxState;
                this.NewEnemies = newEnemiesImmutable;
                this.NewlyKilledEnemiesNullable = newlyKilledEnemiesImmutableNullable;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset", {
        $kind: "nested class",
        fields: {
            Tilemap: null,
            XOffset: 0,
            YOffset: 0,
            AlwaysIncludeTilemap: false
        },
        ctors: {
            ctor: function (tilemap, xOffset, yOffset, alwaysIncludeTilemap) {
                this.$initialize();
                this.Tilemap = tilemap;
                this.XOffset = xOffset;
                this.YOffset = yOffset;
                this.AlwaysIncludeTilemap = alwaysIncludeTilemap;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.Credits_DesignAndCoding", {
        statics: {
            methods: {
                GetWebBrowserVersionText: function () {
                    return "Design and coding by dtsudo: \n\nThis game is a fangame of SuperTux and SuperTux Advance. \n\nThis game is open source, licensed under GPL 3.0. \n(Code dependencies and images/font/sound/music licensed under \nother open source licenses.) \n\nThe source code is written in C# and transpiled to javascript using \nBridge.NET. \n\nSee the source code for more information (including licensing \ndetails).";
                },
                GetDesktopVersionText: function () {
                    return "";
                },
                IsHoverOverGitHubUrl: function (mouse, isWebBrowserVersion, width, height) {
                    if (!isWebBrowserVersion) {
                        return false;
                    }

                    var mouseX = mouse.DTLibrary$IMouse$GetX();
                    var mouseY = mouse.DTLibrary$IMouse$GetY();

                    return 394 <= mouseX && mouseX <= 745 && ((height - 38) | 0) <= mouseY && mouseY <= ((height - 13) | 0);
                },
                Render: function (displayOutput, isHoverOverGitHubUrl, isWebBrowserVersion, width, height) {
                    if (isWebBrowserVersion) {
                        var text = TuxPlanetSpeedrunAnyPercentLibrary.Credits_DesignAndCoding.GetWebBrowserVersionText();

                        displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText(10, ((height - 10) | 0), text, TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont20Pt, DTLibrary.DTColor.Black());

                        displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText(395, ((height - 10) | 0), "https://github.com/dtsudo", TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont20Pt, isHoverOverGitHubUrl ? new DTLibrary.DTColor.ctor(0, 0, 255) : DTLibrary.DTColor.Black());
                    } else {
                        var text1 = TuxPlanetSpeedrunAnyPercentLibrary.Credits_DesignAndCoding.GetDesktopVersionText();

                        displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText(10, ((height - 10) | 0), text1, TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont20Pt, DTLibrary.DTColor.Black());
                    }
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.Credits_Font", {
        statics: {
            methods: {
                Render: function (displayOutput, width, height) {
                    var text = "The font used in this game was generated by metaflop and then \nslightly modified by dtsudo. \nhttps://www.metaflop.com/modulator \n\nThe font is licensed under SIL Open Font License v1.1 \nSee the source code for more details about the license. \n";

                    displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText(10, ((height - 10) | 0), text, TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont20Pt, DTLibrary.DTColor.Black());
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.Credits_Images", {
        statics: {
            methods: {
                GetText: function () {
                    return "Image files created by: \n* Benjamin K. Smith, Lanea Zimmerman (AKA Sharm), Daniel Eddeland, \n   William.Thompsonj, Nushio, Adrix89 \n* FrostC \n* Grumbel \n* Jetrel \n* Kelvin Shadewing \n* Kenney \n* KnoblePersona \n* Nemisys \n\nSee the source code for more information (including licensing \ndetails).";
                },
                Render: function (displayOutput, width, height) {
                    displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText(10, ((height - 10) | 0), TuxPlanetSpeedrunAnyPercentLibrary.Credits_Images.GetText(), TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont20Pt, DTLibrary.DTColor.Black());
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.Credits_Music", {
        statics: {
            methods: {
                GetText: function () {
                    return "Music track authors: \n* cynicmusic \n* Jason Lavallee \n* Lukas Nystrand \n* migfus20 \n* Cal McEachern \n* wansti \n\nSee the source code for more information (including licensing \ndetails).";
                },
                Render: function (displayOutput, width, height) {
                    displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText(10, ((height - 10) | 0), TuxPlanetSpeedrunAnyPercentLibrary.Credits_Music.GetText(), TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont20Pt, DTLibrary.DTColor.Black());
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.Credits_Sound", {
        statics: {
            methods: {
                GetText: function () {
                    return "Sound effects created by: \n* Basto \n* Kenney \n* Little Robot Sound Factory \n* SuperTux team (Some_Person, wansti) \n\nSee the source code for more information (including licensing \ndetails).";
                },
                Render: function (displayOutput, width, height) {
                    displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText(10, ((height - 10) | 0), TuxPlanetSpeedrunAnyPercentLibrary.Credits_Sound.GetText(), TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont20Pt, DTLibrary.DTColor.Black());
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.CreditsFrame.Tab", {
        $kind: "nested enum",
        statics: {
            fields: {
                DesignAndCoding: 0,
                Images: 1,
                Font: 2,
                Sound: 3,
                Music: 4
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.CreditsFrame.TabButton", {
        $kind: "nested class",
        fields: {
            X: 0,
            Y: 0,
            Width: 0,
            Height: 0,
            Tab: 0,
            TabName: null
        },
        ctors: {
            ctor: function (x, y, width, height, tab, tabName) {
                this.$initialize();
                this.X = x;
                this.Y = y;
                this.Width = width;
                this.Height = height;
                this.Tab = tab;
                this.TabName = tabName;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.ICutscene", {
        $kind: "interface"
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_KonqiBossDefeated.Status", {
        $kind: "nested enum",
        statics: {
            fields: {
                A_Dialogue: 0,
                B_KonqiTeleportsOut: 1
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_KonqiBossIntro.Status", {
        $kind: "nested enum",
        statics: {
            fields: {
                A_SpawnKonqi: 0,
                B_Camera: 1,
                C_Dialogue: 2,
                D_Delay: 3
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_Level8.Status", {
        $kind: "nested enum",
        statics: {
            fields: {
                A_Camera: 0,
                B_Dialogue: 1,
                C_Win: 2
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_SaveState.Status", {
        $kind: "nested enum",
        statics: {
            fields: {
                A_Camera: 0,
                B_Dialogue: 1,
                C_KonqiDisappear: 2,
                D_Camera: 3
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_Teleport.Status", {
        $kind: "nested enum",
        statics: {
            fields: {
                A_Camera: 0,
                B_Dialogue: 1,
                C_KonqiDisappear: 2,
                D_Camera: 3
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_TimeSlowdown.Status", {
        $kind: "nested enum",
        statics: {
            fields: {
                A_Camera: 0,
                B_Dialogue: 1,
                C_KonqiDisappear: 2,
                D_Camera: 3
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_YetiBossDefeated.Status", {
        $kind: "nested enum",
        statics: {
            fields: {
                A_Dialogue: 0,
                B_Camera: 1
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_YetiBossIntro.Status", {
        $kind: "nested enum",
        statics: {
            fields: {
                A_SpawnEnemies: 0,
                B_Camera: 1,
                C_Dialogue1: 2,
                D_KonqiDisappear: 3,
                E_Dialogue2: 4,
                F_Delay: 5
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.CutsceneProcessing", {
        statics: {
            fields: {
                SAVESTATE_CUTSCENE: null,
                TELEPORT_CUTSCENE: null,
                TIME_SLOWDOWN_CUTSCENE: null,
                LEVEL_8_CUTSCENE: null,
                KONQI_BOSS_INTRO_CUTSCENE: null,
                KONQI_BOSS_DEFEATED_CUTSCENE: null,
                YETI_BOSS_INTRO_CUTSCENE: null,
                YETI_BOSS_DEFEATED_CUTSCENE: null
            },
            ctors: {
                init: function () {
                    this.SAVESTATE_CUTSCENE = "savestate_cutscene";
                    this.TELEPORT_CUTSCENE = "teleport_cutscene";
                    this.TIME_SLOWDOWN_CUTSCENE = "time_slowdown_cutscene";
                    this.LEVEL_8_CUTSCENE = "level_8_cutscene";
                    this.KONQI_BOSS_INTRO_CUTSCENE = "konqi_boss_intro_cutscene";
                    this.KONQI_BOSS_DEFEATED_CUTSCENE = "konqi_boss_defeated_cutscene";
                    this.YETI_BOSS_INTRO_CUTSCENE = "yeti_boss_intro_cutscene";
                    this.YETI_BOSS_DEFEATED_CUTSCENE = "yeti_boss_defeated_cutscene";
                }
            },
            methods: {
                GetCutscene: function (cutsceneName, customLevelInfo) {
                    if (Bridge.referenceEquals(cutsceneName, TuxPlanetSpeedrunAnyPercentLibrary.CutsceneProcessing.SAVESTATE_CUTSCENE)) {
                        return TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_SaveState.GetCutscene();
                    } else {
                        if (Bridge.referenceEquals(cutsceneName, TuxPlanetSpeedrunAnyPercentLibrary.CutsceneProcessing.TELEPORT_CUTSCENE)) {
                            return TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_Teleport.GetCutscene();
                        } else {
                            if (Bridge.referenceEquals(cutsceneName, TuxPlanetSpeedrunAnyPercentLibrary.CutsceneProcessing.TIME_SLOWDOWN_CUTSCENE)) {
                                return TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_TimeSlowdown.GetCutscene();
                            } else {
                                if (Bridge.referenceEquals(cutsceneName, TuxPlanetSpeedrunAnyPercentLibrary.CutsceneProcessing.LEVEL_8_CUTSCENE)) {
                                    return TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_Level8.GetCutscene();
                                } else {
                                    if (Bridge.referenceEquals(cutsceneName, TuxPlanetSpeedrunAnyPercentLibrary.CutsceneProcessing.KONQI_BOSS_INTRO_CUTSCENE)) {
                                        return TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_KonqiBossIntro.GetCutscene(customLevelInfo);
                                    } else {
                                        if (Bridge.referenceEquals(cutsceneName, TuxPlanetSpeedrunAnyPercentLibrary.CutsceneProcessing.KONQI_BOSS_DEFEATED_CUTSCENE)) {
                                            return TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_KonqiBossDefeated.GetCutscene(customLevelInfo);
                                        } else {
                                            if (Bridge.referenceEquals(cutsceneName, TuxPlanetSpeedrunAnyPercentLibrary.CutsceneProcessing.YETI_BOSS_INTRO_CUTSCENE)) {
                                                return TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_YetiBossIntro.GetCutscene(customLevelInfo);
                                            } else {
                                                if (Bridge.referenceEquals(cutsceneName, TuxPlanetSpeedrunAnyPercentLibrary.CutsceneProcessing.YETI_BOSS_DEFEATED_CUTSCENE)) {
                                                    return TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_YetiBossDefeated.GetCutscene(customLevelInfo);
                                                } else {
                                                    throw new System.Exception();
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.CutsceneProcessing.Result", {
        $kind: "nested class",
        fields: {
            Move: null,
            CameraState: null,
            Enemies: null,
            NewlyAddedLevelFlags: null,
            Cutscene: null,
            ShouldGrantSaveStatePower: false,
            ShouldGrantTimeSlowdownPower: false,
            ShouldGrantTeleportPower: false
        },
        ctors: {
            ctor: function (move, cameraState, enemies, newlyAddedLevelFlags, cutscene, shouldGrantSaveStatePower, shouldGrantTimeSlowdownPower, shouldGrantTeleportPower) {
                this.$initialize();
                this.Move = move;
                this.CameraState = cameraState;
                this.Enemies = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).$ctor1(enemies);
                if (newlyAddedLevelFlags == null) {
                    this.NewlyAddedLevelFlags = new (System.Collections.Generic.List$1(System.String)).ctor();
                } else {
                    this.NewlyAddedLevelFlags = new (System.Collections.Generic.List$1(System.String)).$ctor1(newlyAddedLevelFlags);
                }
                this.Cutscene = cutscene;
                this.ShouldGrantSaveStatePower = shouldGrantSaveStatePower;
                this.ShouldGrantTimeSlowdownPower = shouldGrantTimeSlowdownPower;
                this.ShouldGrantTeleportPower = shouldGrantTeleportPower;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.Dialogue", {
        statics: {
            fields: {
                MICROS_PER_CHARACTER: 0
            },
            ctors: {
                init: function () {
                    this.MICROS_PER_CHARACTER = 30000;
                }
            },
            methods: {
                GetDialogue: function (x, y, width, height, text) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.Dialogue(x, y, width, height, text, 0, true, TuxPlanetSpeedrunAnyPercentLibrary.Move.EmptyMove());
                }
            }
        },
        fields: {
            x: 0,
            y: 0,
            width: 0,
            height: 0,
            text: null,
            elapsedMicros: 0,
            isFirst: false,
            previousMove: null
        },
        ctors: {
            ctor: function (x, y, width, height, text, elapsedMicros, isFirst, previousMove) {
                this.$initialize();
                this.x = x;
                this.y = y;
                this.width = width;
                this.height = height;
                this.text = text;
                this.elapsedMicros = elapsedMicros;
                this.isFirst = isFirst;
                this.previousMove = previousMove;
            }
        },
        methods: {
            GetMaxElapsedMicros: function () {
                return Bridge.Int.mul(this.text.length, TuxPlanetSpeedrunAnyPercentLibrary.Dialogue.MICROS_PER_CHARACTER);
            },
            ProcessFrame: function (move, elapsedMicrosPerFrame) {
                var newElapsedMicros = (this.elapsedMicros + elapsedMicrosPerFrame) | 0;

                var hasFinishedRenderingText;

                if (newElapsedMicros >= this.GetMaxElapsedMicros()) {
                    newElapsedMicros = (this.GetMaxElapsedMicros() + 1) | 0;
                    hasFinishedRenderingText = true;
                } else {
                    hasFinishedRenderingText = false;
                }

                var done = false;

                if (move.Jumped && !this.previousMove.Jumped && !this.isFirst) {
                    if (hasFinishedRenderingText) {
                        done = true;
                    } else {
                        newElapsedMicros = (this.GetMaxElapsedMicros() + 1) | 0;
                    }
                }

                return new TuxPlanetSpeedrunAnyPercentLibrary.Dialogue.Result(new TuxPlanetSpeedrunAnyPercentLibrary.Dialogue(this.x, this.y, this.width, this.height, this.text, newElapsedMicros, false, move), done);
            },
            Render: function (displayOutput, windowWidth, windowHeight) {
                var numCharactersToRender = (Bridge.Int.div(this.elapsedMicros, TuxPlanetSpeedrunAnyPercentLibrary.Dialogue.MICROS_PER_CHARACTER)) | 0;

                var textToRender;

                if (numCharactersToRender >= this.text.length) {
                    textToRender = this.text;
                } else {
                    textToRender = this.text.substr(0, numCharactersToRender);
                }

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle(this.x, this.y, this.width, this.height, new DTLibrary.DTColor.$ctor1(0, 0, 0, 150), true);

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText(((this.x + 5) | 0), ((((this.y + this.height) | 0) - 5) | 0), textToRender, TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont20Pt, DTLibrary.DTColor.White());
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.Dialogue.Result", {
        $kind: "nested class",
        fields: {
            Dialogue: null,
            IsDone: false
        },
        ctors: {
            ctor: function (dialogue, isDone) {
                this.$initialize();
                this.Dialogue = dialogue;
                this.IsDone = isDone;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.DialogueList", {
        fields: {
            dialogues: null
        },
        ctors: {
            ctor: function (dialogues) {
                this.$initialize();
                this.dialogues = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Dialogue)).$ctor1(dialogues);
            }
        },
        methods: {
            ProcessFrame: function (move, elapsedMicrosPerFrame) {
                var dialogueResult = System.Array.getItem(this.dialogues, 0, TuxPlanetSpeedrunAnyPercentLibrary.Dialogue).ProcessFrame(move, elapsedMicrosPerFrame);

                var newDialogues;
                var isDone = false;

                if (dialogueResult.IsDone) {
                    if (System.Array.getCount(this.dialogues, TuxPlanetSpeedrunAnyPercentLibrary.Dialogue) === 1) {
                        newDialogues = function (_o1) {
                                _o1.add(dialogueResult.Dialogue);
                                return _o1;
                            }(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Dialogue)).ctor());
                        isDone = true;
                    } else {
                        newDialogues = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Dialogue)).ctor();
                        for (var i = 1; i < System.Array.getCount(this.dialogues, TuxPlanetSpeedrunAnyPercentLibrary.Dialogue); i = (i + 1) | 0) {
                            newDialogues.add(System.Array.getItem(this.dialogues, i, TuxPlanetSpeedrunAnyPercentLibrary.Dialogue));
                        }
                    }
                } else {
                    newDialogues = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Dialogue)).ctor();
                    newDialogues.add(dialogueResult.Dialogue);
                    for (var i1 = 1; i1 < System.Array.getCount(this.dialogues, TuxPlanetSpeedrunAnyPercentLibrary.Dialogue); i1 = (i1 + 1) | 0) {
                        newDialogues.add(System.Array.getItem(this.dialogues, i1, TuxPlanetSpeedrunAnyPercentLibrary.Dialogue));
                    }
                }

                return new TuxPlanetSpeedrunAnyPercentLibrary.DialogueList.Result(new TuxPlanetSpeedrunAnyPercentLibrary.DialogueList(newDialogues), isDone);
            },
            Render: function (displayOutput, windowWidth, windowHeight) {
                System.Array.getItem(this.dialogues, 0, TuxPlanetSpeedrunAnyPercentLibrary.Dialogue).Render(displayOutput, windowWidth, windowHeight);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.DialogueList.Result", {
        $kind: "nested class",
        fields: {
            DialogueList: null,
            IsDone: false
        },
        ctors: {
            ctor: function (dialogueList, isDone) {
                this.$initialize();
                this.DialogueList = dialogueList;
                this.IsDone = isDone;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.ElapsedTimeUtil", {
        statics: {
            methods: {
                GetElapsedTimeString: function (elapsedMillis) {
                    var elapsedMinutes = DTLibrary.StringUtil.ToStringCultureInvariant((((Bridge.Int.div(((Bridge.Int.div(elapsedMillis, 1000)) | 0), 60)) | 0)));
                    if (elapsedMinutes.length < 2) {
                        elapsedMinutes = "0" + (elapsedMinutes || "");
                    }
                    var elapsedSeconds = DTLibrary.StringUtil.ToStringCultureInvariant(((((Bridge.Int.div(elapsedMillis, 1000)) | 0)) % 60));
                    if (elapsedSeconds.length < 2) {
                        elapsedSeconds = "0" + (elapsedSeconds || "");
                    }
                    var elapsedCentiseconds = DTLibrary.StringUtil.ToStringCultureInvariant((((Bridge.Int.div((elapsedMillis % 1000), 10)) | 0)));
                    if (elapsedCentiseconds.length < 2) {
                        elapsedCentiseconds = "0" + (elapsedCentiseconds || "");
                    }

                    return (elapsedMinutes || "") + ":" + (elapsedSeconds || "") + "." + (elapsedCentiseconds || "");
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.IEnemy", {
        $kind: "interface"
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemyIdGenerator", {
        fields: {
            id: 0
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                this.id = 1;
            }
        },
        methods: {
            GetNewId: function () {
                var newId = "enemyId" + (DTLibrary.StringUtil.ToStringCultureInvariant(this.id) || "");
                this.id = (this.id + 1) | 0;
                return newId;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiBossDefeat.Status", {
        $kind: "nested enum",
        statics: {
            fields: {
                A_Start: 0,
                B_Jumping: 1,
                C_Teleporting: 2,
                D_Finish: 3,
                E_Disappear: 4
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.Tilemap.IExtraEnemyToSpawn", {
        $kind: "nested interface"
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing", {
        statics: {
            methods: {
                ProcessFrame: function (tilemap, cameraX, cameraY, windowWidth, windowHeight, tuxState, random, enemies, killedEnemies, levelFlags, soundOutput, elapsedMicrosPerFrame) {
                    var enemiesCount = System.Array.getCount(enemies, TuxPlanetSpeedrunAnyPercentLibrary.IEnemy);
                    var killedEnemiesCount = System.Array.getCount(killedEnemies, System.String);

                    var newlyAddedLevelFlags = new (System.Collections.Generic.HashSet$1(System.String)).ctor();

                    var existingAndKilledEnemies = new (System.Collections.Generic.HashSet$1(System.String)).ctor();
                    for (var i = 0; i < enemiesCount; i = (i + 1) | 0) {
                        existingAndKilledEnemies.add(System.Array.getItem(enemies, i, TuxPlanetSpeedrunAnyPercentLibrary.IEnemy).TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId);
                    }

                    var killedEnemiesSet = new (System.Collections.Generic.HashSet$1(System.String)).ctor();
                    for (var i1 = 0; i1 < killedEnemiesCount; i1 = (i1 + 1) | 0) {
                        var killedEnemy = System.Array.getItem(killedEnemies, i1, System.String);
                        killedEnemiesSet.add(killedEnemy);
                        existingAndKilledEnemies.add(killedEnemy);
                    }

                    var newEnemies = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor();
                    var newlyKilledEnemies = new (System.Collections.Generic.List$1(System.String)).ctor();

                    var potentialNewEnemies = tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetEnemies(0, 0);
                    var potentialNewEnemiesCount = System.Array.getCount(potentialNewEnemies, TuxPlanetSpeedrunAnyPercentLibrary.IEnemy);
                    for (var i2 = 0; i2 < potentialNewEnemiesCount; i2 = (i2 + 1) | 0) {
                        var potentialNewEnemy = System.Array.getItem(potentialNewEnemies, i2, TuxPlanetSpeedrunAnyPercentLibrary.IEnemy);
                        if (!existingAndKilledEnemies.contains(potentialNewEnemy.TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId)) {
                            newEnemies.add(potentialNewEnemy);
                        }
                    }

                    var processedEnemies = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor();
                    var processedEnemiesSet = new (System.Collections.Generic.HashSet$1(System.String)).ctor();

                    for (var enemyIndex = 0; enemyIndex < enemiesCount; enemyIndex = (enemyIndex + 1) | 0) {
                        var enemy = System.Array.getItem(enemies, enemyIndex, TuxPlanetSpeedrunAnyPercentLibrary.IEnemy);

                        var result = enemy.TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ProcessFrame(cameraX, cameraY, windowWidth, windowHeight, elapsedMicrosPerFrame, tuxState, random, tilemap, levelFlags, soundOutput);

                        if (result.EnemiesNullable != null) {
                            var count = System.Array.getCount(result.EnemiesNullable, TuxPlanetSpeedrunAnyPercentLibrary.IEnemy);
                            for (var i3 = 0; i3 < count; i3 = (i3 + 1) | 0) {
                                var e = System.Array.getItem(result.EnemiesNullable, i3, TuxPlanetSpeedrunAnyPercentLibrary.IEnemy);
                                if (!killedEnemiesSet.contains(e.TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId)) {
                                    var wasAdded = processedEnemiesSet.add(e.TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId);
                                    if (wasAdded) {
                                        processedEnemies.add(e);
                                    }
                                }
                            }
                        }

                        if (result.NewlyKilledEnemiesNullable != null) {
                            newlyKilledEnemies.AddRange(result.NewlyKilledEnemiesNullable);
                        }

                        if (result.NewlyAddedLevelFlagsNullable != null) {
                            var count1 = System.Array.getCount(result.NewlyAddedLevelFlagsNullable, System.String);
                            for (var i4 = 0; i4 < count1; i4 = (i4 + 1) | 0) {
                                newlyAddedLevelFlags.add(System.Array.getItem(result.NewlyAddedLevelFlagsNullable, i4, System.String));
                            }
                        }
                    }

                    var newEnemiesCount = newEnemies.Count;
                    for (var newEnemiesIndex = 0; newEnemiesIndex < newEnemiesCount; newEnemiesIndex = (newEnemiesIndex + 1) | 0) {
                        var enemy1 = newEnemies.getItem(newEnemiesIndex);

                        var result1 = enemy1.TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ProcessFrame(cameraX, cameraY, windowWidth, windowHeight, elapsedMicrosPerFrame, tuxState, random, tilemap, levelFlags, soundOutput);

                        if (result1.EnemiesNullable != null) {
                            var count2 = System.Array.getCount(result1.EnemiesNullable, TuxPlanetSpeedrunAnyPercentLibrary.IEnemy);
                            for (var i5 = 0; i5 < count2; i5 = (i5 + 1) | 0) {
                                var e1 = System.Array.getItem(result1.EnemiesNullable, i5, TuxPlanetSpeedrunAnyPercentLibrary.IEnemy);
                                if (!killedEnemiesSet.contains(e1.TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId)) {
                                    var wasAdded1 = processedEnemiesSet.add(e1.TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId);
                                    if (wasAdded1) {
                                        processedEnemies.add(e1);
                                    }
                                }
                            }
                        }

                        if (result1.NewlyKilledEnemiesNullable != null) {
                            newlyKilledEnemies.AddRange(result1.NewlyKilledEnemiesNullable);
                        }

                        if (result1.NewlyAddedLevelFlagsNullable != null) {
                            var count3 = System.Array.getCount(result1.NewlyAddedLevelFlagsNullable, System.String);
                            for (var i6 = 0; i6 < count3; i6 = (i6 + 1) | 0) {
                                newlyAddedLevelFlags.add(System.Array.getItem(result1.NewlyAddedLevelFlagsNullable, i6, System.String));
                            }
                        }
                    }

                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(processedEnemies, newlyKilledEnemies, System.Linq.Enumerable.from(newlyAddedLevelFlags).toList(System.String));
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result", {
        $kind: "nested class",
        fields: {
            EnemiesNullable: null,
            NewlyKilledEnemiesNullable: null,
            NewlyAddedLevelFlagsNullable: null
        },
        ctors: {
            ctor: function (enemiesImmutableNullable, newlyKilledEnemiesImmutableNullable, newlyAddedLevelFlagsImmutableNullable) {
                this.$initialize();
                this.EnemiesNullable = enemiesImmutableNullable;
                this.NewlyKilledEnemiesNullable = newlyKilledEnemiesImmutableNullable;
                this.NewlyAddedLevelFlagsNullable = newlyAddedLevelFlagsImmutableNullable;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.GameFontUtil", {
        statics: {
            methods: {
                GetFontInfo: function (font) {
                    switch (font) {
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont12Pt: 
                            return new TuxPlanetSpeedrunAnyPercentLibrary.GameFontUtil.FontInfo("Metaflop/dtsimplefont.ttf", "Metaflop/dtsimplefont.woff", 12, "15.86", "15.5", "dtsimplefont12");
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont14Pt: 
                            return new TuxPlanetSpeedrunAnyPercentLibrary.GameFontUtil.FontInfo("Metaflop/dtsimplefont.ttf", "Metaflop/dtsimplefont.woff", 14, "19.31", "18.5", "dtsimplefont14");
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont16Pt: 
                            return new TuxPlanetSpeedrunAnyPercentLibrary.GameFontUtil.FontInfo("Metaflop/dtsimplefont.ttf", "Metaflop/dtsimplefont.woff", 16, "21.85", "23", "dtsimplefont16");
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont18Pt: 
                            return new TuxPlanetSpeedrunAnyPercentLibrary.GameFontUtil.FontInfo("Metaflop/dtsimplefont.ttf", "Metaflop/dtsimplefont.woff", 18, "24.19", "24", "dtsimplefont18");
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont20Pt: 
                            return new TuxPlanetSpeedrunAnyPercentLibrary.GameFontUtil.FontInfo("Metaflop/dtsimplefont.ttf", "Metaflop/dtsimplefont.woff", 20, "26.76", "28.2", "dtsimplefont20");
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont32Pt: 
                            return new TuxPlanetSpeedrunAnyPercentLibrary.GameFontUtil.FontInfo("Metaflop/dtsimplefont.ttf", "Metaflop/dtsimplefont.woff", 32, "42.95", "44", "dtsimplefont32");
                        default: 
                            throw new System.Exception();
                    }
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.GameFontUtil.FontInfo", {
        $kind: "nested class",
        fields: {
            TtfFontFilename: null,
            WoffFontFilename: null,
            FontSize: 0,
            JavascriptFontSize: null,
            LineHeight: null,
            MonoGameSpriteFontName: null
        },
        ctors: {
            ctor: function (ttfFontFilename, woffFontFilename, fontSize, javascriptFontSize, lineHeight, monoGameSpriteFontName) {
                this.$initialize();
                this.TtfFontFilename = ttfFontFilename;
                this.WoffFontFilename = woffFontFilename;
                this.FontSize = fontSize;
                this.JavascriptFontSize = javascriptFontSize;
                this.LineHeight = lineHeight;
                this.MonoGameSpriteFontName = monoGameSpriteFontName;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.GameImageUtil", {
        statics: {
            methods: {
                GetImageFilename: function (image) {
                    switch (image) {
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.SoundOn_Black: 
                            return "Kenney/SoundOn_Black.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.SoundOff_Black: 
                            return "Kenney/SoundOff_Black.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.MusicOn_Black: 
                            return "Kenney/MusicOn_Black.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.MusicOff_Black: 
                            return "Kenney/MusicOff_Black.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.SoundOn_White: 
                            return "Kenney/SoundOn_White.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.SoundOff_White: 
                            return "Kenney/SoundOff_White.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.MusicOn_White: 
                            return "Kenney/MusicOn_White.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.MusicOff_White: 
                            return "Kenney/MusicOff_White.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.TilemapSnow: 
                            return "KelvinShadewing/tssnow.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.TilemapCastle: 
                            return "KelvinShadewing/tsCastle.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.BossDoor: 
                            return "KelvinShadewing/boss-door.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Tux: 
                            return "KelvinShadewing/tux.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.TuxMirrored: 
                            return "KelvinShadewing/tux_mirrored.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Konqi: 
                            return "KelvinShadewing/konqi.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.KonqiMirrored: 
                            return "KelvinShadewing/konqi_mirrored.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.KonqiFire: 
                            return "KelvinShadewing/konqifire.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.KonqiFireMirrored: 
                            return "KelvinShadewing/konqifire_mirrored.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Yeti: 
                            return "KelvinShadewing/yeti.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.YetiMirrored: 
                            return "KelvinShadewing/yeti_mirrored.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Blazeborn: 
                            return "FrostC/Blazeborn.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.BlazebornMirrored: 
                            return "FrostC/Blazeborn_mirrored.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Smartcap: 
                            return "KelvinShadewing/smartcap.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.SmartcapMirrored: 
                            return "KelvinShadewing/smartcap_mirrored.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Bouncecap: 
                            return "KelvinShadewing/bouncecap.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.BouncecapMirrored: 
                            return "KelvinShadewing/bouncecap_mirrored.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Flyamanita: 
                            return "KelvinShadewing/flyamanita.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.FlyamanitaMirrored: 
                            return "KelvinShadewing/flyamanita_mirrored.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Snail: 
                            return "KelvinShadewing/snail.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.SnailMirrored: 
                            return "KelvinShadewing/snail_mirrored.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.SnailBlue: 
                            return "KelvinShadewing/snail-blue.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.SnailBlueMirrored: 
                            return "KelvinShadewing/snail-blue_mirrored.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.FishBlue: 
                            return "KelvinShadewing/fishblue.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.FishBlueMirrored: 
                            return "KelvinShadewing/fishblue_mirrored.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.FishGreen: 
                            return "KelvinShadewing/fishgreen.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.FishGreenMirrored: 
                            return "KelvinShadewing/fishgreen_mirrored.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.FishRed: 
                            return "KelvinShadewing/fishred.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.FishRedMirrored: 
                            return "KelvinShadewing/fishred_mirrored.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Orange: 
                            return "KelvinShadewing/orange.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.OrangeMirrored: 
                            return "KelvinShadewing/orange_mirrored.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Poof: 
                            return "KelvinShadewing/poof.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.BossHealth: 
                            return "KelvinShadewing/boss-health.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.C4: 
                            return "KelvinShadewing/c4.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Coin: 
                            return "KelvinShadewing/coin.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.EarthShell: 
                            return "KelvinShadewing/earthshell.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Igloo: 
                            return "KelvinShadewing/igloo.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Actors: 
                            return "KelvinShadewing/actors.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Solid: 
                            return "KelvinShadewing/solid.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Spikes: 
                            return "FrostC/spikes.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Flash: 
                            return "KelvinShadewing/tfFlash.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.ExplodeF: 
                            return "KelvinShadewing/explodeF.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Flame: 
                            return "KelvinShadewing/flame.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.FlameBlue: 
                            return "KelvinShadewing/flameBlue.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Lock: 
                            return "KelvinShadewing/lock.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.KeyCopper: 
                            return "KelvinShadewing/key-copper.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.KeySilver: 
                            return "KelvinShadewing/key-silver.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.KeyGold: 
                            return "KelvinShadewing/key-gold.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.KeyMythril: 
                            return "KelvinShadewing/key-mythril.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Signpost: 
                            return "Nemisys/signpost.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.PathDirt: 
                            return "BenCreating/PathDirt.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.ForestSnowy: 
                            return "BenCreating/Snow/ForestSnowy.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.RocksSnow: 
                            return "BenCreating/Snow/RocksSnow.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Snow: 
                            return "BenCreating/Snow/Snow.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.WaterCliffSnow: 
                            return "BenCreating/Snow/WaterCliffSnow.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Mountains: 
                            return "BenCreating/Mountains.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Towns: 
                            return "BenCreating/Grass/Towns.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.LevelIcons: 
                            return "KelvinShadewing/level-icons.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.TuxOverworld: 
                            return "KelvinShadewing/tuxO.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.WaterSurface: 
                            return "KelvinShadewing/watersurface.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.OceanBackground: 
                            return "KnoblePersona/ocean.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Arctis2: 
                            return "grumbel/arctis2.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.CaveBackground: 
                            return "KelvinShadewing/caveBackground.png";
                        default: 
                            throw new System.Exception();
                    }
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState", {
        statics: {
            fields: {
                MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS: 0,
                MARGIN_FOR_TILEMAP_DESPAWN_IN_PIXELS: 0
            },
            ctors: {
                init: function () {
                    this.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS = 250;
                    this.MARGIN_FOR_TILEMAP_DESPAWN_IN_PIXELS = 400;
                }
            }
        },
        fields: {
            LevelConfiguration: null,
            Background: null,
            Tilemap: null,
            Tux: null,
            Camera: null,
            LevelNameDisplay: null,
            LevelFlags: null,
            Enemies: null,
            KilledEnemies: null,
            MapKeyState: null,
            PreviousMove: null,
            FrameCounter: 0,
            WindowWidth: 0,
            WindowHeight: 0,
            Level: 0,
            RngSeed: null,
            CanUseSaveStates: false,
            CanUseTimeSlowdown: false,
            CanUseTeleport: false,
            StartedLevelOrCheckpointWithSaveStates: false,
            StartedLevelOrCheckpointWithTimeSlowdown: false,
            StartedLevelOrCheckpointWithTeleport: false,
            CheckpointLocation: null,
            CompletedCutscenesAtCheckpoint: null,
            KilledEnemiesAtCheckpoint: null,
            LevelFlagsAtCheckpoint: null,
            RngSeedAtCheckpoint: null,
            MapKeyStateAtCheckpoint: null,
            CompletedCutscenes: null,
            Cutscene: null
        },
        ctors: {
            ctor: function (levelConfiguration, background, tilemap, tux, camera, levelNameDisplay, levelFlags, enemies, killedEnemies, mapKeyState, previousMove, frameCounter, windowWidth, windowHeight, level, rngSeed, canUseSaveStates, canUseTimeSlowdown, canUseTeleport, startedLevelOrCheckpointWithSaveStates, startedLevelOrCheckpointWithTimeSlowdown, startedLevelOrCheckpointWithTeleport, checkpointLocation, completedCutscenesAtCheckpoint, killedEnemiesAtCheckpoint, levelFlagsAtCheckpoint, rngSeedAtCheckpoint, mapKeyStateAtCheckpoint, completedCutscenes, cutscene) {
                this.$initialize();
                this.LevelConfiguration = levelConfiguration;
                this.Background = background;
                this.Tilemap = tilemap;
                this.Tux = tux;
                this.Camera = camera;
                this.LevelNameDisplay = levelNameDisplay;
                this.LevelFlags = new (System.Collections.Generic.List$1(System.String)).$ctor1(levelFlags);
                this.Enemies = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).$ctor1(enemies);
                this.KilledEnemies = new (System.Collections.Generic.List$1(System.String)).$ctor1(killedEnemies);
                this.MapKeyState = mapKeyState;
                this.PreviousMove = previousMove;
                this.FrameCounter = frameCounter;
                this.WindowWidth = windowWidth;
                this.WindowHeight = windowHeight;
                this.Level = level;
                this.RngSeed = rngSeed;
                this.CanUseSaveStates = canUseSaveStates;
                this.CanUseTimeSlowdown = canUseTimeSlowdown;
                this.CanUseTeleport = canUseTeleport;
                this.StartedLevelOrCheckpointWithSaveStates = startedLevelOrCheckpointWithSaveStates;
                this.StartedLevelOrCheckpointWithTimeSlowdown = startedLevelOrCheckpointWithTimeSlowdown;
                this.StartedLevelOrCheckpointWithTeleport = startedLevelOrCheckpointWithTeleport;
                this.CheckpointLocation = checkpointLocation;
                this.CompletedCutscenesAtCheckpoint = new (System.Collections.Generic.List$1(System.String)).$ctor1(completedCutscenesAtCheckpoint);
                this.KilledEnemiesAtCheckpoint = new (System.Collections.Generic.List$1(System.String)).$ctor1(killedEnemiesAtCheckpoint);
                this.LevelFlagsAtCheckpoint = new (System.Collections.Generic.List$1(System.String)).$ctor1(levelFlagsAtCheckpoint);
                this.RngSeedAtCheckpoint = rngSeedAtCheckpoint;
                this.MapKeyStateAtCheckpoint = mapKeyStateAtCheckpoint;
                this.CompletedCutscenes = new (System.Collections.Generic.List$1(System.String)).$ctor1(completedCutscenes);
                this.Cutscene = cutscene;
            },
            $ctor1: function (level, windowWidth, windowHeight, canUseSaveStates, canUseTimeSlowdown, canUseTeleport, mapInfo, random) {
                this.$initialize();
                var levelConfig;

                if (level === TuxPlanetSpeedrunAnyPercentLibrary.Level.Level1) {
                    levelConfig = new TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level1(mapInfo, random);
                } else {
                    if (level === TuxPlanetSpeedrunAnyPercentLibrary.Level.Level2) {
                        levelConfig = new TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level2(mapInfo, canUseSaveStates, random);
                    } else {
                        if (level === TuxPlanetSpeedrunAnyPercentLibrary.Level.Level3) {
                            levelConfig = new TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level3(mapInfo, random);
                        } else {
                            if (level === TuxPlanetSpeedrunAnyPercentLibrary.Level.Level4) {
                                levelConfig = new TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level4(mapInfo, canUseTeleport, random);
                            } else {
                                if (level === TuxPlanetSpeedrunAnyPercentLibrary.Level.Level5) {
                                    levelConfig = new TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level5(mapInfo, random);
                                } else {
                                    if (level === TuxPlanetSpeedrunAnyPercentLibrary.Level.Level6) {
                                        levelConfig = new TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level6(mapInfo, canUseTimeSlowdown, random);
                                    } else {
                                        if (level === TuxPlanetSpeedrunAnyPercentLibrary.Level.Level7) {
                                            levelConfig = new TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level7(mapInfo, random);
                                        } else {
                                            if (level === TuxPlanetSpeedrunAnyPercentLibrary.Level.Level8) {
                                                levelConfig = new TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level8(mapInfo, random);
                                            } else {
                                                if (level === TuxPlanetSpeedrunAnyPercentLibrary.Level.Level9) {
                                                    levelConfig = new TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level9(mapInfo, random);
                                                } else {
                                                    if (level === TuxPlanetSpeedrunAnyPercentLibrary.Level.Level10) {
                                                        levelConfig = new TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10(mapInfo, random);
                                                    } else {
                                                        throw new System.Exception();
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                var rngSeed = random.DTLibrary$IDTDeterministicRandom$SerializeToString();

                this.LevelConfiguration = levelConfig;
                this.Background = this.LevelConfiguration.TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetBackground();
                this.Tilemap = this.LevelConfiguration.TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetTilemap(null, null, null, null, windowWidth, windowHeight, new (System.Collections.Generic.List$1(System.String)).ctor(), TuxPlanetSpeedrunAnyPercentLibrary.MapKeyState.EmptyMapKeyState());
                this.Tux = TuxPlanetSpeedrunAnyPercentLibrary.TuxState.GetDefaultTuxState(this.Tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetTuxLocation(0, 0).Item1, this.Tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetTuxLocation(0, 0).Item2);
                this.Camera = TuxPlanetSpeedrunAnyPercentLibrary.CameraStateProcessing.ComputeCameraState(this.Tux.XMibi, this.Tux.YMibi, this.Tux.TeleportStartingLocation, this.Tux.TeleportInProgressElapsedMicros, this.Tilemap, windowWidth, windowHeight);
                this.LevelNameDisplay = TuxPlanetSpeedrunAnyPercentLibrary.LevelNameDisplay.GetLevelNameDisplay(TuxPlanetSpeedrunAnyPercentLibrary.LevelUtil.GetLevelName(level));
                this.LevelFlags = new (System.Collections.Generic.List$1(System.String)).ctor();
                this.Enemies = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor();
                this.KilledEnemies = new (System.Collections.Generic.List$1(System.String)).ctor();
                this.MapKeyState = TuxPlanetSpeedrunAnyPercentLibrary.MapKeyState.EmptyMapKeyState();
                this.PreviousMove = TuxPlanetSpeedrunAnyPercentLibrary.Move.EmptyMove();
                this.FrameCounter = 0;
                this.WindowWidth = windowWidth;
                this.WindowHeight = windowHeight;
                this.Level = level;
                this.RngSeed = rngSeed;
                this.CanUseSaveStates = canUseSaveStates;
                this.CanUseTimeSlowdown = canUseTimeSlowdown;
                this.CanUseTeleport = canUseTeleport;
                this.StartedLevelOrCheckpointWithSaveStates = canUseSaveStates;
                this.StartedLevelOrCheckpointWithTimeSlowdown = canUseTimeSlowdown;
                this.StartedLevelOrCheckpointWithTeleport = canUseTeleport;
                this.CheckpointLocation = null;
                this.CompletedCutscenesAtCheckpoint = new (System.Collections.Generic.List$1(System.String)).ctor();
                this.KilledEnemiesAtCheckpoint = new (System.Collections.Generic.List$1(System.String)).ctor();
                this.LevelFlagsAtCheckpoint = new (System.Collections.Generic.List$1(System.String)).ctor();
                this.RngSeedAtCheckpoint = rngSeed;
                this.MapKeyStateAtCheckpoint = TuxPlanetSpeedrunAnyPercentLibrary.MapKeyState.EmptyMapKeyState();
                this.CompletedCutscenes = new (System.Collections.Generic.List$1(System.String)).ctor();
                this.Cutscene = null;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.GameLogicStateProcessing", {
        statics: {
            methods: {
                ProcessFrame: function (gameLogicState, move, debugMode, debug_tuxInvulnerable, debugKeyboardInput, debugPreviousKeyboardInput, displayProcessing, soundOutput, elapsedMicrosPerFrame) {
                    var $t, $t1;
                    var newLevelFlags = new (System.Collections.Generic.List$1(System.String)).$ctor1(gameLogicState.LevelFlags);

                    var newTilemap = gameLogicState.LevelConfiguration.TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetTilemap(gameLogicState.Tux.XMibi >> 10, gameLogicState.Tux.YMibi >> 10, gameLogicState.Camera.X, gameLogicState.Camera.Y, gameLogicState.WindowWidth, gameLogicState.WindowHeight, newLevelFlags, gameLogicState.MapKeyState);

                    var newLevelNameDisplay = gameLogicState.LevelNameDisplay.ProcessFrame(elapsedMicrosPerFrame);

                    var newMapKeyState = gameLogicState.MapKeyState;

                    newMapKeyState = newMapKeyState.ProcessFrame(gameLogicState.Tux.XMibi >> 10, gameLogicState.Tux.YMibi >> 10, System.Nullable.hasValue(gameLogicState.Tux.TeleportInProgressElapsedMicros), newTilemap, elapsedMicrosPerFrame);

                    var newCutscene = gameLogicState.Cutscene;
                    var newCompletedCutscenes = new (System.Collections.Generic.List$1(System.String)).$ctor1(gameLogicState.CompletedCutscenes);

                    var newCanUseSaveStates = gameLogicState.CanUseSaveStates;
                    var newCanUseTimeSlowdown = gameLogicState.CanUseTimeSlowdown;
                    var newCanUseTeleport = gameLogicState.CanUseTeleport;

                    var newRngSeed = gameLogicState.RngSeed;

                    var newCamera = gameLogicState.Camera;

                    var newEnemies = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).$ctor1(gameLogicState.Enemies);

                    if (newCutscene == null) {
                        var cutsceneName = newTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetCutscene(gameLogicState.Tux.XMibi >> 10, gameLogicState.Tux.YMibi >> 10);
                        if (cutsceneName != null && !newCompletedCutscenes.contains(cutsceneName)) {
                            newCutscene = TuxPlanetSpeedrunAnyPercentLibrary.CutsceneProcessing.GetCutscene(cutsceneName, gameLogicState.LevelConfiguration.TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetCustomLevelInfo());
                        }
                    }

                    if (newCutscene != null) {
                        var cutsceneName1 = newCutscene.TuxPlanetSpeedrunAnyPercentLibrary$ICutscene$GetCutsceneName();
                        var cutsceneResult = newCutscene.TuxPlanetSpeedrunAnyPercentLibrary$ICutscene$ProcessFrame(move, gameLogicState.Tux.XMibi, gameLogicState.Tux.YMibi, newCamera, elapsedMicrosPerFrame, gameLogicState.WindowWidth, gameLogicState.WindowHeight, newTilemap, newEnemies, newLevelFlags);

                        if (cutsceneResult.Move != null) {
                            move = cutsceneResult.Move;
                        }

                        newCutscene = cutsceneResult.Cutscene;

                        newEnemies = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).$ctor1(cutsceneResult.Enemies);

                        newCamera = cutsceneResult.CameraState;

                        if (cutsceneResult.ShouldGrantSaveStatePower) {
                            newCanUseSaveStates = true;
                        }

                        if (cutsceneResult.ShouldGrantTimeSlowdownPower) {
                            newCanUseTimeSlowdown = true;
                        }

                        if (cutsceneResult.ShouldGrantTeleportPower) {
                            newCanUseTeleport = true;
                        }

                        if (newCutscene == null) {
                            newCompletedCutscenes.add(cutsceneName1);
                        }

                        var existingLevelFlags = new (System.Collections.Generic.HashSet$1(System.String)).$ctor1(newLevelFlags);
                        $t = Bridge.getEnumerator(cutsceneResult.NewlyAddedLevelFlags, System.String);
                        try {
                            while ($t.moveNext()) {
                                var levelFlag = $t.Current;
                                if (!existingLevelFlags.contains(levelFlag)) {
                                    newLevelFlags.add(levelFlag);
                                }
                            }
                        } finally {
                            if (Bridge.is($t, System.IDisposable)) {
                                $t.System$IDisposable$Dispose();
                            }
                        }
                    }

                    if (debugMode && debugKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Two) && !debugPreviousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Two)) {
                        newCanUseSaveStates = true;
                    }
                    if (debugMode && debugKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Three) && !debugPreviousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Three)) {
                        newCanUseTeleport = true;
                    }
                    if (debugMode && debugKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Four) && !debugPreviousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Four)) {
                        newCanUseTimeSlowdown = true;
                    }

                    var result = TuxPlanetSpeedrunAnyPercentLibrary.TuxStateProcessing.ProcessFrame(gameLogicState.Tux, move, gameLogicState.PreviousMove, gameLogicState.CanUseTeleport, debugMode, debug_tuxInvulnerable, debugKeyboardInput, debugPreviousKeyboardInput, displayProcessing, soundOutput, elapsedMicrosPerFrame, gameLogicState.Tilemap);

                    var newTuxState = result.TuxState;

                    if (newCutscene == null) {
                        newCamera = gameLogicState.LevelConfiguration.TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetCameraState(newTuxState.XMibi, newTuxState.YMibi, newTuxState.TeleportStartingLocation, newTuxState.TeleportInProgressElapsedMicros, gameLogicState.Tilemap, gameLogicState.WindowWidth, gameLogicState.WindowHeight, newLevelFlags);

                        if (newCamera == null) {
                            newCamera = TuxPlanetSpeedrunAnyPercentLibrary.CameraStateProcessing.ComputeCameraState(newTuxState.XMibi, newTuxState.YMibi, newTuxState.TeleportStartingLocation, newTuxState.TeleportInProgressElapsedMicros, gameLogicState.Tilemap, gameLogicState.WindowWidth, gameLogicState.WindowHeight);
                        }
                    }

                    var enemyProcessingRandom = new DTLibrary.DTDeterministicRandom.ctor();
                    enemyProcessingRandom.DeserializeFromString(newRngSeed);
                    var enemyProcessingResult = TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.ProcessFrame(newTilemap, newCamera.X, newCamera.Y, gameLogicState.WindowWidth, gameLogicState.WindowHeight, newTuxState, enemyProcessingRandom, newEnemies, gameLogicState.KilledEnemies, newLevelFlags, soundOutput, elapsedMicrosPerFrame);
                    newRngSeed = enemyProcessingRandom.SerializeToString();

                    if (enemyProcessingResult.EnemiesNullable != null) {
                        newEnemies = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).$ctor1(enemyProcessingResult.EnemiesNullable);
                    } else {
                        newEnemies = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor();
                    }

                    var newKilledEnemies = new (System.Collections.Generic.List$1(System.String)).$ctor1(gameLogicState.KilledEnemies);
                    if (enemyProcessingResult.NewlyKilledEnemiesNullable != null) {
                        newKilledEnemies.AddRange(enemyProcessingResult.NewlyKilledEnemiesNullable);
                    }

                    var levelFlagsHashSet = new (System.Collections.Generic.HashSet$1(System.String)).$ctor1(newLevelFlags);
                    if (enemyProcessingResult.NewlyAddedLevelFlagsNullable != null) {
                        $t1 = Bridge.getEnumerator(enemyProcessingResult.NewlyAddedLevelFlagsNullable, System.String);
                        try {
                            while ($t1.moveNext()) {
                                var newlyAddedLevelFlag = $t1.Current;
                                if (!levelFlagsHashSet.contains(newlyAddedLevelFlag)) {
                                    newLevelFlags.add(newlyAddedLevelFlag);
                                }
                            }
                        } finally {
                            if (Bridge.is($t1, System.IDisposable)) {
                                $t1.System$IDisposable$Dispose();
                            }
                        }
                    }

                    var collisionResultTux = TuxPlanetSpeedrunAnyPercentLibrary.CollisionProcessing_Tux.ProcessFrame(newTuxState, newEnemies, debug_tuxInvulnerable, soundOutput);

                    newTuxState = collisionResultTux.NewTuxState;
                    newEnemies = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).$ctor1(collisionResultTux.NewEnemies);

                    if (collisionResultTux.NewlyKilledEnemiesNullable != null) {
                        newKilledEnemies.AddRange(collisionResultTux.NewlyKilledEnemiesNullable);
                    }

                    var newStartedLevelOrCheckpointWithSaveStates = gameLogicState.StartedLevelOrCheckpointWithSaveStates;
                    var newStartedLevelOrCheckpointWithTimeSlowdown = gameLogicState.StartedLevelOrCheckpointWithTimeSlowdown;
                    var newStartedLevelOrCheckpointWithTeleport = gameLogicState.StartedLevelOrCheckpointWithTeleport;

                    var newCompletedCutscenesAtCheckpoint = gameLogicState.CompletedCutscenesAtCheckpoint;
                    var newKilledEnemiesAtCheckpoint = gameLogicState.KilledEnemiesAtCheckpoint;
                    var newLevelFlagsAtCheckpoint = gameLogicState.LevelFlagsAtCheckpoint;
                    var newRngSeedAtCheckpoint = gameLogicState.RngSeedAtCheckpoint;
                    var newMapKeyStateAtCheckpoint = gameLogicState.MapKeyStateAtCheckpoint;

                    var newCheckpointLocation = gameLogicState.CheckpointLocation;

                    var checkpoint = newTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetCheckpoint(newTuxState.XMibi >> 10, newTuxState.YMibi >> 10);
                    if (checkpoint != null) {
                        newCheckpointLocation = checkpoint;
                        newStartedLevelOrCheckpointWithSaveStates = gameLogicState.CanUseSaveStates;
                        newStartedLevelOrCheckpointWithTimeSlowdown = gameLogicState.CanUseTimeSlowdown;
                        newStartedLevelOrCheckpointWithTeleport = gameLogicState.CanUseTeleport;
                        newCompletedCutscenesAtCheckpoint = new (System.Collections.Generic.List$1(System.String)).$ctor1(gameLogicState.CompletedCutscenes);
                        newKilledEnemiesAtCheckpoint = new (System.Collections.Generic.List$1(System.String)).$ctor1(gameLogicState.KilledEnemies);
                        newLevelFlagsAtCheckpoint = new (System.Collections.Generic.List$1(System.String)).$ctor1(gameLogicState.LevelFlags);
                        newRngSeedAtCheckpoint = gameLogicState.RngSeed;
                        newMapKeyStateAtCheckpoint = gameLogicState.MapKeyState;
                    }

                    if (result.HasDied) {
                        var restartedTilemap = gameLogicState.LevelConfiguration.TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetTilemap(null, null, null, null, gameLogicState.WindowWidth, gameLogicState.WindowHeight, gameLogicState.LevelFlagsAtCheckpoint, gameLogicState.MapKeyStateAtCheckpoint);

                        var originalTuxState;

                        if (gameLogicState.CheckpointLocation == null) {
                            originalTuxState = TuxPlanetSpeedrunAnyPercentLibrary.TuxState.GetDefaultTuxState(restartedTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetTuxLocation(0, 0).Item1, restartedTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetTuxLocation(0, 0).Item2);
                        } else {
                            originalTuxState = TuxPlanetSpeedrunAnyPercentLibrary.TuxState.GetDefaultTuxState(gameLogicState.CheckpointLocation.Item1, gameLogicState.CheckpointLocation.Item2);
                        }

                        newCamera = gameLogicState.LevelConfiguration.TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetCameraState(originalTuxState.XMibi, originalTuxState.YMibi, originalTuxState.TeleportStartingLocation, originalTuxState.TeleportInProgressElapsedMicros, restartedTilemap, gameLogicState.WindowWidth, gameLogicState.WindowHeight, gameLogicState.LevelFlagsAtCheckpoint);

                        if (newCamera == null) {
                            newCamera = TuxPlanetSpeedrunAnyPercentLibrary.CameraStateProcessing.ComputeCameraState(originalTuxState.XMibi, originalTuxState.YMibi, originalTuxState.TeleportStartingLocation, originalTuxState.TeleportInProgressElapsedMicros, restartedTilemap, gameLogicState.WindowWidth, gameLogicState.WindowHeight);
                        }

                        return new TuxPlanetSpeedrunAnyPercentLibrary.GameLogicStateProcessing.Result(new TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.ctor(gameLogicState.LevelConfiguration, gameLogicState.LevelConfiguration.TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetBackground(), restartedTilemap, originalTuxState, newCamera, newLevelNameDisplay, gameLogicState.LevelFlagsAtCheckpoint, new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor(), gameLogicState.KilledEnemiesAtCheckpoint, gameLogicState.MapKeyStateAtCheckpoint, move, ((gameLogicState.FrameCounter + 1) | 0), gameLogicState.WindowWidth, gameLogicState.WindowHeight, gameLogicState.Level, gameLogicState.RngSeedAtCheckpoint, gameLogicState.StartedLevelOrCheckpointWithSaveStates, gameLogicState.StartedLevelOrCheckpointWithTimeSlowdown, gameLogicState.StartedLevelOrCheckpointWithTeleport, gameLogicState.StartedLevelOrCheckpointWithSaveStates, gameLogicState.StartedLevelOrCheckpointWithTimeSlowdown, gameLogicState.StartedLevelOrCheckpointWithTeleport, gameLogicState.CheckpointLocation, gameLogicState.CompletedCutscenesAtCheckpoint, gameLogicState.KilledEnemiesAtCheckpoint, gameLogicState.LevelFlagsAtCheckpoint, gameLogicState.RngSeedAtCheckpoint, gameLogicState.MapKeyStateAtCheckpoint, gameLogicState.CompletedCutscenesAtCheckpoint, null), result.EndLevel, restartedTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$PlayMusic(), result.ShouldStopMusic);
                    } else {
                        return new TuxPlanetSpeedrunAnyPercentLibrary.GameLogicStateProcessing.Result(new TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.ctor(gameLogicState.LevelConfiguration, gameLogicState.LevelConfiguration.TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetBackground(), newTilemap, newTuxState, newCamera, newLevelNameDisplay, newLevelFlags, newEnemies, newKilledEnemies, newMapKeyState, move, ((gameLogicState.FrameCounter + 1) | 0), gameLogicState.WindowWidth, gameLogicState.WindowHeight, gameLogicState.Level, newRngSeed, newCanUseSaveStates, newCanUseTimeSlowdown, newCanUseTeleport, newStartedLevelOrCheckpointWithSaveStates, newStartedLevelOrCheckpointWithTimeSlowdown, newStartedLevelOrCheckpointWithTeleport, newCheckpointLocation, newCompletedCutscenesAtCheckpoint, newKilledEnemiesAtCheckpoint, newLevelFlagsAtCheckpoint, newRngSeedAtCheckpoint, newMapKeyStateAtCheckpoint, newCompletedCutscenes, newCutscene), result.EndLevel, newTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$PlayMusic(), result.ShouldStopMusic);
                    }
                },
                Render: function (gameLogicState, displayOutput, elapsedMillis, debug_showHitboxes) {
                    var $t, $t1, $t2, $t3;
                    var camera = gameLogicState.Camera;

                    gameLogicState.Background.TuxPlanetSpeedrunAnyPercentLibrary$IBackground$Render(camera.X, camera.Y, gameLogicState.WindowWidth, gameLogicState.WindowHeight, displayOutput);

                    var translatedDisplayOutput = new TuxPlanetSpeedrunAnyPercentLibrary.TuxPlanetSpeedrunTranslatedDisplayOutput(displayOutput, ((-(((camera.X - (gameLogicState.WindowWidth >> 1)) | 0))) | 0), ((-(((camera.Y - (gameLogicState.WindowHeight >> 1)) | 0))) | 0));

                    gameLogicState.Tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$RenderBackgroundTiles(translatedDisplayOutput, gameLogicState.Camera.X, gameLogicState.Camera.Y, gameLogicState.WindowWidth, gameLogicState.WindowHeight);

                    $t = Bridge.getEnumerator(gameLogicState.Enemies, TuxPlanetSpeedrunAnyPercentLibrary.IEnemy);
                    try {
                        while ($t.moveNext()) {
                            var enemy = $t.Current;
                            enemy.TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$Render(translatedDisplayOutput);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    TuxPlanetSpeedrunAnyPercentLibrary.TuxStateProcessing.Render(gameLogicState.Tux, displayOutput, gameLogicState.Camera, gameLogicState.WindowWidth, gameLogicState.WindowHeight);

                    gameLogicState.Tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$RenderForegroundTiles(translatedDisplayOutput, gameLogicState.Camera.X, gameLogicState.Camera.Y, gameLogicState.WindowWidth, gameLogicState.WindowHeight);

                    if (debug_showHitboxes) {
                        var hitboxes = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Hitbox)).ctor();
                        hitboxes.add(gameLogicState.Tux.GetHitbox());

                        $t1 = Bridge.getEnumerator(gameLogicState.Enemies, TuxPlanetSpeedrunAnyPercentLibrary.IEnemy);
                        try {
                            while ($t1.moveNext()) {
                                var enemy1 = $t1.Current;
                                var enemyHitboxes = enemy1.TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetHitboxes();
                                if (enemyHitboxes != null) {
                                    hitboxes.AddRange(enemyHitboxes);
                                }
                            }
                        } finally {
                            if (Bridge.is($t1, System.IDisposable)) {
                                $t1.System$IDisposable$Dispose();
                            }
                        }

                        $t2 = Bridge.getEnumerator(gameLogicState.Enemies, TuxPlanetSpeedrunAnyPercentLibrary.IEnemy);
                        try {
                            while ($t2.moveNext()) {
                                var enemy2 = $t2.Current;
                                var enemyDamageBoxes = enemy2.TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDamageBoxes();
                                if (enemyDamageBoxes != null) {
                                    hitboxes.AddRange(enemyDamageBoxes);
                                }
                            }
                        } finally {
                            if (Bridge.is($t2, System.IDisposable)) {
                                $t2.System$IDisposable$Dispose();
                            }
                        }

                        $t3 = Bridge.getEnumerator(hitboxes);
                        try {
                            while ($t3.moveNext()) {
                                var hitbox = $t3.Current;
                                translatedDisplayOutput.DrawRectangle(hitbox.X, hitbox.Y, hitbox.Width, hitbox.Height, new DTLibrary.DTColor.$ctor1(255, 0, 0, 128), true);
                            }
                        } finally {
                            if (Bridge.is($t3, System.IDisposable)) {
                                $t3.System$IDisposable$Dispose();
                            }
                        }
                    }

                    gameLogicState.MapKeyState.Render(displayOutput, translatedDisplayOutput, gameLogicState.Tilemap, gameLogicState.WindowWidth, gameLogicState.WindowHeight);

                    gameLogicState.LevelNameDisplay.Render(displayOutput, gameLogicState.WindowWidth, gameLogicState.WindowHeight);

                    var elapsedTimeString = TuxPlanetSpeedrunAnyPercentLibrary.ElapsedTimeUtil.GetElapsedTimeString(elapsedMillis);
                    var timerText = "Time: " + (elapsedTimeString || "");

                    displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText(((gameLogicState.WindowWidth - 120) | 0), ((gameLogicState.WindowHeight - 10) | 0), timerText, TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont14Pt, DTLibrary.DTColor.Black());

                    if (gameLogicState.Cutscene != null) {
                        gameLogicState.Cutscene.TuxPlanetSpeedrunAnyPercentLibrary$ICutscene$Render(displayOutput, gameLogicState.WindowWidth, gameLogicState.WindowHeight);
                    }
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.GameLogicStateProcessing.Result", {
        $kind: "nested class",
        fields: {
            NewGameLogicState: null,
            EndLevel: false,
            PlayMusic: null,
            ShouldStopMusic: false
        },
        ctors: {
            ctor: function (newGameLogicState, endLevel, playMusic, shouldStopMusic) {
                this.$initialize();
                this.NewGameLogicState = newGameLogicState;
                this.EndLevel = endLevel;
                this.PlayMusic = playMusic;
                this.ShouldStopMusic = shouldStopMusic;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.GameMusicUtil", {
        statics: {
            methods: {
                GetMusicFilename: function (music) {
                    switch (music) {
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameMusic.Airship2: 
                            return new TuxPlanetSpeedrunAnyPercentLibrary.GameMusicUtil.MusicFilenameInfo("JasonLavallee/airship_2.ogg", "JasonLavallee/airship_2.wav");
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameMusic.Theme: 
                            return new TuxPlanetSpeedrunAnyPercentLibrary.GameMusicUtil.MusicFilenameInfo("wansti/theme.ogg", "wansti/theme.wav");
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameMusic.PeaceAtLast: 
                            return new TuxPlanetSpeedrunAnyPercentLibrary.GameMusicUtil.MusicFilenameInfo("Trex0n/peace_at_last.ogg", "Trex0n/peace_at_last.wav");
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameMusic.Chipdisko: 
                            return new TuxPlanetSpeedrunAnyPercentLibrary.GameMusicUtil.MusicFilenameInfo("LukasNystrand/chipdisko.ogg", "LukasNystrand/chipdisko.wav");
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameMusic.Jewels: 
                            return new TuxPlanetSpeedrunAnyPercentLibrary.GameMusicUtil.MusicFilenameInfo("cynicmusic/music_jewels.ogg", "cynicmusic/music_jewels.wav");
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameMusic.KonqiBossTheme: 
                            return new TuxPlanetSpeedrunAnyPercentLibrary.GameMusicUtil.MusicFilenameInfo("migfus20/boss.ogg", "migfus20/boss.wav");
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameMusic.YetiBossTheme: 
                            return new TuxPlanetSpeedrunAnyPercentLibrary.GameMusicUtil.MusicFilenameInfo("wansti/bossattack.ogg", "wansti/bossattack.wav");
                        default: 
                            throw new System.Exception();
                    }
                },
                GetMusicVolume: function (music) {
                    switch (music) {
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameMusic.Airship2: 
                            return 40;
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameMusic.Theme: 
                            return 10;
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameMusic.PeaceAtLast: 
                            return 30;
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameMusic.Chipdisko: 
                            return 70;
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameMusic.Jewels: 
                            return 30;
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameMusic.KonqiBossTheme: 
                            return 30;
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameMusic.YetiBossTheme: 
                            return 40;
                        default: 
                            throw new System.Exception();
                    }
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.GameMusicUtil.MusicFilenameInfo", {
        $kind: "nested class",
        fields: {
            DefaultFilename: null,
            WavFilename: null
        },
        ctors: {
            ctor: function (defaultFilename, wavFilename) {
                this.$initialize();
                this.DefaultFilename = defaultFilename;
                this.WavFilename = wavFilename;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.GameSoundUtil", {
        statics: {
            methods: {
                GetSoundFilename: function (sound) {
                    switch (sound) {
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameSound.Click: 
                            return new TuxPlanetSpeedrunAnyPercentLibrary.GameSoundUtil.SoundFilenameInfo("Kenney/click3_Modified.wav", "Kenney/click3_Modified.wav");
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameSound.JingleWin01: 
                            return new TuxPlanetSpeedrunAnyPercentLibrary.GameSoundUtil.SoundFilenameInfo("LittleRobotSoundFactory/Jingle_Win_01.ogg", "LittleRobotSoundFactory/Jingle_Win_01_modified.wav");
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameSound.Die: 
                            return new TuxPlanetSpeedrunAnyPercentLibrary.GameSoundUtil.SoundFilenameInfo("Basto/cut.ogg", "Basto/cut.wav");
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameSound.Squish: 
                            return new TuxPlanetSpeedrunAnyPercentLibrary.GameSoundUtil.SoundFilenameInfo("SuperTux/squish.wav", "SuperTux/squish.wav");
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameSound.Jump: 
                            return new TuxPlanetSpeedrunAnyPercentLibrary.GameSoundUtil.SoundFilenameInfo("LittleRobotSoundFactory/Jump_03.wav", "LittleRobotSoundFactory/Jump_03.wav");
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameSound.Teleport: 
                            return new TuxPlanetSpeedrunAnyPercentLibrary.GameSoundUtil.SoundFilenameInfo("Basto/heavy_splash.ogg", "Basto/heavy_splash.wav");
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameSound.Explosion00Modified: 
                            return new TuxPlanetSpeedrunAnyPercentLibrary.GameSoundUtil.SoundFilenameInfo("LittleRobotSoundFactory/Explosion_00_modified.wav", "LittleRobotSoundFactory/Explosion_00_modified.wav");
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameSound.Explosion02: 
                            return new TuxPlanetSpeedrunAnyPercentLibrary.GameSoundUtil.SoundFilenameInfo("LittleRobotSoundFactory/Explosion_02.wav", "LittleRobotSoundFactory/Explosion_02.wav");
                        default: 
                            throw new System.Exception();
                    }
                },
                GetSoundVolume: function (sound) {
                    switch (sound) {
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameSound.Click: 
                            return 30;
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameSound.JingleWin01: 
                            return 30;
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameSound.Die: 
                            return 30;
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameSound.Squish: 
                            return 30;
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameSound.Jump: 
                            return 30;
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameSound.Teleport: 
                            return 30;
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameSound.Explosion00Modified: 
                            return 30;
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameSound.Explosion02: 
                            return 10;
                        default: 
                            throw new System.Exception();
                    }
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.GameSoundUtil.SoundFilenameInfo", {
        $kind: "nested class",
        fields: {
            DefaultFilename: null,
            WavFilename: null
        },
        ctors: {
            ctor: function (defaultFilename, wavFilename) {
                this.$initialize();
                this.DefaultFilename = defaultFilename;
                this.WavFilename = wavFilename;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.GlobalState", {
        statics: {
            fields: {
                DEFAULT_VOLUME: 0
            },
            ctors: {
                init: function () {
                    this.DEFAULT_VOLUME = 50;
                }
            }
        },
        fields: {
            WindowWidth: 0,
            WindowHeight: 0,
            Fps: 0,
            Rng: null,
            GuidGenerator: null,
            Logger: null,
            Timer: null,
            IsWebBrowserVersion: false,
            IsWebPortalVersion: false,
            DebugMode: false,
            Debug_ShowHitBoxes: false,
            Debug_TuxInvulnerable: false,
            MapInfo: null,
            saveAndLoadData: null,
            desiredMusicVolume: 0,
            currentMusicVolume: 0,
            MusicPlayer: null,
            ElapsedMicrosPerFrame: 0
        },
        props: {
            MusicVolume: {
                get: function () {
                    return this.desiredMusicVolume;
                },
                set: function (value) {
                    this.desiredMusicVolume = value;
                }
            }
        },
        ctors: {
            ctor: function (windowWidth, windowHeight, fps, rng, guidGenerator, logger, timer, fileIO, isWebBrowserVersion, isWebPortalVersion, debugMode, initialMusicVolume) {
                var $t;
                this.$initialize();
                this.WindowWidth = windowWidth;
                this.WindowHeight = windowHeight;
                this.Fps = fps;
                this.Rng = rng;
                this.GuidGenerator = guidGenerator;
                this.Logger = logger;
                this.Timer = timer;
                this.IsWebBrowserVersion = isWebBrowserVersion;
                this.IsWebPortalVersion = isWebPortalVersion;
                this.DebugMode = debugMode;
                this.desiredMusicVolume = ($t = initialMusicVolume, $t != null ? $t : TuxPlanetSpeedrunAnyPercentLibrary.GlobalState.DEFAULT_VOLUME);
                this.currentMusicVolume = this.desiredMusicVolume;

                var elapsedMicrosPerFrame = (Bridge.Int.div(1000000, fps)) | 0;

                this.MusicPlayer = new TuxPlanetSpeedrunAnyPercentLibrary.MusicPlayer(elapsedMicrosPerFrame);
                this.ElapsedMicrosPerFrame = elapsedMicrosPerFrame;

                this.saveAndLoadData = new TuxPlanetSpeedrunAnyPercentLibrary.SaveAndLoadData(fileIO);

                this.Debug_ShowHitBoxes = false;
                this.Debug_TuxInvulnerable = false;

                this.MapInfo = TuxPlanetSpeedrunAnyPercentLibrary.MapDataHelper.GetStronglyTypedMapData(TuxPlanetSpeedrunAnyPercentLibrary.MapData.GetMapData());
            }
        },
        methods: {
            ProcessMusic: function () {
                this.MusicPlayer.ProcessFrame();
                this.currentMusicVolume = DTLibrary.VolumeUtil.GetVolumeSmoothed(this.ElapsedMicrosPerFrame, this.currentMusicVolume, this.desiredMusicVolume);
            },
            RenderMusic: function (musicOutput) {
                this.MusicPlayer.RenderMusic(musicOutput, this.currentMusicVolume);
            },
            SaveData: function (sessionState, soundVolume) {
                this.saveAndLoadData.SaveData(sessionState, soundVolume, this.desiredMusicVolume);
            },
            LoadSessionState: function (sessionState) {
                this.saveAndLoadData.LoadSessionState(sessionState, this.WindowWidth, this.WindowHeight, this.MapInfo);
            },
            LoadSoundVolume: function () {
                return this.saveAndLoadData.LoadSoundVolume();
            },
            LoadMusicVolume: function () {
                var musicVolume = this.saveAndLoadData.LoadMusicVolume();

                if (System.Nullable.hasValue(musicVolume)) {
                    this.desiredMusicVolume = System.Nullable.getValue(musicVolume);
                    this.currentMusicVolume = System.Nullable.getValue(musicVolume);
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.Hitbox", {
        fields: {
            X: 0,
            Y: 0,
            Width: 0,
            Height: 0
        },
        ctors: {
            ctor: function (x, y, width, height) {
                this.$initialize();
                this.X = x;
                this.Y = y;
                this.Width = width;
                this.Height = height;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.ILevelConfiguration", {
        $kind: "interface"
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.Level", {
        $kind: "enum",
        statics: {
            fields: {
                Level1: 0,
                Level2: 1,
                Level3: 2,
                Level4: 3,
                Level5: 4,
                Level6: 5,
                Level7: 6,
                Level8: 7,
                Level9: 8,
                Level10: 9
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level6.Result", {
        $kind: "nested class",
        fields: {
            UnnormalizedTilemaps: null,
            TilemapAIndex: 0,
            TilemapCIndex: 0,
            TilemapDIndex: 0,
            TilemapFIndex: 0
        },
        ctors: {
            ctor: function (unnormalizedTilemaps, tilemapAIndex, tilemapCIndex, tilemapDIndex, tilemapFIndex) {
                this.$initialize();
                this.UnnormalizedTilemaps = unnormalizedTilemaps;
                this.TilemapAIndex = tilemapAIndex;
                this.TilemapCIndex = tilemapCIndex;
                this.TilemapDIndex = tilemapDIndex;
                this.TilemapFIndex = tilemapFIndex;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.LevelConfigurationHelper", {
        statics: {
            methods: {
                GetRandomGameMusic: function (random) {
                    var i = random.DTLibrary$IDTRandom$NextInt(2);

                    switch (i) {
                        case 0: 
                            return TuxPlanetSpeedrunAnyPercentLibrary.GameMusic.Airship2;
                        case 1: 
                            return TuxPlanetSpeedrunAnyPercentLibrary.GameMusic.Chipdisko;
                        default: 
                            throw new System.Exception();
                    }
                },
                GetTilemap: function (normalizedTilemaps, tuxX, tuxY, cameraX, cameraY, mapKeyState, windowWidth, windowHeight) {
                    var $t, $t1;
                    var tilemapWidth = 0;
                    var tilemapHeight = 0;

                    $t = Bridge.getEnumerator(normalizedTilemaps, TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset);
                    try {
                        while ($t.moveNext()) {
                            var tilemap = $t.Current;
                            var width = (tilemap.XOffset + tilemap.Tilemap.GetWidth()) | 0;

                            if (tilemapWidth < width) {
                                tilemapWidth = width;
                            }

                            var height = (tilemap.YOffset + tilemap.Tilemap.GetHeight()) | 0;

                            if (tilemapHeight < height) {
                                tilemapHeight = height;
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    if (tuxX == null || tuxY == null || cameraX == null || cameraY == null) {
                        return new TuxPlanetSpeedrunAnyPercentLibrary.BoundedTilemap(new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap(normalizedTilemaps, tilemapWidth, tilemapHeight, tuxX, tuxY, mapKeyState));
                    }

                    var tilemapsNearTuxOrCamera = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset)).ctor();

                    var halfWindowWidth = windowWidth >> 1;
                    var halfWindowHeight = windowHeight >> 1;

                    var tuxLeft = (System.Nullable.getValue(tuxX) - halfWindowWidth) | 0;
                    var tuxRight = (System.Nullable.getValue(tuxX) + halfWindowWidth) | 0;
                    var tuxBottom = (System.Nullable.getValue(tuxY) - halfWindowHeight) | 0;
                    var tuxTop = (System.Nullable.getValue(tuxY) + halfWindowHeight) | 0;

                    var cameraLeft = (System.Nullable.getValue(cameraX) - halfWindowWidth) | 0;
                    var cameraRight = (System.Nullable.getValue(cameraX) + halfWindowWidth) | 0;
                    var cameraBottom = (System.Nullable.getValue(cameraY) - halfWindowHeight) | 0;
                    var cameraTop = (System.Nullable.getValue(cameraY) + halfWindowHeight) | 0;

                    var margin = TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_TILEMAP_DESPAWN_IN_PIXELS;

                    $t1 = Bridge.getEnumerator(normalizedTilemaps, TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset);
                    try {
                        while ($t1.moveNext()) {
                            var tilemap1 = $t1.Current;
                            if (!tilemap1.AlwaysIncludeTilemap) {
                                var tilemapLeft = tilemap1.XOffset;
                                var tilemapRight = (tilemap1.XOffset + tilemap1.Tilemap.GetWidth()) | 0;

                                if (tilemapRight < ((tuxLeft - margin) | 0) && tilemapRight < ((cameraLeft - margin) | 0)) {
                                    continue;
                                }
                                if (tilemapLeft > ((tuxRight + margin) | 0) && tilemapLeft > ((cameraRight + margin) | 0)) {
                                    continue;
                                }

                                var tilemapBottom = tilemap1.YOffset;
                                var tilemapTop = (tilemap1.YOffset + tilemap1.Tilemap.GetHeight()) | 0;

                                if (tilemapTop < ((tuxBottom - margin) | 0) && tilemapTop < ((cameraBottom - margin) | 0)) {
                                    continue;
                                }
                                if (tilemapBottom > ((tuxTop + margin) | 0) && tilemapBottom > ((cameraTop + margin) | 0)) {
                                    continue;
                                }
                            }

                            tilemapsNearTuxOrCamera.add(tilemap1);
                        }
                    } finally {
                        if (Bridge.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$Dispose();
                        }
                    }

                    return new TuxPlanetSpeedrunAnyPercentLibrary.BoundedTilemap(new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap(tilemapsNearTuxOrCamera, tilemapWidth, tilemapHeight, tuxX, tuxY, mapKeyState));
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.LevelNameDisplay", {
        statics: {
            fields: {
                LEVEL_NAME_DISPLAY_DURATION: 0
            },
            ctors: {
                init: function () {
                    this.LEVEL_NAME_DISPLAY_DURATION = 3000000;
                }
            },
            methods: {
                GetLevelNameDisplay: function (levelName) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.LevelNameDisplay(levelName, 0);
                }
            }
        },
        fields: {
            levelName: null,
            elapsedMicros: 0
        },
        ctors: {
            ctor: function (levelName, elapsedMicros) {
                this.$initialize();
                this.levelName = levelName;
                this.elapsedMicros = elapsedMicros;
            }
        },
        methods: {
            ProcessFrame: function (elapsedMicrosPerFrame) {
                return new TuxPlanetSpeedrunAnyPercentLibrary.LevelNameDisplay(this.levelName, Math.min(((this.elapsedMicros + elapsedMicrosPerFrame) | 0), 3000001));
            },
            Render: function (displayOutput, windowWidth, windowHeight) {
                if (this.elapsedMicros >= TuxPlanetSpeedrunAnyPercentLibrary.LevelNameDisplay.LEVEL_NAME_DISPLAY_DURATION) {
                    return;
                }

                var alpha;

                if (this.elapsedMicros <= 1500000) {
                    alpha = 255;
                } else {
                    var amount = System.Int64(this.elapsedMicros - 1500000);
                    alpha = System.Int64.clip32(System.Int64(255).sub(amount.mul(System.Int64(255)).div(System.Int64((1500000)))));
                }

                if (alpha < 0) {
                    alpha = 0;
                }
                if (alpha > 255) {
                    alpha = 255;
                }

                var backgroundAlpha = (Bridge.Int.div(Bridge.Int.mul(128, alpha), 255)) | 0;

                if (backgroundAlpha < 0) {
                    backgroundAlpha = 0;
                }
                if (backgroundAlpha > 255) {
                    backgroundAlpha = 255;
                }

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle(0, ((((Bridge.Int.div(windowHeight, 2)) | 0) + 100) | 0), windowWidth, 100, new DTLibrary.DTColor.$ctor1(0, 0, 0, backgroundAlpha), true);

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText(50, ((((Bridge.Int.div(windowHeight, 2)) | 0) + 170) | 0), this.levelName, TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont32Pt, new DTLibrary.DTColor.$ctor1(255, 255, 255, alpha));
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.LevelUtil", {
        statics: {
            methods: {
                IsLastLevel: function (level) {
                    switch (level) {
                        case TuxPlanetSpeedrunAnyPercentLibrary.Level.Level1: 
                        case TuxPlanetSpeedrunAnyPercentLibrary.Level.Level2: 
                        case TuxPlanetSpeedrunAnyPercentLibrary.Level.Level3: 
                        case TuxPlanetSpeedrunAnyPercentLibrary.Level.Level4: 
                        case TuxPlanetSpeedrunAnyPercentLibrary.Level.Level5: 
                        case TuxPlanetSpeedrunAnyPercentLibrary.Level.Level6: 
                        case TuxPlanetSpeedrunAnyPercentLibrary.Level.Level7: 
                        case TuxPlanetSpeedrunAnyPercentLibrary.Level.Level8: 
                        case TuxPlanetSpeedrunAnyPercentLibrary.Level.Level9: 
                            return false;
                        case TuxPlanetSpeedrunAnyPercentLibrary.Level.Level10: 
                            return true;
                        default: 
                            throw new System.Exception();
                    }
                },
                GetLevelName: function (level) {
                    switch (level) {
                        case TuxPlanetSpeedrunAnyPercentLibrary.Level.Level1: 
                            return "Level 1";
                        case TuxPlanetSpeedrunAnyPercentLibrary.Level.Level2: 
                            return "Level 2";
                        case TuxPlanetSpeedrunAnyPercentLibrary.Level.Level3: 
                            return "Level 3";
                        case TuxPlanetSpeedrunAnyPercentLibrary.Level.Level4: 
                            return "Level 4";
                        case TuxPlanetSpeedrunAnyPercentLibrary.Level.Level5: 
                            return "Level 5";
                        case TuxPlanetSpeedrunAnyPercentLibrary.Level.Level6: 
                            return "Level 6";
                        case TuxPlanetSpeedrunAnyPercentLibrary.Level.Level7: 
                            return "Level 7";
                        case TuxPlanetSpeedrunAnyPercentLibrary.Level.Level8: 
                            return "Level 8";
                        case TuxPlanetSpeedrunAnyPercentLibrary.Level.Level9: 
                            return "Level 9";
                        case TuxPlanetSpeedrunAnyPercentLibrary.Level.Level10: 
                            return "Level 10";
                        default: 
                            throw new System.Exception();
                    }
                },
                ToSerializableInt: function (level) {
                    switch (level) {
                        case TuxPlanetSpeedrunAnyPercentLibrary.Level.Level1: 
                            return 1;
                        case TuxPlanetSpeedrunAnyPercentLibrary.Level.Level2: 
                            return 2;
                        case TuxPlanetSpeedrunAnyPercentLibrary.Level.Level3: 
                            return 3;
                        case TuxPlanetSpeedrunAnyPercentLibrary.Level.Level4: 
                            return 4;
                        case TuxPlanetSpeedrunAnyPercentLibrary.Level.Level5: 
                            return 5;
                        case TuxPlanetSpeedrunAnyPercentLibrary.Level.Level6: 
                            return 6;
                        case TuxPlanetSpeedrunAnyPercentLibrary.Level.Level7: 
                            return 7;
                        case TuxPlanetSpeedrunAnyPercentLibrary.Level.Level8: 
                            return 8;
                        case TuxPlanetSpeedrunAnyPercentLibrary.Level.Level9: 
                            return 9;
                        case TuxPlanetSpeedrunAnyPercentLibrary.Level.Level10: 
                            return 10;
                        default: 
                            throw new System.Exception();
                    }
                },
                FromSerializableInt: function (i) {
                    var level = TuxPlanetSpeedrunAnyPercentLibrary.LevelUtil.TryFromSerializableInt(i);

                    if (level == null) {
                        throw new DTLibrary.DTDeserializationException();
                    }

                    return System.Nullable.getValue(level);
                },
                TryFromSerializableInt: function (i) {
                    switch (i) {
                        case 1: 
                            return TuxPlanetSpeedrunAnyPercentLibrary.Level.Level1;
                        case 2: 
                            return TuxPlanetSpeedrunAnyPercentLibrary.Level.Level2;
                        case 3: 
                            return TuxPlanetSpeedrunAnyPercentLibrary.Level.Level3;
                        case 4: 
                            return TuxPlanetSpeedrunAnyPercentLibrary.Level.Level4;
                        case 5: 
                            return TuxPlanetSpeedrunAnyPercentLibrary.Level.Level5;
                        case 6: 
                            return TuxPlanetSpeedrunAnyPercentLibrary.Level.Level6;
                        case 7: 
                            return TuxPlanetSpeedrunAnyPercentLibrary.Level.Level7;
                        case 8: 
                            return TuxPlanetSpeedrunAnyPercentLibrary.Level.Level8;
                        case 9: 
                            return TuxPlanetSpeedrunAnyPercentLibrary.Level.Level9;
                        case 10: 
                            return TuxPlanetSpeedrunAnyPercentLibrary.Level.Level10;
                        default: 
                            return null;
                    }
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.MapData", {
        statics: {
            methods: {
                GetMapData: function () {
                    var dictionary = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String)))))();


                    var mapDictionary0 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("PlaceholderLevel", mapDictionary0);

                    mapDictionary0.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary0_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary0_0.set("firstgid", "1");
                    tilesetDictionary0_0.set("imagewidth", "464");
                    tilesetDictionary0_0.set("imageheight", "176");
                    tilesetDictionary0_0.set("name", "TsSnow");
                    tilesetDictionary0_0.set("tilewidth", "16");
                    tilesetDictionary0_0.set("tileheight", "16");
                    mapDictionary0.get("tilesets").add(tilesetDictionary0_0);
                    var tilesetDictionary0_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary0_1.set("firstgid", "320");
                    tilesetDictionary0_1.set("imagewidth", "80");
                    tilesetDictionary0_1.set("imageheight", "192");
                    tilesetDictionary0_1.set("name", "Solid");
                    tilesetDictionary0_1.set("tilewidth", "16");
                    tilesetDictionary0_1.set("tileheight", "16");
                    mapDictionary0.get("tilesets").add(tilesetDictionary0_1);
                    var tilesetDictionary0_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary0_2.set("firstgid", "380");
                    tilesetDictionary0_2.set("imagewidth", "128");
                    tilesetDictionary0_2.set("imageheight", "160");
                    tilesetDictionary0_2.set("name", "Actors");
                    tilesetDictionary0_2.set("tilewidth", "16");
                    tilesetDictionary0_2.set("tileheight", "16");
                    mapDictionary0.get("tilesets").add(tilesetDictionary0_2);
                    var tilesetDictionary0_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary0_3.set("firstgid", "460");
                    tilesetDictionary0_3.set("imagewidth", "128");
                    tilesetDictionary0_3.set("imageheight", "32");
                    tilesetDictionary0_3.set("name", "Spikes");
                    tilesetDictionary0_3.set("tilewidth", "16");
                    tilesetDictionary0_3.set("tileheight", "16");
                    mapDictionary0.get("tilesets").add(tilesetDictionary0_3);
                    var tilesetDictionary0_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary0_4.set("firstgid", "476");
                    tilesetDictionary0_4.set("imagewidth", "192");
                    tilesetDictionary0_4.set("imageheight", "80");
                    tilesetDictionary0_4.set("name", "Igloo");
                    tilesetDictionary0_4.set("tilewidth", "16");
                    tilesetDictionary0_4.set("tileheight", "16");
                    mapDictionary0.get("tilesets").add(tilesetDictionary0_4);
                    var tilesetDictionary0_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary0_5.set("firstgid", "536");
                    tilesetDictionary0_5.set("imagewidth", "80");
                    tilesetDictionary0_5.set("imageheight", "80");
                    tilesetDictionary0_5.set("name", "Signpost");
                    tilesetDictionary0_5.set("tilewidth", "16");
                    tilesetDictionary0_5.set("tileheight", "16");
                    mapDictionary0.get("tilesets").add(tilesetDictionary0_5);
                    var tilesetDictionary0_6 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary0_6.set("firstgid", "561");
                    tilesetDictionary0_6.set("imagewidth", "224");
                    tilesetDictionary0_6.set("imageheight", "240");
                    tilesetDictionary0_6.set("name", "TsCastle");
                    tilesetDictionary0_6.set("tilewidth", "16");
                    tilesetDictionary0_6.set("tileheight", "16");
                    mapDictionary0.get("tilesets").add(tilesetDictionary0_6);

                    mapDictionary0.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary0_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary0_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,495,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,507,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,519,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary0_0.set("width", "35");
                    layersDictionary0_0.set("height", "27");
                    layersDictionary0_0.set("name", "Background");
                    mapDictionary0.get("layers").add(layersDictionary0_0);
                    var layersDictionary0_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary0_1.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,477,478,479,479,480,481,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,488,489,490,491,491,492,493,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,500,501,502,503,504,492,505,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,380,0,0,0,0,0,0,0,0,0,0,0,500,513,514,515,515,516,517,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61");
                    layersDictionary0_1.set("width", "35");
                    layersDictionary0_1.set("height", "27");
                    layersDictionary0_1.set("name", "Foreground");
                    mapDictionary0.get("layers").add(layersDictionary0_1);
                    var layersDictionary0_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary0_2.set("data
                    layersDictionary0_2.set("width", "35");
                    layersDictionary0_2.set("height", "27");
                    layersDictionary0_2.set("name", "Solid");
                    mapDictionary0.get("layers").add(layersDictionary0_2);



                    var mapDictionary1 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level1/Level1", mapDictionary1);

                    mapDictionary1.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary1_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary1_0.set("firstgid", "1");
                    tilesetDictionary1_0.set("imagewidth", "464");
                    tilesetDictionary1_0.set("imageheight", "176");
                    tilesetDictionary1_0.set("name", "TsSnow");
                    tilesetDictionary1_0.set("tilewidth", "16");
                    tilesetDictionary1_0.set("tileheight", "16");
                    mapDictionary1.get("tilesets").add(tilesetDictionary1_0);
                    var tilesetDictionary1_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary1_1.set("firstgid", "320");
                    tilesetDictionary1_1.set("imagewidth", "80");
                    tilesetDictionary1_1.set("imageheight", "192");
                    tilesetDictionary1_1.set("name", "Solid");
                    tilesetDictionary1_1.set("tilewidth", "16");
                    tilesetDictionary1_1.set("tileheight", "16");
                    mapDictionary1.get("tilesets").add(tilesetDictionary1_1);
                    var tilesetDictionary1_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary1_2.set("firstgid", "380");
                    tilesetDictionary1_2.set("imagewidth", "128");
                    tilesetDictionary1_2.set("imageheight", "160");
                    tilesetDictionary1_2.set("name", "Actors");
                    tilesetDictionary1_2.set("tilewidth", "16");
                    tilesetDictionary1_2.set("tileheight", "16");
                    mapDictionary1.get("tilesets").add(tilesetDictionary1_2);
                    var tilesetDictionary1_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary1_3.set("firstgid", "460");
                    tilesetDictionary1_3.set("imagewidth", "128");
                    tilesetDictionary1_3.set("imageheight", "32");
                    tilesetDictionary1_3.set("name", "Spikes");
                    tilesetDictionary1_3.set("tilewidth", "16");
                    tilesetDictionary1_3.set("tileheight", "16");
                    mapDictionary1.get("tilesets").add(tilesetDictionary1_3);
                    var tilesetDictionary1_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary1_4.set("firstgid", "476");
                    tilesetDictionary1_4.set("imagewidth", "192");
                    tilesetDictionary1_4.set("imageheight", "80");
                    tilesetDictionary1_4.set("name", "Igloo");
                    tilesetDictionary1_4.set("tilewidth", "16");
                    tilesetDictionary1_4.set("tileheight", "16");
                    mapDictionary1.get("tilesets").add(tilesetDictionary1_4);
                    var tilesetDictionary1_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary1_5.set("firstgid", "536");
                    tilesetDictionary1_5.set("imagewidth", "80");
                    tilesetDictionary1_5.set("imageheight", "80");
                    tilesetDictionary1_5.set("name", "Signpost");
                    tilesetDictionary1_5.set("tilewidth", "16");
                    tilesetDictionary1_5.set("tileheight", "16");
                    mapDictionary1.get("tilesets").add(tilesetDictionary1_5);
                    var tilesetDictionary1_6 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary1_6.set("firstgid", "561");
                    tilesetDictionary1_6.set("imagewidth", "224");
                    tilesetDictionary1_6.set("imageheight", "240");
                    tilesetDictionary1_6.set("name", "TsCastle");
                    tilesetDictionary1_6.set("tilewidth", "16");
                    tilesetDictionary1_6.set("tileheight", "16");
                    mapDictionary1.get("tilesets").add(tilesetDictionary1_6);

                    mapDictionary1.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary1_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary1_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,243,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,243,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,273,214,244,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,273,214,244,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,215,214,216,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536,537,538,0,0,0,0,0,0,215,214,216,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,273,119,214,119,244,0,0,0,536,537,538,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536,537,538,0,0,0,0,0,0,0,0,0,0,0,0,495,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,541,539,543,0,0,0,0,0,273,119,214,119,244,0,0,0,0,0,0,0,0,0,0,241,148,148,148,148,148,242,0,0,0,0,0,0,0,0,0,0,0,175,0,0,0,0,0,541,551,543,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,541,560,543,0,0,0,0,0,0,0,0,0,0,0,0,507,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,546,547,548,0,0,0,0,0,0,0,175,0,0,0,0,0,0,0,0,0,241,148,148,213,177,177,177,177,177,212,242,0,0,0,0,0,0,0,0,0,0,175,0,0,0,0,0,546,547,548,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,546,547,548,0,0,0,0,0,0,0,0,0,0,0,0,519,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,241,177,0,0,0,0,0,0,0,177,177,177,212,148,242,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,241,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,241,213,177,0,0,0,0,0,0,0,177,177,177,177,177,212,242,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,213,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,241,213,177,177,0,0,0,0,0,0,0,177,177,177,177,177,177,212,242,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary1_0.set("width", "125");
                    layersDictionary1_0.set("height", "27");
                    layersDictionary1_0.set("name", "Background");
                    mapDictionary1.get("layers").add(layersDictionary1_0);
                    var layersDictionary1_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary1_1.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,477,478,479,479,480,481,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,407,0,0,407,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,488,489,490,491,491,492,493,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,426,0,426,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,453,0,0,0,0,0,0,0,0,0,0,447,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,500,501,502,503,504,492,505,0,0,0,0,0,0,0,0,0,0,0,0,0,380,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,393,0,0,0,0,393,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,3,3,3,3,4,0,0,0,0,0,0,0,0,2,3,3,3,3,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,500,513,514,515,515,516,517,0,0,31,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,33,0,0,0,31,32,32,32,32,32,32,32,33,0,0,0,0,0,0,0,31,32,32,32,32,32,32,32,32,32,32,32,32,32,33,464,464,464,464,0,0,0,0,0,0,0,0,0,0,0,0,406,0,0,0,0,465,465,465,465,465,465,465,0,0,0,0,0,31,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,97,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,60,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,96,32,32,32,33,0,0,0,0,0,0,0,0,0,2,3,3,3,3,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,60,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61");
                    layersDictionary1_1.set("width", "125");
                    layersDictionary1_1.set("height", "27");
                    layersDictionary1_1.set("name", "Foreground");
                    mapDictionary1.get("layers").add(layersDictionary1_1);
                    var layersDictionary1_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary1_2.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,0,0,0,0,320,320,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,363,363,363,363,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,363,363,363,363,363,363,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320");
                    layersDictionary1_2.set("width", "125");
                    layersDictionary1_2.set("height", "27");
                    layersDictionary1_2.set("name", "Solid");
                    mapDictionary1.get("layers").add(layersDictionary1_2);



                    var mapDictionary2 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level10/A_Start", mapDictionary2);

                    mapDictionary2.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary2_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary2_0.set("firstgid", "1");
                    tilesetDictionary2_0.set("imagewidth", "464");
                    tilesetDictionary2_0.set("imageheight", "176");
                    tilesetDictionary2_0.set("name", "TsSnow");
                    tilesetDictionary2_0.set("tilewidth", "16");
                    tilesetDictionary2_0.set("tileheight", "16");
                    mapDictionary2.get("tilesets").add(tilesetDictionary2_0);
                    var tilesetDictionary2_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary2_1.set("firstgid", "320");
                    tilesetDictionary2_1.set("imagewidth", "80");
                    tilesetDictionary2_1.set("imageheight", "192");
                    tilesetDictionary2_1.set("name", "Solid");
                    tilesetDictionary2_1.set("tilewidth", "16");
                    tilesetDictionary2_1.set("tileheight", "16");
                    mapDictionary2.get("tilesets").add(tilesetDictionary2_1);
                    var tilesetDictionary2_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary2_2.set("firstgid", "380");
                    tilesetDictionary2_2.set("imagewidth", "128");
                    tilesetDictionary2_2.set("imageheight", "160");
                    tilesetDictionary2_2.set("name", "Actors");
                    tilesetDictionary2_2.set("tilewidth", "16");
                    tilesetDictionary2_2.set("tileheight", "16");
                    mapDictionary2.get("tilesets").add(tilesetDictionary2_2);
                    var tilesetDictionary2_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary2_3.set("firstgid", "460");
                    tilesetDictionary2_3.set("imagewidth", "128");
                    tilesetDictionary2_3.set("imageheight", "32");
                    tilesetDictionary2_3.set("name", "Spikes");
                    tilesetDictionary2_3.set("tilewidth", "16");
                    tilesetDictionary2_3.set("tileheight", "16");
                    mapDictionary2.get("tilesets").add(tilesetDictionary2_3);
                    var tilesetDictionary2_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary2_4.set("firstgid", "476");
                    tilesetDictionary2_4.set("imagewidth", "192");
                    tilesetDictionary2_4.set("imageheight", "80");
                    tilesetDictionary2_4.set("name", "Igloo");
                    tilesetDictionary2_4.set("tilewidth", "16");
                    tilesetDictionary2_4.set("tileheight", "16");
                    mapDictionary2.get("tilesets").add(tilesetDictionary2_4);
                    var tilesetDictionary2_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary2_5.set("firstgid", "536");
                    tilesetDictionary2_5.set("imagewidth", "80");
                    tilesetDictionary2_5.set("imageheight", "80");
                    tilesetDictionary2_5.set("name", "Signpost");
                    tilesetDictionary2_5.set("tilewidth", "16");
                    tilesetDictionary2_5.set("tileheight", "16");
                    mapDictionary2.get("tilesets").add(tilesetDictionary2_5);
                    var tilesetDictionary2_6 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary2_6.set("firstgid", "561");
                    tilesetDictionary2_6.set("imagewidth", "224");
                    tilesetDictionary2_6.set("imageheight", "240");
                    tilesetDictionary2_6.set("name", "TsCastle");
                    tilesetDictionary2_6.set("tilewidth", "16");
                    tilesetDictionary2_6.set("tileheight", "16");
                    mapDictionary2.get("tilesets").add(tilesetDictionary2_6);

                    mapDictionary2.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary2_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary2_0.set("data
                    layersDictionary2_0.set("width", "207");
                    layersDictionary2_0.set("height", "68");
                    layersDictionary2_0.set("name", "Background");
                    mapDictionary2.get("layers").add(layersDictionary2_0);
                    var layersDictionary2_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary2_1.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536,537,538,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536,537,538,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,541,539,543,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,541,549,543,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,546,547,548,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,546,547,548,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary2_1.set("width", "207");
                    layersDictionary2_1.set("height", "68");
                    layersDictionary2_1.set("name", "Midground");
                    mapDictionary2.get("layers").add(layersDictionary2_1);
                    var layersDictionary2_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary2_2.set("data
                    layersDictionary2_2.set("width", "207");
                    layersDictionary2_2.set("height", "68");
                    layersDictionary2_2.set("name", "Foreground");
                    mapDictionary2.get("layers").add(layersDictionary2_2);
                    var layersDictionary2_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary2_3.set("data
                    layersDictionary2_3.set("width", "207");
                    layersDictionary2_3.set("height", "68");
                    layersDictionary2_3.set("name", "Solid");
                    mapDictionary2.get("layers").add(layersDictionary2_3);



                    var mapDictionary3 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level10/B_Checkpoint", mapDictionary3);

                    mapDictionary3.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary3_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary3_0.set("firstgid", "1");
                    tilesetDictionary3_0.set("imagewidth", "464");
                    tilesetDictionary3_0.set("imageheight", "176");
                    tilesetDictionary3_0.set("name", "TsSnow");
                    tilesetDictionary3_0.set("tilewidth", "16");
                    tilesetDictionary3_0.set("tileheight", "16");
                    mapDictionary3.get("tilesets").add(tilesetDictionary3_0);
                    var tilesetDictionary3_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary3_1.set("firstgid", "320");
                    tilesetDictionary3_1.set("imagewidth", "80");
                    tilesetDictionary3_1.set("imageheight", "192");
                    tilesetDictionary3_1.set("name", "Solid");
                    tilesetDictionary3_1.set("tilewidth", "16");
                    tilesetDictionary3_1.set("tileheight", "16");
                    mapDictionary3.get("tilesets").add(tilesetDictionary3_1);
                    var tilesetDictionary3_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary3_2.set("firstgid", "380");
                    tilesetDictionary3_2.set("imagewidth", "128");
                    tilesetDictionary3_2.set("imageheight", "160");
                    tilesetDictionary3_2.set("name", "Actors");
                    tilesetDictionary3_2.set("tilewidth", "16");
                    tilesetDictionary3_2.set("tileheight", "16");
                    mapDictionary3.get("tilesets").add(tilesetDictionary3_2);
                    var tilesetDictionary3_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary3_3.set("firstgid", "460");
                    tilesetDictionary3_3.set("imagewidth", "128");
                    tilesetDictionary3_3.set("imageheight", "32");
                    tilesetDictionary3_3.set("name", "Spikes");
                    tilesetDictionary3_3.set("tilewidth", "16");
                    tilesetDictionary3_3.set("tileheight", "16");
                    mapDictionary3.get("tilesets").add(tilesetDictionary3_3);
                    var tilesetDictionary3_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary3_4.set("firstgid", "476");
                    tilesetDictionary3_4.set("imagewidth", "192");
                    tilesetDictionary3_4.set("imageheight", "80");
                    tilesetDictionary3_4.set("name", "Igloo");
                    tilesetDictionary3_4.set("tilewidth", "16");
                    tilesetDictionary3_4.set("tileheight", "16");
                    mapDictionary3.get("tilesets").add(tilesetDictionary3_4);
                    var tilesetDictionary3_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary3_5.set("firstgid", "536");
                    tilesetDictionary3_5.set("imagewidth", "80");
                    tilesetDictionary3_5.set("imageheight", "80");
                    tilesetDictionary3_5.set("name", "Signpost");
                    tilesetDictionary3_5.set("tilewidth", "16");
                    tilesetDictionary3_5.set("tileheight", "16");
                    mapDictionary3.get("tilesets").add(tilesetDictionary3_5);
                    var tilesetDictionary3_6 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary3_6.set("firstgid", "561");
                    tilesetDictionary3_6.set("imagewidth", "224");
                    tilesetDictionary3_6.set("imageheight", "240");
                    tilesetDictionary3_6.set("name", "TsCastle");
                    tilesetDictionary3_6.set("tilewidth", "16");
                    tilesetDictionary3_6.set("tileheight", "16");
                    mapDictionary3.get("tilesets").add(tilesetDictionary3_6);

                    mapDictionary3.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary3_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary3_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,666,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,666,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,666,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,666,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,666,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,666,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,666,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,666,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,666,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,666,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,666,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,666,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,666,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,666,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,666,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,666,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,666,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,666,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,666,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,666,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,666,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,666,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,666,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,666,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,666,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,666,0,566,567,567,567,567,567,567,567,567,567,568,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,666,0,580,581,581,581,581,581,581,581,581,581,582,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,666,0,580,581,581,581,581,581,581,581,581,581,582,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,666,0,580,581,581,581,581,581,581,581,581,581,582,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,666,0,580,581,581,581,581,581,581,581,581,581,582,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,666,0,580,581,581,581,581,581,581,581,581,581,582,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,666,0,580,581,581,581,581,581,581,581,581,581,582,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,666,0,580,581,581,581,581,581,581,581,581,581,582,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,666,0,580,581,581,581,581,581,581,581,581,581,582,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,666,0,580,581,581,581,581,581,581,581,581,581,582,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,666,0,580,581,581,581,581,581,581,581,581,581,582,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,666,0,580,581,581,581,581,581,581,581,581,581,582,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,666,0,580,581,581,581,581,581,581,581,581,581,582,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,666,0,580,581,581,581,581,581,581,581,581,581,582,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,666,0,580,581,581,581,581,581,581,581,581,581,582,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,666,0,580,581,581,581,581,581,581,581,581,581,582,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,666,0,580,581,581,581,581,581,581,581,581,581,582,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,666,0,580,581,581,581,581,581,581,581,581,581,582,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,666,0,580,581,581,581,581,581,581,581,581,581,582,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,666,0,580,581,581,581,581,581,581,581,581,581,582,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,666,0,580,581,581,581,581,581,581,581,581,581,582,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,666,0,580,581,581,581,581,581,581,581,581,581,582,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,666,0,580,581,581,581,581,581,581,581,581,581,582,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,666,0,580,581,581,581,581,581,581,581,581,581,582,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,666,0,580,581,581,581,581,581,581,581,581,581,582,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,666,0,580,581,581,581,581,581,581,581,581,581,582,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,666,0,580,581,581,581,581,581,581,581,581,581,582,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,666,0,580,581,581,581,581,581,581,581,581,581,582,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,666,0,580,581,581,581,581,581,581,581,581,581,582,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,666,0,580,581,581,581,581,581,581,581,581,581,582,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,666,0,580,581,581,581,581,581,581,581,581,581,582,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,666,0,580,581,581,581,581,581,581,581,581,581,582,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,666,0,580,581,581,581,581,581,581,581,581,581,582,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,666,0,580,581,581,581,581,581,581,581,581,581,582,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,666,0,580,581,581,581,581,581,581,581,581,581,582,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,666,0,580,581,581,581,581,581,581,581,581,581,582,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,666,0,580,581,581,581,581,581,581,581,581,581,582,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,679,679,680,0,580,581,581,581,581,581,581,581,581,581,584,567,567,567,567,567,567,567,567,567,567,567,567,567,567,567,567,567,567,567,567,567,567,567,567,0,580,581,581,581,581,581,581,581,581,581,581,581,581,581,581,581,581,581,581,581,581,581,581,581,581,581,581,581,581,581,581,581,581,581,581,0,580,581,581,581,581,581,581,581,581,581,581,581,581,581,581,581,581,581,581,581,581,581,581,581,581,581,581,581,581,581,581,581,581,581,581,0,594,595,595,595,595,595,595,595,595,595,595,595,595,595,595,595,595,595,595,595,595,595,595,595,595,595,595,595,595,595,595,595,595,595,595,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,651,651,651,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,665,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,665,665,665");
                    layersDictionary3_0.set("width", "36");
                    layersDictionary3_0.set("height", "70");
                    layersDictionary3_0.set("name", "Background");
                    mapDictionary3.get("layers").add(layersDictionary3_0);
                    var layersDictionary3_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary3_1.set("data
                    layersDictionary3_1.set("width", "36");
                    layersDictionary3_1.set("height", "70");
                    layersDictionary3_1.set("name", "Midground");
                    mapDictionary3.get("layers").add(layersDictionary3_1);
                    var layersDictionary3_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary3_2.set("data
                    layersDictionary3_2.set("width", "36");
                    layersDictionary3_2.set("height", "70");
                    layersDictionary3_2.set("name", "Foreground");
                    mapDictionary3.get("layers").add(layersDictionary3_2);
                    var layersDictionary3_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary3_3.set("data
                    layersDictionary3_3.set("width", "36");
                    layersDictionary3_3.set("height", "70");
                    layersDictionary3_3.set("name", "Solid");
                    mapDictionary3.get("layers").add(layersDictionary3_3);



                    var mapDictionary4 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level10/C_Boss", mapDictionary4);

                    mapDictionary4.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary4_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary4_0.set("firstgid", "1");
                    tilesetDictionary4_0.set("imagewidth", "464");
                    tilesetDictionary4_0.set("imageheight", "176");
                    tilesetDictionary4_0.set("name", "TsSnow");
                    tilesetDictionary4_0.set("tilewidth", "16");
                    tilesetDictionary4_0.set("tileheight", "16");
                    mapDictionary4.get("tilesets").add(tilesetDictionary4_0);
                    var tilesetDictionary4_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary4_1.set("firstgid", "320");
                    tilesetDictionary4_1.set("imagewidth", "80");
                    tilesetDictionary4_1.set("imageheight", "192");
                    tilesetDictionary4_1.set("name", "Solid");
                    tilesetDictionary4_1.set("tilewidth", "16");
                    tilesetDictionary4_1.set("tileheight", "16");
                    mapDictionary4.get("tilesets").add(tilesetDictionary4_1);
                    var tilesetDictionary4_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary4_2.set("firstgid", "380");
                    tilesetDictionary4_2.set("imagewidth", "128");
                    tilesetDictionary4_2.set("imageheight", "160");
                    tilesetDictionary4_2.set("name", "Actors");
                    tilesetDictionary4_2.set("tilewidth", "16");
                    tilesetDictionary4_2.set("tileheight", "16");
                    mapDictionary4.get("tilesets").add(tilesetDictionary4_2);
                    var tilesetDictionary4_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary4_3.set("firstgid", "460");
                    tilesetDictionary4_3.set("imagewidth", "128");
                    tilesetDictionary4_3.set("imageheight", "32");
                    tilesetDictionary4_3.set("name", "Spikes");
                    tilesetDictionary4_3.set("tilewidth", "16");
                    tilesetDictionary4_3.set("tileheight", "16");
                    mapDictionary4.get("tilesets").add(tilesetDictionary4_3);
                    var tilesetDictionary4_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary4_4.set("firstgid", "476");
                    tilesetDictionary4_4.set("imagewidth", "192");
                    tilesetDictionary4_4.set("imageheight", "80");
                    tilesetDictionary4_4.set("name", "Igloo");
                    tilesetDictionary4_4.set("tilewidth", "16");
                    tilesetDictionary4_4.set("tileheight", "16");
                    mapDictionary4.get("tilesets").add(tilesetDictionary4_4);
                    var tilesetDictionary4_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary4_5.set("firstgid", "536");
                    tilesetDictionary4_5.set("imagewidth", "80");
                    tilesetDictionary4_5.set("imageheight", "80");
                    tilesetDictionary4_5.set("name", "Signpost");
                    tilesetDictionary4_5.set("tilewidth", "16");
                    tilesetDictionary4_5.set("tileheight", "16");
                    mapDictionary4.get("tilesets").add(tilesetDictionary4_5);
                    var tilesetDictionary4_6 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary4_6.set("firstgid", "561");
                    tilesetDictionary4_6.set("imagewidth", "224");
                    tilesetDictionary4_6.set("imageheight", "240");
                    tilesetDictionary4_6.set("name", "TsCastle");
                    tilesetDictionary4_6.set("tilewidth", "16");
                    tilesetDictionary4_6.set("tileheight", "16");
                    mapDictionary4.get("tilesets").add(tilesetDictionary4_6);

                    mapDictionary4.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary4_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary4_0.set("data
                    layersDictionary4_0.set("width", "19");
                    layersDictionary4_0.set("height", "34");
                    layersDictionary4_0.set("name", "Background");
                    mapDictionary4.get("layers").add(layersDictionary4_0);
                    var layersDictionary4_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary4_1.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,674,674,674,674,674,674,674,674,674,674,674,674,674,674,674,674,674,674,674,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary4_1.set("width", "19");
                    layersDictionary4_1.set("height", "34");
                    layersDictionary4_1.set("name", "Midground");
                    mapDictionary4.get("layers").add(layersDictionary4_1);
                    var layersDictionary4_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary4_2.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,435,435,435,435,435,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary4_2.set("width", "19");
                    layersDictionary4_2.set("height", "34");
                    layersDictionary4_2.set("name", "Foreground");
                    mapDictionary4.get("layers").add(layersDictionary4_2);
                    var layersDictionary4_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary4_3.set("data
                    layersDictionary4_3.set("width", "19");
                    layersDictionary4_3.set("height", "34");
                    layersDictionary4_3.set("name", "Solid");
                    mapDictionary4.get("layers").add(layersDictionary4_3);



                    var mapDictionary5 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level10/D_Finish", mapDictionary5);

                    mapDictionary5.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary5_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary5_0.set("firstgid", "1");
                    tilesetDictionary5_0.set("imagewidth", "464");
                    tilesetDictionary5_0.set("imageheight", "176");
                    tilesetDictionary5_0.set("name", "TsSnow");
                    tilesetDictionary5_0.set("tilewidth", "16");
                    tilesetDictionary5_0.set("tileheight", "16");
                    mapDictionary5.get("tilesets").add(tilesetDictionary5_0);
                    var tilesetDictionary5_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary5_1.set("firstgid", "320");
                    tilesetDictionary5_1.set("imagewidth", "80");
                    tilesetDictionary5_1.set("imageheight", "192");
                    tilesetDictionary5_1.set("name", "Solid");
                    tilesetDictionary5_1.set("tilewidth", "16");
                    tilesetDictionary5_1.set("tileheight", "16");
                    mapDictionary5.get("tilesets").add(tilesetDictionary5_1);
                    var tilesetDictionary5_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary5_2.set("firstgid", "380");
                    tilesetDictionary5_2.set("imagewidth", "128");
                    tilesetDictionary5_2.set("imageheight", "160");
                    tilesetDictionary5_2.set("name", "Actors");
                    tilesetDictionary5_2.set("tilewidth", "16");
                    tilesetDictionary5_2.set("tileheight", "16");
                    mapDictionary5.get("tilesets").add(tilesetDictionary5_2);
                    var tilesetDictionary5_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary5_3.set("firstgid", "460");
                    tilesetDictionary5_3.set("imagewidth", "128");
                    tilesetDictionary5_3.set("imageheight", "32");
                    tilesetDictionary5_3.set("name", "Spikes");
                    tilesetDictionary5_3.set("tilewidth", "16");
                    tilesetDictionary5_3.set("tileheight", "16");
                    mapDictionary5.get("tilesets").add(tilesetDictionary5_3);
                    var tilesetDictionary5_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary5_4.set("firstgid", "476");
                    tilesetDictionary5_4.set("imagewidth", "192");
                    tilesetDictionary5_4.set("imageheight", "80");
                    tilesetDictionary5_4.set("name", "Igloo");
                    tilesetDictionary5_4.set("tilewidth", "16");
                    tilesetDictionary5_4.set("tileheight", "16");
                    mapDictionary5.get("tilesets").add(tilesetDictionary5_4);
                    var tilesetDictionary5_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary5_5.set("firstgid", "536");
                    tilesetDictionary5_5.set("imagewidth", "80");
                    tilesetDictionary5_5.set("imageheight", "80");
                    tilesetDictionary5_5.set("name", "Signpost");
                    tilesetDictionary5_5.set("tilewidth", "16");
                    tilesetDictionary5_5.set("tileheight", "16");
                    mapDictionary5.get("tilesets").add(tilesetDictionary5_5);
                    var tilesetDictionary5_6 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary5_6.set("firstgid", "561");
                    tilesetDictionary5_6.set("imagewidth", "224");
                    tilesetDictionary5_6.set("imageheight", "240");
                    tilesetDictionary5_6.set("name", "TsCastle");
                    tilesetDictionary5_6.set("tilewidth", "16");
                    tilesetDictionary5_6.set("tileheight", "16");
                    mapDictionary5.get("tilesets").add(tilesetDictionary5_6);

                    mapDictionary5.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary5_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary5_0.set("data
                    layersDictionary5_0.set("width", "23");
                    layersDictionary5_0.set("height", "49");
                    layersDictionary5_0.set("name", "Background");
                    mapDictionary5.get("layers").add(layersDictionary5_0);
                    var layersDictionary5_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary5_1.set("data
                    layersDictionary5_1.set("width", "23");
                    layersDictionary5_1.set("height", "49");
                    layersDictionary5_1.set("name", "Foreground");
                    mapDictionary5.get("layers").add(layersDictionary5_1);
                    var layersDictionary5_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary5_2.set("data
                    layersDictionary5_2.set("width", "23");
                    layersDictionary5_2.set("height", "49");
                    layersDictionary5_2.set("name", "Solid");
                    mapDictionary5.get("layers").add(layersDictionary5_2);



                    var mapDictionary6 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level2/1_Start", mapDictionary6);

                    mapDictionary6.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary6_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary6_0.set("firstgid", "1");
                    tilesetDictionary6_0.set("imagewidth", "464");
                    tilesetDictionary6_0.set("imageheight", "176");
                    tilesetDictionary6_0.set("name", "TsSnow");
                    tilesetDictionary6_0.set("tilewidth", "16");
                    tilesetDictionary6_0.set("tileheight", "16");
                    mapDictionary6.get("tilesets").add(tilesetDictionary6_0);
                    var tilesetDictionary6_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary6_1.set("firstgid", "320");
                    tilesetDictionary6_1.set("imagewidth", "80");
                    tilesetDictionary6_1.set("imageheight", "192");
                    tilesetDictionary6_1.set("name", "Solid");
                    tilesetDictionary6_1.set("tilewidth", "16");
                    tilesetDictionary6_1.set("tileheight", "16");
                    mapDictionary6.get("tilesets").add(tilesetDictionary6_1);
                    var tilesetDictionary6_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary6_2.set("firstgid", "380");
                    tilesetDictionary6_2.set("imagewidth", "128");
                    tilesetDictionary6_2.set("imageheight", "160");
                    tilesetDictionary6_2.set("name", "Actors");
                    tilesetDictionary6_2.set("tilewidth", "16");
                    tilesetDictionary6_2.set("tileheight", "16");
                    mapDictionary6.get("tilesets").add(tilesetDictionary6_2);
                    var tilesetDictionary6_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary6_3.set("firstgid", "460");
                    tilesetDictionary6_3.set("imagewidth", "128");
                    tilesetDictionary6_3.set("imageheight", "32");
                    tilesetDictionary6_3.set("name", "Spikes");
                    tilesetDictionary6_3.set("tilewidth", "16");
                    tilesetDictionary6_3.set("tileheight", "16");
                    mapDictionary6.get("tilesets").add(tilesetDictionary6_3);
                    var tilesetDictionary6_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary6_4.set("firstgid", "476");
                    tilesetDictionary6_4.set("imagewidth", "192");
                    tilesetDictionary6_4.set("imageheight", "80");
                    tilesetDictionary6_4.set("name", "Igloo");
                    tilesetDictionary6_4.set("tilewidth", "16");
                    tilesetDictionary6_4.set("tileheight", "16");
                    mapDictionary6.get("tilesets").add(tilesetDictionary6_4);

                    mapDictionary6.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary6_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary6_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,243,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,273,214,244,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,215,214,216,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,243,0,0,0,0,0,0,0,273,119,214,119,244,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,273,214,244,0,0,0,0,0,0,215,119,214,119,216,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,241,148,148,148,148,148,148,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,215,214,216,0,0,0,0,0,273,119,119,214,119,119,244,0,0,0,0,0,0,0,0,241,148,148,148,148,148,213,177,177,177,177,177,177,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,273,119,214,119,244,0,0,0,0,0,215,119,214,119,216,0,0,0,0,0,241,148,148,148,213,177,177,177,177,177,177,177,177,177,177,177,177,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,175,0,0,0,0,0,0,0,0,0,175,0,0,0,0,0,241,148,213,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,177,177,177,177,0,0,0,0,177,177,177,177,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,177,177,177,177,0,0,0,0,177,177,177,177,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary6_0.set("width", "60");
                    layersDictionary6_0.set("height", "25");
                    layersDictionary6_0.set("name", "Background");
                    mapDictionary6.get("layers").add(layersDictionary6_0);
                    var layersDictionary6_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary6_1.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary6_1.set("width", "60");
                    layersDictionary6_1.set("height", "25");
                    layersDictionary6_1.set("name", "Midground");
                    mapDictionary6.get("layers").add(layersDictionary6_1);
                    var layersDictionary6_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary6_2.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,380,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,393,0,393,0,0,0,0,0,406,0,406,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,33,0,0,31,32,32,32,32,33,0,0,31,32,32,32,32,97,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,60,61,61,61,61,62,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,60,61,61,61,61,62,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62");
                    layersDictionary6_2.set("width", "60");
                    layersDictionary6_2.set("height", "25");
                    layersDictionary6_2.set("name", "Foreground");
                    mapDictionary6.get("layers").add(layersDictionary6_2);
                    var layersDictionary6_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary6_3.set("data
                    layersDictionary6_3.set("width", "60");
                    layersDictionary6_3.set("height", "25");
                    layersDictionary6_3.set("name", "Solid");
                    mapDictionary6.get("layers").add(layersDictionary6_3);



                    var mapDictionary7 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level2/2_Drop1", mapDictionary7);

                    mapDictionary7.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary7_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary7_0.set("firstgid", "1");
                    tilesetDictionary7_0.set("imagewidth", "464");
                    tilesetDictionary7_0.set("imageheight", "176");
                    tilesetDictionary7_0.set("name", "TsSnow");
                    tilesetDictionary7_0.set("tilewidth", "16");
                    tilesetDictionary7_0.set("tileheight", "16");
                    mapDictionary7.get("tilesets").add(tilesetDictionary7_0);
                    var tilesetDictionary7_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary7_1.set("firstgid", "320");
                    tilesetDictionary7_1.set("imagewidth", "80");
                    tilesetDictionary7_1.set("imageheight", "192");
                    tilesetDictionary7_1.set("name", "Solid");
                    tilesetDictionary7_1.set("tilewidth", "16");
                    tilesetDictionary7_1.set("tileheight", "16");
                    mapDictionary7.get("tilesets").add(tilesetDictionary7_1);
                    var tilesetDictionary7_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary7_2.set("firstgid", "380");
                    tilesetDictionary7_2.set("imagewidth", "128");
                    tilesetDictionary7_2.set("imageheight", "160");
                    tilesetDictionary7_2.set("name", "Actors");
                    tilesetDictionary7_2.set("tilewidth", "16");
                    tilesetDictionary7_2.set("tileheight", "16");
                    mapDictionary7.get("tilesets").add(tilesetDictionary7_2);
                    var tilesetDictionary7_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary7_3.set("firstgid", "460");
                    tilesetDictionary7_3.set("imagewidth", "128");
                    tilesetDictionary7_3.set("imageheight", "32");
                    tilesetDictionary7_3.set("name", "Spikes");
                    tilesetDictionary7_3.set("tilewidth", "16");
                    tilesetDictionary7_3.set("tileheight", "16");
                    mapDictionary7.get("tilesets").add(tilesetDictionary7_3);
                    var tilesetDictionary7_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary7_4.set("firstgid", "476");
                    tilesetDictionary7_4.set("imagewidth", "192");
                    tilesetDictionary7_4.set("imageheight", "80");
                    tilesetDictionary7_4.set("name", "Igloo");
                    tilesetDictionary7_4.set("tilewidth", "16");
                    tilesetDictionary7_4.set("tileheight", "16");
                    mapDictionary7.get("tilesets").add(tilesetDictionary7_4);

                    mapDictionary7.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary7_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary7_0.set("data
                    layersDictionary7_0.set("width", "60");
                    layersDictionary7_0.set("height", "15");
                    layersDictionary7_0.set("name", "Background");
                    mapDictionary7.get("layers").add(layersDictionary7_0);
                    var layersDictionary7_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary7_1.set("data
                    layersDictionary7_1.set("width", "60");
                    layersDictionary7_1.set("height", "15");
                    layersDictionary7_1.set("name", "Foreground");
                    mapDictionary7.get("layers").add(layersDictionary7_1);
                    var layersDictionary7_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary7_2.set("data
                    layersDictionary7_2.set("width", "60");
                    layersDictionary7_2.set("height", "15");
                    layersDictionary7_2.set("name", "Solid");
                    mapDictionary7.get("layers").add(layersDictionary7_2);



                    var mapDictionary8 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level2/2_Drop2", mapDictionary8);

                    mapDictionary8.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary8_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary8_0.set("firstgid", "1");
                    tilesetDictionary8_0.set("imagewidth", "464");
                    tilesetDictionary8_0.set("imageheight", "176");
                    tilesetDictionary8_0.set("name", "TsSnow");
                    tilesetDictionary8_0.set("tilewidth", "16");
                    tilesetDictionary8_0.set("tileheight", "16");
                    mapDictionary8.get("tilesets").add(tilesetDictionary8_0);
                    var tilesetDictionary8_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary8_1.set("firstgid", "320");
                    tilesetDictionary8_1.set("imagewidth", "80");
                    tilesetDictionary8_1.set("imageheight", "192");
                    tilesetDictionary8_1.set("name", "Solid");
                    tilesetDictionary8_1.set("tilewidth", "16");
                    tilesetDictionary8_1.set("tileheight", "16");
                    mapDictionary8.get("tilesets").add(tilesetDictionary8_1);
                    var tilesetDictionary8_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary8_2.set("firstgid", "380");
                    tilesetDictionary8_2.set("imagewidth", "128");
                    tilesetDictionary8_2.set("imageheight", "160");
                    tilesetDictionary8_2.set("name", "Actors");
                    tilesetDictionary8_2.set("tilewidth", "16");
                    tilesetDictionary8_2.set("tileheight", "16");
                    mapDictionary8.get("tilesets").add(tilesetDictionary8_2);
                    var tilesetDictionary8_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary8_3.set("firstgid", "460");
                    tilesetDictionary8_3.set("imagewidth", "128");
                    tilesetDictionary8_3.set("imageheight", "32");
                    tilesetDictionary8_3.set("name", "Spikes");
                    tilesetDictionary8_3.set("tilewidth", "16");
                    tilesetDictionary8_3.set("tileheight", "16");
                    mapDictionary8.get("tilesets").add(tilesetDictionary8_3);
                    var tilesetDictionary8_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary8_4.set("firstgid", "476");
                    tilesetDictionary8_4.set("imagewidth", "192");
                    tilesetDictionary8_4.set("imageheight", "80");
                    tilesetDictionary8_4.set("name", "Igloo");
                    tilesetDictionary8_4.set("tilewidth", "16");
                    tilesetDictionary8_4.set("tileheight", "16");
                    mapDictionary8.get("tilesets").add(tilesetDictionary8_4);

                    mapDictionary8.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary8_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary8_0.set("data
                    layersDictionary8_0.set("width", "60");
                    layersDictionary8_0.set("height", "15");
                    layersDictionary8_0.set("name", "Background");
                    mapDictionary8.get("layers").add(layersDictionary8_0);
                    var layersDictionary8_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary8_1.set("data
                    layersDictionary8_1.set("width", "60");
                    layersDictionary8_1.set("height", "15");
                    layersDictionary8_1.set("name", "Foreground");
                    mapDictionary8.get("layers").add(layersDictionary8_1);
                    var layersDictionary8_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary8_2.set("data
                    layersDictionary8_2.set("width", "60");
                    layersDictionary8_2.set("height", "15");
                    layersDictionary8_2.set("name", "Solid");
                    mapDictionary8.get("layers").add(layersDictionary8_2);



                    var mapDictionary9 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level2/2_Platform", mapDictionary9);

                    mapDictionary9.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary9_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary9_0.set("firstgid", "1");
                    tilesetDictionary9_0.set("imagewidth", "464");
                    tilesetDictionary9_0.set("imageheight", "176");
                    tilesetDictionary9_0.set("name", "TsSnow");
                    tilesetDictionary9_0.set("tilewidth", "16");
                    tilesetDictionary9_0.set("tileheight", "16");
                    mapDictionary9.get("tilesets").add(tilesetDictionary9_0);
                    var tilesetDictionary9_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary9_1.set("firstgid", "320");
                    tilesetDictionary9_1.set("imagewidth", "80");
                    tilesetDictionary9_1.set("imageheight", "192");
                    tilesetDictionary9_1.set("name", "Solid");
                    tilesetDictionary9_1.set("tilewidth", "16");
                    tilesetDictionary9_1.set("tileheight", "16");
                    mapDictionary9.get("tilesets").add(tilesetDictionary9_1);
                    var tilesetDictionary9_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary9_2.set("firstgid", "380");
                    tilesetDictionary9_2.set("imagewidth", "128");
                    tilesetDictionary9_2.set("imageheight", "160");
                    tilesetDictionary9_2.set("name", "Actors");
                    tilesetDictionary9_2.set("tilewidth", "16");
                    tilesetDictionary9_2.set("tileheight", "16");
                    mapDictionary9.get("tilesets").add(tilesetDictionary9_2);
                    var tilesetDictionary9_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary9_3.set("firstgid", "460");
                    tilesetDictionary9_3.set("imagewidth", "128");
                    tilesetDictionary9_3.set("imageheight", "32");
                    tilesetDictionary9_3.set("name", "Spikes");
                    tilesetDictionary9_3.set("tilewidth", "16");
                    tilesetDictionary9_3.set("tileheight", "16");
                    mapDictionary9.get("tilesets").add(tilesetDictionary9_3);
                    var tilesetDictionary9_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary9_4.set("firstgid", "476");
                    tilesetDictionary9_4.set("imagewidth", "192");
                    tilesetDictionary9_4.set("imageheight", "80");
                    tilesetDictionary9_4.set("name", "Igloo");
                    tilesetDictionary9_4.set("tilewidth", "16");
                    tilesetDictionary9_4.set("tileheight", "16");
                    mapDictionary9.get("tilesets").add(tilesetDictionary9_4);

                    mapDictionary9.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary9_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary9_0.set("data
                    layersDictionary9_0.set("width", "60");
                    layersDictionary9_0.set("height", "15");
                    layersDictionary9_0.set("name", "Background");
                    mapDictionary9.get("layers").add(layersDictionary9_0);
                    var layersDictionary9_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary9_1.set("data
                    layersDictionary9_1.set("width", "60");
                    layersDictionary9_1.set("height", "15");
                    layersDictionary9_1.set("name", "Foreground");
                    mapDictionary9.get("layers").add(layersDictionary9_1);
                    var layersDictionary9_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary9_2.set("data
                    layersDictionary9_2.set("width", "60");
                    layersDictionary9_2.set("height", "15");
                    layersDictionary9_2.set("name", "Solid");
                    mapDictionary9.get("layers").add(layersDictionary9_2);



                    var mapDictionary10 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level2/3_LowerFloor", mapDictionary10);

                    mapDictionary10.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary10_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary10_0.set("firstgid", "1");
                    tilesetDictionary10_0.set("imagewidth", "464");
                    tilesetDictionary10_0.set("imageheight", "176");
                    tilesetDictionary10_0.set("name", "TsSnow");
                    tilesetDictionary10_0.set("tilewidth", "16");
                    tilesetDictionary10_0.set("tileheight", "16");
                    mapDictionary10.get("tilesets").add(tilesetDictionary10_0);
                    var tilesetDictionary10_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary10_1.set("firstgid", "320");
                    tilesetDictionary10_1.set("imagewidth", "80");
                    tilesetDictionary10_1.set("imageheight", "192");
                    tilesetDictionary10_1.set("name", "Solid");
                    tilesetDictionary10_1.set("tilewidth", "16");
                    tilesetDictionary10_1.set("tileheight", "16");
                    mapDictionary10.get("tilesets").add(tilesetDictionary10_1);
                    var tilesetDictionary10_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary10_2.set("firstgid", "380");
                    tilesetDictionary10_2.set("imagewidth", "128");
                    tilesetDictionary10_2.set("imageheight", "160");
                    tilesetDictionary10_2.set("name", "Actors");
                    tilesetDictionary10_2.set("tilewidth", "16");
                    tilesetDictionary10_2.set("tileheight", "16");
                    mapDictionary10.get("tilesets").add(tilesetDictionary10_2);
                    var tilesetDictionary10_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary10_3.set("firstgid", "460");
                    tilesetDictionary10_3.set("imagewidth", "128");
                    tilesetDictionary10_3.set("imageheight", "32");
                    tilesetDictionary10_3.set("name", "Spikes");
                    tilesetDictionary10_3.set("tilewidth", "16");
                    tilesetDictionary10_3.set("tileheight", "16");
                    mapDictionary10.get("tilesets").add(tilesetDictionary10_3);
                    var tilesetDictionary10_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary10_4.set("firstgid", "476");
                    tilesetDictionary10_4.set("imagewidth", "192");
                    tilesetDictionary10_4.set("imageheight", "80");
                    tilesetDictionary10_4.set("name", "Igloo");
                    tilesetDictionary10_4.set("tilewidth", "16");
                    tilesetDictionary10_4.set("tileheight", "16");
                    mapDictionary10.get("tilesets").add(tilesetDictionary10_4);
                    var tilesetDictionary10_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary10_5.set("firstgid", "536");
                    tilesetDictionary10_5.set("imagewidth", "80");
                    tilesetDictionary10_5.set("imageheight", "80");
                    tilesetDictionary10_5.set("name", "Signpost");
                    tilesetDictionary10_5.set("tilewidth", "16");
                    tilesetDictionary10_5.set("tileheight", "16");
                    mapDictionary10.get("tilesets").add(tilesetDictionary10_5);

                    mapDictionary10.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary10_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary10_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,177,177,177,177,0,0,0,0,177,177,177,177,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,242,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,212,242,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,212,242,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,212,148,148,242,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,212,242,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,212,242,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,212,148,242,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,212,242,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,212,242,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,178,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary10_0.set("width", "60");
                    layersDictionary10_0.set("height", "35");
                    layersDictionary10_0.set("name", "Background");
                    mapDictionary10.get("layers").add(layersDictionary10_0);
                    var layersDictionary10_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary10_1.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536,537,538,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,541,539,543,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,546,547,548,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary10_1.set("width", "60");
                    layersDictionary10_1.set("height", "35");
                    layersDictionary10_1.set("name", "Midground");
                    mapDictionary10.get("layers").add(layersDictionary10_1);
                    var layersDictionary10_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary10_2.set("data
                    layersDictionary10_2.set("width", "60");
                    layersDictionary10_2.set("height", "35");
                    layersDictionary10_2.set("name", "Foreground");
                    mapDictionary10.get("layers").add(layersDictionary10_2);
                    var layersDictionary10_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary10_3.set("data", "320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,320,320,320,320,320,320,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,320,320,320,320,320,320,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,452,412,412,412,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320");
                    layersDictionary10_3.set("width", "60");
                    layersDictionary10_3.set("height", "35");
                    layersDictionary10_3.set("name", "Solid");
                    mapDictionary10.get("layers").add(layersDictionary10_3);



                    var mapDictionary11 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level2/4_Cutscene", mapDictionary11);

                    mapDictionary11.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary11_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary11_0.set("firstgid", "1");
                    tilesetDictionary11_0.set("imagewidth", "464");
                    tilesetDictionary11_0.set("imageheight", "176");
                    tilesetDictionary11_0.set("name", "TsSnow");
                    tilesetDictionary11_0.set("tilewidth", "16");
                    tilesetDictionary11_0.set("tileheight", "16");
                    mapDictionary11.get("tilesets").add(tilesetDictionary11_0);
                    var tilesetDictionary11_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary11_1.set("firstgid", "320");
                    tilesetDictionary11_1.set("imagewidth", "80");
                    tilesetDictionary11_1.set("imageheight", "192");
                    tilesetDictionary11_1.set("name", "Solid");
                    tilesetDictionary11_1.set("tilewidth", "16");
                    tilesetDictionary11_1.set("tileheight", "16");
                    mapDictionary11.get("tilesets").add(tilesetDictionary11_1);
                    var tilesetDictionary11_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary11_2.set("firstgid", "380");
                    tilesetDictionary11_2.set("imagewidth", "128");
                    tilesetDictionary11_2.set("imageheight", "160");
                    tilesetDictionary11_2.set("name", "Actors");
                    tilesetDictionary11_2.set("tilewidth", "16");
                    tilesetDictionary11_2.set("tileheight", "16");
                    mapDictionary11.get("tilesets").add(tilesetDictionary11_2);
                    var tilesetDictionary11_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary11_3.set("firstgid", "460");
                    tilesetDictionary11_3.set("imagewidth", "128");
                    tilesetDictionary11_3.set("imageheight", "32");
                    tilesetDictionary11_3.set("name", "Spikes");
                    tilesetDictionary11_3.set("tilewidth", "16");
                    tilesetDictionary11_3.set("tileheight", "16");
                    mapDictionary11.get("tilesets").add(tilesetDictionary11_3);
                    var tilesetDictionary11_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary11_4.set("firstgid", "476");
                    tilesetDictionary11_4.set("imagewidth", "192");
                    tilesetDictionary11_4.set("imageheight", "80");
                    tilesetDictionary11_4.set("name", "Igloo");
                    tilesetDictionary11_4.set("tilewidth", "16");
                    tilesetDictionary11_4.set("tileheight", "16");
                    mapDictionary11.get("tilesets").add(tilesetDictionary11_4);

                    mapDictionary11.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary11_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary11_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,243,0,0,0,0,0,0,0,0,0,0,0,0,0,243,0,0,0,0,0,0,0,0,0,273,214,244,0,0,0,0,0,0,0,0,0,0,0,273,214,244,0,0,0,0,0,0,0,0,215,214,216,0,0,0,0,0,0,0,0,0,0,0,215,214,216,0,0,0,0,0,0,0,273,119,214,119,244,0,0,0,0,0,0,0,0,0,273,119,214,119,244,0,0,0,0,0,0,215,119,214,119,216,0,0,0,0,0,0,0,0,0,0,0,175,0,0,0,0,0,0,0,0,0,0,175,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary11_0.set("width", "25");
                    layersDictionary11_0.set("height", "45");
                    layersDictionary11_0.set("name", "Background");
                    mapDictionary11.get("layers").add(layersDictionary11_0);
                    var layersDictionary11_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary11_1.set("data
                    layersDictionary11_1.set("width", "25");
                    layersDictionary11_1.set("height", "45");
                    layersDictionary11_1.set("name", "Foreground");
                    mapDictionary11.get("layers").add(layersDictionary11_1);
                    var layersDictionary11_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary11_2.set("data
                    layersDictionary11_2.set("width", "25");
                    layersDictionary11_2.set("height", "45");
                    layersDictionary11_2.set("name", "Solid");
                    mapDictionary11.get("layers").add(layersDictionary11_2);



                    var mapDictionary12 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level2/5_Midpoint", mapDictionary12);

                    mapDictionary12.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary12_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary12_0.set("firstgid", "1");
                    tilesetDictionary12_0.set("imagewidth", "464");
                    tilesetDictionary12_0.set("imageheight", "176");
                    tilesetDictionary12_0.set("name", "TsSnow");
                    tilesetDictionary12_0.set("tilewidth", "16");
                    tilesetDictionary12_0.set("tileheight", "16");
                    mapDictionary12.get("tilesets").add(tilesetDictionary12_0);
                    var tilesetDictionary12_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary12_1.set("firstgid", "320");
                    tilesetDictionary12_1.set("imagewidth", "80");
                    tilesetDictionary12_1.set("imageheight", "192");
                    tilesetDictionary12_1.set("name", "Solid");
                    tilesetDictionary12_1.set("tilewidth", "16");
                    tilesetDictionary12_1.set("tileheight", "16");
                    mapDictionary12.get("tilesets").add(tilesetDictionary12_1);
                    var tilesetDictionary12_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary12_2.set("firstgid", "380");
                    tilesetDictionary12_2.set("imagewidth", "128");
                    tilesetDictionary12_2.set("imageheight", "160");
                    tilesetDictionary12_2.set("name", "Actors");
                    tilesetDictionary12_2.set("tilewidth", "16");
                    tilesetDictionary12_2.set("tileheight", "16");
                    mapDictionary12.get("tilesets").add(tilesetDictionary12_2);
                    var tilesetDictionary12_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary12_3.set("firstgid", "460");
                    tilesetDictionary12_3.set("imagewidth", "128");
                    tilesetDictionary12_3.set("imageheight", "32");
                    tilesetDictionary12_3.set("name", "Spikes");
                    tilesetDictionary12_3.set("tilewidth", "16");
                    tilesetDictionary12_3.set("tileheight", "16");
                    mapDictionary12.get("tilesets").add(tilesetDictionary12_3);
                    var tilesetDictionary12_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary12_4.set("firstgid", "476");
                    tilesetDictionary12_4.set("imagewidth", "192");
                    tilesetDictionary12_4.set("imageheight", "80");
                    tilesetDictionary12_4.set("name", "Igloo");
                    tilesetDictionary12_4.set("tilewidth", "16");
                    tilesetDictionary12_4.set("tileheight", "16");
                    mapDictionary12.get("tilesets").add(tilesetDictionary12_4);

                    mapDictionary12.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary12_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary12_0.set("data
                    layersDictionary12_0.set("width", "55");
                    layersDictionary12_0.set("height", "42");
                    layersDictionary12_0.set("name", "Background");
                    mapDictionary12.get("layers").add(layersDictionary12_0);
                    var layersDictionary12_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary12_1.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,426,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,426,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,426,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,426,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,453,0,0,0,0,453,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,393,0,0,393,0,0,0,0,447,0,0,393,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,33,0,0,31,33,0,0,31,33,0,0,31,33,0,0,31,32,32,97,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,60,62,0,0,60,62,0,0,60,62,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62");
                    layersDictionary12_1.set("width", "55");
                    layersDictionary12_1.set("height", "42");
                    layersDictionary12_1.set("name", "Foreground");
                    mapDictionary12.get("layers").add(layersDictionary12_1);
                    var layersDictionary12_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary12_2.set("data
                    layersDictionary12_2.set("width", "55");
                    layersDictionary12_2.set("height", "42");
                    layersDictionary12_2.set("name", "Solid");
                    mapDictionary12.get("layers").add(layersDictionary12_2);



                    var mapDictionary13 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level2/6_Drop1", mapDictionary13);

                    mapDictionary13.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary13_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary13_0.set("firstgid", "1");
                    tilesetDictionary13_0.set("imagewidth", "464");
                    tilesetDictionary13_0.set("imageheight", "176");
                    tilesetDictionary13_0.set("name", "TsSnow");
                    tilesetDictionary13_0.set("tilewidth", "16");
                    tilesetDictionary13_0.set("tileheight", "16");
                    mapDictionary13.get("tilesets").add(tilesetDictionary13_0);
                    var tilesetDictionary13_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary13_1.set("firstgid", "320");
                    tilesetDictionary13_1.set("imagewidth", "80");
                    tilesetDictionary13_1.set("imageheight", "192");
                    tilesetDictionary13_1.set("name", "Solid");
                    tilesetDictionary13_1.set("tilewidth", "16");
                    tilesetDictionary13_1.set("tileheight", "16");
                    mapDictionary13.get("tilesets").add(tilesetDictionary13_1);
                    var tilesetDictionary13_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary13_2.set("firstgid", "380");
                    tilesetDictionary13_2.set("imagewidth", "128");
                    tilesetDictionary13_2.set("imageheight", "160");
                    tilesetDictionary13_2.set("name", "Actors");
                    tilesetDictionary13_2.set("tilewidth", "16");
                    tilesetDictionary13_2.set("tileheight", "16");
                    mapDictionary13.get("tilesets").add(tilesetDictionary13_2);
                    var tilesetDictionary13_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary13_3.set("firstgid", "460");
                    tilesetDictionary13_3.set("imagewidth", "128");
                    tilesetDictionary13_3.set("imageheight", "32");
                    tilesetDictionary13_3.set("name", "Spikes");
                    tilesetDictionary13_3.set("tilewidth", "16");
                    tilesetDictionary13_3.set("tileheight", "16");
                    mapDictionary13.get("tilesets").add(tilesetDictionary13_3);
                    var tilesetDictionary13_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary13_4.set("firstgid", "476");
                    tilesetDictionary13_4.set("imagewidth", "192");
                    tilesetDictionary13_4.set("imageheight", "80");
                    tilesetDictionary13_4.set("name", "Igloo");
                    tilesetDictionary13_4.set("tilewidth", "16");
                    tilesetDictionary13_4.set("tileheight", "16");
                    mapDictionary13.get("tilesets").add(tilesetDictionary13_4);

                    mapDictionary13.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary13_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary13_0.set("data
                    layersDictionary13_0.set("width", "67");
                    layersDictionary13_0.set("height", "15");
                    layersDictionary13_0.set("name", "Background");
                    mapDictionary13.get("layers").add(layersDictionary13_0);
                    var layersDictionary13_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary13_1.set("data
                    layersDictionary13_1.set("width", "67");
                    layersDictionary13_1.set("height", "15");
                    layersDictionary13_1.set("name", "Foreground");
                    mapDictionary13.get("layers").add(layersDictionary13_1);
                    var layersDictionary13_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary13_2.set("data
                    layersDictionary13_2.set("width", "67");
                    layersDictionary13_2.set("height", "15");
                    layersDictionary13_2.set("name", "Solid");
                    mapDictionary13.get("layers").add(layersDictionary13_2);



                    var mapDictionary14 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level2/6_Drop2", mapDictionary14);

                    mapDictionary14.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary14_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary14_0.set("firstgid", "1");
                    tilesetDictionary14_0.set("imagewidth", "464");
                    tilesetDictionary14_0.set("imageheight", "176");
                    tilesetDictionary14_0.set("name", "TsSnow");
                    tilesetDictionary14_0.set("tilewidth", "16");
                    tilesetDictionary14_0.set("tileheight", "16");
                    mapDictionary14.get("tilesets").add(tilesetDictionary14_0);
                    var tilesetDictionary14_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary14_1.set("firstgid", "320");
                    tilesetDictionary14_1.set("imagewidth", "80");
                    tilesetDictionary14_1.set("imageheight", "192");
                    tilesetDictionary14_1.set("name", "Solid");
                    tilesetDictionary14_1.set("tilewidth", "16");
                    tilesetDictionary14_1.set("tileheight", "16");
                    mapDictionary14.get("tilesets").add(tilesetDictionary14_1);
                    var tilesetDictionary14_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary14_2.set("firstgid", "380");
                    tilesetDictionary14_2.set("imagewidth", "128");
                    tilesetDictionary14_2.set("imageheight", "160");
                    tilesetDictionary14_2.set("name", "Actors");
                    tilesetDictionary14_2.set("tilewidth", "16");
                    tilesetDictionary14_2.set("tileheight", "16");
                    mapDictionary14.get("tilesets").add(tilesetDictionary14_2);
                    var tilesetDictionary14_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary14_3.set("firstgid", "460");
                    tilesetDictionary14_3.set("imagewidth", "128");
                    tilesetDictionary14_3.set("imageheight", "32");
                    tilesetDictionary14_3.set("name", "Spikes");
                    tilesetDictionary14_3.set("tilewidth", "16");
                    tilesetDictionary14_3.set("tileheight", "16");
                    mapDictionary14.get("tilesets").add(tilesetDictionary14_3);
                    var tilesetDictionary14_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary14_4.set("firstgid", "476");
                    tilesetDictionary14_4.set("imagewidth", "192");
                    tilesetDictionary14_4.set("imageheight", "80");
                    tilesetDictionary14_4.set("name", "Igloo");
                    tilesetDictionary14_4.set("tilewidth", "16");
                    tilesetDictionary14_4.set("tileheight", "16");
                    mapDictionary14.get("tilesets").add(tilesetDictionary14_4);

                    mapDictionary14.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary14_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary14_0.set("data
                    layersDictionary14_0.set("width", "67");
                    layersDictionary14_0.set("height", "15");
                    layersDictionary14_0.set("name", "Background");
                    mapDictionary14.get("layers").add(layersDictionary14_0);
                    var layersDictionary14_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary14_1.set("data
                    layersDictionary14_1.set("width", "67");
                    layersDictionary14_1.set("height", "15");
                    layersDictionary14_1.set("name", "Foreground");
                    mapDictionary14.get("layers").add(layersDictionary14_1);
                    var layersDictionary14_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary14_2.set("data
                    layersDictionary14_2.set("width", "67");
                    layersDictionary14_2.set("height", "15");
                    layersDictionary14_2.set("name", "Solid");
                    mapDictionary14.get("layers").add(layersDictionary14_2);



                    var mapDictionary15 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level2/6_Drop3", mapDictionary15);

                    mapDictionary15.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary15_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary15_0.set("firstgid", "1");
                    tilesetDictionary15_0.set("imagewidth", "464");
                    tilesetDictionary15_0.set("imageheight", "176");
                    tilesetDictionary15_0.set("name", "TsSnow");
                    tilesetDictionary15_0.set("tilewidth", "16");
                    tilesetDictionary15_0.set("tileheight", "16");
                    mapDictionary15.get("tilesets").add(tilesetDictionary15_0);
                    var tilesetDictionary15_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary15_1.set("firstgid", "320");
                    tilesetDictionary15_1.set("imagewidth", "80");
                    tilesetDictionary15_1.set("imageheight", "192");
                    tilesetDictionary15_1.set("name", "Solid");
                    tilesetDictionary15_1.set("tilewidth", "16");
                    tilesetDictionary15_1.set("tileheight", "16");
                    mapDictionary15.get("tilesets").add(tilesetDictionary15_1);
                    var tilesetDictionary15_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary15_2.set("firstgid", "380");
                    tilesetDictionary15_2.set("imagewidth", "128");
                    tilesetDictionary15_2.set("imageheight", "160");
                    tilesetDictionary15_2.set("name", "Actors");
                    tilesetDictionary15_2.set("tilewidth", "16");
                    tilesetDictionary15_2.set("tileheight", "16");
                    mapDictionary15.get("tilesets").add(tilesetDictionary15_2);
                    var tilesetDictionary15_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary15_3.set("firstgid", "460");
                    tilesetDictionary15_3.set("imagewidth", "128");
                    tilesetDictionary15_3.set("imageheight", "32");
                    tilesetDictionary15_3.set("name", "Spikes");
                    tilesetDictionary15_3.set("tilewidth", "16");
                    tilesetDictionary15_3.set("tileheight", "16");
                    mapDictionary15.get("tilesets").add(tilesetDictionary15_3);
                    var tilesetDictionary15_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary15_4.set("firstgid", "476");
                    tilesetDictionary15_4.set("imagewidth", "192");
                    tilesetDictionary15_4.set("imageheight", "80");
                    tilesetDictionary15_4.set("name", "Igloo");
                    tilesetDictionary15_4.set("tilewidth", "16");
                    tilesetDictionary15_4.set("tileheight", "16");
                    mapDictionary15.get("tilesets").add(tilesetDictionary15_4);

                    mapDictionary15.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary15_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary15_0.set("data
                    layersDictionary15_0.set("width", "67");
                    layersDictionary15_0.set("height", "15");
                    layersDictionary15_0.set("name", "Background");
                    mapDictionary15.get("layers").add(layersDictionary15_0);
                    var layersDictionary15_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary15_1.set("data", "61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,60,62,0,0,60,62,0,0,60,62,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,60,62,0,0,60,62,0,0,60,62,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,60,62,0,0,60,62,0,0,60,62,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,60,62,0,0,60,62,0,0,60,62,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,60,62,0,0,60,62,0,0,60,62,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,60,62,0,0,60,62,0,0,60,62,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,60,62,0,0,60,62,0,0,60,62,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,60,62,0,0,60,62,0,0,60,62,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,60,62,0,0,60,62,0,0,60,62,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,60,62,0,0,60,62,0,0,60,62,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,60,62,0,0,60,62,0,0,60,62,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,60,62,0,0,60,62,0,0,60,62,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,464,464,60,62,464,464,60,62,0,0,60,62,464,464,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,11,3,3,41,11,3,3,41,62,0,0,60,11,3,3,41,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,60,62,0,0,60,62,0,0,60,62,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62");
                    layersDictionary15_1.set("width", "67");
                    layersDictionary15_1.set("height", "15");
                    layersDictionary15_1.set("name", "Foreground");
                    mapDictionary15.get("layers").add(layersDictionary15_1);
                    var layersDictionary15_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary15_2.set("data
                    layersDictionary15_2.set("width", "67");
                    layersDictionary15_2.set("height", "15");
                    layersDictionary15_2.set("name", "Solid");
                    mapDictionary15.get("layers").add(layersDictionary15_2);



                    var mapDictionary16 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level2/6_Drop4", mapDictionary16);

                    mapDictionary16.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary16_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary16_0.set("firstgid", "1");
                    tilesetDictionary16_0.set("imagewidth", "464");
                    tilesetDictionary16_0.set("imageheight", "176");
                    tilesetDictionary16_0.set("name", "TsSnow");
                    tilesetDictionary16_0.set("tilewidth", "16");
                    tilesetDictionary16_0.set("tileheight", "16");
                    mapDictionary16.get("tilesets").add(tilesetDictionary16_0);
                    var tilesetDictionary16_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary16_1.set("firstgid", "320");
                    tilesetDictionary16_1.set("imagewidth", "80");
                    tilesetDictionary16_1.set("imageheight", "192");
                    tilesetDictionary16_1.set("name", "Solid");
                    tilesetDictionary16_1.set("tilewidth", "16");
                    tilesetDictionary16_1.set("tileheight", "16");
                    mapDictionary16.get("tilesets").add(tilesetDictionary16_1);
                    var tilesetDictionary16_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary16_2.set("firstgid", "380");
                    tilesetDictionary16_2.set("imagewidth", "128");
                    tilesetDictionary16_2.set("imageheight", "160");
                    tilesetDictionary16_2.set("name", "Actors");
                    tilesetDictionary16_2.set("tilewidth", "16");
                    tilesetDictionary16_2.set("tileheight", "16");
                    mapDictionary16.get("tilesets").add(tilesetDictionary16_2);
                    var tilesetDictionary16_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary16_3.set("firstgid", "460");
                    tilesetDictionary16_3.set("imagewidth", "128");
                    tilesetDictionary16_3.set("imageheight", "32");
                    tilesetDictionary16_3.set("name", "Spikes");
                    tilesetDictionary16_3.set("tilewidth", "16");
                    tilesetDictionary16_3.set("tileheight", "16");
                    mapDictionary16.get("tilesets").add(tilesetDictionary16_3);
                    var tilesetDictionary16_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary16_4.set("firstgid", "476");
                    tilesetDictionary16_4.set("imagewidth", "192");
                    tilesetDictionary16_4.set("imageheight", "80");
                    tilesetDictionary16_4.set("name", "Igloo");
                    tilesetDictionary16_4.set("tilewidth", "16");
                    tilesetDictionary16_4.set("tileheight", "16");
                    mapDictionary16.get("tilesets").add(tilesetDictionary16_4);

                    mapDictionary16.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary16_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary16_0.set("data
                    layersDictionary16_0.set("width", "67");
                    layersDictionary16_0.set("height", "15");
                    layersDictionary16_0.set("name", "Background");
                    mapDictionary16.get("layers").add(layersDictionary16_0);
                    var layersDictionary16_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary16_1.set("data
                    layersDictionary16_1.set("width", "67");
                    layersDictionary16_1.set("height", "15");
                    layersDictionary16_1.set("name", "Foreground");
                    mapDictionary16.get("layers").add(layersDictionary16_1);
                    var layersDictionary16_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary16_2.set("data
                    layersDictionary16_2.set("width", "67");
                    layersDictionary16_2.set("height", "15");
                    layersDictionary16_2.set("name", "Solid");
                    mapDictionary16.get("layers").add(layersDictionary16_2);



                    var mapDictionary17 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level2/6_Platform", mapDictionary17);

                    mapDictionary17.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary17_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary17_0.set("firstgid", "1");
                    tilesetDictionary17_0.set("imagewidth", "464");
                    tilesetDictionary17_0.set("imageheight", "176");
                    tilesetDictionary17_0.set("name", "TsSnow");
                    tilesetDictionary17_0.set("tilewidth", "16");
                    tilesetDictionary17_0.set("tileheight", "16");
                    mapDictionary17.get("tilesets").add(tilesetDictionary17_0);
                    var tilesetDictionary17_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary17_1.set("firstgid", "320");
                    tilesetDictionary17_1.set("imagewidth", "80");
                    tilesetDictionary17_1.set("imageheight", "192");
                    tilesetDictionary17_1.set("name", "Solid");
                    tilesetDictionary17_1.set("tilewidth", "16");
                    tilesetDictionary17_1.set("tileheight", "16");
                    mapDictionary17.get("tilesets").add(tilesetDictionary17_1);
                    var tilesetDictionary17_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary17_2.set("firstgid", "380");
                    tilesetDictionary17_2.set("imagewidth", "128");
                    tilesetDictionary17_2.set("imageheight", "160");
                    tilesetDictionary17_2.set("name", "Actors");
                    tilesetDictionary17_2.set("tilewidth", "16");
                    tilesetDictionary17_2.set("tileheight", "16");
                    mapDictionary17.get("tilesets").add(tilesetDictionary17_2);
                    var tilesetDictionary17_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary17_3.set("firstgid", "460");
                    tilesetDictionary17_3.set("imagewidth", "128");
                    tilesetDictionary17_3.set("imageheight", "32");
                    tilesetDictionary17_3.set("name", "Spikes");
                    tilesetDictionary17_3.set("tilewidth", "16");
                    tilesetDictionary17_3.set("tileheight", "16");
                    mapDictionary17.get("tilesets").add(tilesetDictionary17_3);
                    var tilesetDictionary17_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary17_4.set("firstgid", "476");
                    tilesetDictionary17_4.set("imagewidth", "192");
                    tilesetDictionary17_4.set("imageheight", "80");
                    tilesetDictionary17_4.set("name", "Igloo");
                    tilesetDictionary17_4.set("tilewidth", "16");
                    tilesetDictionary17_4.set("tileheight", "16");
                    mapDictionary17.get("tilesets").add(tilesetDictionary17_4);

                    mapDictionary17.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary17_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary17_0.set("data
                    layersDictionary17_0.set("width", "55");
                    layersDictionary17_0.set("height", "15");
                    layersDictionary17_0.set("name", "Background");
                    mapDictionary17.get("layers").add(layersDictionary17_0);
                    var layersDictionary17_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary17_1.set("data", "61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,60,62,0,0,60,62,0,0,60,62,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,67,90,90,90,90,90,91,0,0,89,91,0,0,89,91,0,0,89,91,0,0,89,90,90,90,90,90,68,61,61,61,61,61,61,61,61,61,61,61,62,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,62,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,62,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,62,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,62,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,62,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,393,0,393,0,0,393,0,0,393,0,0,0,393,0,393,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,62,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,62,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,62,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,62,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,62,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,393,0,0,0,0,406,0,0,0,0,406,0,0,406,0,0,0,0,0,0,393,0,0,60,61,61,61,61,61,61,61,61,61,61,61,62,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,96,32,32,32,32,32,33,0,0,31,33,0,0,31,33,0,0,31,33,0,0,31,32,32,32,32,32,97,61,61,61,61,61,61,61,61,61,61,61,62,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,60,62,0,0,60,62,0,0,60,62,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62");
                    layersDictionary17_1.set("width", "55");
                    layersDictionary17_1.set("height", "15");
                    layersDictionary17_1.set("name", "Foreground");
                    mapDictionary17.get("layers").add(layersDictionary17_1);
                    var layersDictionary17_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary17_2.set("data
                    layersDictionary17_2.set("width", "55");
                    layersDictionary17_2.set("height", "15");
                    layersDictionary17_2.set("name", "Solid");
                    mapDictionary17.get("layers").add(layersDictionary17_2);



                    var mapDictionary18 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level2/7_Finish", mapDictionary18);

                    mapDictionary18.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary18_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary18_0.set("firstgid", "1");
                    tilesetDictionary18_0.set("imagewidth", "464");
                    tilesetDictionary18_0.set("imageheight", "176");
                    tilesetDictionary18_0.set("name", "TsSnow");
                    tilesetDictionary18_0.set("tilewidth", "16");
                    tilesetDictionary18_0.set("tileheight", "16");
                    mapDictionary18.get("tilesets").add(tilesetDictionary18_0);
                    var tilesetDictionary18_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary18_1.set("firstgid", "320");
                    tilesetDictionary18_1.set("imagewidth", "80");
                    tilesetDictionary18_1.set("imageheight", "192");
                    tilesetDictionary18_1.set("name", "Solid");
                    tilesetDictionary18_1.set("tilewidth", "16");
                    tilesetDictionary18_1.set("tileheight", "16");
                    mapDictionary18.get("tilesets").add(tilesetDictionary18_1);
                    var tilesetDictionary18_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary18_2.set("firstgid", "380");
                    tilesetDictionary18_2.set("imagewidth", "128");
                    tilesetDictionary18_2.set("imageheight", "160");
                    tilesetDictionary18_2.set("name", "Actors");
                    tilesetDictionary18_2.set("tilewidth", "16");
                    tilesetDictionary18_2.set("tileheight", "16");
                    mapDictionary18.get("tilesets").add(tilesetDictionary18_2);
                    var tilesetDictionary18_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary18_3.set("firstgid", "460");
                    tilesetDictionary18_3.set("imagewidth", "128");
                    tilesetDictionary18_3.set("imageheight", "32");
                    tilesetDictionary18_3.set("name", "Spikes");
                    tilesetDictionary18_3.set("tilewidth", "16");
                    tilesetDictionary18_3.set("tileheight", "16");
                    mapDictionary18.get("tilesets").add(tilesetDictionary18_3);
                    var tilesetDictionary18_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary18_4.set("firstgid", "476");
                    tilesetDictionary18_4.set("imagewidth", "192");
                    tilesetDictionary18_4.set("imageheight", "80");
                    tilesetDictionary18_4.set("name", "Igloo");
                    tilesetDictionary18_4.set("tilewidth", "16");
                    tilesetDictionary18_4.set("tileheight", "16");
                    mapDictionary18.get("tilesets").add(tilesetDictionary18_4);

                    mapDictionary18.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary18_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary18_0.set("data
                    layersDictionary18_0.set("width", "85");
                    layersDictionary18_0.set("height", "15");
                    layersDictionary18_0.set("name", "Background");
                    mapDictionary18.get("layers").add(layersDictionary18_0);
                    var layersDictionary18_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary18_1.set("data", "61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,60,62,0,0,60,62,0,0,60,62,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,67,90,90,91,0,0,89,91,0,0,89,91,0,0,89,91,0,0,89,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,91,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,477,478,479,479,480,481,0,0,0,0,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,488,489,490,491,491,492,493,0,0,0,0,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,500,501,502,503,504,492,505,0,0,0,0,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,500,513,514,515,515,516,517,0,0,0,0,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,407,0,407,0,407,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,32,32,32,97,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,96,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,33,0,0,0,0,0,0,31,32,32,32,97,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61");
                    layersDictionary18_1.set("width", "85");
                    layersDictionary18_1.set("height", "15");
                    layersDictionary18_1.set("name", "Foreground");
                    mapDictionary18.get("layers").add(layersDictionary18_1);
                    var layersDictionary18_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary18_2.set("data
                    layersDictionary18_2.set("width", "85");
                    layersDictionary18_2.set("height", "15");
                    layersDictionary18_2.set("name", "Solid");
                    mapDictionary18.get("layers").add(layersDictionary18_2);



                    var mapDictionary19 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level2/Sign", mapDictionary19);

                    mapDictionary19.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary19_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary19_0.set("firstgid", "1");
                    tilesetDictionary19_0.set("imagewidth", "464");
                    tilesetDictionary19_0.set("imageheight", "176");
                    tilesetDictionary19_0.set("name", "TsSnow");
                    tilesetDictionary19_0.set("tilewidth", "16");
                    tilesetDictionary19_0.set("tileheight", "16");
                    mapDictionary19.get("tilesets").add(tilesetDictionary19_0);
                    var tilesetDictionary19_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary19_1.set("firstgid", "320");
                    tilesetDictionary19_1.set("imagewidth", "80");
                    tilesetDictionary19_1.set("imageheight", "192");
                    tilesetDictionary19_1.set("name", "Solid");
                    tilesetDictionary19_1.set("tilewidth", "16");
                    tilesetDictionary19_1.set("tileheight", "16");
                    mapDictionary19.get("tilesets").add(tilesetDictionary19_1);
                    var tilesetDictionary19_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary19_2.set("firstgid", "380");
                    tilesetDictionary19_2.set("imagewidth", "128");
                    tilesetDictionary19_2.set("imageheight", "160");
                    tilesetDictionary19_2.set("name", "Actors");
                    tilesetDictionary19_2.set("tilewidth", "16");
                    tilesetDictionary19_2.set("tileheight", "16");
                    mapDictionary19.get("tilesets").add(tilesetDictionary19_2);
                    var tilesetDictionary19_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary19_3.set("firstgid", "460");
                    tilesetDictionary19_3.set("imagewidth", "128");
                    tilesetDictionary19_3.set("imageheight", "32");
                    tilesetDictionary19_3.set("name", "Spikes");
                    tilesetDictionary19_3.set("tilewidth", "16");
                    tilesetDictionary19_3.set("tileheight", "16");
                    mapDictionary19.get("tilesets").add(tilesetDictionary19_3);
                    var tilesetDictionary19_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary19_4.set("firstgid", "476");
                    tilesetDictionary19_4.set("imagewidth", "192");
                    tilesetDictionary19_4.set("imageheight", "80");
                    tilesetDictionary19_4.set("name", "Igloo");
                    tilesetDictionary19_4.set("tilewidth", "16");
                    tilesetDictionary19_4.set("tileheight", "16");
                    mapDictionary19.get("tilesets").add(tilesetDictionary19_4);
                    var tilesetDictionary19_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary19_5.set("firstgid", "536");
                    tilesetDictionary19_5.set("imagewidth", "80");
                    tilesetDictionary19_5.set("imageheight", "80");
                    tilesetDictionary19_5.set("name", "Signpost");
                    tilesetDictionary19_5.set("tilewidth", "16");
                    tilesetDictionary19_5.set("tileheight", "16");
                    mapDictionary19.get("tilesets").add(tilesetDictionary19_5);

                    mapDictionary19.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary19_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary19_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary19_0.set("width", "8");
                    layersDictionary19_0.set("height", "3");
                    layersDictionary19_0.set("name", "Background");
                    mapDictionary19.get("layers").add(layersDictionary19_0);
                    var layersDictionary19_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary19_1.set("data", "536,537,538,0,0,536,537,538,541,553,543,0,0,541,554,543,546,547,548,0,0,546,547,548");
                    layersDictionary19_1.set("width", "8");
                    layersDictionary19_1.set("height", "3");
                    layersDictionary19_1.set("name", "Midground");
                    mapDictionary19.get("layers").add(layersDictionary19_1);
                    var layersDictionary19_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary19_2.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary19_2.set("width", "8");
                    layersDictionary19_2.set("height", "3");
                    layersDictionary19_2.set("name", "Foreground");
                    mapDictionary19.get("layers").add(layersDictionary19_2);
                    var layersDictionary19_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary19_3.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary19_3.set("width", "8");
                    layersDictionary19_3.set("height", "3");
                    layersDictionary19_3.set("name", "Solid");
                    mapDictionary19.get("layers").add(layersDictionary19_3);



                    var mapDictionary20 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level3/A_Start", mapDictionary20);

                    mapDictionary20.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary20_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary20_0.set("firstgid", "1");
                    tilesetDictionary20_0.set("imagewidth", "464");
                    tilesetDictionary20_0.set("imageheight", "176");
                    tilesetDictionary20_0.set("name", "TsSnow");
                    tilesetDictionary20_0.set("tilewidth", "16");
                    tilesetDictionary20_0.set("tileheight", "16");
                    mapDictionary20.get("tilesets").add(tilesetDictionary20_0);
                    var tilesetDictionary20_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary20_1.set("firstgid", "320");
                    tilesetDictionary20_1.set("imagewidth", "80");
                    tilesetDictionary20_1.set("imageheight", "192");
                    tilesetDictionary20_1.set("name", "Solid");
                    tilesetDictionary20_1.set("tilewidth", "16");
                    tilesetDictionary20_1.set("tileheight", "16");
                    mapDictionary20.get("tilesets").add(tilesetDictionary20_1);
                    var tilesetDictionary20_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary20_2.set("firstgid", "380");
                    tilesetDictionary20_2.set("imagewidth", "128");
                    tilesetDictionary20_2.set("imageheight", "160");
                    tilesetDictionary20_2.set("name", "Actors");
                    tilesetDictionary20_2.set("tilewidth", "16");
                    tilesetDictionary20_2.set("tileheight", "16");
                    mapDictionary20.get("tilesets").add(tilesetDictionary20_2);
                    var tilesetDictionary20_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary20_3.set("firstgid", "460");
                    tilesetDictionary20_3.set("imagewidth", "128");
                    tilesetDictionary20_3.set("imageheight", "32");
                    tilesetDictionary20_3.set("name", "Spikes");
                    tilesetDictionary20_3.set("tilewidth", "16");
                    tilesetDictionary20_3.set("tileheight", "16");
                    mapDictionary20.get("tilesets").add(tilesetDictionary20_3);
                    var tilesetDictionary20_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary20_4.set("firstgid", "476");
                    tilesetDictionary20_4.set("imagewidth", "192");
                    tilesetDictionary20_4.set("imageheight", "80");
                    tilesetDictionary20_4.set("name", "Igloo");
                    tilesetDictionary20_4.set("tilewidth", "16");
                    tilesetDictionary20_4.set("tileheight", "16");
                    mapDictionary20.get("tilesets").add(tilesetDictionary20_4);
                    var tilesetDictionary20_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary20_5.set("firstgid", "536");
                    tilesetDictionary20_5.set("imagewidth", "80");
                    tilesetDictionary20_5.set("imageheight", "80");
                    tilesetDictionary20_5.set("name", "Signpost");
                    tilesetDictionary20_5.set("tilewidth", "16");
                    tilesetDictionary20_5.set("tileheight", "16");
                    mapDictionary20.get("tilesets").add(tilesetDictionary20_5);
                    var tilesetDictionary20_6 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary20_6.set("firstgid", "561");
                    tilesetDictionary20_6.set("imagewidth", "224");
                    tilesetDictionary20_6.set("imageheight", "240");
                    tilesetDictionary20_6.set("name", "TsCastle");
                    tilesetDictionary20_6.set("tilewidth", "16");
                    tilesetDictionary20_6.set("tileheight", "16");
                    mapDictionary20.get("tilesets").add(tilesetDictionary20_6);

                    mapDictionary20.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary20_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary20_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,243,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,273,214,244,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,215,214,216,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,273,119,214,119,244,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,243,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,215,119,214,119,216,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,273,214,244,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,241,148,148,148,148,148,148,148,148,242,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,273,119,119,214,119,119,244,0,0,0,0,536,537,538,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,215,214,216,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,241,148,148,213,177,177,177,177,177,177,177,177,212,242,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,215,119,214,119,216,0,0,0,0,0,541,539,543,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,273,119,214,119,244,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,241,148,213,177,177,177,177,177,177,177,177,177,177,177,177,212,148,242,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,175,0,0,0,0,0,0,0,546,547,548,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,175,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,241,213,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,212,242,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,241,213,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,212,242,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,241,213,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,212,148,242,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,241,213,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,212,242,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,241,213,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,212,242,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,241,148,213,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,212,242,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,241,213,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,212,242,0,0,0");
                    layersDictionary20_0.set("width", "110");
                    layersDictionary20_0.set("height", "25");
                    layersDictionary20_0.set("name", "Background");
                    mapDictionary20.get("layers").add(layersDictionary20_0);
                    var layersDictionary20_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary20_1.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,393,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,393,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,406,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,393,0,0,0,0,0,0,393,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,464,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,380,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,4,0,0,0,0,0,2,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,393,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,3,3,3,4,0,0,0,0,0,0,1,0,0,0,0,0,0,2,3,3,3,3,3,3,3,3,3,3,3,3,3,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,64,3,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,32,32,32,32,33,0,0,0,0,0,0,2,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,67,90,90,91,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,89,90,90,90,90,91,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,67,90,90,91,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,61,61,61,61,61,61,61,61,61,61,61,67,90,90,90,91,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,61,61,61,61,61,61,61,67,90,90,90,91,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,61,61,61,61,67,90,90,91,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary20_1.set("width", "110");
                    layersDictionary20_1.set("height", "25");
                    layersDictionary20_1.set("name", "Foreground");
                    mapDictionary20.get("layers").add(layersDictionary20_1);
                    var layersDictionary20_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary20_2.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,0,0,452,412,412,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,0,0,0,0,0,0,320,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary20_2.set("width", "110");
                    layersDictionary20_2.set("height", "25");
                    layersDictionary20_2.set("name", "Solid");
                    mapDictionary20.get("layers").add(layersDictionary20_2);



                    var mapDictionary21 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level3/B_Obstacles1", mapDictionary21);

                    mapDictionary21.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary21_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary21_0.set("firstgid", "1");
                    tilesetDictionary21_0.set("imagewidth", "464");
                    tilesetDictionary21_0.set("imageheight", "176");
                    tilesetDictionary21_0.set("name", "TsSnow");
                    tilesetDictionary21_0.set("tilewidth", "16");
                    tilesetDictionary21_0.set("tileheight", "16");
                    mapDictionary21.get("tilesets").add(tilesetDictionary21_0);
                    var tilesetDictionary21_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary21_1.set("firstgid", "320");
                    tilesetDictionary21_1.set("imagewidth", "80");
                    tilesetDictionary21_1.set("imageheight", "192");
                    tilesetDictionary21_1.set("name", "Solid");
                    tilesetDictionary21_1.set("tilewidth", "16");
                    tilesetDictionary21_1.set("tileheight", "16");
                    mapDictionary21.get("tilesets").add(tilesetDictionary21_1);
                    var tilesetDictionary21_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary21_2.set("firstgid", "380");
                    tilesetDictionary21_2.set("imagewidth", "128");
                    tilesetDictionary21_2.set("imageheight", "160");
                    tilesetDictionary21_2.set("name", "Actors");
                    tilesetDictionary21_2.set("tilewidth", "16");
                    tilesetDictionary21_2.set("tileheight", "16");
                    mapDictionary21.get("tilesets").add(tilesetDictionary21_2);
                    var tilesetDictionary21_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary21_3.set("firstgid", "460");
                    tilesetDictionary21_3.set("imagewidth", "128");
                    tilesetDictionary21_3.set("imageheight", "32");
                    tilesetDictionary21_3.set("name", "Spikes");
                    tilesetDictionary21_3.set("tilewidth", "16");
                    tilesetDictionary21_3.set("tileheight", "16");
                    mapDictionary21.get("tilesets").add(tilesetDictionary21_3);
                    var tilesetDictionary21_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary21_4.set("firstgid", "476");
                    tilesetDictionary21_4.set("imagewidth", "192");
                    tilesetDictionary21_4.set("imageheight", "80");
                    tilesetDictionary21_4.set("name", "Igloo");
                    tilesetDictionary21_4.set("tilewidth", "16");
                    tilesetDictionary21_4.set("tileheight", "16");
                    mapDictionary21.get("tilesets").add(tilesetDictionary21_4);
                    var tilesetDictionary21_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary21_5.set("firstgid", "536");
                    tilesetDictionary21_5.set("imagewidth", "80");
                    tilesetDictionary21_5.set("imageheight", "80");
                    tilesetDictionary21_5.set("name", "Signpost");
                    tilesetDictionary21_5.set("tilewidth", "16");
                    tilesetDictionary21_5.set("tileheight", "16");
                    mapDictionary21.get("tilesets").add(tilesetDictionary21_5);
                    var tilesetDictionary21_6 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary21_6.set("firstgid", "561");
                    tilesetDictionary21_6.set("imagewidth", "224");
                    tilesetDictionary21_6.set("imageheight", "240");
                    tilesetDictionary21_6.set("name", "TsCastle");
                    tilesetDictionary21_6.set("tilewidth", "16");
                    tilesetDictionary21_6.set("tileheight", "16");
                    mapDictionary21.get("tilesets").add(tilesetDictionary21_6);

                    mapDictionary21.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary21_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary21_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary21_0.set("width", "57");
                    layersDictionary21_0.set("height", "25");
                    layersDictionary21_0.set("name", "Background");
                    mapDictionary21.get("layers").add(layersDictionary21_0);
                    var layersDictionary21_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary21_1.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,406,0,0,0,0,0,0,0,0,0,406,0,0,0,0,0,0,406,0,0,0,0,0,406,0,0,0,0,447,0,0,0,0,406,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,464,0,0,0,0,0,0,0,0,0,464,0,0,0,0,0,0,464,0,0,0,0,0,464,0,0,0,0,464,0,0,0,0,464,0,0,0,0,0,2,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary21_1.set("width", "57");
                    layersDictionary21_1.set("height", "25");
                    layersDictionary21_1.set("name", "Foreground");
                    mapDictionary21.get("layers").add(layersDictionary21_1);
                    var layersDictionary21_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary21_2.set("data
                    layersDictionary21_2.set("width", "57");
                    layersDictionary21_2.set("height", "25");
                    layersDictionary21_2.set("name", "Solid");
                    mapDictionary21.get("layers").add(layersDictionary21_2);



                    var mapDictionary22 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level3/B_Obstacles2", mapDictionary22);

                    mapDictionary22.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary22_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary22_0.set("firstgid", "1");
                    tilesetDictionary22_0.set("imagewidth", "464");
                    tilesetDictionary22_0.set("imageheight", "176");
                    tilesetDictionary22_0.set("name", "TsSnow");
                    tilesetDictionary22_0.set("tilewidth", "16");
                    tilesetDictionary22_0.set("tileheight", "16");
                    mapDictionary22.get("tilesets").add(tilesetDictionary22_0);
                    var tilesetDictionary22_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary22_1.set("firstgid", "320");
                    tilesetDictionary22_1.set("imagewidth", "80");
                    tilesetDictionary22_1.set("imageheight", "192");
                    tilesetDictionary22_1.set("name", "Solid");
                    tilesetDictionary22_1.set("tilewidth", "16");
                    tilesetDictionary22_1.set("tileheight", "16");
                    mapDictionary22.get("tilesets").add(tilesetDictionary22_1);
                    var tilesetDictionary22_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary22_2.set("firstgid", "380");
                    tilesetDictionary22_2.set("imagewidth", "128");
                    tilesetDictionary22_2.set("imageheight", "160");
                    tilesetDictionary22_2.set("name", "Actors");
                    tilesetDictionary22_2.set("tilewidth", "16");
                    tilesetDictionary22_2.set("tileheight", "16");
                    mapDictionary22.get("tilesets").add(tilesetDictionary22_2);
                    var tilesetDictionary22_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary22_3.set("firstgid", "460");
                    tilesetDictionary22_3.set("imagewidth", "128");
                    tilesetDictionary22_3.set("imageheight", "32");
                    tilesetDictionary22_3.set("name", "Spikes");
                    tilesetDictionary22_3.set("tilewidth", "16");
                    tilesetDictionary22_3.set("tileheight", "16");
                    mapDictionary22.get("tilesets").add(tilesetDictionary22_3);
                    var tilesetDictionary22_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary22_4.set("firstgid", "476");
                    tilesetDictionary22_4.set("imagewidth", "192");
                    tilesetDictionary22_4.set("imageheight", "80");
                    tilesetDictionary22_4.set("name", "Igloo");
                    tilesetDictionary22_4.set("tilewidth", "16");
                    tilesetDictionary22_4.set("tileheight", "16");
                    mapDictionary22.get("tilesets").add(tilesetDictionary22_4);
                    var tilesetDictionary22_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary22_5.set("firstgid", "536");
                    tilesetDictionary22_5.set("imagewidth", "80");
                    tilesetDictionary22_5.set("imageheight", "80");
                    tilesetDictionary22_5.set("name", "Signpost");
                    tilesetDictionary22_5.set("tilewidth", "16");
                    tilesetDictionary22_5.set("tileheight", "16");
                    mapDictionary22.get("tilesets").add(tilesetDictionary22_5);
                    var tilesetDictionary22_6 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary22_6.set("firstgid", "561");
                    tilesetDictionary22_6.set("imagewidth", "224");
                    tilesetDictionary22_6.set("imageheight", "240");
                    tilesetDictionary22_6.set("name", "TsCastle");
                    tilesetDictionary22_6.set("tilewidth", "16");
                    tilesetDictionary22_6.set("tileheight", "16");
                    mapDictionary22.get("tilesets").add(tilesetDictionary22_6);

                    mapDictionary22.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary22_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary22_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary22_0.set("width", "57");
                    layersDictionary22_0.set("height", "25");
                    layersDictionary22_0.set("name", "Background");
                    mapDictionary22.get("layers").add(layersDictionary22_0);
                    var layersDictionary22_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary22_1.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,426,0,0,0,0,0,426,0,0,0,0,0,0,0,426,0,0,0,0,0,0,0,0,426,0,0,0,0,0,0,0,0,0,426,0,0,0,0,0,0,0,2,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary22_1.set("width", "57");
                    layersDictionary22_1.set("height", "25");
                    layersDictionary22_1.set("name", "Foreground");
                    mapDictionary22.get("layers").add(layersDictionary22_1);
                    var layersDictionary22_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary22_2.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,452,412,412,412,412,412,412,412,412,412,412,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary22_2.set("width", "57");
                    layersDictionary22_2.set("height", "25");
                    layersDictionary22_2.set("name", "Solid");
                    mapDictionary22.get("layers").add(layersDictionary22_2);



                    var mapDictionary23 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level3/B_Obstacles3", mapDictionary23);

                    mapDictionary23.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary23_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary23_0.set("firstgid", "1");
                    tilesetDictionary23_0.set("imagewidth", "464");
                    tilesetDictionary23_0.set("imageheight", "176");
                    tilesetDictionary23_0.set("name", "TsSnow");
                    tilesetDictionary23_0.set("tilewidth", "16");
                    tilesetDictionary23_0.set("tileheight", "16");
                    mapDictionary23.get("tilesets").add(tilesetDictionary23_0);
                    var tilesetDictionary23_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary23_1.set("firstgid", "320");
                    tilesetDictionary23_1.set("imagewidth", "80");
                    tilesetDictionary23_1.set("imageheight", "192");
                    tilesetDictionary23_1.set("name", "Solid");
                    tilesetDictionary23_1.set("tilewidth", "16");
                    tilesetDictionary23_1.set("tileheight", "16");
                    mapDictionary23.get("tilesets").add(tilesetDictionary23_1);
                    var tilesetDictionary23_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary23_2.set("firstgid", "380");
                    tilesetDictionary23_2.set("imagewidth", "128");
                    tilesetDictionary23_2.set("imageheight", "160");
                    tilesetDictionary23_2.set("name", "Actors");
                    tilesetDictionary23_2.set("tilewidth", "16");
                    tilesetDictionary23_2.set("tileheight", "16");
                    mapDictionary23.get("tilesets").add(tilesetDictionary23_2);
                    var tilesetDictionary23_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary23_3.set("firstgid", "460");
                    tilesetDictionary23_3.set("imagewidth", "128");
                    tilesetDictionary23_3.set("imageheight", "32");
                    tilesetDictionary23_3.set("name", "Spikes");
                    tilesetDictionary23_3.set("tilewidth", "16");
                    tilesetDictionary23_3.set("tileheight", "16");
                    mapDictionary23.get("tilesets").add(tilesetDictionary23_3);
                    var tilesetDictionary23_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary23_4.set("firstgid", "476");
                    tilesetDictionary23_4.set("imagewidth", "192");
                    tilesetDictionary23_4.set("imageheight", "80");
                    tilesetDictionary23_4.set("name", "Igloo");
                    tilesetDictionary23_4.set("tilewidth", "16");
                    tilesetDictionary23_4.set("tileheight", "16");
                    mapDictionary23.get("tilesets").add(tilesetDictionary23_4);
                    var tilesetDictionary23_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary23_5.set("firstgid", "536");
                    tilesetDictionary23_5.set("imagewidth", "80");
                    tilesetDictionary23_5.set("imageheight", "80");
                    tilesetDictionary23_5.set("name", "Signpost");
                    tilesetDictionary23_5.set("tilewidth", "16");
                    tilesetDictionary23_5.set("tileheight", "16");
                    mapDictionary23.get("tilesets").add(tilesetDictionary23_5);
                    var tilesetDictionary23_6 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary23_6.set("firstgid", "561");
                    tilesetDictionary23_6.set("imagewidth", "224");
                    tilesetDictionary23_6.set("imageheight", "240");
                    tilesetDictionary23_6.set("name", "TsCastle");
                    tilesetDictionary23_6.set("tilewidth", "16");
                    tilesetDictionary23_6.set("tileheight", "16");
                    mapDictionary23.get("tilesets").add(tilesetDictionary23_6);

                    mapDictionary23.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary23_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary23_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary23_0.set("width", "57");
                    layersDictionary23_0.set("height", "25");
                    layersDictionary23_0.set("name", "Background");
                    mapDictionary23.get("layers").add(layersDictionary23_0);
                    var layersDictionary23_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary23_1.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,407,0,0,407,0,0,0,407,0,0,0,0,0,407,0,0,0,0,0,0,407,0,0,0,0,0,0,407,0,0,0,0,0,0,0,407,0,0,2,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,462,462,462,462,462,462,462,462,462,462,462,462,462,462,462,462,462,462,462,462,462,462,462,462,462,462,462,462,462,462,462,462,462,462,462,462,462,462,462,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary23_1.set("width", "57");
                    layersDictionary23_1.set("height", "25");
                    layersDictionary23_1.set("name", "Foreground");
                    mapDictionary23.get("layers").add(layersDictionary23_1);
                    var layersDictionary23_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary23_2.set("data
                    layersDictionary23_2.set("width", "57");
                    layersDictionary23_2.set("height", "25");
                    layersDictionary23_2.set("name", "Solid");
                    mapDictionary23.get("layers").add(layersDictionary23_2);



                    var mapDictionary24 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level3/C_Obstacles1", mapDictionary24);

                    mapDictionary24.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary24_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary24_0.set("firstgid", "1");
                    tilesetDictionary24_0.set("imagewidth", "464");
                    tilesetDictionary24_0.set("imageheight", "176");
                    tilesetDictionary24_0.set("name", "TsSnow");
                    tilesetDictionary24_0.set("tilewidth", "16");
                    tilesetDictionary24_0.set("tileheight", "16");
                    mapDictionary24.get("tilesets").add(tilesetDictionary24_0);
                    var tilesetDictionary24_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary24_1.set("firstgid", "320");
                    tilesetDictionary24_1.set("imagewidth", "80");
                    tilesetDictionary24_1.set("imageheight", "192");
                    tilesetDictionary24_1.set("name", "Solid");
                    tilesetDictionary24_1.set("tilewidth", "16");
                    tilesetDictionary24_1.set("tileheight", "16");
                    mapDictionary24.get("tilesets").add(tilesetDictionary24_1);
                    var tilesetDictionary24_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary24_2.set("firstgid", "380");
                    tilesetDictionary24_2.set("imagewidth", "128");
                    tilesetDictionary24_2.set("imageheight", "160");
                    tilesetDictionary24_2.set("name", "Actors");
                    tilesetDictionary24_2.set("tilewidth", "16");
                    tilesetDictionary24_2.set("tileheight", "16");
                    mapDictionary24.get("tilesets").add(tilesetDictionary24_2);
                    var tilesetDictionary24_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary24_3.set("firstgid", "460");
                    tilesetDictionary24_3.set("imagewidth", "128");
                    tilesetDictionary24_3.set("imageheight", "32");
                    tilesetDictionary24_3.set("name", "Spikes");
                    tilesetDictionary24_3.set("tilewidth", "16");
                    tilesetDictionary24_3.set("tileheight", "16");
                    mapDictionary24.get("tilesets").add(tilesetDictionary24_3);
                    var tilesetDictionary24_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary24_4.set("firstgid", "476");
                    tilesetDictionary24_4.set("imagewidth", "192");
                    tilesetDictionary24_4.set("imageheight", "80");
                    tilesetDictionary24_4.set("name", "Igloo");
                    tilesetDictionary24_4.set("tilewidth", "16");
                    tilesetDictionary24_4.set("tileheight", "16");
                    mapDictionary24.get("tilesets").add(tilesetDictionary24_4);
                    var tilesetDictionary24_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary24_5.set("firstgid", "536");
                    tilesetDictionary24_5.set("imagewidth", "80");
                    tilesetDictionary24_5.set("imageheight", "80");
                    tilesetDictionary24_5.set("name", "Signpost");
                    tilesetDictionary24_5.set("tilewidth", "16");
                    tilesetDictionary24_5.set("tileheight", "16");
                    mapDictionary24.get("tilesets").add(tilesetDictionary24_5);
                    var tilesetDictionary24_6 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary24_6.set("firstgid", "561");
                    tilesetDictionary24_6.set("imagewidth", "224");
                    tilesetDictionary24_6.set("imageheight", "240");
                    tilesetDictionary24_6.set("name", "TsCastle");
                    tilesetDictionary24_6.set("tilewidth", "16");
                    tilesetDictionary24_6.set("tileheight", "16");
                    mapDictionary24.get("tilesets").add(tilesetDictionary24_6);

                    mapDictionary24.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary24_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary24_0.set("data
                    layersDictionary24_0.set("width", "57");
                    layersDictionary24_0.set("height", "25");
                    layersDictionary24_0.set("name", "Background");
                    mapDictionary24.get("layers").add(layersDictionary24_0);
                    var layersDictionary24_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary24_1.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,470,0,0,471,0,0,0,0,0,470,0,471,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,470,1,471,0,0,0,0,470,2,4,471,0,0,0,0,0,470,0,471,0,0,0,0,426,0,0,0,0,0,0,2,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,463,0,0,0,0,0,0,463,463,0,0,0,0,0,0,470,1,471,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,462,462,462,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,463,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,3,3,3,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary24_1.set("width", "57");
                    layersDictionary24_1.set("height", "25");
                    layersDictionary24_1.set("name", "Foreground");
                    mapDictionary24.get("layers").add(layersDictionary24_1);
                    var layersDictionary24_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary24_2.set("data
                    layersDictionary24_2.set("width", "57");
                    layersDictionary24_2.set("height", "25");
                    layersDictionary24_2.set("name", "Solid");
                    mapDictionary24.get("layers").add(layersDictionary24_2);



                    var mapDictionary25 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level3/C_Obstacles2", mapDictionary25);

                    mapDictionary25.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary25_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary25_0.set("firstgid", "1");
                    tilesetDictionary25_0.set("imagewidth", "464");
                    tilesetDictionary25_0.set("imageheight", "176");
                    tilesetDictionary25_0.set("name", "TsSnow");
                    tilesetDictionary25_0.set("tilewidth", "16");
                    tilesetDictionary25_0.set("tileheight", "16");
                    mapDictionary25.get("tilesets").add(tilesetDictionary25_0);
                    var tilesetDictionary25_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary25_1.set("firstgid", "320");
                    tilesetDictionary25_1.set("imagewidth", "80");
                    tilesetDictionary25_1.set("imageheight", "192");
                    tilesetDictionary25_1.set("name", "Solid");
                    tilesetDictionary25_1.set("tilewidth", "16");
                    tilesetDictionary25_1.set("tileheight", "16");
                    mapDictionary25.get("tilesets").add(tilesetDictionary25_1);
                    var tilesetDictionary25_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary25_2.set("firstgid", "380");
                    tilesetDictionary25_2.set("imagewidth", "128");
                    tilesetDictionary25_2.set("imageheight", "160");
                    tilesetDictionary25_2.set("name", "Actors");
                    tilesetDictionary25_2.set("tilewidth", "16");
                    tilesetDictionary25_2.set("tileheight", "16");
                    mapDictionary25.get("tilesets").add(tilesetDictionary25_2);
                    var tilesetDictionary25_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary25_3.set("firstgid", "460");
                    tilesetDictionary25_3.set("imagewidth", "128");
                    tilesetDictionary25_3.set("imageheight", "32");
                    tilesetDictionary25_3.set("name", "Spikes");
                    tilesetDictionary25_3.set("tilewidth", "16");
                    tilesetDictionary25_3.set("tileheight", "16");
                    mapDictionary25.get("tilesets").add(tilesetDictionary25_3);
                    var tilesetDictionary25_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary25_4.set("firstgid", "476");
                    tilesetDictionary25_4.set("imagewidth", "192");
                    tilesetDictionary25_4.set("imageheight", "80");
                    tilesetDictionary25_4.set("name", "Igloo");
                    tilesetDictionary25_4.set("tilewidth", "16");
                    tilesetDictionary25_4.set("tileheight", "16");
                    mapDictionary25.get("tilesets").add(tilesetDictionary25_4);
                    var tilesetDictionary25_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary25_5.set("firstgid", "536");
                    tilesetDictionary25_5.set("imagewidth", "80");
                    tilesetDictionary25_5.set("imageheight", "80");
                    tilesetDictionary25_5.set("name", "Signpost");
                    tilesetDictionary25_5.set("tilewidth", "16");
                    tilesetDictionary25_5.set("tileheight", "16");
                    mapDictionary25.get("tilesets").add(tilesetDictionary25_5);
                    var tilesetDictionary25_6 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary25_6.set("firstgid", "561");
                    tilesetDictionary25_6.set("imagewidth", "224");
                    tilesetDictionary25_6.set("imageheight", "240");
                    tilesetDictionary25_6.set("name", "TsCastle");
                    tilesetDictionary25_6.set("tilewidth", "16");
                    tilesetDictionary25_6.set("tileheight", "16");
                    mapDictionary25.get("tilesets").add(tilesetDictionary25_6);

                    mapDictionary25.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary25_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary25_0.set("data
                    layersDictionary25_0.set("width", "97");
                    layersDictionary25_0.set("height", "25");
                    layersDictionary25_0.set("name", "Background");
                    mapDictionary25.get("layers").add(layersDictionary25_0);
                    var layersDictionary25_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary25_1.set("data
                    layersDictionary25_1.set("width", "97");
                    layersDictionary25_1.set("height", "25");
                    layersDictionary25_1.set("name", "Foreground");
                    mapDictionary25.get("layers").add(layersDictionary25_1);
                    var layersDictionary25_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary25_2.set("data
                    layersDictionary25_2.set("width", "97");
                    layersDictionary25_2.set("height", "25");
                    layersDictionary25_2.set("name", "Solid");
                    mapDictionary25.get("layers").add(layersDictionary25_2);



                    var mapDictionary26 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level3/D_Finish", mapDictionary26);

                    mapDictionary26.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary26_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary26_0.set("firstgid", "1");
                    tilesetDictionary26_0.set("imagewidth", "464");
                    tilesetDictionary26_0.set("imageheight", "176");
                    tilesetDictionary26_0.set("name", "TsSnow");
                    tilesetDictionary26_0.set("tilewidth", "16");
                    tilesetDictionary26_0.set("tileheight", "16");
                    mapDictionary26.get("tilesets").add(tilesetDictionary26_0);
                    var tilesetDictionary26_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary26_1.set("firstgid", "320");
                    tilesetDictionary26_1.set("imagewidth", "80");
                    tilesetDictionary26_1.set("imageheight", "192");
                    tilesetDictionary26_1.set("name", "Solid");
                    tilesetDictionary26_1.set("tilewidth", "16");
                    tilesetDictionary26_1.set("tileheight", "16");
                    mapDictionary26.get("tilesets").add(tilesetDictionary26_1);
                    var tilesetDictionary26_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary26_2.set("firstgid", "380");
                    tilesetDictionary26_2.set("imagewidth", "128");
                    tilesetDictionary26_2.set("imageheight", "160");
                    tilesetDictionary26_2.set("name", "Actors");
                    tilesetDictionary26_2.set("tilewidth", "16");
                    tilesetDictionary26_2.set("tileheight", "16");
                    mapDictionary26.get("tilesets").add(tilesetDictionary26_2);
                    var tilesetDictionary26_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary26_3.set("firstgid", "460");
                    tilesetDictionary26_3.set("imagewidth", "128");
                    tilesetDictionary26_3.set("imageheight", "32");
                    tilesetDictionary26_3.set("name", "Spikes");
                    tilesetDictionary26_3.set("tilewidth", "16");
                    tilesetDictionary26_3.set("tileheight", "16");
                    mapDictionary26.get("tilesets").add(tilesetDictionary26_3);
                    var tilesetDictionary26_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary26_4.set("firstgid", "476");
                    tilesetDictionary26_4.set("imagewidth", "192");
                    tilesetDictionary26_4.set("imageheight", "80");
                    tilesetDictionary26_4.set("name", "Igloo");
                    tilesetDictionary26_4.set("tilewidth", "16");
                    tilesetDictionary26_4.set("tileheight", "16");
                    mapDictionary26.get("tilesets").add(tilesetDictionary26_4);
                    var tilesetDictionary26_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary26_5.set("firstgid", "536");
                    tilesetDictionary26_5.set("imagewidth", "80");
                    tilesetDictionary26_5.set("imageheight", "80");
                    tilesetDictionary26_5.set("name", "Signpost");
                    tilesetDictionary26_5.set("tilewidth", "16");
                    tilesetDictionary26_5.set("tileheight", "16");
                    mapDictionary26.get("tilesets").add(tilesetDictionary26_5);
                    var tilesetDictionary26_6 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary26_6.set("firstgid", "561");
                    tilesetDictionary26_6.set("imagewidth", "224");
                    tilesetDictionary26_6.set("imageheight", "240");
                    tilesetDictionary26_6.set("name", "TsCastle");
                    tilesetDictionary26_6.set("tilewidth", "16");
                    tilesetDictionary26_6.set("tileheight", "16");
                    mapDictionary26.get("tilesets").add(tilesetDictionary26_6);

                    mapDictionary26.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary26_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary26_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,243,0,0,0,0,0,0,243,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,273,214,244,0,0,0,0,273,214,244,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536,537,538,0,0,0,215,214,216,0,0,0,0,215,214,216,0,0,495,0,0,0,0,0,0,0,0,0,0,0,541,560,543,0,0,273,119,214,119,244,0,0,273,119,214,119,244,0,507,0,0,0,0,0,0,0,0,0,0,0,546,547,548,0,0,0,0,175,0,0,0,0,0,0,175,0,0,0,519,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary26_0.set("width", "30");
                    layersDictionary26_0.set("height", "45");
                    layersDictionary26_0.set("name", "Background");
                    mapDictionary26.get("layers").add(layersDictionary26_0);
                    var layersDictionary26_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary26_1.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,477,478,479,479,480,481,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,488,489,490,491,491,492,493,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,500,501,502,503,504,492,505,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,500,513,514,515,515,516,517,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary26_1.set("width", "30");
                    layersDictionary26_1.set("height", "45");
                    layersDictionary26_1.set("name", "Foreground");
                    mapDictionary26.get("layers").add(layersDictionary26_1);
                    var layersDictionary26_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary26_2.set("data", "0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,0,0,0,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,0,0,0,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,0,0,0,0,0,0,0,0,0,320,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,0,0,0,0,0,0,0,0,0,320,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,0,0,0,0,0,0,0,0,0,320,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary26_2.set("width", "30");
                    layersDictionary26_2.set("height", "45");
                    layersDictionary26_2.set("name", "Solid");
                    mapDictionary26.get("layers").add(layersDictionary26_2);



                    var mapDictionary27 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level4/A_Start", mapDictionary27);

                    mapDictionary27.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary27_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary27_0.set("firstgid", "1");
                    tilesetDictionary27_0.set("imagewidth", "464");
                    tilesetDictionary27_0.set("imageheight", "176");
                    tilesetDictionary27_0.set("name", "TsSnow");
                    tilesetDictionary27_0.set("tilewidth", "16");
                    tilesetDictionary27_0.set("tileheight", "16");
                    mapDictionary27.get("tilesets").add(tilesetDictionary27_0);
                    var tilesetDictionary27_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary27_1.set("firstgid", "320");
                    tilesetDictionary27_1.set("imagewidth", "80");
                    tilesetDictionary27_1.set("imageheight", "192");
                    tilesetDictionary27_1.set("name", "Solid");
                    tilesetDictionary27_1.set("tilewidth", "16");
                    tilesetDictionary27_1.set("tileheight", "16");
                    mapDictionary27.get("tilesets").add(tilesetDictionary27_1);
                    var tilesetDictionary27_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary27_2.set("firstgid", "380");
                    tilesetDictionary27_2.set("imagewidth", "128");
                    tilesetDictionary27_2.set("imageheight", "160");
                    tilesetDictionary27_2.set("name", "Actors");
                    tilesetDictionary27_2.set("tilewidth", "16");
                    tilesetDictionary27_2.set("tileheight", "16");
                    mapDictionary27.get("tilesets").add(tilesetDictionary27_2);
                    var tilesetDictionary27_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary27_3.set("firstgid", "460");
                    tilesetDictionary27_3.set("imagewidth", "128");
                    tilesetDictionary27_3.set("imageheight", "32");
                    tilesetDictionary27_3.set("name", "Spikes");
                    tilesetDictionary27_3.set("tilewidth", "16");
                    tilesetDictionary27_3.set("tileheight", "16");
                    mapDictionary27.get("tilesets").add(tilesetDictionary27_3);
                    var tilesetDictionary27_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary27_4.set("firstgid", "476");
                    tilesetDictionary27_4.set("imagewidth", "192");
                    tilesetDictionary27_4.set("imageheight", "80");
                    tilesetDictionary27_4.set("name", "Igloo");
                    tilesetDictionary27_4.set("tilewidth", "16");
                    tilesetDictionary27_4.set("tileheight", "16");
                    mapDictionary27.get("tilesets").add(tilesetDictionary27_4);
                    var tilesetDictionary27_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary27_5.set("firstgid", "536");
                    tilesetDictionary27_5.set("imagewidth", "80");
                    tilesetDictionary27_5.set("imageheight", "80");
                    tilesetDictionary27_5.set("name", "Signpost");
                    tilesetDictionary27_5.set("tilewidth", "16");
                    tilesetDictionary27_5.set("tileheight", "16");
                    mapDictionary27.get("tilesets").add(tilesetDictionary27_5);
                    var tilesetDictionary27_6 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary27_6.set("firstgid", "561");
                    tilesetDictionary27_6.set("imagewidth", "224");
                    tilesetDictionary27_6.set("imageheight", "240");
                    tilesetDictionary27_6.set("name", "TsCastle");
                    tilesetDictionary27_6.set("tilewidth", "16");
                    tilesetDictionary27_6.set("tileheight", "16");
                    mapDictionary27.get("tilesets").add(tilesetDictionary27_6);

                    mapDictionary27.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary27_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary27_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536,537,538,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536,537,538,0,0,0,0,536,537,538,0,0,0,0,0,0,0,536,537,538,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,541,539,543,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,541,539,543,0,0,0,0,541,539,543,0,0,0,0,0,0,0,541,539,543,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,546,547,548,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,546,547,548,0,0,0,0,546,547,548,0,0,0,0,0,0,0,546,547,548,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary27_0.set("width", "110");
                    layersDictionary27_0.set("height", "32");
                    layersDictionary27_0.set("name", "Background");
                    mapDictionary27.get("layers").add(layersDictionary27_0);
                    var layersDictionary27_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary27_1.set("data
                    layersDictionary27_1.set("width", "110");
                    layersDictionary27_1.set("height", "32");
                    layersDictionary27_1.set("name", "Foreground");
                    mapDictionary27.get("layers").add(layersDictionary27_1);
                    var layersDictionary27_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary27_2.set("data
                    layersDictionary27_2.set("width", "110");
                    layersDictionary27_2.set("height", "32");
                    layersDictionary27_2.set("name", "Solid");
                    mapDictionary27.get("layers").add(layersDictionary27_2);



                    var mapDictionary28 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level4/B_Key", mapDictionary28);

                    mapDictionary28.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary28_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary28_0.set("firstgid", "1");
                    tilesetDictionary28_0.set("imagewidth", "464");
                    tilesetDictionary28_0.set("imageheight", "176");
                    tilesetDictionary28_0.set("name", "TsSnow");
                    tilesetDictionary28_0.set("tilewidth", "16");
                    tilesetDictionary28_0.set("tileheight", "16");
                    mapDictionary28.get("tilesets").add(tilesetDictionary28_0);
                    var tilesetDictionary28_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary28_1.set("firstgid", "320");
                    tilesetDictionary28_1.set("imagewidth", "80");
                    tilesetDictionary28_1.set("imageheight", "192");
                    tilesetDictionary28_1.set("name", "Solid");
                    tilesetDictionary28_1.set("tilewidth", "16");
                    tilesetDictionary28_1.set("tileheight", "16");
                    mapDictionary28.get("tilesets").add(tilesetDictionary28_1);
                    var tilesetDictionary28_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary28_2.set("firstgid", "380");
                    tilesetDictionary28_2.set("imagewidth", "128");
                    tilesetDictionary28_2.set("imageheight", "160");
                    tilesetDictionary28_2.set("name", "Actors");
                    tilesetDictionary28_2.set("tilewidth", "16");
                    tilesetDictionary28_2.set("tileheight", "16");
                    mapDictionary28.get("tilesets").add(tilesetDictionary28_2);
                    var tilesetDictionary28_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary28_3.set("firstgid", "460");
                    tilesetDictionary28_3.set("imagewidth", "128");
                    tilesetDictionary28_3.set("imageheight", "32");
                    tilesetDictionary28_3.set("name", "Spikes");
                    tilesetDictionary28_3.set("tilewidth", "16");
                    tilesetDictionary28_3.set("tileheight", "16");
                    mapDictionary28.get("tilesets").add(tilesetDictionary28_3);
                    var tilesetDictionary28_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary28_4.set("firstgid", "476");
                    tilesetDictionary28_4.set("imagewidth", "192");
                    tilesetDictionary28_4.set("imageheight", "80");
                    tilesetDictionary28_4.set("name", "Igloo");
                    tilesetDictionary28_4.set("tilewidth", "16");
                    tilesetDictionary28_4.set("tileheight", "16");
                    mapDictionary28.get("tilesets").add(tilesetDictionary28_4);
                    var tilesetDictionary28_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary28_5.set("firstgid", "536");
                    tilesetDictionary28_5.set("imagewidth", "80");
                    tilesetDictionary28_5.set("imageheight", "80");
                    tilesetDictionary28_5.set("name", "Signpost");
                    tilesetDictionary28_5.set("tilewidth", "16");
                    tilesetDictionary28_5.set("tileheight", "16");
                    mapDictionary28.get("tilesets").add(tilesetDictionary28_5);
                    var tilesetDictionary28_6 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary28_6.set("firstgid", "561");
                    tilesetDictionary28_6.set("imagewidth", "224");
                    tilesetDictionary28_6.set("imageheight", "240");
                    tilesetDictionary28_6.set("name", "TsCastle");
                    tilesetDictionary28_6.set("tilewidth", "16");
                    tilesetDictionary28_6.set("tileheight", "16");
                    mapDictionary28.get("tilesets").add(tilesetDictionary28_6);

                    mapDictionary28.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary28_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary28_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536,537,538,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,541,553,543,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,546,547,548,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary28_0.set("width", "45");
                    layersDictionary28_0.set("height", "48");
                    layersDictionary28_0.set("name", "Background");
                    mapDictionary28.get("layers").add(layersDictionary28_0);
                    var layersDictionary28_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary28_1.set("data
                    layersDictionary28_1.set("width", "45");
                    layersDictionary28_1.set("height", "48");
                    layersDictionary28_1.set("name", "Foreground");
                    mapDictionary28.get("layers").add(layersDictionary28_1);
                    var layersDictionary28_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary28_2.set("data
                    layersDictionary28_2.set("width", "45");
                    layersDictionary28_2.set("height", "48");
                    layersDictionary28_2.set("name", "Solid");
                    mapDictionary28.get("layers").add(layersDictionary28_2);



                    var mapDictionary29 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level4/C_Ascent", mapDictionary29);

                    mapDictionary29.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary29_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary29_0.set("firstgid", "1");
                    tilesetDictionary29_0.set("imagewidth", "464");
                    tilesetDictionary29_0.set("imageheight", "176");
                    tilesetDictionary29_0.set("name", "TsSnow");
                    tilesetDictionary29_0.set("tilewidth", "16");
                    tilesetDictionary29_0.set("tileheight", "16");
                    mapDictionary29.get("tilesets").add(tilesetDictionary29_0);
                    var tilesetDictionary29_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary29_1.set("firstgid", "320");
                    tilesetDictionary29_1.set("imagewidth", "80");
                    tilesetDictionary29_1.set("imageheight", "192");
                    tilesetDictionary29_1.set("name", "Solid");
                    tilesetDictionary29_1.set("tilewidth", "16");
                    tilesetDictionary29_1.set("tileheight", "16");
                    mapDictionary29.get("tilesets").add(tilesetDictionary29_1);
                    var tilesetDictionary29_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary29_2.set("firstgid", "380");
                    tilesetDictionary29_2.set("imagewidth", "128");
                    tilesetDictionary29_2.set("imageheight", "160");
                    tilesetDictionary29_2.set("name", "Actors");
                    tilesetDictionary29_2.set("tilewidth", "16");
                    tilesetDictionary29_2.set("tileheight", "16");
                    mapDictionary29.get("tilesets").add(tilesetDictionary29_2);
                    var tilesetDictionary29_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary29_3.set("firstgid", "460");
                    tilesetDictionary29_3.set("imagewidth", "128");
                    tilesetDictionary29_3.set("imageheight", "32");
                    tilesetDictionary29_3.set("name", "Spikes");
                    tilesetDictionary29_3.set("tilewidth", "16");
                    tilesetDictionary29_3.set("tileheight", "16");
                    mapDictionary29.get("tilesets").add(tilesetDictionary29_3);
                    var tilesetDictionary29_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary29_4.set("firstgid", "476");
                    tilesetDictionary29_4.set("imagewidth", "192");
                    tilesetDictionary29_4.set("imageheight", "80");
                    tilesetDictionary29_4.set("name", "Igloo");
                    tilesetDictionary29_4.set("tilewidth", "16");
                    tilesetDictionary29_4.set("tileheight", "16");
                    mapDictionary29.get("tilesets").add(tilesetDictionary29_4);
                    var tilesetDictionary29_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary29_5.set("firstgid", "536");
                    tilesetDictionary29_5.set("imagewidth", "80");
                    tilesetDictionary29_5.set("imageheight", "80");
                    tilesetDictionary29_5.set("name", "Signpost");
                    tilesetDictionary29_5.set("tilewidth", "16");
                    tilesetDictionary29_5.set("tileheight", "16");
                    mapDictionary29.get("tilesets").add(tilesetDictionary29_5);
                    var tilesetDictionary29_6 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary29_6.set("firstgid", "561");
                    tilesetDictionary29_6.set("imagewidth", "224");
                    tilesetDictionary29_6.set("imageheight", "240");
                    tilesetDictionary29_6.set("name", "TsCastle");
                    tilesetDictionary29_6.set("tilewidth", "16");
                    tilesetDictionary29_6.set("tileheight", "16");
                    mapDictionary29.get("tilesets").add(tilesetDictionary29_6);

                    mapDictionary29.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary29_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary29_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,495,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,507,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,519,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536,537,538,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,541,545,543,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536,537,538,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,546,547,548,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,541,539,543,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,550,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,546,547,548,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536,537,538,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,541,545,543,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,546,547,548,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary29_0.set("width", "100");
                    layersDictionary29_0.set("height", "60");
                    layersDictionary29_0.set("name", "Background");
                    mapDictionary29.get("layers").add(layersDictionary29_0);
                    var layersDictionary29_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary29_1.set("data
                    layersDictionary29_1.set("width", "100");
                    layersDictionary29_1.set("height", "60");
                    layersDictionary29_1.set("name", "Foreground");
                    mapDictionary29.get("layers").add(layersDictionary29_1);
                    var layersDictionary29_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary29_2.set("data
                    layersDictionary29_2.set("width", "100");
                    layersDictionary29_2.set("height", "60");
                    layersDictionary29_2.set("name", "Solid");
                    mapDictionary29.get("layers").add(layersDictionary29_2);



                    var mapDictionary30 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level5/A_Start", mapDictionary30);

                    mapDictionary30.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary30_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary30_0.set("firstgid", "1");
                    tilesetDictionary30_0.set("imagewidth", "464");
                    tilesetDictionary30_0.set("imageheight", "176");
                    tilesetDictionary30_0.set("name", "TsSnow");
                    tilesetDictionary30_0.set("tilewidth", "16");
                    tilesetDictionary30_0.set("tileheight", "16");
                    mapDictionary30.get("tilesets").add(tilesetDictionary30_0);
                    var tilesetDictionary30_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary30_1.set("firstgid", "320");
                    tilesetDictionary30_1.set("imagewidth", "80");
                    tilesetDictionary30_1.set("imageheight", "192");
                    tilesetDictionary30_1.set("name", "Solid");
                    tilesetDictionary30_1.set("tilewidth", "16");
                    tilesetDictionary30_1.set("tileheight", "16");
                    mapDictionary30.get("tilesets").add(tilesetDictionary30_1);
                    var tilesetDictionary30_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary30_2.set("firstgid", "380");
                    tilesetDictionary30_2.set("imagewidth", "128");
                    tilesetDictionary30_2.set("imageheight", "160");
                    tilesetDictionary30_2.set("name", "Actors");
                    tilesetDictionary30_2.set("tilewidth", "16");
                    tilesetDictionary30_2.set("tileheight", "16");
                    mapDictionary30.get("tilesets").add(tilesetDictionary30_2);
                    var tilesetDictionary30_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary30_3.set("firstgid", "460");
                    tilesetDictionary30_3.set("imagewidth", "128");
                    tilesetDictionary30_3.set("imageheight", "32");
                    tilesetDictionary30_3.set("name", "Spikes");
                    tilesetDictionary30_3.set("tilewidth", "16");
                    tilesetDictionary30_3.set("tileheight", "16");
                    mapDictionary30.get("tilesets").add(tilesetDictionary30_3);
                    var tilesetDictionary30_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary30_4.set("firstgid", "476");
                    tilesetDictionary30_4.set("imagewidth", "192");
                    tilesetDictionary30_4.set("imageheight", "80");
                    tilesetDictionary30_4.set("name", "Igloo");
                    tilesetDictionary30_4.set("tilewidth", "16");
                    tilesetDictionary30_4.set("tileheight", "16");
                    mapDictionary30.get("tilesets").add(tilesetDictionary30_4);
                    var tilesetDictionary30_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary30_5.set("firstgid", "536");
                    tilesetDictionary30_5.set("imagewidth", "80");
                    tilesetDictionary30_5.set("imageheight", "80");
                    tilesetDictionary30_5.set("name", "Signpost");
                    tilesetDictionary30_5.set("tilewidth", "16");
                    tilesetDictionary30_5.set("tileheight", "16");
                    mapDictionary30.get("tilesets").add(tilesetDictionary30_5);

                    mapDictionary30.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary30_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary30_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,148,148,242,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,177,177,212,148,148,242,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,177,177,177,177,177,212,148,242,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,177,177,177,177,177,177,177,212,148,242,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,177,177,177,177,177,177,177,177,177,212,148,148,242,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,177,177,177,177,177,177,177,177,177,177,177,177,212,148,148,242,0,0,0,0,0,0,0,0,0,0,0,0,0,0,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,212,148,148,148,242,0,0,0,0,0,0,0,0,0,0,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,212,148,148,242,0,0,0,0,0,0,0,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,212,148,148,242,0,0,0,0,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,212,148,242,0,0");
                    layersDictionary30_0.set("width", "30");
                    layersDictionary30_0.set("height", "14");
                    layersDictionary30_0.set("name", "Background");
                    mapDictionary30.get("layers").add(layersDictionary30_0);
                    var layersDictionary30_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary30_1.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536,537,538,536,537,538,536,537,538,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,541,549,543,541,549,543,541,549,543,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,546,547,548,546,547,548,546,547,548,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary30_1.set("width", "30");
                    layersDictionary30_1.set("height", "14");
                    layersDictionary30_1.set("name", "Midground");
                    mapDictionary30.get("layers").add(layersDictionary30_1);
                    var layersDictionary30_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary30_2.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,380,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,64,3,3,3,3,3,3,3,3,3,4,0,0,61,61,61,61,61,61,67,90,90,90,90,90,90,90,90,90,90,91,0,0,0,0,0,0,0,0,0,0,0,0,61,67,90,90,90,90,91,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary30_2.set("width", "30");
                    layersDictionary30_2.set("height", "14");
                    layersDictionary30_2.set("name", "Foreground");
                    mapDictionary30.get("layers").add(layersDictionary30_2);
                    var layersDictionary30_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary30_3.set("data
                    layersDictionary30_3.set("width", "30");
                    layersDictionary30_3.set("height", "14");
                    layersDictionary30_3.set("name", "Solid");
                    mapDictionary30.get("layers").add(layersDictionary30_3);



                    var mapDictionary31 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level5/B_Checkpoint", mapDictionary31);

                    mapDictionary31.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary31_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary31_0.set("firstgid", "1");
                    tilesetDictionary31_0.set("imagewidth", "464");
                    tilesetDictionary31_0.set("imageheight", "176");
                    tilesetDictionary31_0.set("name", "TsSnow");
                    tilesetDictionary31_0.set("tilewidth", "16");
                    tilesetDictionary31_0.set("tileheight", "16");
                    mapDictionary31.get("tilesets").add(tilesetDictionary31_0);
                    var tilesetDictionary31_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary31_1.set("firstgid", "320");
                    tilesetDictionary31_1.set("imagewidth", "80");
                    tilesetDictionary31_1.set("imageheight", "192");
                    tilesetDictionary31_1.set("name", "Solid");
                    tilesetDictionary31_1.set("tilewidth", "16");
                    tilesetDictionary31_1.set("tileheight", "16");
                    mapDictionary31.get("tilesets").add(tilesetDictionary31_1);
                    var tilesetDictionary31_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary31_2.set("firstgid", "380");
                    tilesetDictionary31_2.set("imagewidth", "128");
                    tilesetDictionary31_2.set("imageheight", "160");
                    tilesetDictionary31_2.set("name", "Actors");
                    tilesetDictionary31_2.set("tilewidth", "16");
                    tilesetDictionary31_2.set("tileheight", "16");
                    mapDictionary31.get("tilesets").add(tilesetDictionary31_2);
                    var tilesetDictionary31_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary31_3.set("firstgid", "460");
                    tilesetDictionary31_3.set("imagewidth", "128");
                    tilesetDictionary31_3.set("imageheight", "32");
                    tilesetDictionary31_3.set("name", "Spikes");
                    tilesetDictionary31_3.set("tilewidth", "16");
                    tilesetDictionary31_3.set("tileheight", "16");
                    mapDictionary31.get("tilesets").add(tilesetDictionary31_3);
                    var tilesetDictionary31_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary31_4.set("firstgid", "476");
                    tilesetDictionary31_4.set("imagewidth", "192");
                    tilesetDictionary31_4.set("imageheight", "80");
                    tilesetDictionary31_4.set("name", "Igloo");
                    tilesetDictionary31_4.set("tilewidth", "16");
                    tilesetDictionary31_4.set("tileheight", "16");
                    mapDictionary31.get("tilesets").add(tilesetDictionary31_4);
                    var tilesetDictionary31_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary31_5.set("firstgid", "536");
                    tilesetDictionary31_5.set("imagewidth", "80");
                    tilesetDictionary31_5.set("imageheight", "80");
                    tilesetDictionary31_5.set("name", "Signpost");
                    tilesetDictionary31_5.set("tilewidth", "16");
                    tilesetDictionary31_5.set("tileheight", "16");
                    mapDictionary31.get("tilesets").add(tilesetDictionary31_5);

                    mapDictionary31.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary31_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary31_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536,537,538,0,0,0,0,541,539,543,0,0,0,0,546,547,548,0,0,0,0,0,0,0,0,0");
                    layersDictionary31_0.set("width", "7");
                    layersDictionary31_0.set("height", "12");
                    layersDictionary31_0.set("name", "Background");
                    mapDictionary31.get("layers").add(layersDictionary31_0);
                    var layersDictionary31_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary31_1.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,3,3,3,3,4");
                    layersDictionary31_1.set("width", "7");
                    layersDictionary31_1.set("height", "12");
                    layersDictionary31_1.set("name", "Foreground");
                    mapDictionary31.get("layers").add(layersDictionary31_1);
                    var layersDictionary31_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary31_2.set("data", "412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,452,412,412,412,412,412,320,320,320,320,320,320,320");
                    layersDictionary31_2.set("width", "7");
                    layersDictionary31_2.set("height", "12");
                    layersDictionary31_2.set("name", "Solid");
                    mapDictionary31.get("layers").add(layersDictionary31_2);



                    var mapDictionary32 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level5/B_Fragment1", mapDictionary32);

                    mapDictionary32.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary32_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary32_0.set("firstgid", "1");
                    tilesetDictionary32_0.set("imagewidth", "464");
                    tilesetDictionary32_0.set("imageheight", "176");
                    tilesetDictionary32_0.set("name", "TsSnow");
                    tilesetDictionary32_0.set("tilewidth", "16");
                    tilesetDictionary32_0.set("tileheight", "16");
                    mapDictionary32.get("tilesets").add(tilesetDictionary32_0);
                    var tilesetDictionary32_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary32_1.set("firstgid", "320");
                    tilesetDictionary32_1.set("imagewidth", "80");
                    tilesetDictionary32_1.set("imageheight", "192");
                    tilesetDictionary32_1.set("name", "Solid");
                    tilesetDictionary32_1.set("tilewidth", "16");
                    tilesetDictionary32_1.set("tileheight", "16");
                    mapDictionary32.get("tilesets").add(tilesetDictionary32_1);
                    var tilesetDictionary32_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary32_2.set("firstgid", "380");
                    tilesetDictionary32_2.set("imagewidth", "128");
                    tilesetDictionary32_2.set("imageheight", "160");
                    tilesetDictionary32_2.set("name", "Actors");
                    tilesetDictionary32_2.set("tilewidth", "16");
                    tilesetDictionary32_2.set("tileheight", "16");
                    mapDictionary32.get("tilesets").add(tilesetDictionary32_2);
                    var tilesetDictionary32_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary32_3.set("firstgid", "460");
                    tilesetDictionary32_3.set("imagewidth", "128");
                    tilesetDictionary32_3.set("imageheight", "32");
                    tilesetDictionary32_3.set("name", "Spikes");
                    tilesetDictionary32_3.set("tilewidth", "16");
                    tilesetDictionary32_3.set("tileheight", "16");
                    mapDictionary32.get("tilesets").add(tilesetDictionary32_3);
                    var tilesetDictionary32_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary32_4.set("firstgid", "476");
                    tilesetDictionary32_4.set("imagewidth", "192");
                    tilesetDictionary32_4.set("imageheight", "80");
                    tilesetDictionary32_4.set("name", "Igloo");
                    tilesetDictionary32_4.set("tilewidth", "16");
                    tilesetDictionary32_4.set("tileheight", "16");
                    mapDictionary32.get("tilesets").add(tilesetDictionary32_4);
                    var tilesetDictionary32_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary32_5.set("firstgid", "536");
                    tilesetDictionary32_5.set("imagewidth", "80");
                    tilesetDictionary32_5.set("imageheight", "80");
                    tilesetDictionary32_5.set("name", "Signpost");
                    tilesetDictionary32_5.set("tilewidth", "16");
                    tilesetDictionary32_5.set("tileheight", "16");
                    mapDictionary32.get("tilesets").add(tilesetDictionary32_5);

                    mapDictionary32.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary32_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary32_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary32_0.set("width", "5");
                    layersDictionary32_0.set("height", "3");
                    layersDictionary32_0.set("name", "Background");
                    mapDictionary32.get("layers").add(layersDictionary32_0);
                    var layersDictionary32_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary32_1.set("data", "0,0,464,0,0,2,3,3,3,4,465,465,465,465,465");
                    layersDictionary32_1.set("width", "5");
                    layersDictionary32_1.set("height", "3");
                    layersDictionary32_1.set("name", "Foreground");
                    mapDictionary32.get("layers").add(layersDictionary32_1);
                    var layersDictionary32_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary32_2.set("data", "0,0,363,0,0,320,320,320,320,320,363,363,363,363,363");
                    layersDictionary32_2.set("width", "5");
                    layersDictionary32_2.set("height", "3");
                    layersDictionary32_2.set("name", "Solid");
                    mapDictionary32.get("layers").add(layersDictionary32_2);



                    var mapDictionary33 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level5/B_Fragment10", mapDictionary33);

                    mapDictionary33.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary33_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary33_0.set("firstgid", "1");
                    tilesetDictionary33_0.set("imagewidth", "464");
                    tilesetDictionary33_0.set("imageheight", "176");
                    tilesetDictionary33_0.set("name", "TsSnow");
                    tilesetDictionary33_0.set("tilewidth", "16");
                    tilesetDictionary33_0.set("tileheight", "16");
                    mapDictionary33.get("tilesets").add(tilesetDictionary33_0);
                    var tilesetDictionary33_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary33_1.set("firstgid", "320");
                    tilesetDictionary33_1.set("imagewidth", "80");
                    tilesetDictionary33_1.set("imageheight", "192");
                    tilesetDictionary33_1.set("name", "Solid");
                    tilesetDictionary33_1.set("tilewidth", "16");
                    tilesetDictionary33_1.set("tileheight", "16");
                    mapDictionary33.get("tilesets").add(tilesetDictionary33_1);
                    var tilesetDictionary33_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary33_2.set("firstgid", "380");
                    tilesetDictionary33_2.set("imagewidth", "128");
                    tilesetDictionary33_2.set("imageheight", "160");
                    tilesetDictionary33_2.set("name", "Actors");
                    tilesetDictionary33_2.set("tilewidth", "16");
                    tilesetDictionary33_2.set("tileheight", "16");
                    mapDictionary33.get("tilesets").add(tilesetDictionary33_2);
                    var tilesetDictionary33_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary33_3.set("firstgid", "460");
                    tilesetDictionary33_3.set("imagewidth", "128");
                    tilesetDictionary33_3.set("imageheight", "32");
                    tilesetDictionary33_3.set("name", "Spikes");
                    tilesetDictionary33_3.set("tilewidth", "16");
                    tilesetDictionary33_3.set("tileheight", "16");
                    mapDictionary33.get("tilesets").add(tilesetDictionary33_3);
                    var tilesetDictionary33_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary33_4.set("firstgid", "476");
                    tilesetDictionary33_4.set("imagewidth", "192");
                    tilesetDictionary33_4.set("imageheight", "80");
                    tilesetDictionary33_4.set("name", "Igloo");
                    tilesetDictionary33_4.set("tilewidth", "16");
                    tilesetDictionary33_4.set("tileheight", "16");
                    mapDictionary33.get("tilesets").add(tilesetDictionary33_4);
                    var tilesetDictionary33_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary33_5.set("firstgid", "536");
                    tilesetDictionary33_5.set("imagewidth", "80");
                    tilesetDictionary33_5.set("imageheight", "80");
                    tilesetDictionary33_5.set("name", "Signpost");
                    tilesetDictionary33_5.set("tilewidth", "16");
                    tilesetDictionary33_5.set("tileheight", "16");
                    mapDictionary33.get("tilesets").add(tilesetDictionary33_5);

                    mapDictionary33.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary33_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary33_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary33_0.set("width", "4");
                    layersDictionary33_0.set("height", "3");
                    layersDictionary33_0.set("name", "Background");
                    mapDictionary33.get("layers").add(layersDictionary33_0);
                    var layersDictionary33_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary33_1.set("data", "0,0,0,407,31,32,32,33,89,90,90,91");
                    layersDictionary33_1.set("width", "4");
                    layersDictionary33_1.set("height", "3");
                    layersDictionary33_1.set("name", "Foreground");
                    mapDictionary33.get("layers").add(layersDictionary33_1);
                    var layersDictionary33_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary33_2.set("data", "0,0,0,0,320,320,320,320,320,320,320,320");
                    layersDictionary33_2.set("width", "4");
                    layersDictionary33_2.set("height", "3");
                    layersDictionary33_2.set("name", "Solid");
                    mapDictionary33.get("layers").add(layersDictionary33_2);



                    var mapDictionary34 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level5/B_Fragment11", mapDictionary34);

                    mapDictionary34.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary34_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary34_0.set("firstgid", "1");
                    tilesetDictionary34_0.set("imagewidth", "464");
                    tilesetDictionary34_0.set("imageheight", "176");
                    tilesetDictionary34_0.set("name", "TsSnow");
                    tilesetDictionary34_0.set("tilewidth", "16");
                    tilesetDictionary34_0.set("tileheight", "16");
                    mapDictionary34.get("tilesets").add(tilesetDictionary34_0);
                    var tilesetDictionary34_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary34_1.set("firstgid", "320");
                    tilesetDictionary34_1.set("imagewidth", "80");
                    tilesetDictionary34_1.set("imageheight", "192");
                    tilesetDictionary34_1.set("name", "Solid");
                    tilesetDictionary34_1.set("tilewidth", "16");
                    tilesetDictionary34_1.set("tileheight", "16");
                    mapDictionary34.get("tilesets").add(tilesetDictionary34_1);
                    var tilesetDictionary34_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary34_2.set("firstgid", "380");
                    tilesetDictionary34_2.set("imagewidth", "128");
                    tilesetDictionary34_2.set("imageheight", "160");
                    tilesetDictionary34_2.set("name", "Actors");
                    tilesetDictionary34_2.set("tilewidth", "16");
                    tilesetDictionary34_2.set("tileheight", "16");
                    mapDictionary34.get("tilesets").add(tilesetDictionary34_2);
                    var tilesetDictionary34_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary34_3.set("firstgid", "460");
                    tilesetDictionary34_3.set("imagewidth", "128");
                    tilesetDictionary34_3.set("imageheight", "32");
                    tilesetDictionary34_3.set("name", "Spikes");
                    tilesetDictionary34_3.set("tilewidth", "16");
                    tilesetDictionary34_3.set("tileheight", "16");
                    mapDictionary34.get("tilesets").add(tilesetDictionary34_3);
                    var tilesetDictionary34_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary34_4.set("firstgid", "476");
                    tilesetDictionary34_4.set("imagewidth", "192");
                    tilesetDictionary34_4.set("imageheight", "80");
                    tilesetDictionary34_4.set("name", "Igloo");
                    tilesetDictionary34_4.set("tilewidth", "16");
                    tilesetDictionary34_4.set("tileheight", "16");
                    mapDictionary34.get("tilesets").add(tilesetDictionary34_4);
                    var tilesetDictionary34_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary34_5.set("firstgid", "536");
                    tilesetDictionary34_5.set("imagewidth", "80");
                    tilesetDictionary34_5.set("imageheight", "80");
                    tilesetDictionary34_5.set("name", "Signpost");
                    tilesetDictionary34_5.set("tilewidth", "16");
                    tilesetDictionary34_5.set("tileheight", "16");
                    mapDictionary34.get("tilesets").add(tilesetDictionary34_5);

                    mapDictionary34.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary34_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary34_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary34_0.set("width", "4");
                    layersDictionary34_0.set("height", "3");
                    layersDictionary34_0.set("name", "Background");
                    mapDictionary34.get("layers").add(layersDictionary34_0);
                    var layersDictionary34_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary34_1.set("data", "0,0,0,0,1,0,447,1,465,2,4,0");
                    layersDictionary34_1.set("width", "4");
                    layersDictionary34_1.set("height", "3");
                    layersDictionary34_1.set("name", "Foreground");
                    mapDictionary34.get("layers").add(layersDictionary34_1);
                    var layersDictionary34_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary34_2.set("data", "0,0,0,0,320,0,0,320,363,320,320,0");
                    layersDictionary34_2.set("width", "4");
                    layersDictionary34_2.set("height", "3");
                    layersDictionary34_2.set("name", "Solid");
                    mapDictionary34.get("layers").add(layersDictionary34_2);



                    var mapDictionary35 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level5/B_Fragment12", mapDictionary35);

                    mapDictionary35.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary35_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary35_0.set("firstgid", "1");
                    tilesetDictionary35_0.set("imagewidth", "464");
                    tilesetDictionary35_0.set("imageheight", "176");
                    tilesetDictionary35_0.set("name", "TsSnow");
                    tilesetDictionary35_0.set("tilewidth", "16");
                    tilesetDictionary35_0.set("tileheight", "16");
                    mapDictionary35.get("tilesets").add(tilesetDictionary35_0);
                    var tilesetDictionary35_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary35_1.set("firstgid", "320");
                    tilesetDictionary35_1.set("imagewidth", "80");
                    tilesetDictionary35_1.set("imageheight", "192");
                    tilesetDictionary35_1.set("name", "Solid");
                    tilesetDictionary35_1.set("tilewidth", "16");
                    tilesetDictionary35_1.set("tileheight", "16");
                    mapDictionary35.get("tilesets").add(tilesetDictionary35_1);
                    var tilesetDictionary35_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary35_2.set("firstgid", "380");
                    tilesetDictionary35_2.set("imagewidth", "128");
                    tilesetDictionary35_2.set("imageheight", "160");
                    tilesetDictionary35_2.set("name", "Actors");
                    tilesetDictionary35_2.set("tilewidth", "16");
                    tilesetDictionary35_2.set("tileheight", "16");
                    mapDictionary35.get("tilesets").add(tilesetDictionary35_2);
                    var tilesetDictionary35_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary35_3.set("firstgid", "460");
                    tilesetDictionary35_3.set("imagewidth", "128");
                    tilesetDictionary35_3.set("imageheight", "32");
                    tilesetDictionary35_3.set("name", "Spikes");
                    tilesetDictionary35_3.set("tilewidth", "16");
                    tilesetDictionary35_3.set("tileheight", "16");
                    mapDictionary35.get("tilesets").add(tilesetDictionary35_3);
                    var tilesetDictionary35_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary35_4.set("firstgid", "476");
                    tilesetDictionary35_4.set("imagewidth", "192");
                    tilesetDictionary35_4.set("imageheight", "80");
                    tilesetDictionary35_4.set("name", "Igloo");
                    tilesetDictionary35_4.set("tilewidth", "16");
                    tilesetDictionary35_4.set("tileheight", "16");
                    mapDictionary35.get("tilesets").add(tilesetDictionary35_4);
                    var tilesetDictionary35_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary35_5.set("firstgid", "536");
                    tilesetDictionary35_5.set("imagewidth", "80");
                    tilesetDictionary35_5.set("imageheight", "80");
                    tilesetDictionary35_5.set("name", "Signpost");
                    tilesetDictionary35_5.set("tilewidth", "16");
                    tilesetDictionary35_5.set("tileheight", "16");
                    mapDictionary35.get("tilesets").add(tilesetDictionary35_5);

                    mapDictionary35.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary35_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary35_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary35_0.set("width", "4");
                    layersDictionary35_0.set("height", "3");
                    layersDictionary35_0.set("name", "Background");
                    mapDictionary35.get("layers").add(layersDictionary35_0);
                    var layersDictionary35_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary35_1.set("data", "0,31,33,393,2,92,94,4,0,465,0,465");
                    layersDictionary35_1.set("width", "4");
                    layersDictionary35_1.set("height", "3");
                    layersDictionary35_1.set("name", "Foreground");
                    mapDictionary35.get("layers").add(layersDictionary35_1);
                    var layersDictionary35_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary35_2.set("data", "0,320,320,0,320,320,320,320,0,363,0,363");
                    layersDictionary35_2.set("width", "4");
                    layersDictionary35_2.set("height", "3");
                    layersDictionary35_2.set("name", "Solid");
                    mapDictionary35.get("layers").add(layersDictionary35_2);



                    var mapDictionary36 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level5/B_Fragment2", mapDictionary36);

                    mapDictionary36.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary36_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary36_0.set("firstgid", "1");
                    tilesetDictionary36_0.set("imagewidth", "464");
                    tilesetDictionary36_0.set("imageheight", "176");
                    tilesetDictionary36_0.set("name", "TsSnow");
                    tilesetDictionary36_0.set("tilewidth", "16");
                    tilesetDictionary36_0.set("tileheight", "16");
                    mapDictionary36.get("tilesets").add(tilesetDictionary36_0);
                    var tilesetDictionary36_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary36_1.set("firstgid", "320");
                    tilesetDictionary36_1.set("imagewidth", "80");
                    tilesetDictionary36_1.set("imageheight", "192");
                    tilesetDictionary36_1.set("name", "Solid");
                    tilesetDictionary36_1.set("tilewidth", "16");
                    tilesetDictionary36_1.set("tileheight", "16");
                    mapDictionary36.get("tilesets").add(tilesetDictionary36_1);
                    var tilesetDictionary36_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary36_2.set("firstgid", "380");
                    tilesetDictionary36_2.set("imagewidth", "128");
                    tilesetDictionary36_2.set("imageheight", "160");
                    tilesetDictionary36_2.set("name", "Actors");
                    tilesetDictionary36_2.set("tilewidth", "16");
                    tilesetDictionary36_2.set("tileheight", "16");
                    mapDictionary36.get("tilesets").add(tilesetDictionary36_2);
                    var tilesetDictionary36_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary36_3.set("firstgid", "460");
                    tilesetDictionary36_3.set("imagewidth", "128");
                    tilesetDictionary36_3.set("imageheight", "32");
                    tilesetDictionary36_3.set("name", "Spikes");
                    tilesetDictionary36_3.set("tilewidth", "16");
                    tilesetDictionary36_3.set("tileheight", "16");
                    mapDictionary36.get("tilesets").add(tilesetDictionary36_3);
                    var tilesetDictionary36_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary36_4.set("firstgid", "476");
                    tilesetDictionary36_4.set("imagewidth", "192");
                    tilesetDictionary36_4.set("imageheight", "80");
                    tilesetDictionary36_4.set("name", "Igloo");
                    tilesetDictionary36_4.set("tilewidth", "16");
                    tilesetDictionary36_4.set("tileheight", "16");
                    mapDictionary36.get("tilesets").add(tilesetDictionary36_4);
                    var tilesetDictionary36_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary36_5.set("firstgid", "536");
                    tilesetDictionary36_5.set("imagewidth", "80");
                    tilesetDictionary36_5.set("imageheight", "80");
                    tilesetDictionary36_5.set("name", "Signpost");
                    tilesetDictionary36_5.set("tilewidth", "16");
                    tilesetDictionary36_5.set("tileheight", "16");
                    mapDictionary36.get("tilesets").add(tilesetDictionary36_5);

                    mapDictionary36.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary36_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary36_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary36_0.set("width", "5");
                    layersDictionary36_0.set("height", "3");
                    layersDictionary36_0.set("name", "Background");
                    mapDictionary36.get("layers").add(layersDictionary36_0);
                    var layersDictionary36_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary36_1.set("data", "0,393,0,0,393,2,3,3,3,4,0,465,465,0,0");
                    layersDictionary36_1.set("width", "5");
                    layersDictionary36_1.set("height", "3");
                    layersDictionary36_1.set("name", "Foreground");
                    mapDictionary36.get("layers").add(layersDictionary36_1);
                    var layersDictionary36_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary36_2.set("data", "0,0,0,0,0,320,320,320,320,320,0,363,363,0,0");
                    layersDictionary36_2.set("width", "5");
                    layersDictionary36_2.set("height", "3");
                    layersDictionary36_2.set("name", "Solid");
                    mapDictionary36.get("layers").add(layersDictionary36_2);



                    var mapDictionary37 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level5/B_Fragment3", mapDictionary37);

                    mapDictionary37.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary37_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary37_0.set("firstgid", "1");
                    tilesetDictionary37_0.set("imagewidth", "464");
                    tilesetDictionary37_0.set("imageheight", "176");
                    tilesetDictionary37_0.set("name", "TsSnow");
                    tilesetDictionary37_0.set("tilewidth", "16");
                    tilesetDictionary37_0.set("tileheight", "16");
                    mapDictionary37.get("tilesets").add(tilesetDictionary37_0);
                    var tilesetDictionary37_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary37_1.set("firstgid", "320");
                    tilesetDictionary37_1.set("imagewidth", "80");
                    tilesetDictionary37_1.set("imageheight", "192");
                    tilesetDictionary37_1.set("name", "Solid");
                    tilesetDictionary37_1.set("tilewidth", "16");
                    tilesetDictionary37_1.set("tileheight", "16");
                    mapDictionary37.get("tilesets").add(tilesetDictionary37_1);
                    var tilesetDictionary37_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary37_2.set("firstgid", "380");
                    tilesetDictionary37_2.set("imagewidth", "128");
                    tilesetDictionary37_2.set("imageheight", "160");
                    tilesetDictionary37_2.set("name", "Actors");
                    tilesetDictionary37_2.set("tilewidth", "16");
                    tilesetDictionary37_2.set("tileheight", "16");
                    mapDictionary37.get("tilesets").add(tilesetDictionary37_2);
                    var tilesetDictionary37_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary37_3.set("firstgid", "460");
                    tilesetDictionary37_3.set("imagewidth", "128");
                    tilesetDictionary37_3.set("imageheight", "32");
                    tilesetDictionary37_3.set("name", "Spikes");
                    tilesetDictionary37_3.set("tilewidth", "16");
                    tilesetDictionary37_3.set("tileheight", "16");
                    mapDictionary37.get("tilesets").add(tilesetDictionary37_3);
                    var tilesetDictionary37_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary37_4.set("firstgid", "476");
                    tilesetDictionary37_4.set("imagewidth", "192");
                    tilesetDictionary37_4.set("imageheight", "80");
                    tilesetDictionary37_4.set("name", "Igloo");
                    tilesetDictionary37_4.set("tilewidth", "16");
                    tilesetDictionary37_4.set("tileheight", "16");
                    mapDictionary37.get("tilesets").add(tilesetDictionary37_4);
                    var tilesetDictionary37_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary37_5.set("firstgid", "536");
                    tilesetDictionary37_5.set("imagewidth", "80");
                    tilesetDictionary37_5.set("imageheight", "80");
                    tilesetDictionary37_5.set("name", "Signpost");
                    tilesetDictionary37_5.set("tilewidth", "16");
                    tilesetDictionary37_5.set("tileheight", "16");
                    mapDictionary37.get("tilesets").add(tilesetDictionary37_5);

                    mapDictionary37.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary37_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary37_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary37_0.set("width", "5");
                    layersDictionary37_0.set("height", "3");
                    layersDictionary37_0.set("name", "Background");
                    mapDictionary37.get("layers").add(layersDictionary37_0);
                    var layersDictionary37_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary37_1.set("data", "0,0,0,0,0,1,0,0,2,4,0,0,0,0,0");
                    layersDictionary37_1.set("width", "5");
                    layersDictionary37_1.set("height", "3");
                    layersDictionary37_1.set("name", "Foreground");
                    mapDictionary37.get("layers").add(layersDictionary37_1);
                    var layersDictionary37_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary37_2.set("data", "0,0,0,0,0,320,0,0,320,320,0,0,0,0,0");
                    layersDictionary37_2.set("width", "5");
                    layersDictionary37_2.set("height", "3");
                    layersDictionary37_2.set("name", "Solid");
                    mapDictionary37.get("layers").add(layersDictionary37_2);



                    var mapDictionary38 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level5/B_Fragment4", mapDictionary38);

                    mapDictionary38.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary38_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary38_0.set("firstgid", "1");
                    tilesetDictionary38_0.set("imagewidth", "464");
                    tilesetDictionary38_0.set("imageheight", "176");
                    tilesetDictionary38_0.set("name", "TsSnow");
                    tilesetDictionary38_0.set("tilewidth", "16");
                    tilesetDictionary38_0.set("tileheight", "16");
                    mapDictionary38.get("tilesets").add(tilesetDictionary38_0);
                    var tilesetDictionary38_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary38_1.set("firstgid", "320");
                    tilesetDictionary38_1.set("imagewidth", "80");
                    tilesetDictionary38_1.set("imageheight", "192");
                    tilesetDictionary38_1.set("name", "Solid");
                    tilesetDictionary38_1.set("tilewidth", "16");
                    tilesetDictionary38_1.set("tileheight", "16");
                    mapDictionary38.get("tilesets").add(tilesetDictionary38_1);
                    var tilesetDictionary38_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary38_2.set("firstgid", "380");
                    tilesetDictionary38_2.set("imagewidth", "128");
                    tilesetDictionary38_2.set("imageheight", "160");
                    tilesetDictionary38_2.set("name", "Actors");
                    tilesetDictionary38_2.set("tilewidth", "16");
                    tilesetDictionary38_2.set("tileheight", "16");
                    mapDictionary38.get("tilesets").add(tilesetDictionary38_2);
                    var tilesetDictionary38_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary38_3.set("firstgid", "460");
                    tilesetDictionary38_3.set("imagewidth", "128");
                    tilesetDictionary38_3.set("imageheight", "32");
                    tilesetDictionary38_3.set("name", "Spikes");
                    tilesetDictionary38_3.set("tilewidth", "16");
                    tilesetDictionary38_3.set("tileheight", "16");
                    mapDictionary38.get("tilesets").add(tilesetDictionary38_3);
                    var tilesetDictionary38_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary38_4.set("firstgid", "476");
                    tilesetDictionary38_4.set("imagewidth", "192");
                    tilesetDictionary38_4.set("imageheight", "80");
                    tilesetDictionary38_4.set("name", "Igloo");
                    tilesetDictionary38_4.set("tilewidth", "16");
                    tilesetDictionary38_4.set("tileheight", "16");
                    mapDictionary38.get("tilesets").add(tilesetDictionary38_4);
                    var tilesetDictionary38_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary38_5.set("firstgid", "536");
                    tilesetDictionary38_5.set("imagewidth", "80");
                    tilesetDictionary38_5.set("imageheight", "80");
                    tilesetDictionary38_5.set("name", "Signpost");
                    tilesetDictionary38_5.set("tilewidth", "16");
                    tilesetDictionary38_5.set("tileheight", "16");
                    mapDictionary38.get("tilesets").add(tilesetDictionary38_5);

                    mapDictionary38.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary38_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary38_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary38_0.set("width", "5");
                    layersDictionary38_0.set("height", "3");
                    layersDictionary38_0.set("name", "Background");
                    mapDictionary38.get("layers").add(layersDictionary38_0);
                    var layersDictionary38_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary38_1.set("data", "0,393,464,0,393,2,3,3,3,4,0,0,0,0,0");
                    layersDictionary38_1.set("width", "5");
                    layersDictionary38_1.set("height", "3");
                    layersDictionary38_1.set("name", "Foreground");
                    mapDictionary38.get("layers").add(layersDictionary38_1);
                    var layersDictionary38_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary38_2.set("data", "0,0,363,0,0,320,320,320,320,320,0,0,0,0,0");
                    layersDictionary38_2.set("width", "5");
                    layersDictionary38_2.set("height", "3");
                    layersDictionary38_2.set("name", "Solid");
                    mapDictionary38.get("layers").add(layersDictionary38_2);



                    var mapDictionary39 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level5/B_Fragment5", mapDictionary39);

                    mapDictionary39.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary39_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary39_0.set("firstgid", "1");
                    tilesetDictionary39_0.set("imagewidth", "464");
                    tilesetDictionary39_0.set("imageheight", "176");
                    tilesetDictionary39_0.set("name", "TsSnow");
                    tilesetDictionary39_0.set("tilewidth", "16");
                    tilesetDictionary39_0.set("tileheight", "16");
                    mapDictionary39.get("tilesets").add(tilesetDictionary39_0);
                    var tilesetDictionary39_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary39_1.set("firstgid", "320");
                    tilesetDictionary39_1.set("imagewidth", "80");
                    tilesetDictionary39_1.set("imageheight", "192");
                    tilesetDictionary39_1.set("name", "Solid");
                    tilesetDictionary39_1.set("tilewidth", "16");
                    tilesetDictionary39_1.set("tileheight", "16");
                    mapDictionary39.get("tilesets").add(tilesetDictionary39_1);
                    var tilesetDictionary39_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary39_2.set("firstgid", "380");
                    tilesetDictionary39_2.set("imagewidth", "128");
                    tilesetDictionary39_2.set("imageheight", "160");
                    tilesetDictionary39_2.set("name", "Actors");
                    tilesetDictionary39_2.set("tilewidth", "16");
                    tilesetDictionary39_2.set("tileheight", "16");
                    mapDictionary39.get("tilesets").add(tilesetDictionary39_2);
                    var tilesetDictionary39_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary39_3.set("firstgid", "460");
                    tilesetDictionary39_3.set("imagewidth", "128");
                    tilesetDictionary39_3.set("imageheight", "32");
                    tilesetDictionary39_3.set("name", "Spikes");
                    tilesetDictionary39_3.set("tilewidth", "16");
                    tilesetDictionary39_3.set("tileheight", "16");
                    mapDictionary39.get("tilesets").add(tilesetDictionary39_3);
                    var tilesetDictionary39_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary39_4.set("firstgid", "476");
                    tilesetDictionary39_4.set("imagewidth", "192");
                    tilesetDictionary39_4.set("imageheight", "80");
                    tilesetDictionary39_4.set("name", "Igloo");
                    tilesetDictionary39_4.set("tilewidth", "16");
                    tilesetDictionary39_4.set("tileheight", "16");
                    mapDictionary39.get("tilesets").add(tilesetDictionary39_4);
                    var tilesetDictionary39_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary39_5.set("firstgid", "536");
                    tilesetDictionary39_5.set("imagewidth", "80");
                    tilesetDictionary39_5.set("imageheight", "80");
                    tilesetDictionary39_5.set("name", "Signpost");
                    tilesetDictionary39_5.set("tilewidth", "16");
                    tilesetDictionary39_5.set("tileheight", "16");
                    mapDictionary39.get("tilesets").add(tilesetDictionary39_5);

                    mapDictionary39.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary39_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary39_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary39_0.set("width", "5");
                    layersDictionary39_0.set("height", "3");
                    layersDictionary39_0.set("name", "Background");
                    mapDictionary39.get("layers").add(layersDictionary39_0);
                    var layersDictionary39_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary39_1.set("data", "393,0,0,393,0,2,4,0,2,4,465,0,0,465,465");
                    layersDictionary39_1.set("width", "5");
                    layersDictionary39_1.set("height", "3");
                    layersDictionary39_1.set("name", "Foreground");
                    mapDictionary39.get("layers").add(layersDictionary39_1);
                    var layersDictionary39_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary39_2.set("data", "0,0,0,0,0,320,320,0,320,320,363,0,0,363,363");
                    layersDictionary39_2.set("width", "5");
                    layersDictionary39_2.set("height", "3");
                    layersDictionary39_2.set("name", "Solid");
                    mapDictionary39.get("layers").add(layersDictionary39_2);



                    var mapDictionary40 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level5/B_Fragment6", mapDictionary40);

                    mapDictionary40.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary40_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary40_0.set("firstgid", "1");
                    tilesetDictionary40_0.set("imagewidth", "464");
                    tilesetDictionary40_0.set("imageheight", "176");
                    tilesetDictionary40_0.set("name", "TsSnow");
                    tilesetDictionary40_0.set("tilewidth", "16");
                    tilesetDictionary40_0.set("tileheight", "16");
                    mapDictionary40.get("tilesets").add(tilesetDictionary40_0);
                    var tilesetDictionary40_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary40_1.set("firstgid", "320");
                    tilesetDictionary40_1.set("imagewidth", "80");
                    tilesetDictionary40_1.set("imageheight", "192");
                    tilesetDictionary40_1.set("name", "Solid");
                    tilesetDictionary40_1.set("tilewidth", "16");
                    tilesetDictionary40_1.set("tileheight", "16");
                    mapDictionary40.get("tilesets").add(tilesetDictionary40_1);
                    var tilesetDictionary40_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary40_2.set("firstgid", "380");
                    tilesetDictionary40_2.set("imagewidth", "128");
                    tilesetDictionary40_2.set("imageheight", "160");
                    tilesetDictionary40_2.set("name", "Actors");
                    tilesetDictionary40_2.set("tilewidth", "16");
                    tilesetDictionary40_2.set("tileheight", "16");
                    mapDictionary40.get("tilesets").add(tilesetDictionary40_2);
                    var tilesetDictionary40_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary40_3.set("firstgid", "460");
                    tilesetDictionary40_3.set("imagewidth", "128");
                    tilesetDictionary40_3.set("imageheight", "32");
                    tilesetDictionary40_3.set("name", "Spikes");
                    tilesetDictionary40_3.set("tilewidth", "16");
                    tilesetDictionary40_3.set("tileheight", "16");
                    mapDictionary40.get("tilesets").add(tilesetDictionary40_3);
                    var tilesetDictionary40_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary40_4.set("firstgid", "476");
                    tilesetDictionary40_4.set("imagewidth", "192");
                    tilesetDictionary40_4.set("imageheight", "80");
                    tilesetDictionary40_4.set("name", "Igloo");
                    tilesetDictionary40_4.set("tilewidth", "16");
                    tilesetDictionary40_4.set("tileheight", "16");
                    mapDictionary40.get("tilesets").add(tilesetDictionary40_4);
                    var tilesetDictionary40_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary40_5.set("firstgid", "536");
                    tilesetDictionary40_5.set("imagewidth", "80");
                    tilesetDictionary40_5.set("imageheight", "80");
                    tilesetDictionary40_5.set("name", "Signpost");
                    tilesetDictionary40_5.set("tilewidth", "16");
                    tilesetDictionary40_5.set("tileheight", "16");
                    mapDictionary40.get("tilesets").add(tilesetDictionary40_5);

                    mapDictionary40.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary40_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary40_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary40_0.set("width", "5");
                    layersDictionary40_0.set("height", "3");
                    layersDictionary40_0.set("name", "Background");
                    mapDictionary40.get("layers").add(layersDictionary40_0);
                    var layersDictionary40_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary40_1.set("data", "0,0,0,0,0,1,464,464,464,1,0,2,3,4,0");
                    layersDictionary40_1.set("width", "5");
                    layersDictionary40_1.set("height", "3");
                    layersDictionary40_1.set("name", "Foreground");
                    mapDictionary40.get("layers").add(layersDictionary40_1);
                    var layersDictionary40_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary40_2.set("data", "0,0,0,0,0,320,363,363,363,320,0,320,320,320,0");
                    layersDictionary40_2.set("width", "5");
                    layersDictionary40_2.set("height", "3");
                    layersDictionary40_2.set("name", "Solid");
                    mapDictionary40.get("layers").add(layersDictionary40_2);



                    var mapDictionary41 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level5/B_Fragment7", mapDictionary41);

                    mapDictionary41.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary41_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary41_0.set("firstgid", "1");
                    tilesetDictionary41_0.set("imagewidth", "464");
                    tilesetDictionary41_0.set("imageheight", "176");
                    tilesetDictionary41_0.set("name", "TsSnow");
                    tilesetDictionary41_0.set("tilewidth", "16");
                    tilesetDictionary41_0.set("tileheight", "16");
                    mapDictionary41.get("tilesets").add(tilesetDictionary41_0);
                    var tilesetDictionary41_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary41_1.set("firstgid", "320");
                    tilesetDictionary41_1.set("imagewidth", "80");
                    tilesetDictionary41_1.set("imageheight", "192");
                    tilesetDictionary41_1.set("name", "Solid");
                    tilesetDictionary41_1.set("tilewidth", "16");
                    tilesetDictionary41_1.set("tileheight", "16");
                    mapDictionary41.get("tilesets").add(tilesetDictionary41_1);
                    var tilesetDictionary41_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary41_2.set("firstgid", "380");
                    tilesetDictionary41_2.set("imagewidth", "128");
                    tilesetDictionary41_2.set("imageheight", "160");
                    tilesetDictionary41_2.set("name", "Actors");
                    tilesetDictionary41_2.set("tilewidth", "16");
                    tilesetDictionary41_2.set("tileheight", "16");
                    mapDictionary41.get("tilesets").add(tilesetDictionary41_2);
                    var tilesetDictionary41_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary41_3.set("firstgid", "460");
                    tilesetDictionary41_3.set("imagewidth", "128");
                    tilesetDictionary41_3.set("imageheight", "32");
                    tilesetDictionary41_3.set("name", "Spikes");
                    tilesetDictionary41_3.set("tilewidth", "16");
                    tilesetDictionary41_3.set("tileheight", "16");
                    mapDictionary41.get("tilesets").add(tilesetDictionary41_3);
                    var tilesetDictionary41_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary41_4.set("firstgid", "476");
                    tilesetDictionary41_4.set("imagewidth", "192");
                    tilesetDictionary41_4.set("imageheight", "80");
                    tilesetDictionary41_4.set("name", "Igloo");
                    tilesetDictionary41_4.set("tilewidth", "16");
                    tilesetDictionary41_4.set("tileheight", "16");
                    mapDictionary41.get("tilesets").add(tilesetDictionary41_4);
                    var tilesetDictionary41_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary41_5.set("firstgid", "536");
                    tilesetDictionary41_5.set("imagewidth", "80");
                    tilesetDictionary41_5.set("imageheight", "80");
                    tilesetDictionary41_5.set("name", "Signpost");
                    tilesetDictionary41_5.set("tilewidth", "16");
                    tilesetDictionary41_5.set("tileheight", "16");
                    mapDictionary41.get("tilesets").add(tilesetDictionary41_5);

                    mapDictionary41.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary41_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary41_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary41_0.set("width", "5");
                    layersDictionary41_0.set("height", "3");
                    layersDictionary41_0.set("name", "Background");
                    mapDictionary41.get("layers").add(layersDictionary41_0);
                    var layersDictionary41_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary41_1.set("data", "0,0,0,0,0,1,0,0,0,1,0,0,0,0,0");
                    layersDictionary41_1.set("width", "5");
                    layersDictionary41_1.set("height", "3");
                    layersDictionary41_1.set("name", "Foreground");
                    mapDictionary41.get("layers").add(layersDictionary41_1);
                    var layersDictionary41_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary41_2.set("data", "0,0,0,0,0,320,0,0,0,320,0,0,0,0,0");
                    layersDictionary41_2.set("width", "5");
                    layersDictionary41_2.set("height", "3");
                    layersDictionary41_2.set("name", "Solid");
                    mapDictionary41.get("layers").add(layersDictionary41_2);



                    var mapDictionary42 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level5/B_Fragment8", mapDictionary42);

                    mapDictionary42.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary42_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary42_0.set("firstgid", "1");
                    tilesetDictionary42_0.set("imagewidth", "464");
                    tilesetDictionary42_0.set("imageheight", "176");
                    tilesetDictionary42_0.set("name", "TsSnow");
                    tilesetDictionary42_0.set("tilewidth", "16");
                    tilesetDictionary42_0.set("tileheight", "16");
                    mapDictionary42.get("tilesets").add(tilesetDictionary42_0);
                    var tilesetDictionary42_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary42_1.set("firstgid", "320");
                    tilesetDictionary42_1.set("imagewidth", "80");
                    tilesetDictionary42_1.set("imageheight", "192");
                    tilesetDictionary42_1.set("name", "Solid");
                    tilesetDictionary42_1.set("tilewidth", "16");
                    tilesetDictionary42_1.set("tileheight", "16");
                    mapDictionary42.get("tilesets").add(tilesetDictionary42_1);
                    var tilesetDictionary42_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary42_2.set("firstgid", "380");
                    tilesetDictionary42_2.set("imagewidth", "128");
                    tilesetDictionary42_2.set("imageheight", "160");
                    tilesetDictionary42_2.set("name", "Actors");
                    tilesetDictionary42_2.set("tilewidth", "16");
                    tilesetDictionary42_2.set("tileheight", "16");
                    mapDictionary42.get("tilesets").add(tilesetDictionary42_2);
                    var tilesetDictionary42_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary42_3.set("firstgid", "460");
                    tilesetDictionary42_3.set("imagewidth", "128");
                    tilesetDictionary42_3.set("imageheight", "32");
                    tilesetDictionary42_3.set("name", "Spikes");
                    tilesetDictionary42_3.set("tilewidth", "16");
                    tilesetDictionary42_3.set("tileheight", "16");
                    mapDictionary42.get("tilesets").add(tilesetDictionary42_3);
                    var tilesetDictionary42_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary42_4.set("firstgid", "476");
                    tilesetDictionary42_4.set("imagewidth", "192");
                    tilesetDictionary42_4.set("imageheight", "80");
                    tilesetDictionary42_4.set("name", "Igloo");
                    tilesetDictionary42_4.set("tilewidth", "16");
                    tilesetDictionary42_4.set("tileheight", "16");
                    mapDictionary42.get("tilesets").add(tilesetDictionary42_4);
                    var tilesetDictionary42_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary42_5.set("firstgid", "536");
                    tilesetDictionary42_5.set("imagewidth", "80");
                    tilesetDictionary42_5.set("imageheight", "80");
                    tilesetDictionary42_5.set("name", "Signpost");
                    tilesetDictionary42_5.set("tilewidth", "16");
                    tilesetDictionary42_5.set("tileheight", "16");
                    mapDictionary42.get("tilesets").add(tilesetDictionary42_5);

                    mapDictionary42.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary42_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary42_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary42_0.set("width", "5");
                    layersDictionary42_0.set("height", "3");
                    layersDictionary42_0.set("name", "Background");
                    mapDictionary42.get("layers").add(layersDictionary42_0);
                    var layersDictionary42_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary42_1.set("data", "0,0,0,0,0,1,0,0,393,30,0,0,2,3,35");
                    layersDictionary42_1.set("width", "5");
                    layersDictionary42_1.set("height", "3");
                    layersDictionary42_1.set("name", "Foreground");
                    mapDictionary42.get("layers").add(layersDictionary42_1);
                    var layersDictionary42_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary42_2.set("data", "0,0,0,0,0,320,0,0,0,320,0,0,320,320,320");
                    layersDictionary42_2.set("width", "5");
                    layersDictionary42_2.set("height", "3");
                    layersDictionary42_2.set("name", "Solid");
                    mapDictionary42.get("layers").add(layersDictionary42_2);



                    var mapDictionary43 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level5/B_Fragment9", mapDictionary43);

                    mapDictionary43.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary43_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary43_0.set("firstgid", "1");
                    tilesetDictionary43_0.set("imagewidth", "464");
                    tilesetDictionary43_0.set("imageheight", "176");
                    tilesetDictionary43_0.set("name", "TsSnow");
                    tilesetDictionary43_0.set("tilewidth", "16");
                    tilesetDictionary43_0.set("tileheight", "16");
                    mapDictionary43.get("tilesets").add(tilesetDictionary43_0);
                    var tilesetDictionary43_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary43_1.set("firstgid", "320");
                    tilesetDictionary43_1.set("imagewidth", "80");
                    tilesetDictionary43_1.set("imageheight", "192");
                    tilesetDictionary43_1.set("name", "Solid");
                    tilesetDictionary43_1.set("tilewidth", "16");
                    tilesetDictionary43_1.set("tileheight", "16");
                    mapDictionary43.get("tilesets").add(tilesetDictionary43_1);
                    var tilesetDictionary43_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary43_2.set("firstgid", "380");
                    tilesetDictionary43_2.set("imagewidth", "128");
                    tilesetDictionary43_2.set("imageheight", "160");
                    tilesetDictionary43_2.set("name", "Actors");
                    tilesetDictionary43_2.set("tilewidth", "16");
                    tilesetDictionary43_2.set("tileheight", "16");
                    mapDictionary43.get("tilesets").add(tilesetDictionary43_2);
                    var tilesetDictionary43_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary43_3.set("firstgid", "460");
                    tilesetDictionary43_3.set("imagewidth", "128");
                    tilesetDictionary43_3.set("imageheight", "32");
                    tilesetDictionary43_3.set("name", "Spikes");
                    tilesetDictionary43_3.set("tilewidth", "16");
                    tilesetDictionary43_3.set("tileheight", "16");
                    mapDictionary43.get("tilesets").add(tilesetDictionary43_3);
                    var tilesetDictionary43_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary43_4.set("firstgid", "476");
                    tilesetDictionary43_4.set("imagewidth", "192");
                    tilesetDictionary43_4.set("imageheight", "80");
                    tilesetDictionary43_4.set("name", "Igloo");
                    tilesetDictionary43_4.set("tilewidth", "16");
                    tilesetDictionary43_4.set("tileheight", "16");
                    mapDictionary43.get("tilesets").add(tilesetDictionary43_4);
                    var tilesetDictionary43_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary43_5.set("firstgid", "536");
                    tilesetDictionary43_5.set("imagewidth", "80");
                    tilesetDictionary43_5.set("imageheight", "80");
                    tilesetDictionary43_5.set("name", "Signpost");
                    tilesetDictionary43_5.set("tilewidth", "16");
                    tilesetDictionary43_5.set("tileheight", "16");
                    mapDictionary43.get("tilesets").add(tilesetDictionary43_5);

                    mapDictionary43.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary43_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary43_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary43_0.set("width", "4");
                    layersDictionary43_0.set("height", "3");
                    layersDictionary43_0.set("name", "Background");
                    mapDictionary43.get("layers").add(layersDictionary43_0);
                    var layersDictionary43_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary43_1.set("data", "0,464,0,0,2,3,3,4,0,0,465,465");
                    layersDictionary43_1.set("width", "4");
                    layersDictionary43_1.set("height", "3");
                    layersDictionary43_1.set("name", "Foreground");
                    mapDictionary43.get("layers").add(layersDictionary43_1);
                    var layersDictionary43_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary43_2.set("data", "0,363,0,0,320,320,320,320,0,0,363,363");
                    layersDictionary43_2.set("width", "4");
                    layersDictionary43_2.set("height", "3");
                    layersDictionary43_2.set("name", "Solid");
                    mapDictionary43.get("layers").add(layersDictionary43_2);



                    var mapDictionary44 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level5/C_Finish", mapDictionary44);

                    mapDictionary44.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary44_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary44_0.set("firstgid", "1");
                    tilesetDictionary44_0.set("imagewidth", "464");
                    tilesetDictionary44_0.set("imageheight", "176");
                    tilesetDictionary44_0.set("name", "TsSnow");
                    tilesetDictionary44_0.set("tilewidth", "16");
                    tilesetDictionary44_0.set("tileheight", "16");
                    mapDictionary44.get("tilesets").add(tilesetDictionary44_0);
                    var tilesetDictionary44_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary44_1.set("firstgid", "320");
                    tilesetDictionary44_1.set("imagewidth", "80");
                    tilesetDictionary44_1.set("imageheight", "192");
                    tilesetDictionary44_1.set("name", "Solid");
                    tilesetDictionary44_1.set("tilewidth", "16");
                    tilesetDictionary44_1.set("tileheight", "16");
                    mapDictionary44.get("tilesets").add(tilesetDictionary44_1);
                    var tilesetDictionary44_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary44_2.set("firstgid", "380");
                    tilesetDictionary44_2.set("imagewidth", "128");
                    tilesetDictionary44_2.set("imageheight", "160");
                    tilesetDictionary44_2.set("name", "Actors");
                    tilesetDictionary44_2.set("tilewidth", "16");
                    tilesetDictionary44_2.set("tileheight", "16");
                    mapDictionary44.get("tilesets").add(tilesetDictionary44_2);
                    var tilesetDictionary44_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary44_3.set("firstgid", "460");
                    tilesetDictionary44_3.set("imagewidth", "128");
                    tilesetDictionary44_3.set("imageheight", "32");
                    tilesetDictionary44_3.set("name", "Spikes");
                    tilesetDictionary44_3.set("tilewidth", "16");
                    tilesetDictionary44_3.set("tileheight", "16");
                    mapDictionary44.get("tilesets").add(tilesetDictionary44_3);
                    var tilesetDictionary44_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary44_4.set("firstgid", "476");
                    tilesetDictionary44_4.set("imagewidth", "192");
                    tilesetDictionary44_4.set("imageheight", "80");
                    tilesetDictionary44_4.set("name", "Igloo");
                    tilesetDictionary44_4.set("tilewidth", "16");
                    tilesetDictionary44_4.set("tileheight", "16");
                    mapDictionary44.get("tilesets").add(tilesetDictionary44_4);
                    var tilesetDictionary44_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary44_5.set("firstgid", "536");
                    tilesetDictionary44_5.set("imagewidth", "80");
                    tilesetDictionary44_5.set("imageheight", "80");
                    tilesetDictionary44_5.set("name", "Signpost");
                    tilesetDictionary44_5.set("tilewidth", "16");
                    tilesetDictionary44_5.set("tileheight", "16");
                    mapDictionary44.get("tilesets").add(tilesetDictionary44_5);

                    mapDictionary44.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary44_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary44_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,243,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,273,214,244,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,215,214,216,0,0,0,0,0,495,0,0,0,0,0,0,0,0,0,0,0,0,273,119,214,119,244,0,0,0,0,507,0,0,0,0,0,0,0,0,0,0,0,0,0,0,175,0,0,0,0,0,0,519,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary44_0.set("width", "22");
                    layersDictionary44_0.set("height", "40");
                    layersDictionary44_0.set("name", "Background");
                    mapDictionary44.get("layers").add(layersDictionary44_0);
                    var layersDictionary44_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary44_1.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,477,478,479,479,480,481,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,488,489,490,491,492,492,493,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,500,501,502,503,504,492,505,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,500,513,514,515,516,516,517,0,0,31,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61");
                    layersDictionary44_1.set("width", "22");
                    layersDictionary44_1.set("height", "40");
                    layersDictionary44_1.set("name", "Foreground");
                    mapDictionary44.get("layers").add(layersDictionary44_1);
                    var layersDictionary44_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary44_2.set("data
                    layersDictionary44_2.set("width", "22");
                    layersDictionary44_2.set("height", "40");
                    layersDictionary44_2.set("name", "Solid");
                    mapDictionary44.get("layers").add(layersDictionary44_2);



                    var mapDictionary45 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level6/A_Start", mapDictionary45);

                    mapDictionary45.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary45_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary45_0.set("firstgid", "1");
                    tilesetDictionary45_0.set("imagewidth", "464");
                    tilesetDictionary45_0.set("imageheight", "176");
                    tilesetDictionary45_0.set("name", "TsSnow");
                    tilesetDictionary45_0.set("tilewidth", "16");
                    tilesetDictionary45_0.set("tileheight", "16");
                    mapDictionary45.get("tilesets").add(tilesetDictionary45_0);
                    var tilesetDictionary45_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary45_1.set("firstgid", "320");
                    tilesetDictionary45_1.set("imagewidth", "80");
                    tilesetDictionary45_1.set("imageheight", "192");
                    tilesetDictionary45_1.set("name", "Solid");
                    tilesetDictionary45_1.set("tilewidth", "16");
                    tilesetDictionary45_1.set("tileheight", "16");
                    mapDictionary45.get("tilesets").add(tilesetDictionary45_1);
                    var tilesetDictionary45_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary45_2.set("firstgid", "380");
                    tilesetDictionary45_2.set("imagewidth", "128");
                    tilesetDictionary45_2.set("imageheight", "160");
                    tilesetDictionary45_2.set("name", "Actors");
                    tilesetDictionary45_2.set("tilewidth", "16");
                    tilesetDictionary45_2.set("tileheight", "16");
                    mapDictionary45.get("tilesets").add(tilesetDictionary45_2);
                    var tilesetDictionary45_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary45_3.set("firstgid", "460");
                    tilesetDictionary45_3.set("imagewidth", "128");
                    tilesetDictionary45_3.set("imageheight", "32");
                    tilesetDictionary45_3.set("name", "Spikes");
                    tilesetDictionary45_3.set("tilewidth", "16");
                    tilesetDictionary45_3.set("tileheight", "16");
                    mapDictionary45.get("tilesets").add(tilesetDictionary45_3);
                    var tilesetDictionary45_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary45_4.set("firstgid", "476");
                    tilesetDictionary45_4.set("imagewidth", "192");
                    tilesetDictionary45_4.set("imageheight", "80");
                    tilesetDictionary45_4.set("name", "Igloo");
                    tilesetDictionary45_4.set("tilewidth", "16");
                    tilesetDictionary45_4.set("tileheight", "16");
                    mapDictionary45.get("tilesets").add(tilesetDictionary45_4);
                    var tilesetDictionary45_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary45_5.set("firstgid", "536");
                    tilesetDictionary45_5.set("imagewidth", "80");
                    tilesetDictionary45_5.set("imageheight", "80");
                    tilesetDictionary45_5.set("name", "Signpost");
                    tilesetDictionary45_5.set("tilewidth", "16");
                    tilesetDictionary45_5.set("tileheight", "16");
                    mapDictionary45.get("tilesets").add(tilesetDictionary45_5);

                    mapDictionary45.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary45_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary45_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary45_0.set("width", "57");
                    layersDictionary45_0.set("height", "35");
                    layersDictionary45_0.set("name", "Background");
                    mapDictionary45.get("layers").add(layersDictionary45_0);
                    var layersDictionary45_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary45_1.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary45_1.set("width", "57");
                    layersDictionary45_1.set("height", "35");
                    layersDictionary45_1.set("name", "Midground");
                    mapDictionary45.get("layers").add(layersDictionary45_1);
                    var layersDictionary45_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary45_2.set("data
                    layersDictionary45_2.set("width", "57");
                    layersDictionary45_2.set("height", "35");
                    layersDictionary45_2.set("name", "Foreground");
                    mapDictionary45.get("layers").add(layersDictionary45_2);
                    var layersDictionary45_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary45_3.set("data", "320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363");
                    layersDictionary45_3.set("width", "57");
                    layersDictionary45_3.set("height", "35");
                    layersDictionary45_3.set("name", "Solid");
                    mapDictionary45.get("layers").add(layersDictionary45_3);



                    var mapDictionary46 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level6/B_Descent", mapDictionary46);

                    mapDictionary46.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary46_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary46_0.set("firstgid", "1");
                    tilesetDictionary46_0.set("imagewidth", "464");
                    tilesetDictionary46_0.set("imageheight", "176");
                    tilesetDictionary46_0.set("name", "TsSnow");
                    tilesetDictionary46_0.set("tilewidth", "16");
                    tilesetDictionary46_0.set("tileheight", "16");
                    mapDictionary46.get("tilesets").add(tilesetDictionary46_0);
                    var tilesetDictionary46_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary46_1.set("firstgid", "320");
                    tilesetDictionary46_1.set("imagewidth", "80");
                    tilesetDictionary46_1.set("imageheight", "192");
                    tilesetDictionary46_1.set("name", "Solid");
                    tilesetDictionary46_1.set("tilewidth", "16");
                    tilesetDictionary46_1.set("tileheight", "16");
                    mapDictionary46.get("tilesets").add(tilesetDictionary46_1);
                    var tilesetDictionary46_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary46_2.set("firstgid", "380");
                    tilesetDictionary46_2.set("imagewidth", "128");
                    tilesetDictionary46_2.set("imageheight", "160");
                    tilesetDictionary46_2.set("name", "Actors");
                    tilesetDictionary46_2.set("tilewidth", "16");
                    tilesetDictionary46_2.set("tileheight", "16");
                    mapDictionary46.get("tilesets").add(tilesetDictionary46_2);
                    var tilesetDictionary46_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary46_3.set("firstgid", "460");
                    tilesetDictionary46_3.set("imagewidth", "128");
                    tilesetDictionary46_3.set("imageheight", "32");
                    tilesetDictionary46_3.set("name", "Spikes");
                    tilesetDictionary46_3.set("tilewidth", "16");
                    tilesetDictionary46_3.set("tileheight", "16");
                    mapDictionary46.get("tilesets").add(tilesetDictionary46_3);
                    var tilesetDictionary46_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary46_4.set("firstgid", "476");
                    tilesetDictionary46_4.set("imagewidth", "192");
                    tilesetDictionary46_4.set("imageheight", "80");
                    tilesetDictionary46_4.set("name", "Igloo");
                    tilesetDictionary46_4.set("tilewidth", "16");
                    tilesetDictionary46_4.set("tileheight", "16");
                    mapDictionary46.get("tilesets").add(tilesetDictionary46_4);
                    var tilesetDictionary46_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary46_5.set("firstgid", "536");
                    tilesetDictionary46_5.set("imagewidth", "80");
                    tilesetDictionary46_5.set("imageheight", "80");
                    tilesetDictionary46_5.set("name", "Signpost");
                    tilesetDictionary46_5.set("tilewidth", "16");
                    tilesetDictionary46_5.set("tileheight", "16");
                    mapDictionary46.get("tilesets").add(tilesetDictionary46_5);

                    mapDictionary46.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary46_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary46_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary46_0.set("width", "50");
                    layersDictionary46_0.set("height", "1");
                    layersDictionary46_0.set("name", "Background");
                    mapDictionary46.get("layers").add(layersDictionary46_0);
                    var layersDictionary46_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary46_1.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary46_1.set("width", "50");
                    layersDictionary46_1.set("height", "1");
                    layersDictionary46_1.set("name", "Midground");
                    mapDictionary46.get("layers").add(layersDictionary46_1);
                    var layersDictionary46_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary46_2.set("data", "469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469");
                    layersDictionary46_2.set("width", "50");
                    layersDictionary46_2.set("height", "1");
                    layersDictionary46_2.set("name", "Foreground");
                    mapDictionary46.get("layers").add(layersDictionary46_2);
                    var layersDictionary46_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary46_3.set("data", "363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363");
                    layersDictionary46_3.set("width", "50");
                    layersDictionary46_3.set("height", "1");
                    layersDictionary46_3.set("name", "Solid");
                    mapDictionary46.get("layers").add(layersDictionary46_3);



                    var mapDictionary47 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level6/C_Cutscene", mapDictionary47);

                    mapDictionary47.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary47_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary47_0.set("firstgid", "1");
                    tilesetDictionary47_0.set("imagewidth", "464");
                    tilesetDictionary47_0.set("imageheight", "176");
                    tilesetDictionary47_0.set("name", "TsSnow");
                    tilesetDictionary47_0.set("tilewidth", "16");
                    tilesetDictionary47_0.set("tileheight", "16");
                    mapDictionary47.get("tilesets").add(tilesetDictionary47_0);
                    var tilesetDictionary47_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary47_1.set("firstgid", "320");
                    tilesetDictionary47_1.set("imagewidth", "80");
                    tilesetDictionary47_1.set("imageheight", "192");
                    tilesetDictionary47_1.set("name", "Solid");
                    tilesetDictionary47_1.set("tilewidth", "16");
                    tilesetDictionary47_1.set("tileheight", "16");
                    mapDictionary47.get("tilesets").add(tilesetDictionary47_1);
                    var tilesetDictionary47_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary47_2.set("firstgid", "380");
                    tilesetDictionary47_2.set("imagewidth", "128");
                    tilesetDictionary47_2.set("imageheight", "160");
                    tilesetDictionary47_2.set("name", "Actors");
                    tilesetDictionary47_2.set("tilewidth", "16");
                    tilesetDictionary47_2.set("tileheight", "16");
                    mapDictionary47.get("tilesets").add(tilesetDictionary47_2);
                    var tilesetDictionary47_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary47_3.set("firstgid", "460");
                    tilesetDictionary47_3.set("imagewidth", "128");
                    tilesetDictionary47_3.set("imageheight", "32");
                    tilesetDictionary47_3.set("name", "Spikes");
                    tilesetDictionary47_3.set("tilewidth", "16");
                    tilesetDictionary47_3.set("tileheight", "16");
                    mapDictionary47.get("tilesets").add(tilesetDictionary47_3);
                    var tilesetDictionary47_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary47_4.set("firstgid", "476");
                    tilesetDictionary47_4.set("imagewidth", "192");
                    tilesetDictionary47_4.set("imageheight", "80");
                    tilesetDictionary47_4.set("name", "Igloo");
                    tilesetDictionary47_4.set("tilewidth", "16");
                    tilesetDictionary47_4.set("tileheight", "16");
                    mapDictionary47.get("tilesets").add(tilesetDictionary47_4);
                    var tilesetDictionary47_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary47_5.set("firstgid", "536");
                    tilesetDictionary47_5.set("imagewidth", "80");
                    tilesetDictionary47_5.set("imageheight", "80");
                    tilesetDictionary47_5.set("name", "Signpost");
                    tilesetDictionary47_5.set("tilewidth", "16");
                    tilesetDictionary47_5.set("tileheight", "16");
                    mapDictionary47.get("tilesets").add(tilesetDictionary47_5);

                    mapDictionary47.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary47_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary47_0.set("data
                    layersDictionary47_0.set("width", "99");
                    layersDictionary47_0.set("height", "77");
                    layersDictionary47_0.set("name", "Background");
                    mapDictionary47.get("layers").add(layersDictionary47_0);
                    var layersDictionary47_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary47_1.set("data
                    layersDictionary47_1.set("width", "99");
                    layersDictionary47_1.set("height", "77");
                    layersDictionary47_1.set("name", "Midground");
                    mapDictionary47.get("layers").add(layersDictionary47_1);
                    var layersDictionary47_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary47_2.set("data
                    layersDictionary47_2.set("width", "99");
                    layersDictionary47_2.set("height", "77");
                    layersDictionary47_2.set("name", "Foreground");
                    mapDictionary47.get("layers").add(layersDictionary47_2);
                    var layersDictionary47_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary47_3.set("data
                    layersDictionary47_3.set("width", "99");
                    layersDictionary47_3.set("height", "77");
                    layersDictionary47_3.set("name", "Solid");
                    mapDictionary47.get("layers").add(layersDictionary47_3);



                    var mapDictionary48 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level6/D_SecondDrop", mapDictionary48);

                    mapDictionary48.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary48_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary48_0.set("firstgid", "1");
                    tilesetDictionary48_0.set("imagewidth", "464");
                    tilesetDictionary48_0.set("imageheight", "176");
                    tilesetDictionary48_0.set("name", "TsSnow");
                    tilesetDictionary48_0.set("tilewidth", "16");
                    tilesetDictionary48_0.set("tileheight", "16");
                    mapDictionary48.get("tilesets").add(tilesetDictionary48_0);
                    var tilesetDictionary48_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary48_1.set("firstgid", "320");
                    tilesetDictionary48_1.set("imagewidth", "80");
                    tilesetDictionary48_1.set("imageheight", "192");
                    tilesetDictionary48_1.set("name", "Solid");
                    tilesetDictionary48_1.set("tilewidth", "16");
                    tilesetDictionary48_1.set("tileheight", "16");
                    mapDictionary48.get("tilesets").add(tilesetDictionary48_1);
                    var tilesetDictionary48_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary48_2.set("firstgid", "380");
                    tilesetDictionary48_2.set("imagewidth", "128");
                    tilesetDictionary48_2.set("imageheight", "160");
                    tilesetDictionary48_2.set("name", "Actors");
                    tilesetDictionary48_2.set("tilewidth", "16");
                    tilesetDictionary48_2.set("tileheight", "16");
                    mapDictionary48.get("tilesets").add(tilesetDictionary48_2);
                    var tilesetDictionary48_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary48_3.set("firstgid", "460");
                    tilesetDictionary48_3.set("imagewidth", "128");
                    tilesetDictionary48_3.set("imageheight", "32");
                    tilesetDictionary48_3.set("name", "Spikes");
                    tilesetDictionary48_3.set("tilewidth", "16");
                    tilesetDictionary48_3.set("tileheight", "16");
                    mapDictionary48.get("tilesets").add(tilesetDictionary48_3);
                    var tilesetDictionary48_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary48_4.set("firstgid", "476");
                    tilesetDictionary48_4.set("imagewidth", "192");
                    tilesetDictionary48_4.set("imageheight", "80");
                    tilesetDictionary48_4.set("name", "Igloo");
                    tilesetDictionary48_4.set("tilewidth", "16");
                    tilesetDictionary48_4.set("tileheight", "16");
                    mapDictionary48.get("tilesets").add(tilesetDictionary48_4);
                    var tilesetDictionary48_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary48_5.set("firstgid", "536");
                    tilesetDictionary48_5.set("imagewidth", "80");
                    tilesetDictionary48_5.set("imageheight", "80");
                    tilesetDictionary48_5.set("name", "Signpost");
                    tilesetDictionary48_5.set("tilewidth", "16");
                    tilesetDictionary48_5.set("tileheight", "16");
                    mapDictionary48.get("tilesets").add(tilesetDictionary48_5);

                    mapDictionary48.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary48_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary48_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary48_0.set("width", "57");
                    layersDictionary48_0.set("height", "45");
                    layersDictionary48_0.set("name", "Background");
                    mapDictionary48.get("layers").add(layersDictionary48_0);
                    var layersDictionary48_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary48_1.set("data
                    layersDictionary48_1.set("width", "57");
                    layersDictionary48_1.set("height", "45");
                    layersDictionary48_1.set("name", "Midground");
                    mapDictionary48.get("layers").add(layersDictionary48_1);
                    var layersDictionary48_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary48_2.set("data
                    layersDictionary48_2.set("width", "57");
                    layersDictionary48_2.set("height", "45");
                    layersDictionary48_2.set("name", "Foreground");
                    mapDictionary48.get("layers").add(layersDictionary48_2);
                    var layersDictionary48_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary48_3.set("data
                    layersDictionary48_3.set("width", "57");
                    layersDictionary48_3.set("height", "45");
                    layersDictionary48_3.set("name", "Solid");
                    mapDictionary48.get("layers").add(layersDictionary48_3);



                    var mapDictionary49 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level6/E_Descent", mapDictionary49);

                    mapDictionary49.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary49_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary49_0.set("firstgid", "1");
                    tilesetDictionary49_0.set("imagewidth", "464");
                    tilesetDictionary49_0.set("imageheight", "176");
                    tilesetDictionary49_0.set("name", "TsSnow");
                    tilesetDictionary49_0.set("tilewidth", "16");
                    tilesetDictionary49_0.set("tileheight", "16");
                    mapDictionary49.get("tilesets").add(tilesetDictionary49_0);
                    var tilesetDictionary49_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary49_1.set("firstgid", "320");
                    tilesetDictionary49_1.set("imagewidth", "80");
                    tilesetDictionary49_1.set("imageheight", "192");
                    tilesetDictionary49_1.set("name", "Solid");
                    tilesetDictionary49_1.set("tilewidth", "16");
                    tilesetDictionary49_1.set("tileheight", "16");
                    mapDictionary49.get("tilesets").add(tilesetDictionary49_1);
                    var tilesetDictionary49_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary49_2.set("firstgid", "380");
                    tilesetDictionary49_2.set("imagewidth", "128");
                    tilesetDictionary49_2.set("imageheight", "160");
                    tilesetDictionary49_2.set("name", "Actors");
                    tilesetDictionary49_2.set("tilewidth", "16");
                    tilesetDictionary49_2.set("tileheight", "16");
                    mapDictionary49.get("tilesets").add(tilesetDictionary49_2);
                    var tilesetDictionary49_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary49_3.set("firstgid", "460");
                    tilesetDictionary49_3.set("imagewidth", "128");
                    tilesetDictionary49_3.set("imageheight", "32");
                    tilesetDictionary49_3.set("name", "Spikes");
                    tilesetDictionary49_3.set("tilewidth", "16");
                    tilesetDictionary49_3.set("tileheight", "16");
                    mapDictionary49.get("tilesets").add(tilesetDictionary49_3);
                    var tilesetDictionary49_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary49_4.set("firstgid", "476");
                    tilesetDictionary49_4.set("imagewidth", "192");
                    tilesetDictionary49_4.set("imageheight", "80");
                    tilesetDictionary49_4.set("name", "Igloo");
                    tilesetDictionary49_4.set("tilewidth", "16");
                    tilesetDictionary49_4.set("tileheight", "16");
                    mapDictionary49.get("tilesets").add(tilesetDictionary49_4);
                    var tilesetDictionary49_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary49_5.set("firstgid", "536");
                    tilesetDictionary49_5.set("imagewidth", "80");
                    tilesetDictionary49_5.set("imageheight", "80");
                    tilesetDictionary49_5.set("name", "Signpost");
                    tilesetDictionary49_5.set("tilewidth", "16");
                    tilesetDictionary49_5.set("tileheight", "16");
                    mapDictionary49.get("tilesets").add(tilesetDictionary49_5);

                    mapDictionary49.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary49_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary49_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary49_0.set("width", "50");
                    layersDictionary49_0.set("height", "1");
                    layersDictionary49_0.set("name", "Background");
                    mapDictionary49.get("layers").add(layersDictionary49_0);
                    var layersDictionary49_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary49_1.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary49_1.set("width", "50");
                    layersDictionary49_1.set("height", "1");
                    layersDictionary49_1.set("name", "Midground");
                    mapDictionary49.get("layers").add(layersDictionary49_1);
                    var layersDictionary49_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary49_2.set("data", "469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,0,0,0,0,0,0,0,0,0,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469");
                    layersDictionary49_2.set("width", "50");
                    layersDictionary49_2.set("height", "1");
                    layersDictionary49_2.set("name", "Foreground");
                    mapDictionary49.get("layers").add(layersDictionary49_2);
                    var layersDictionary49_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary49_3.set("data", "363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363");
                    layersDictionary49_3.set("width", "50");
                    layersDictionary49_3.set("height", "1");
                    layersDictionary49_3.set("name", "Solid");
                    mapDictionary49.get("layers").add(layersDictionary49_3);



                    var mapDictionary50 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level6/F_Finish", mapDictionary50);

                    mapDictionary50.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary50_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary50_0.set("firstgid", "1");
                    tilesetDictionary50_0.set("imagewidth", "464");
                    tilesetDictionary50_0.set("imageheight", "176");
                    tilesetDictionary50_0.set("name", "TsSnow");
                    tilesetDictionary50_0.set("tilewidth", "16");
                    tilesetDictionary50_0.set("tileheight", "16");
                    mapDictionary50.get("tilesets").add(tilesetDictionary50_0);
                    var tilesetDictionary50_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary50_1.set("firstgid", "320");
                    tilesetDictionary50_1.set("imagewidth", "80");
                    tilesetDictionary50_1.set("imageheight", "192");
                    tilesetDictionary50_1.set("name", "Solid");
                    tilesetDictionary50_1.set("tilewidth", "16");
                    tilesetDictionary50_1.set("tileheight", "16");
                    mapDictionary50.get("tilesets").add(tilesetDictionary50_1);
                    var tilesetDictionary50_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary50_2.set("firstgid", "380");
                    tilesetDictionary50_2.set("imagewidth", "128");
                    tilesetDictionary50_2.set("imageheight", "160");
                    tilesetDictionary50_2.set("name", "Actors");
                    tilesetDictionary50_2.set("tilewidth", "16");
                    tilesetDictionary50_2.set("tileheight", "16");
                    mapDictionary50.get("tilesets").add(tilesetDictionary50_2);
                    var tilesetDictionary50_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary50_3.set("firstgid", "460");
                    tilesetDictionary50_3.set("imagewidth", "128");
                    tilesetDictionary50_3.set("imageheight", "32");
                    tilesetDictionary50_3.set("name", "Spikes");
                    tilesetDictionary50_3.set("tilewidth", "16");
                    tilesetDictionary50_3.set("tileheight", "16");
                    mapDictionary50.get("tilesets").add(tilesetDictionary50_3);
                    var tilesetDictionary50_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary50_4.set("firstgid", "476");
                    tilesetDictionary50_4.set("imagewidth", "192");
                    tilesetDictionary50_4.set("imageheight", "80");
                    tilesetDictionary50_4.set("name", "Igloo");
                    tilesetDictionary50_4.set("tilewidth", "16");
                    tilesetDictionary50_4.set("tileheight", "16");
                    mapDictionary50.get("tilesets").add(tilesetDictionary50_4);
                    var tilesetDictionary50_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary50_5.set("firstgid", "536");
                    tilesetDictionary50_5.set("imagewidth", "80");
                    tilesetDictionary50_5.set("imageheight", "80");
                    tilesetDictionary50_5.set("name", "Signpost");
                    tilesetDictionary50_5.set("tilewidth", "16");
                    tilesetDictionary50_5.set("tileheight", "16");
                    mapDictionary50.get("tilesets").add(tilesetDictionary50_5);

                    mapDictionary50.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary50_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary50_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536,537,538,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,495,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,541,539,543,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,507,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,546,547,548,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,519,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary50_0.set("width", "120");
                    layersDictionary50_0.set("height", "42");
                    layersDictionary50_0.set("name", "Background");
                    mapDictionary50.get("layers").add(layersDictionary50_0);
                    var layersDictionary50_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary50_1.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary50_1.set("width", "120");
                    layersDictionary50_1.set("height", "42");
                    layersDictionary50_1.set("name", "Midground");
                    mapDictionary50.get("layers").add(layersDictionary50_1);
                    var layersDictionary50_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary50_2.set("data", "469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,0,0,0,0,0,0,0,0,0,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,0,0,0,0,0,0,0,0,0,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,0,0,0,0,0,0,0,0,0,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,0,0,0,0,0,0,0,0,0,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,0,0,0,0,0,0,0,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,0,0,0,0,0,0,0,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,0,0,0,0,0,0,0,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,0,0,0,0,0,0,0,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,0,0,0,0,0,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,0,0,0,0,0,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,0,0,0,0,0,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,0,0,0,0,0,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,0,0,0,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,0,0,0,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,0,0,0,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,0,0,0,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,0,0,0,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,0,0,0,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,0,0,0,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,0,0,0,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,0,0,0,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,0,0,0,469,0,0,0,0,0,0,0,0,0,0,0,0,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,0,0,0,469,0,0,0,0,0,0,0,0,0,0,0,0,0,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,0,0,0,469,0,0,0,0,0,0,0,0,0,0,0,0,0,0,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,0,0,0,469,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,0,0,0,469,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,0,0,0,469,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,477,478,479,479,480,481,0,0,0,0,0,0,0,0,0,0,0,0,0,0,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,0,0,0,469,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,488,489,490,491,492,492,493,0,0,0,0,0,0,0,0,0,0,0,0,0,0,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,0,0,0,469,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,500,501,502,503,504,492,505,0,0,0,0,0,0,0,0,0,0,0,0,0,0,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,0,0,0,469,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,500,513,514,515,516,516,517,0,0,0,0,0,0,0,0,0,0,0,0,0,0,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,0,0,0,469,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,469,469,469,469,469,469,1,469,469,469,469,469,469,1,469,469,469,469,469,469,1,469,469,469,469,469,469,1,469,469,469,469,469,469,31,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61");
                    layersDictionary50_2.set("width", "120");
                    layersDictionary50_2.set("height", "42");
                    layersDictionary50_2.set("name", "Foreground");
                    mapDictionary50.get("layers").add(layersDictionary50_2);
                    var layersDictionary50_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary50_3.set("data", "363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,363,0,0,0,0,0,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,363,0,0,0,0,0,0,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,363,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,363,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,363,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,363,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,363,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,363,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,363,412,412,412,412,452,412,412,412,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,363,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,363,363,363,363,363,363,320,363,363,363,363,363,363,320,363,363,363,363,363,363,320,363,363,363,363,363,363,320,363,363,363,363,363,363,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320");
                    layersDictionary50_3.set("width", "120");
                    layersDictionary50_3.set("height", "42");
                    layersDictionary50_3.set("name", "Solid");
                    mapDictionary50.get("layers").add(layersDictionary50_3);



                    var mapDictionary51 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level7/A_Start", mapDictionary51);

                    mapDictionary51.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary51_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary51_0.set("firstgid", "1");
                    tilesetDictionary51_0.set("imagewidth", "464");
                    tilesetDictionary51_0.set("imageheight", "176");
                    tilesetDictionary51_0.set("name", "TsSnow");
                    tilesetDictionary51_0.set("tilewidth", "16");
                    tilesetDictionary51_0.set("tileheight", "16");
                    mapDictionary51.get("tilesets").add(tilesetDictionary51_0);
                    var tilesetDictionary51_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary51_1.set("firstgid", "320");
                    tilesetDictionary51_1.set("imagewidth", "80");
                    tilesetDictionary51_1.set("imageheight", "192");
                    tilesetDictionary51_1.set("name", "Solid");
                    tilesetDictionary51_1.set("tilewidth", "16");
                    tilesetDictionary51_1.set("tileheight", "16");
                    mapDictionary51.get("tilesets").add(tilesetDictionary51_1);
                    var tilesetDictionary51_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary51_2.set("firstgid", "380");
                    tilesetDictionary51_2.set("imagewidth", "128");
                    tilesetDictionary51_2.set("imageheight", "160");
                    tilesetDictionary51_2.set("name", "Actors");
                    tilesetDictionary51_2.set("tilewidth", "16");
                    tilesetDictionary51_2.set("tileheight", "16");
                    mapDictionary51.get("tilesets").add(tilesetDictionary51_2);
                    var tilesetDictionary51_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary51_3.set("firstgid", "460");
                    tilesetDictionary51_3.set("imagewidth", "128");
                    tilesetDictionary51_3.set("imageheight", "32");
                    tilesetDictionary51_3.set("name", "Spikes");
                    tilesetDictionary51_3.set("tilewidth", "16");
                    tilesetDictionary51_3.set("tileheight", "16");
                    mapDictionary51.get("tilesets").add(tilesetDictionary51_3);
                    var tilesetDictionary51_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary51_4.set("firstgid", "476");
                    tilesetDictionary51_4.set("imagewidth", "192");
                    tilesetDictionary51_4.set("imageheight", "80");
                    tilesetDictionary51_4.set("name", "Igloo");
                    tilesetDictionary51_4.set("tilewidth", "16");
                    tilesetDictionary51_4.set("tileheight", "16");
                    mapDictionary51.get("tilesets").add(tilesetDictionary51_4);
                    var tilesetDictionary51_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary51_5.set("firstgid", "536");
                    tilesetDictionary51_5.set("imagewidth", "80");
                    tilesetDictionary51_5.set("imageheight", "80");
                    tilesetDictionary51_5.set("name", "Signpost");
                    tilesetDictionary51_5.set("tilewidth", "16");
                    tilesetDictionary51_5.set("tileheight", "16");
                    mapDictionary51.get("tilesets").add(tilesetDictionary51_5);

                    mapDictionary51.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary51_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary51_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536,537,538,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,541,545,543,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,546,547,548,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536,537,538,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,541,552,543,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,546,547,548,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536,537,538,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,495,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,541,545,543,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,507,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,546,547,548,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,519,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary51_0.set("width", "50");
                    layersDictionary51_0.set("height", "50");
                    layersDictionary51_0.set("name", "Background");
                    mapDictionary51.get("layers").add(layersDictionary51_0);
                    var layersDictionary51_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary51_1.set("data
                    layersDictionary51_1.set("width", "50");
                    layersDictionary51_1.set("height", "50");
                    layersDictionary51_1.set("name", "Midground");
                    mapDictionary51.get("layers").add(layersDictionary51_1);
                    var layersDictionary51_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary51_2.set("data", "96,3,3,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,2,3,4,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,96,3,3,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,91,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,3,97,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,89,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,434,434,434,434,434,434,434,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,434,434,434,434,434,434,434,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,434,434,434,434,434,434,434,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,434,434,434,434,434,434,434,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,477,478,479,479,480,481,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,434,434,434,434,434,434,434,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,488,489,490,491,492,492,493,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,434,434,434,434,434,434,434,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,500,501,502,503,504,492,505,0,0,380,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,434,434,434,434,434,434,434,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,500,513,514,515,516,516,517,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61");
                    layersDictionary51_2.set("width", "50");
                    layersDictionary51_2.set("height", "50");
                    layersDictionary51_2.set("name", "Foreground");
                    mapDictionary51.get("layers").add(layersDictionary51_2);
                    var layersDictionary51_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary51_3.set("data
                    layersDictionary51_3.set("width", "50");
                    layersDictionary51_3.set("height", "50");
                    layersDictionary51_3.set("name", "Solid");
                    mapDictionary51.get("layers").add(layersDictionary51_3);



                    var mapDictionary52 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level7/B_Fragment1", mapDictionary52);

                    mapDictionary52.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary52_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary52_0.set("firstgid", "1");
                    tilesetDictionary52_0.set("imagewidth", "464");
                    tilesetDictionary52_0.set("imageheight", "176");
                    tilesetDictionary52_0.set("name", "TsSnow");
                    tilesetDictionary52_0.set("tilewidth", "16");
                    tilesetDictionary52_0.set("tileheight", "16");
                    mapDictionary52.get("tilesets").add(tilesetDictionary52_0);
                    var tilesetDictionary52_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary52_1.set("firstgid", "320");
                    tilesetDictionary52_1.set("imagewidth", "80");
                    tilesetDictionary52_1.set("imageheight", "192");
                    tilesetDictionary52_1.set("name", "Solid");
                    tilesetDictionary52_1.set("tilewidth", "16");
                    tilesetDictionary52_1.set("tileheight", "16");
                    mapDictionary52.get("tilesets").add(tilesetDictionary52_1);
                    var tilesetDictionary52_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary52_2.set("firstgid", "380");
                    tilesetDictionary52_2.set("imagewidth", "128");
                    tilesetDictionary52_2.set("imageheight", "160");
                    tilesetDictionary52_2.set("name", "Actors");
                    tilesetDictionary52_2.set("tilewidth", "16");
                    tilesetDictionary52_2.set("tileheight", "16");
                    mapDictionary52.get("tilesets").add(tilesetDictionary52_2);
                    var tilesetDictionary52_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary52_3.set("firstgid", "460");
                    tilesetDictionary52_3.set("imagewidth", "128");
                    tilesetDictionary52_3.set("imageheight", "32");
                    tilesetDictionary52_3.set("name", "Spikes");
                    tilesetDictionary52_3.set("tilewidth", "16");
                    tilesetDictionary52_3.set("tileheight", "16");
                    mapDictionary52.get("tilesets").add(tilesetDictionary52_3);
                    var tilesetDictionary52_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary52_4.set("firstgid", "476");
                    tilesetDictionary52_4.set("imagewidth", "192");
                    tilesetDictionary52_4.set("imageheight", "80");
                    tilesetDictionary52_4.set("name", "Igloo");
                    tilesetDictionary52_4.set("tilewidth", "16");
                    tilesetDictionary52_4.set("tileheight", "16");
                    mapDictionary52.get("tilesets").add(tilesetDictionary52_4);
                    var tilesetDictionary52_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary52_5.set("firstgid", "536");
                    tilesetDictionary52_5.set("imagewidth", "80");
                    tilesetDictionary52_5.set("imageheight", "80");
                    tilesetDictionary52_5.set("name", "Signpost");
                    tilesetDictionary52_5.set("tilewidth", "16");
                    tilesetDictionary52_5.set("tileheight", "16");
                    mapDictionary52.get("tilesets").add(tilesetDictionary52_5);

                    mapDictionary52.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary52_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary52_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary52_0.set("width", "27");
                    layersDictionary52_0.set("height", "25");
                    layersDictionary52_0.set("name", "Background");
                    mapDictionary52.get("layers").add(layersDictionary52_0);
                    var layersDictionary52_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary52_1.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary52_1.set("width", "27");
                    layersDictionary52_1.set("height", "25");
                    layersDictionary52_1.set("name", "Midground");
                    mapDictionary52.get("layers").add(layersDictionary52_1);
                    var layersDictionary52_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary52_2.set("data", "62,0,0,0,0,0,2,3,4,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,467,467,467,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,466,0,406,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,467,467,467,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,393,0,466,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,2,3,4,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61");
                    layersDictionary52_2.set("width", "27");
                    layersDictionary52_2.set("height", "25");
                    layersDictionary52_2.set("name", "Foreground");
                    mapDictionary52.get("layers").add(layersDictionary52_2);
                    var layersDictionary52_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary52_3.set("data
                    layersDictionary52_3.set("width", "27");
                    layersDictionary52_3.set("height", "25");
                    layersDictionary52_3.set("name", "Solid");
                    mapDictionary52.get("layers").add(layersDictionary52_3);



                    var mapDictionary53 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level7/B_Fragment2", mapDictionary53);

                    mapDictionary53.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary53_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary53_0.set("firstgid", "1");
                    tilesetDictionary53_0.set("imagewidth", "464");
                    tilesetDictionary53_0.set("imageheight", "176");
                    tilesetDictionary53_0.set("name", "TsSnow");
                    tilesetDictionary53_0.set("tilewidth", "16");
                    tilesetDictionary53_0.set("tileheight", "16");
                    mapDictionary53.get("tilesets").add(tilesetDictionary53_0);
                    var tilesetDictionary53_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary53_1.set("firstgid", "320");
                    tilesetDictionary53_1.set("imagewidth", "80");
                    tilesetDictionary53_1.set("imageheight", "192");
                    tilesetDictionary53_1.set("name", "Solid");
                    tilesetDictionary53_1.set("tilewidth", "16");
                    tilesetDictionary53_1.set("tileheight", "16");
                    mapDictionary53.get("tilesets").add(tilesetDictionary53_1);
                    var tilesetDictionary53_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary53_2.set("firstgid", "380");
                    tilesetDictionary53_2.set("imagewidth", "128");
                    tilesetDictionary53_2.set("imageheight", "160");
                    tilesetDictionary53_2.set("name", "Actors");
                    tilesetDictionary53_2.set("tilewidth", "16");
                    tilesetDictionary53_2.set("tileheight", "16");
                    mapDictionary53.get("tilesets").add(tilesetDictionary53_2);
                    var tilesetDictionary53_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary53_3.set("firstgid", "460");
                    tilesetDictionary53_3.set("imagewidth", "128");
                    tilesetDictionary53_3.set("imageheight", "32");
                    tilesetDictionary53_3.set("name", "Spikes");
                    tilesetDictionary53_3.set("tilewidth", "16");
                    tilesetDictionary53_3.set("tileheight", "16");
                    mapDictionary53.get("tilesets").add(tilesetDictionary53_3);
                    var tilesetDictionary53_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary53_4.set("firstgid", "476");
                    tilesetDictionary53_4.set("imagewidth", "192");
                    tilesetDictionary53_4.set("imageheight", "80");
                    tilesetDictionary53_4.set("name", "Igloo");
                    tilesetDictionary53_4.set("tilewidth", "16");
                    tilesetDictionary53_4.set("tileheight", "16");
                    mapDictionary53.get("tilesets").add(tilesetDictionary53_4);
                    var tilesetDictionary53_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary53_5.set("firstgid", "536");
                    tilesetDictionary53_5.set("imagewidth", "80");
                    tilesetDictionary53_5.set("imageheight", "80");
                    tilesetDictionary53_5.set("name", "Signpost");
                    tilesetDictionary53_5.set("tilewidth", "16");
                    tilesetDictionary53_5.set("tileheight", "16");
                    mapDictionary53.get("tilesets").add(tilesetDictionary53_5);

                    mapDictionary53.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary53_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary53_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary53_0.set("width", "27");
                    layersDictionary53_0.set("height", "25");
                    layersDictionary53_0.set("name", "Background");
                    mapDictionary53.get("layers").add(layersDictionary53_0);
                    var layersDictionary53_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary53_1.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary53_1.set("width", "27");
                    layersDictionary53_1.set("height", "25");
                    layersDictionary53_1.set("name", "Midground");
                    mapDictionary53.get("layers").add(layersDictionary53_1);
                    var layersDictionary53_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary53_2.set("data", "62,0,0,0,0,0,0,0,0,0,0,2,3,4,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,465,465,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,426,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,464,464,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,96,3,3,3,4,0,0,0,426,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,465,465,465,465,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,464,464,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,3,3,97,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,465,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61");
                    layersDictionary53_2.set("width", "27");
                    layersDictionary53_2.set("height", "25");
                    layersDictionary53_2.set("name", "Foreground");
                    mapDictionary53.get("layers").add(layersDictionary53_2);
                    var layersDictionary53_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary53_3.set("data
                    layersDictionary53_3.set("width", "27");
                    layersDictionary53_3.set("height", "25");
                    layersDictionary53_3.set("name", "Solid");
                    mapDictionary53.get("layers").add(layersDictionary53_3);



                    var mapDictionary54 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level7/C_Fragment1", mapDictionary54);

                    mapDictionary54.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary54_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary54_0.set("firstgid", "1");
                    tilesetDictionary54_0.set("imagewidth", "464");
                    tilesetDictionary54_0.set("imageheight", "176");
                    tilesetDictionary54_0.set("name", "TsSnow");
                    tilesetDictionary54_0.set("tilewidth", "16");
                    tilesetDictionary54_0.set("tileheight", "16");
                    mapDictionary54.get("tilesets").add(tilesetDictionary54_0);
                    var tilesetDictionary54_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary54_1.set("firstgid", "320");
                    tilesetDictionary54_1.set("imagewidth", "80");
                    tilesetDictionary54_1.set("imageheight", "192");
                    tilesetDictionary54_1.set("name", "Solid");
                    tilesetDictionary54_1.set("tilewidth", "16");
                    tilesetDictionary54_1.set("tileheight", "16");
                    mapDictionary54.get("tilesets").add(tilesetDictionary54_1);
                    var tilesetDictionary54_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary54_2.set("firstgid", "380");
                    tilesetDictionary54_2.set("imagewidth", "128");
                    tilesetDictionary54_2.set("imageheight", "160");
                    tilesetDictionary54_2.set("name", "Actors");
                    tilesetDictionary54_2.set("tilewidth", "16");
                    tilesetDictionary54_2.set("tileheight", "16");
                    mapDictionary54.get("tilesets").add(tilesetDictionary54_2);
                    var tilesetDictionary54_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary54_3.set("firstgid", "460");
                    tilesetDictionary54_3.set("imagewidth", "128");
                    tilesetDictionary54_3.set("imageheight", "32");
                    tilesetDictionary54_3.set("name", "Spikes");
                    tilesetDictionary54_3.set("tilewidth", "16");
                    tilesetDictionary54_3.set("tileheight", "16");
                    mapDictionary54.get("tilesets").add(tilesetDictionary54_3);
                    var tilesetDictionary54_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary54_4.set("firstgid", "476");
                    tilesetDictionary54_4.set("imagewidth", "192");
                    tilesetDictionary54_4.set("imageheight", "80");
                    tilesetDictionary54_4.set("name", "Igloo");
                    tilesetDictionary54_4.set("tilewidth", "16");
                    tilesetDictionary54_4.set("tileheight", "16");
                    mapDictionary54.get("tilesets").add(tilesetDictionary54_4);
                    var tilesetDictionary54_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary54_5.set("firstgid", "536");
                    tilesetDictionary54_5.set("imagewidth", "80");
                    tilesetDictionary54_5.set("imageheight", "80");
                    tilesetDictionary54_5.set("name", "Signpost");
                    tilesetDictionary54_5.set("tilewidth", "16");
                    tilesetDictionary54_5.set("tileheight", "16");
                    mapDictionary54.get("tilesets").add(tilesetDictionary54_5);

                    mapDictionary54.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary54_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary54_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary54_0.set("width", "27");
                    layersDictionary54_0.set("height", "25");
                    layersDictionary54_0.set("name", "Background");
                    mapDictionary54.get("layers").add(layersDictionary54_0);
                    var layersDictionary54_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary54_1.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary54_1.set("width", "27");
                    layersDictionary54_1.set("height", "25");
                    layersDictionary54_1.set("name", "Midground");
                    mapDictionary54.get("layers").add(layersDictionary54_1);
                    var layersDictionary54_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary54_2.set("data", "62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,464,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,460,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,462,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,470,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,406,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,462,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,470,1,471,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,463,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,460,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61");
                    layersDictionary54_2.set("width", "27");
                    layersDictionary54_2.set("height", "25");
                    layersDictionary54_2.set("name", "Foreground");
                    mapDictionary54.get("layers").add(layersDictionary54_2);
                    var layersDictionary54_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary54_3.set("data
                    layersDictionary54_3.set("width", "27");
                    layersDictionary54_3.set("height", "25");
                    layersDictionary54_3.set("name", "Solid");
                    mapDictionary54.get("layers").add(layersDictionary54_3);



                    var mapDictionary55 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level7/C_Fragment2", mapDictionary55);

                    mapDictionary55.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary55_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary55_0.set("firstgid", "1");
                    tilesetDictionary55_0.set("imagewidth", "464");
                    tilesetDictionary55_0.set("imageheight", "176");
                    tilesetDictionary55_0.set("name", "TsSnow");
                    tilesetDictionary55_0.set("tilewidth", "16");
                    tilesetDictionary55_0.set("tileheight", "16");
                    mapDictionary55.get("tilesets").add(tilesetDictionary55_0);
                    var tilesetDictionary55_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary55_1.set("firstgid", "320");
                    tilesetDictionary55_1.set("imagewidth", "80");
                    tilesetDictionary55_1.set("imageheight", "192");
                    tilesetDictionary55_1.set("name", "Solid");
                    tilesetDictionary55_1.set("tilewidth", "16");
                    tilesetDictionary55_1.set("tileheight", "16");
                    mapDictionary55.get("tilesets").add(tilesetDictionary55_1);
                    var tilesetDictionary55_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary55_2.set("firstgid", "380");
                    tilesetDictionary55_2.set("imagewidth", "128");
                    tilesetDictionary55_2.set("imageheight", "160");
                    tilesetDictionary55_2.set("name", "Actors");
                    tilesetDictionary55_2.set("tilewidth", "16");
                    tilesetDictionary55_2.set("tileheight", "16");
                    mapDictionary55.get("tilesets").add(tilesetDictionary55_2);
                    var tilesetDictionary55_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary55_3.set("firstgid", "460");
                    tilesetDictionary55_3.set("imagewidth", "128");
                    tilesetDictionary55_3.set("imageheight", "32");
                    tilesetDictionary55_3.set("name", "Spikes");
                    tilesetDictionary55_3.set("tilewidth", "16");
                    tilesetDictionary55_3.set("tileheight", "16");
                    mapDictionary55.get("tilesets").add(tilesetDictionary55_3);
                    var tilesetDictionary55_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary55_4.set("firstgid", "476");
                    tilesetDictionary55_4.set("imagewidth", "192");
                    tilesetDictionary55_4.set("imageheight", "80");
                    tilesetDictionary55_4.set("name", "Igloo");
                    tilesetDictionary55_4.set("tilewidth", "16");
                    tilesetDictionary55_4.set("tileheight", "16");
                    mapDictionary55.get("tilesets").add(tilesetDictionary55_4);
                    var tilesetDictionary55_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary55_5.set("firstgid", "536");
                    tilesetDictionary55_5.set("imagewidth", "80");
                    tilesetDictionary55_5.set("imageheight", "80");
                    tilesetDictionary55_5.set("name", "Signpost");
                    tilesetDictionary55_5.set("tilewidth", "16");
                    tilesetDictionary55_5.set("tileheight", "16");
                    mapDictionary55.get("tilesets").add(tilesetDictionary55_5);

                    mapDictionary55.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary55_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary55_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary55_0.set("width", "27");
                    layersDictionary55_0.set("height", "25");
                    layersDictionary55_0.set("name", "Background");
                    mapDictionary55.get("layers").add(layersDictionary55_0);
                    var layersDictionary55_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary55_1.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary55_1.set("width", "27");
                    layersDictionary55_1.set("height", "25");
                    layersDictionary55_1.set("name", "Midground");
                    mapDictionary55.get("layers").add(layersDictionary55_1);
                    var layersDictionary55_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary55_2.set("data", "62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,461,0,0,0,0,0,1,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,461,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,461,0,0,0,60,61,61,61,61,61,61,62,0,461,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,461,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,461,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,470,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,463,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,461,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,4,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61");
                    layersDictionary55_2.set("width", "27");
                    layersDictionary55_2.set("height", "25");
                    layersDictionary55_2.set("name", "Foreground");
                    mapDictionary55.get("layers").add(layersDictionary55_2);
                    var layersDictionary55_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary55_3.set("data
                    layersDictionary55_3.set("width", "27");
                    layersDictionary55_3.set("height", "25");
                    layersDictionary55_3.set("name", "Solid");
                    mapDictionary55.get("layers").add(layersDictionary55_3);



                    var mapDictionary56 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level7/D_Key", mapDictionary56);

                    mapDictionary56.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary56_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary56_0.set("firstgid", "1");
                    tilesetDictionary56_0.set("imagewidth", "464");
                    tilesetDictionary56_0.set("imageheight", "176");
                    tilesetDictionary56_0.set("name", "TsSnow");
                    tilesetDictionary56_0.set("tilewidth", "16");
                    tilesetDictionary56_0.set("tileheight", "16");
                    mapDictionary56.get("tilesets").add(tilesetDictionary56_0);
                    var tilesetDictionary56_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary56_1.set("firstgid", "320");
                    tilesetDictionary56_1.set("imagewidth", "80");
                    tilesetDictionary56_1.set("imageheight", "192");
                    tilesetDictionary56_1.set("name", "Solid");
                    tilesetDictionary56_1.set("tilewidth", "16");
                    tilesetDictionary56_1.set("tileheight", "16");
                    mapDictionary56.get("tilesets").add(tilesetDictionary56_1);
                    var tilesetDictionary56_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary56_2.set("firstgid", "380");
                    tilesetDictionary56_2.set("imagewidth", "128");
                    tilesetDictionary56_2.set("imageheight", "160");
                    tilesetDictionary56_2.set("name", "Actors");
                    tilesetDictionary56_2.set("tilewidth", "16");
                    tilesetDictionary56_2.set("tileheight", "16");
                    mapDictionary56.get("tilesets").add(tilesetDictionary56_2);
                    var tilesetDictionary56_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary56_3.set("firstgid", "460");
                    tilesetDictionary56_3.set("imagewidth", "128");
                    tilesetDictionary56_3.set("imageheight", "32");
                    tilesetDictionary56_3.set("name", "Spikes");
                    tilesetDictionary56_3.set("tilewidth", "16");
                    tilesetDictionary56_3.set("tileheight", "16");
                    mapDictionary56.get("tilesets").add(tilesetDictionary56_3);
                    var tilesetDictionary56_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary56_4.set("firstgid", "476");
                    tilesetDictionary56_4.set("imagewidth", "192");
                    tilesetDictionary56_4.set("imageheight", "80");
                    tilesetDictionary56_4.set("name", "Igloo");
                    tilesetDictionary56_4.set("tilewidth", "16");
                    tilesetDictionary56_4.set("tileheight", "16");
                    mapDictionary56.get("tilesets").add(tilesetDictionary56_4);
                    var tilesetDictionary56_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary56_5.set("firstgid", "536");
                    tilesetDictionary56_5.set("imagewidth", "80");
                    tilesetDictionary56_5.set("imageheight", "80");
                    tilesetDictionary56_5.set("name", "Signpost");
                    tilesetDictionary56_5.set("tilewidth", "16");
                    tilesetDictionary56_5.set("tileheight", "16");
                    mapDictionary56.get("tilesets").add(tilesetDictionary56_5);

                    mapDictionary56.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary56_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary56_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary56_0.set("width", "27");
                    layersDictionary56_0.set("height", "65");
                    layersDictionary56_0.set("name", "Background");
                    mapDictionary56.get("layers").add(layersDictionary56_0);
                    var layersDictionary56_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary56_1.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary56_1.set("width", "27");
                    layersDictionary56_1.set("height", "65");
                    layersDictionary56_1.set("name", "Midground");
                    mapDictionary56.get("layers").add(layersDictionary56_1);
                    var layersDictionary56_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary56_2.set("data
                    layersDictionary56_2.set("width", "27");
                    layersDictionary56_2.set("height", "65");
                    layersDictionary56_2.set("name", "Foreground");
                    mapDictionary56.get("layers").add(layersDictionary56_2);
                    var layersDictionary56_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary56_3.set("data
                    layersDictionary56_3.set("width", "27");
                    layersDictionary56_3.set("height", "65");
                    layersDictionary56_3.set("name", "Solid");
                    mapDictionary56.get("layers").add(layersDictionary56_3);



                    var mapDictionary57 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level7/Flyamanita", mapDictionary57);

                    mapDictionary57.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary57_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary57_0.set("firstgid", "1");
                    tilesetDictionary57_0.set("imagewidth", "464");
                    tilesetDictionary57_0.set("imageheight", "176");
                    tilesetDictionary57_0.set("name", "TsSnow");
                    tilesetDictionary57_0.set("tilewidth", "16");
                    tilesetDictionary57_0.set("tileheight", "16");
                    mapDictionary57.get("tilesets").add(tilesetDictionary57_0);
                    var tilesetDictionary57_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary57_1.set("firstgid", "320");
                    tilesetDictionary57_1.set("imagewidth", "80");
                    tilesetDictionary57_1.set("imageheight", "192");
                    tilesetDictionary57_1.set("name", "Solid");
                    tilesetDictionary57_1.set("tilewidth", "16");
                    tilesetDictionary57_1.set("tileheight", "16");
                    mapDictionary57.get("tilesets").add(tilesetDictionary57_1);
                    var tilesetDictionary57_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary57_2.set("firstgid", "380");
                    tilesetDictionary57_2.set("imagewidth", "128");
                    tilesetDictionary57_2.set("imageheight", "160");
                    tilesetDictionary57_2.set("name", "Actors");
                    tilesetDictionary57_2.set("tilewidth", "16");
                    tilesetDictionary57_2.set("tileheight", "16");
                    mapDictionary57.get("tilesets").add(tilesetDictionary57_2);
                    var tilesetDictionary57_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary57_3.set("firstgid", "460");
                    tilesetDictionary57_3.set("imagewidth", "128");
                    tilesetDictionary57_3.set("imageheight", "32");
                    tilesetDictionary57_3.set("name", "Spikes");
                    tilesetDictionary57_3.set("tilewidth", "16");
                    tilesetDictionary57_3.set("tileheight", "16");
                    mapDictionary57.get("tilesets").add(tilesetDictionary57_3);
                    var tilesetDictionary57_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary57_4.set("firstgid", "476");
                    tilesetDictionary57_4.set("imagewidth", "192");
                    tilesetDictionary57_4.set("imageheight", "80");
                    tilesetDictionary57_4.set("name", "Igloo");
                    tilesetDictionary57_4.set("tilewidth", "16");
                    tilesetDictionary57_4.set("tileheight", "16");
                    mapDictionary57.get("tilesets").add(tilesetDictionary57_4);
                    var tilesetDictionary57_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary57_5.set("firstgid", "536");
                    tilesetDictionary57_5.set("imagewidth", "80");
                    tilesetDictionary57_5.set("imageheight", "80");
                    tilesetDictionary57_5.set("name", "Signpost");
                    tilesetDictionary57_5.set("tilewidth", "16");
                    tilesetDictionary57_5.set("tileheight", "16");
                    mapDictionary57.get("tilesets").add(tilesetDictionary57_5);

                    mapDictionary57.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary57_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary57_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary57_0.set("width", "27");
                    layersDictionary57_0.set("height", "10");
                    layersDictionary57_0.set("name", "Background");
                    mapDictionary57.get("layers").add(layersDictionary57_0);
                    var layersDictionary57_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary57_1.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary57_1.set("width", "27");
                    layersDictionary57_1.set("height", "10");
                    layersDictionary57_1.set("name", "Midground");
                    mapDictionary57.get("layers").add(layersDictionary57_1);
                    var layersDictionary57_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary57_2.set("data", "62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61");
                    layersDictionary57_2.set("width", "27");
                    layersDictionary57_2.set("height", "10");
                    layersDictionary57_2.set("name", "Foreground");
                    mapDictionary57.get("layers").add(layersDictionary57_2);
                    var layersDictionary57_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary57_3.set("data", "320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320");
                    layersDictionary57_3.set("width", "27");
                    layersDictionary57_3.set("height", "10");
                    layersDictionary57_3.set("name", "Solid");
                    mapDictionary57.get("layers").add(layersDictionary57_3);



                    var mapDictionary58 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level8/Water", mapDictionary58);

                    mapDictionary58.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary58_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary58_0.set("firstgid", "1");
                    tilesetDictionary58_0.set("imagewidth", "464");
                    tilesetDictionary58_0.set("imageheight", "176");
                    tilesetDictionary58_0.set("name", "TsSnow");
                    tilesetDictionary58_0.set("tilewidth", "16");
                    tilesetDictionary58_0.set("tileheight", "16");
                    mapDictionary58.get("tilesets").add(tilesetDictionary58_0);
                    var tilesetDictionary58_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary58_1.set("firstgid", "320");
                    tilesetDictionary58_1.set("imagewidth", "80");
                    tilesetDictionary58_1.set("imageheight", "192");
                    tilesetDictionary58_1.set("name", "Solid");
                    tilesetDictionary58_1.set("tilewidth", "16");
                    tilesetDictionary58_1.set("tileheight", "16");
                    mapDictionary58.get("tilesets").add(tilesetDictionary58_1);
                    var tilesetDictionary58_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary58_2.set("firstgid", "380");
                    tilesetDictionary58_2.set("imagewidth", "128");
                    tilesetDictionary58_2.set("imageheight", "160");
                    tilesetDictionary58_2.set("name", "Actors");
                    tilesetDictionary58_2.set("tilewidth", "16");
                    tilesetDictionary58_2.set("tileheight", "16");
                    mapDictionary58.get("tilesets").add(tilesetDictionary58_2);
                    var tilesetDictionary58_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary58_3.set("firstgid", "460");
                    tilesetDictionary58_3.set("imagewidth", "128");
                    tilesetDictionary58_3.set("imageheight", "32");
                    tilesetDictionary58_3.set("name", "Spikes");
                    tilesetDictionary58_3.set("tilewidth", "16");
                    tilesetDictionary58_3.set("tileheight", "16");
                    mapDictionary58.get("tilesets").add(tilesetDictionary58_3);
                    var tilesetDictionary58_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary58_4.set("firstgid", "476");
                    tilesetDictionary58_4.set("imagewidth", "192");
                    tilesetDictionary58_4.set("imageheight", "80");
                    tilesetDictionary58_4.set("name", "Igloo");
                    tilesetDictionary58_4.set("tilewidth", "16");
                    tilesetDictionary58_4.set("tileheight", "16");
                    mapDictionary58.get("tilesets").add(tilesetDictionary58_4);
                    var tilesetDictionary58_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary58_5.set("firstgid", "536");
                    tilesetDictionary58_5.set("imagewidth", "80");
                    tilesetDictionary58_5.set("imageheight", "80");
                    tilesetDictionary58_5.set("name", "Signpost");
                    tilesetDictionary58_5.set("tilewidth", "16");
                    tilesetDictionary58_5.set("tileheight", "16");
                    mapDictionary58.get("tilesets").add(tilesetDictionary58_5);

                    mapDictionary58.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary58_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary58_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,461,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,461,0,0,0,0,0,0,0,0,0,0,0,461,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,461,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,461,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,461,0,0,0,0,0,461,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,461,0,0,0,0,0,0,0,0,0,0,0,0,461,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,461,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,461,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,461,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,461,0,0,0,0,0,0,0,0,0,461,0,0,0,0,0,461,0,0,0,0,461,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,461,0,0,0,0,461,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,461,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,461,0,0,0,0,0,0,0,0,0,461,0,0,0,0,0,0,0,0,0,0,0,0,0,461,0,0,0,0,0,461,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary58_0.set("width", "75");
                    layersDictionary58_0.set("height", "50");
                    layersDictionary58_0.set("name", "Background");
                    mapDictionary58.get("layers").add(layersDictionary58_0);
                    var layersDictionary58_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary58_1.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary58_1.set("width", "75");
                    layersDictionary58_1.set("height", "50");
                    layersDictionary58_1.set("name", "Midground");
                    mapDictionary58.get("layers").add(layersDictionary58_1);
                    var layersDictionary58_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary58_2.set("data
                    layersDictionary58_2.set("width", "75");
                    layersDictionary58_2.set("height", "50");
                    layersDictionary58_2.set("name", "Foreground");
                    mapDictionary58.get("layers").add(layersDictionary58_2);
                    var layersDictionary58_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary58_3.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,349,349,349,349,349,349,349,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,349,349,349,349,349,349,349,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,349,349,349,349,349,349,349,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,349,349,349,349,349,349,349,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,349,349,349,349,349,349,349,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,349,349,349,349,349,349,349,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,349,349,349,349,349,349,349,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,349,349,349,349,349,349,349,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,349,349,349,349,349,349,349,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,349,349,349,349,349,349,349,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,349,349,349,349,349,349,349,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,349,349,349,349,349,349,349,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,349,349,349,349,349,349,349,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,349,349,349,349,349,349,349,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,349,349,349,349,349,349,349,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,349,349,349,349,349,349,349,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,349,349,349,349,349,349,349,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,349,349,349,349,349,349,349,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,349,349,349,349,349,349,349,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,349,349,349,349,349,349,349,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,349,349,349,349,349,349,349,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,349,349,349,349,349,349,349,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,349,349,349,349,349,349,349,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,349,349,349,349,349,349,349,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,349,349,349,349,349,349,349,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,349,349,349,349,349,349,349,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,349,349,349,349,349,349,349,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,349,349,349,349,349,349,349,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,349,349,349,349,349,349,349,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,349,349,349,349,349,349,349,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,349,349,349,349,349,349,349,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,349,349,349,349,349,349,349,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,349,349,349,349,349,349,349,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,349,349,349,349,349,349,349,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,349,349,349,349,349,349,349,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,349,349,349,349,349,349,349,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,349,349,349,349,349,349,349,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,349,349,349,349,349,349,349,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,349,349,349,349,349,349,349,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,349,349,349,349,349,349,349,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320");
                    layersDictionary58_3.set("width", "75");
                    layersDictionary58_3.set("height", "50");
                    layersDictionary58_3.set("name", "Solid");
                    mapDictionary58.get("layers").add(layersDictionary58_3);



                    var mapDictionary59 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level9/A_Start", mapDictionary59);

                    mapDictionary59.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary59_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary59_0.set("firstgid", "1");
                    tilesetDictionary59_0.set("imagewidth", "464");
                    tilesetDictionary59_0.set("imageheight", "176");
                    tilesetDictionary59_0.set("name", "TsSnow");
                    tilesetDictionary59_0.set("tilewidth", "16");
                    tilesetDictionary59_0.set("tileheight", "16");
                    mapDictionary59.get("tilesets").add(tilesetDictionary59_0);
                    var tilesetDictionary59_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary59_1.set("firstgid", "320");
                    tilesetDictionary59_1.set("imagewidth", "80");
                    tilesetDictionary59_1.set("imageheight", "192");
                    tilesetDictionary59_1.set("name", "Solid");
                    tilesetDictionary59_1.set("tilewidth", "16");
                    tilesetDictionary59_1.set("tileheight", "16");
                    mapDictionary59.get("tilesets").add(tilesetDictionary59_1);
                    var tilesetDictionary59_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary59_2.set("firstgid", "380");
                    tilesetDictionary59_2.set("imagewidth", "128");
                    tilesetDictionary59_2.set("imageheight", "160");
                    tilesetDictionary59_2.set("name", "Actors");
                    tilesetDictionary59_2.set("tilewidth", "16");
                    tilesetDictionary59_2.set("tileheight", "16");
                    mapDictionary59.get("tilesets").add(tilesetDictionary59_2);
                    var tilesetDictionary59_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary59_3.set("firstgid", "460");
                    tilesetDictionary59_3.set("imagewidth", "128");
                    tilesetDictionary59_3.set("imageheight", "32");
                    tilesetDictionary59_3.set("name", "Spikes");
                    tilesetDictionary59_3.set("tilewidth", "16");
                    tilesetDictionary59_3.set("tileheight", "16");
                    mapDictionary59.get("tilesets").add(tilesetDictionary59_3);
                    var tilesetDictionary59_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary59_4.set("firstgid", "476");
                    tilesetDictionary59_4.set("imagewidth", "192");
                    tilesetDictionary59_4.set("imageheight", "80");
                    tilesetDictionary59_4.set("name", "Igloo");
                    tilesetDictionary59_4.set("tilewidth", "16");
                    tilesetDictionary59_4.set("tileheight", "16");
                    mapDictionary59.get("tilesets").add(tilesetDictionary59_4);
                    var tilesetDictionary59_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary59_5.set("firstgid", "536");
                    tilesetDictionary59_5.set("imagewidth", "80");
                    tilesetDictionary59_5.set("imageheight", "80");
                    tilesetDictionary59_5.set("name", "Signpost");
                    tilesetDictionary59_5.set("tilewidth", "16");
                    tilesetDictionary59_5.set("tileheight", "16");
                    mapDictionary59.get("tilesets").add(tilesetDictionary59_5);
                    var tilesetDictionary59_6 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary59_6.set("firstgid", "561");
                    tilesetDictionary59_6.set("imagewidth", "224");
                    tilesetDictionary59_6.set("imageheight", "240");
                    tilesetDictionary59_6.set("name", "TsCastle");
                    tilesetDictionary59_6.set("tilewidth", "16");
                    tilesetDictionary59_6.set("tileheight", "16");
                    mapDictionary59.get("tilesets").add(tilesetDictionary59_6);

                    mapDictionary59.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary59_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary59_0.set("data
                    layersDictionary59_0.set("width", "110");
                    layersDictionary59_0.set("height", "25");
                    layersDictionary59_0.set("name", "Background");
                    mapDictionary59.get("layers").add(layersDictionary59_0);
                    var layersDictionary59_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary59_1.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536,537,538,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,541,539,543,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,546,547,548,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary59_1.set("width", "110");
                    layersDictionary59_1.set("height", "25");
                    layersDictionary59_1.set("name", "Midground");
                    mapDictionary59.get("layers").add(layersDictionary59_1);
                    var layersDictionary59_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary59_2.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,380,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,30,473,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,472,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,0,0,30,471,0,0,0,0,0,0,0,0,0,0,470,30,0,0,0,0,0,0,59,473,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,472,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,59,471,0,0,0,0,0,0,0,0,0,0,470,59,0,0,0,0,0,0,59,473,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,472,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,59,471,0,0,0,0,0,0,0,0,0,0,470,59,0,0,0,0,0,0,59,473,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,472,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,59,471,0,0,0,0,0,0,0,0,0,0,470,59,0,0,0,0,0,0,59,473,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,472,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,59,471,0,0,0,0,0,0,0,0,0,0,470,59,0,0,0,0,0,0,34,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,34,3,3,3,3,3,3,3,3,3,3,3,3,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary59_2.set("width", "110");
                    layersDictionary59_2.set("height", "25");
                    layersDictionary59_2.set("name", "Foreground");
                    mapDictionary59.get("layers").add(layersDictionary59_2);
                    var layersDictionary59_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary59_3.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,452,412,412,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,363,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,320,363,0,0,0,0,0,0,0,0,0,0,363,320,0,0,0,0,0,0,320,363,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,363,0,0,0,0,0,0,0,0,0,0,363,320,0,0,0,0,0,0,320,363,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,363,0,0,0,0,0,0,0,0,0,0,363,320,0,0,0,0,0,0,320,363,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,363,0,0,0,0,0,0,0,0,0,0,363,320,0,0,0,0,0,0,320,363,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,363,0,0,0,0,0,0,0,0,0,0,363,320,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary59_3.set("width", "110");
                    layersDictionary59_3.set("height", "25");
                    layersDictionary59_3.set("name", "Solid");
                    mapDictionary59.get("layers").add(layersDictionary59_3);



                    var mapDictionary60 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level9/B_Obstacles1", mapDictionary60);

                    mapDictionary60.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary60_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary60_0.set("firstgid", "1");
                    tilesetDictionary60_0.set("imagewidth", "464");
                    tilesetDictionary60_0.set("imageheight", "176");
                    tilesetDictionary60_0.set("name", "TsSnow");
                    tilesetDictionary60_0.set("tilewidth", "16");
                    tilesetDictionary60_0.set("tileheight", "16");
                    mapDictionary60.get("tilesets").add(tilesetDictionary60_0);
                    var tilesetDictionary60_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary60_1.set("firstgid", "320");
                    tilesetDictionary60_1.set("imagewidth", "80");
                    tilesetDictionary60_1.set("imageheight", "192");
                    tilesetDictionary60_1.set("name", "Solid");
                    tilesetDictionary60_1.set("tilewidth", "16");
                    tilesetDictionary60_1.set("tileheight", "16");
                    mapDictionary60.get("tilesets").add(tilesetDictionary60_1);
                    var tilesetDictionary60_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary60_2.set("firstgid", "380");
                    tilesetDictionary60_2.set("imagewidth", "128");
                    tilesetDictionary60_2.set("imageheight", "160");
                    tilesetDictionary60_2.set("name", "Actors");
                    tilesetDictionary60_2.set("tilewidth", "16");
                    tilesetDictionary60_2.set("tileheight", "16");
                    mapDictionary60.get("tilesets").add(tilesetDictionary60_2);
                    var tilesetDictionary60_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary60_3.set("firstgid", "460");
                    tilesetDictionary60_3.set("imagewidth", "128");
                    tilesetDictionary60_3.set("imageheight", "32");
                    tilesetDictionary60_3.set("name", "Spikes");
                    tilesetDictionary60_3.set("tilewidth", "16");
                    tilesetDictionary60_3.set("tileheight", "16");
                    mapDictionary60.get("tilesets").add(tilesetDictionary60_3);
                    var tilesetDictionary60_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary60_4.set("firstgid", "476");
                    tilesetDictionary60_4.set("imagewidth", "192");
                    tilesetDictionary60_4.set("imageheight", "80");
                    tilesetDictionary60_4.set("name", "Igloo");
                    tilesetDictionary60_4.set("tilewidth", "16");
                    tilesetDictionary60_4.set("tileheight", "16");
                    mapDictionary60.get("tilesets").add(tilesetDictionary60_4);
                    var tilesetDictionary60_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary60_5.set("firstgid", "536");
                    tilesetDictionary60_5.set("imagewidth", "80");
                    tilesetDictionary60_5.set("imageheight", "80");
                    tilesetDictionary60_5.set("name", "Signpost");
                    tilesetDictionary60_5.set("tilewidth", "16");
                    tilesetDictionary60_5.set("tileheight", "16");
                    mapDictionary60.get("tilesets").add(tilesetDictionary60_5);
                    var tilesetDictionary60_6 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary60_6.set("firstgid", "561");
                    tilesetDictionary60_6.set("imagewidth", "224");
                    tilesetDictionary60_6.set("imageheight", "240");
                    tilesetDictionary60_6.set("name", "TsCastle");
                    tilesetDictionary60_6.set("tilewidth", "16");
                    tilesetDictionary60_6.set("tileheight", "16");
                    mapDictionary60.get("tilesets").add(tilesetDictionary60_6);

                    mapDictionary60.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary60_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary60_0.set("data
                    layersDictionary60_0.set("width", "110");
                    layersDictionary60_0.set("height", "25");
                    layersDictionary60_0.set("name", "Background");
                    mapDictionary60.get("layers").add(layersDictionary60_0);
                    var layersDictionary60_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary60_1.set("data
                    layersDictionary60_1.set("width", "110");
                    layersDictionary60_1.set("height", "25");
                    layersDictionary60_1.set("name", "Midground");
                    mapDictionary60.get("layers").add(layersDictionary60_1);
                    var layersDictionary60_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary60_2.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary60_2.set("width", "110");
                    layersDictionary60_2.set("height", "25");
                    layersDictionary60_2.set("name", "Foreground");
                    mapDictionary60.get("layers").add(layersDictionary60_2);
                    var layersDictionary60_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary60_3.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,452,412,412,412,412,412,412,412,412,412,412,412,412,412,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary60_3.set("width", "110");
                    layersDictionary60_3.set("height", "25");
                    layersDictionary60_3.set("name", "Solid");
                    mapDictionary60.get("layers").add(layersDictionary60_3);



                    var mapDictionary61 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level9/B_Obstacles2", mapDictionary61);

                    mapDictionary61.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary61_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary61_0.set("firstgid", "1");
                    tilesetDictionary61_0.set("imagewidth", "464");
                    tilesetDictionary61_0.set("imageheight", "176");
                    tilesetDictionary61_0.set("name", "TsSnow");
                    tilesetDictionary61_0.set("tilewidth", "16");
                    tilesetDictionary61_0.set("tileheight", "16");
                    mapDictionary61.get("tilesets").add(tilesetDictionary61_0);
                    var tilesetDictionary61_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary61_1.set("firstgid", "320");
                    tilesetDictionary61_1.set("imagewidth", "80");
                    tilesetDictionary61_1.set("imageheight", "192");
                    tilesetDictionary61_1.set("name", "Solid");
                    tilesetDictionary61_1.set("tilewidth", "16");
                    tilesetDictionary61_1.set("tileheight", "16");
                    mapDictionary61.get("tilesets").add(tilesetDictionary61_1);
                    var tilesetDictionary61_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary61_2.set("firstgid", "380");
                    tilesetDictionary61_2.set("imagewidth", "128");
                    tilesetDictionary61_2.set("imageheight", "160");
                    tilesetDictionary61_2.set("name", "Actors");
                    tilesetDictionary61_2.set("tilewidth", "16");
                    tilesetDictionary61_2.set("tileheight", "16");
                    mapDictionary61.get("tilesets").add(tilesetDictionary61_2);
                    var tilesetDictionary61_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary61_3.set("firstgid", "460");
                    tilesetDictionary61_3.set("imagewidth", "128");
                    tilesetDictionary61_3.set("imageheight", "32");
                    tilesetDictionary61_3.set("name", "Spikes");
                    tilesetDictionary61_3.set("tilewidth", "16");
                    tilesetDictionary61_3.set("tileheight", "16");
                    mapDictionary61.get("tilesets").add(tilesetDictionary61_3);
                    var tilesetDictionary61_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary61_4.set("firstgid", "476");
                    tilesetDictionary61_4.set("imagewidth", "192");
                    tilesetDictionary61_4.set("imageheight", "80");
                    tilesetDictionary61_4.set("name", "Igloo");
                    tilesetDictionary61_4.set("tilewidth", "16");
                    tilesetDictionary61_4.set("tileheight", "16");
                    mapDictionary61.get("tilesets").add(tilesetDictionary61_4);
                    var tilesetDictionary61_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary61_5.set("firstgid", "536");
                    tilesetDictionary61_5.set("imagewidth", "80");
                    tilesetDictionary61_5.set("imageheight", "80");
                    tilesetDictionary61_5.set("name", "Signpost");
                    tilesetDictionary61_5.set("tilewidth", "16");
                    tilesetDictionary61_5.set("tileheight", "16");
                    mapDictionary61.get("tilesets").add(tilesetDictionary61_5);
                    var tilesetDictionary61_6 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary61_6.set("firstgid", "561");
                    tilesetDictionary61_6.set("imagewidth", "224");
                    tilesetDictionary61_6.set("imageheight", "240");
                    tilesetDictionary61_6.set("name", "TsCastle");
                    tilesetDictionary61_6.set("tilewidth", "16");
                    tilesetDictionary61_6.set("tileheight", "16");
                    mapDictionary61.get("tilesets").add(tilesetDictionary61_6);

                    mapDictionary61.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary61_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary61_0.set("data
                    layersDictionary61_0.set("width", "110");
                    layersDictionary61_0.set("height", "25");
                    layersDictionary61_0.set("name", "Background");
                    mapDictionary61.get("layers").add(layersDictionary61_0);
                    var layersDictionary61_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary61_1.set("data
                    layersDictionary61_1.set("width", "110");
                    layersDictionary61_1.set("height", "25");
                    layersDictionary61_1.set("name", "Midground");
                    mapDictionary61.get("layers").add(layersDictionary61_1);
                    var layersDictionary61_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary61_2.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,469,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,406,0,0,0,0,0,0,0,406,0,0,0,0,0,0,0,406,0,0,0,0,0,0,0,406,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,0,0,0,0,464,0,0,0,0,0,0,0,464,0,0,0,0,0,0,0,464,0,0,0,0,0,0,0,464,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,426,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,6,464,464,464,464,30,464,464,464,464,464,464,464,30,464,464,464,464,464,464,464,30,464,464,464,464,464,464,464,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,465,465,465,465,465,465,465,465,465,465,465,465,465,465,465,465,465,465,465,465,465,465,465,465,465,465,34,3,3,3,3,36,3,3,3,3,3,3,3,36,3,3,3,3,3,3,3,36,3,3,3,3,3,3,3,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,465,465,465,465,465,465,465,465,465,465,465,465,465,465,465,465,465,465,465,465,465,465,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,406,0,0,0,0,0,0,0,406,0,0,0,0,0,0,0,406,0,0,0,0,0,0,0,406,0,0,0,0,0,0,0,406,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,464,0,0,0,0,0,0,0,464,0,0,0,0,0,0,0,464,0,0,0,0,0,0,0,464,0,0,0,0,0,0,0,464,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,464,464,464,30,464,464,464,464,464,464,464,30,464,464,464,464,464,464,464,30,464,464,464,464,464,464,464,30,464,464,464,464,464,464,464,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,3,36,3,3,3,3,3,3,3,36,3,3,3,3,3,3,3,36,3,3,3,3,3,3,3,36,3,3,3,3,3,3,3,35,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary61_2.set("width", "110");
                    layersDictionary61_2.set("height", "25");
                    layersDictionary61_2.set("name", "Foreground");
                    mapDictionary61.get("layers").add(layersDictionary61_2);
                    var layersDictionary61_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary61_3.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,0,363,0,0,0,0,0,0,0,363,0,0,0,0,0,0,0,363,0,0,0,0,0,0,0,363,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,363,363,363,363,320,363,363,363,363,363,363,363,320,363,363,363,363,363,363,363,320,363,363,363,363,363,363,363,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,452,412,412,412,412,412,412,412,412,412,412,412,412,412,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,0,0,0,363,0,0,0,0,0,0,0,363,0,0,0,0,0,0,0,363,0,0,0,0,0,0,0,363,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,363,363,320,363,363,363,363,363,363,363,320,363,363,363,363,363,363,363,320,363,363,363,363,363,363,363,320,363,363,363,363,363,363,363,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary61_3.set("width", "110");
                    layersDictionary61_3.set("height", "25");
                    layersDictionary61_3.set("name", "Solid");
                    mapDictionary61.get("layers").add(layersDictionary61_3);



                    var mapDictionary62 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level9/B_Obstacles3", mapDictionary62);

                    mapDictionary62.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary62_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary62_0.set("firstgid", "1");
                    tilesetDictionary62_0.set("imagewidth", "464");
                    tilesetDictionary62_0.set("imageheight", "176");
                    tilesetDictionary62_0.set("name", "TsSnow");
                    tilesetDictionary62_0.set("tilewidth", "16");
                    tilesetDictionary62_0.set("tileheight", "16");
                    mapDictionary62.get("tilesets").add(tilesetDictionary62_0);
                    var tilesetDictionary62_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary62_1.set("firstgid", "320");
                    tilesetDictionary62_1.set("imagewidth", "80");
                    tilesetDictionary62_1.set("imageheight", "192");
                    tilesetDictionary62_1.set("name", "Solid");
                    tilesetDictionary62_1.set("tilewidth", "16");
                    tilesetDictionary62_1.set("tileheight", "16");
                    mapDictionary62.get("tilesets").add(tilesetDictionary62_1);
                    var tilesetDictionary62_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary62_2.set("firstgid", "380");
                    tilesetDictionary62_2.set("imagewidth", "128");
                    tilesetDictionary62_2.set("imageheight", "160");
                    tilesetDictionary62_2.set("name", "Actors");
                    tilesetDictionary62_2.set("tilewidth", "16");
                    tilesetDictionary62_2.set("tileheight", "16");
                    mapDictionary62.get("tilesets").add(tilesetDictionary62_2);
                    var tilesetDictionary62_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary62_3.set("firstgid", "460");
                    tilesetDictionary62_3.set("imagewidth", "128");
                    tilesetDictionary62_3.set("imageheight", "32");
                    tilesetDictionary62_3.set("name", "Spikes");
                    tilesetDictionary62_3.set("tilewidth", "16");
                    tilesetDictionary62_3.set("tileheight", "16");
                    mapDictionary62.get("tilesets").add(tilesetDictionary62_3);
                    var tilesetDictionary62_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary62_4.set("firstgid", "476");
                    tilesetDictionary62_4.set("imagewidth", "192");
                    tilesetDictionary62_4.set("imageheight", "80");
                    tilesetDictionary62_4.set("name", "Igloo");
                    tilesetDictionary62_4.set("tilewidth", "16");
                    tilesetDictionary62_4.set("tileheight", "16");
                    mapDictionary62.get("tilesets").add(tilesetDictionary62_4);
                    var tilesetDictionary62_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary62_5.set("firstgid", "536");
                    tilesetDictionary62_5.set("imagewidth", "80");
                    tilesetDictionary62_5.set("imageheight", "80");
                    tilesetDictionary62_5.set("name", "Signpost");
                    tilesetDictionary62_5.set("tilewidth", "16");
                    tilesetDictionary62_5.set("tileheight", "16");
                    mapDictionary62.get("tilesets").add(tilesetDictionary62_5);
                    var tilesetDictionary62_6 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary62_6.set("firstgid", "561");
                    tilesetDictionary62_6.set("imagewidth", "224");
                    tilesetDictionary62_6.set("imageheight", "240");
                    tilesetDictionary62_6.set("name", "TsCastle");
                    tilesetDictionary62_6.set("tilewidth", "16");
                    tilesetDictionary62_6.set("tileheight", "16");
                    mapDictionary62.get("tilesets").add(tilesetDictionary62_6);

                    mapDictionary62.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary62_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary62_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary62_0.set("width", "166");
                    layersDictionary62_0.set("height", "25");
                    layersDictionary62_0.set("name", "Background");
                    mapDictionary62.get("layers").add(layersDictionary62_0);
                    var layersDictionary62_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary62_1.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary62_1.set("width", "166");
                    layersDictionary62_1.set("height", "25");
                    layersDictionary62_1.set("name", "Midground");
                    mapDictionary62.get("layers").add(layersDictionary62_1);
                    var layersDictionary62_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary62_2.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary62_2.set("width", "166");
                    layersDictionary62_2.set("height", "25");
                    layersDictionary62_2.set("name", "Foreground");
                    mapDictionary62.get("layers").add(layersDictionary62_2);
                    var layersDictionary62_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary62_3.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,452,412,412,412,412,412,412,412,412,412,412,412,412,412,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary62_3.set("width", "166");
                    layersDictionary62_3.set("height", "25");
                    layersDictionary62_3.set("name", "Solid");
                    mapDictionary62.get("layers").add(layersDictionary62_3);



                    var mapDictionary63 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level9/C_Finish", mapDictionary63);

                    mapDictionary63.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary63_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary63_0.set("firstgid", "1");
                    tilesetDictionary63_0.set("imagewidth", "464");
                    tilesetDictionary63_0.set("imageheight", "176");
                    tilesetDictionary63_0.set("name", "TsSnow");
                    tilesetDictionary63_0.set("tilewidth", "16");
                    tilesetDictionary63_0.set("tileheight", "16");
                    mapDictionary63.get("tilesets").add(tilesetDictionary63_0);
                    var tilesetDictionary63_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary63_1.set("firstgid", "320");
                    tilesetDictionary63_1.set("imagewidth", "80");
                    tilesetDictionary63_1.set("imageheight", "192");
                    tilesetDictionary63_1.set("name", "Solid");
                    tilesetDictionary63_1.set("tilewidth", "16");
                    tilesetDictionary63_1.set("tileheight", "16");
                    mapDictionary63.get("tilesets").add(tilesetDictionary63_1);
                    var tilesetDictionary63_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary63_2.set("firstgid", "380");
                    tilesetDictionary63_2.set("imagewidth", "128");
                    tilesetDictionary63_2.set("imageheight", "160");
                    tilesetDictionary63_2.set("name", "Actors");
                    tilesetDictionary63_2.set("tilewidth", "16");
                    tilesetDictionary63_2.set("tileheight", "16");
                    mapDictionary63.get("tilesets").add(tilesetDictionary63_2);
                    var tilesetDictionary63_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary63_3.set("firstgid", "460");
                    tilesetDictionary63_3.set("imagewidth", "128");
                    tilesetDictionary63_3.set("imageheight", "32");
                    tilesetDictionary63_3.set("name", "Spikes");
                    tilesetDictionary63_3.set("tilewidth", "16");
                    tilesetDictionary63_3.set("tileheight", "16");
                    mapDictionary63.get("tilesets").add(tilesetDictionary63_3);
                    var tilesetDictionary63_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary63_4.set("firstgid", "476");
                    tilesetDictionary63_4.set("imagewidth", "192");
                    tilesetDictionary63_4.set("imageheight", "80");
                    tilesetDictionary63_4.set("name", "Igloo");
                    tilesetDictionary63_4.set("tilewidth", "16");
                    tilesetDictionary63_4.set("tileheight", "16");
                    mapDictionary63.get("tilesets").add(tilesetDictionary63_4);
                    var tilesetDictionary63_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary63_5.set("firstgid", "536");
                    tilesetDictionary63_5.set("imagewidth", "80");
                    tilesetDictionary63_5.set("imageheight", "80");
                    tilesetDictionary63_5.set("name", "Signpost");
                    tilesetDictionary63_5.set("tilewidth", "16");
                    tilesetDictionary63_5.set("tileheight", "16");
                    mapDictionary63.get("tilesets").add(tilesetDictionary63_5);
                    var tilesetDictionary63_6 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary63_6.set("firstgid", "561");
                    tilesetDictionary63_6.set("imagewidth", "224");
                    tilesetDictionary63_6.set("imageheight", "240");
                    tilesetDictionary63_6.set("name", "TsCastle");
                    tilesetDictionary63_6.set("tilewidth", "16");
                    tilesetDictionary63_6.set("tileheight", "16");
                    mapDictionary63.get("tilesets").add(tilesetDictionary63_6);

                    mapDictionary63.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary63_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary63_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,243,0,0,0,0,0,0,243,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,273,214,244,0,0,0,0,273,214,244,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536,537,538,0,0,0,215,214,216,0,0,0,0,215,214,216,0,0,495,0,0,0,0,0,0,0,0,0,0,0,541,560,543,0,0,273,119,214,119,244,0,0,273,119,214,119,244,0,507,0,0,0,0,0,0,0,0,0,0,0,546,547,548,0,0,0,0,175,0,0,0,0,0,0,175,0,0,0,519,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary63_0.set("width", "30");
                    layersDictionary63_0.set("height", "45");
                    layersDictionary63_0.set("name", "Background");
                    mapDictionary63.get("layers").add(layersDictionary63_0);
                    var layersDictionary63_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary63_1.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary63_1.set("width", "30");
                    layersDictionary63_1.set("height", "45");
                    layersDictionary63_1.set("name", "Midground");
                    mapDictionary63.get("layers").add(layersDictionary63_1);
                    var layersDictionary63_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary63_2.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,477,478,479,479,480,481,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,488,489,490,491,491,492,493,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,500,501,502,503,504,492,505,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,500,513,514,515,515,516,517,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary63_2.set("width", "30");
                    layersDictionary63_2.set("height", "45");
                    layersDictionary63_2.set("name", "Foreground");
                    mapDictionary63.get("layers").add(layersDictionary63_2);
                    var layersDictionary63_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary63_3.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,0,0,0,0,0,0,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,0,0,0,0,0,0,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,0,0,0,0,0,0,320,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary63_3.set("width", "30");
                    layersDictionary63_3.set("height", "45");
                    layersDictionary63_3.set("name", "Solid");
                    mapDictionary63.get("layers").add(layersDictionary63_3);



                    return dictionary;
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.MapDataHelper", {
        statics: {
            methods: {
                GetStronglyTypedMapData: function (mapData) {
                    var $t;
                    var returnVal = new (System.Collections.Generic.Dictionary$2(System.String,TuxPlanetSpeedrunAnyPercentLibrary.MapDataHelper.Map))();

                    $t = Bridge.getEnumerator(mapData);
                    try {
                        while ($t.moveNext()) {
                            var kvp = $t.Current;
                            var mapName = kvp.key;
                            var data = kvp.value;

                            returnVal.set(mapName, TuxPlanetSpeedrunAnyPercentLibrary.MapDataHelper.GetStronglyTypedMapDataHelper(data));
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    return returnVal;
                },
                GetStronglyTypedMapDataHelper: function (mapData) {
                    var layers = System.Linq.Enumerable.from(mapData.get("layers")).select(function (x) {
                            return TuxPlanetSpeedrunAnyPercentLibrary.MapDataHelper.GetLayer(x);
                        }).toList(TuxPlanetSpeedrunAnyPercentLibrary.MapDataHelper.Layer);
                    var tilesets = System.Linq.Enumerable.from(mapData.get("tilesets")).select(function (x) {
                            return TuxPlanetSpeedrunAnyPercentLibrary.MapDataHelper.GetTileset(x);
                        }).toList(TuxPlanetSpeedrunAnyPercentLibrary.MapDataHelper.Tileset);

                    return new TuxPlanetSpeedrunAnyPercentLibrary.MapDataHelper.Map(layers, tilesets);
                },
                GetLayer: function (layerDictionary) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.MapDataHelper.Layer(System.Linq.Enumerable.from(System.String.split(layerDictionary.get("data"), [44].map(function (i) {{ return String.fromCharCode(i); }}))).select(function (x) {
                            return DTLibrary.StringUtil.ParseInt(x);
                        }).toList(System.Int32), DTLibrary.StringUtil.ParseInt(layerDictionary.get("width")), DTLibrary.StringUtil.ParseInt(layerDictionary.get("height")), layerDictionary.get("name"));
                },
                GetTileset: function (tilesetDictionary) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.MapDataHelper.Tileset(DTLibrary.StringUtil.ParseInt(tilesetDictionary.get("firstgid")), DTLibrary.StringUtil.ParseInt(tilesetDictionary.get("imagewidth")), DTLibrary.StringUtil.ParseInt(tilesetDictionary.get("imageheight")), tilesetDictionary.get("name"), DTLibrary.StringUtil.ParseInt(tilesetDictionary.get("tilewidth")), DTLibrary.StringUtil.ParseInt(tilesetDictionary.get("tileheight")));
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.MapDataHelper.Layer", {
        $kind: "nested class",
        fields: {
            Data: null,
            Width: 0,
            Height: 0,
            Name: null
        },
        ctors: {
            ctor: function (data, width, height, name) {
                this.$initialize();
                this.Data = new (System.Collections.Generic.List$1(System.Int32)).$ctor1(data);
                this.Width = width;
                this.Height = height;
                this.Name = name;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.MapDataHelper.Map", {
        $kind: "nested class",
        fields: {
            Layers: null,
            Tilesets: null
        },
        ctors: {
            ctor: function (layers, tilesets) {
                this.$initialize();
                this.Layers = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.MapDataHelper.Layer)).$ctor1(layers);
                this.Tilesets = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.MapDataHelper.Tileset)).$ctor1(tilesets);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.MapDataHelper.Tileset", {
        $kind: "nested class",
        fields: {
            FirstGid: 0,
            ImageWidth: 0,
            ImageHeight: 0,
            Name: null,
            TileWidth: 0,
            TileHeight: 0
        },
        ctors: {
            ctor: function (firstGid, imageWidth, imageHeight, name, tileWidth, tileHeight) {
                this.$initialize();
                this.FirstGid = firstGid;
                this.ImageWidth = imageWidth;
                this.ImageHeight = imageHeight;
                this.Name = name;
                this.TileWidth = tileWidth;
                this.TileHeight = tileHeight;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator", {
        statics: {
            methods: {
                GetTilemap: function (data, enemyIdGenerator, cutsceneName, scalingFactorScaled, gameMusic) {
                    var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14, $t15, $t16, $t17, $t18, $t19, $t20;
                    var tilesets = data.Tilesets;

                    var solidTileset = System.Linq.Enumerable.from(tilesets).single(function (x) {
                            return Bridge.referenceEquals(DTLibrary.StringUtil.ToUpperCaseCultureInvariant(x.Name), "SOLID");
                        });
                    var actorsTileset = System.Linq.Enumerable.from(tilesets).single(function (x) {
                            return Bridge.referenceEquals(DTLibrary.StringUtil.ToUpperCaseCultureInvariant(x.Name), "ACTORS");
                        });

                    var layers = data.Layers;

                    var solidLayer = System.Linq.Enumerable.from(layers).single(function (x) {
                            return Bridge.referenceEquals(DTLibrary.StringUtil.ToUpperCaseCultureInvariant(x.Name), "SOLID");
                        });
                    var foregroundLayer = System.Linq.Enumerable.from(layers).single(function (x) {
                            return Bridge.referenceEquals(DTLibrary.StringUtil.ToUpperCaseCultureInvariant(x.Name), "FOREGROUND");
                        });
                    var midgroundLayer = System.Linq.Enumerable.from(layers).singleOrDefault(function (x) {
                            return Bridge.referenceEquals(DTLibrary.StringUtil.ToUpperCaseCultureInvariant(x.Name), "MIDGROUND");
                        }, null);
                    var backgroundLayer = System.Linq.Enumerable.from(layers).single(function (x) {
                            return Bridge.referenceEquals(DTLibrary.StringUtil.ToUpperCaseCultureInvariant(x.Name), "BACKGROUND");
                        });

                    var numberOfTileColumns = solidLayer.Width;
                    var numberOfTileRows = solidLayer.Height;

                    var tuxLocation = null;
                    var keyLocations = new (System.Collections.Generic.Dictionary$2(TuxPlanetSpeedrunAnyPercentLibrary.MapKey,System.Tuple$2(System.Int32,System.Int32)))();
                    $t = Bridge.getEnumerator(System.Enum.getValues(TuxPlanetSpeedrunAnyPercentLibrary.MapKey));
                    try {
                        while ($t.moveNext()) {
                            var mapKey = Bridge.cast($t.Current, TuxPlanetSpeedrunAnyPercentLibrary.MapKey);
                            keyLocations.set(mapKey, null);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    var backgroundSpritesArray = TuxPlanetSpeedrunAnyPercentLibrary.SpriteUtil.EmptySpriteArray(numberOfTileColumns, numberOfTileRows);
                    var midgroundSpritesArray = TuxPlanetSpeedrunAnyPercentLibrary.SpriteUtil.EmptySpriteArray(numberOfTileColumns, numberOfTileRows);
                    var foregroundSpritesArray = TuxPlanetSpeedrunAnyPercentLibrary.SpriteUtil.EmptySpriteArray(numberOfTileColumns, numberOfTileRows);
                    var isGroundArray = TuxPlanetSpeedrunAnyPercentLibrary.ArrayUtil.EmptyBoolArray(numberOfTileColumns, numberOfTileRows);
                    var isKillZoneArray = TuxPlanetSpeedrunAnyPercentLibrary.ArrayUtil.EmptyBoolArray(numberOfTileColumns, numberOfTileRows);
                    var isSpikesArray = TuxPlanetSpeedrunAnyPercentLibrary.ArrayUtil.EmptyBoolArray(numberOfTileColumns, numberOfTileRows);
                    var isEndOfLevelArray = TuxPlanetSpeedrunAnyPercentLibrary.ArrayUtil.EmptyBoolArray(numberOfTileColumns, numberOfTileRows);
                    var isCutsceneArray = TuxPlanetSpeedrunAnyPercentLibrary.ArrayUtil.EmptyBoolArray(numberOfTileColumns, numberOfTileRows);
                    var isKeyTileArrays = new (System.Collections.Generic.Dictionary$2(TuxPlanetSpeedrunAnyPercentLibrary.MapKey,System.Array.type(System.Array.type(System.Boolean))))();
                    $t1 = Bridge.getEnumerator(System.Enum.getValues(TuxPlanetSpeedrunAnyPercentLibrary.MapKey));
                    try {
                        while ($t1.moveNext()) {
                            var mapKey1 = Bridge.cast($t1.Current, TuxPlanetSpeedrunAnyPercentLibrary.MapKey);
                            isKeyTileArrays.set(mapKey1, TuxPlanetSpeedrunAnyPercentLibrary.ArrayUtil.EmptyBoolArray(numberOfTileColumns, numberOfTileRows));
                        }
                    } finally {
                        if (Bridge.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$Dispose();
                        }
                    }

                    var solidLayerData = solidLayer.Data;
                    var foregroundLayerData = foregroundLayer.Data;
                    var midgroundLayerData = midgroundLayer != null ? midgroundLayer.Data : null;
                    var backgroundLayerData = backgroundLayer.Data;

                    var enemies = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Tilemap.EnemySpawnLocation)).ctor();

                    var tilesetsAfterActorsTileset = System.Linq.Enumerable.from(tilesets).where(function (x) {
                            return x.FirstGid > actorsTileset.FirstGid;
                        }).toList(TuxPlanetSpeedrunAnyPercentLibrary.MapDataHelper.Tileset);
                    var actorTilesetLastGid;
                    if (tilesetsAfterActorsTileset.Count === 0) {
                        actorTilesetLastGid = null;
                    } else {
                        actorTilesetLastGid = Bridge.Int.clip32(System.Linq.Enumerable.from(tilesetsAfterActorsTileset).orderBy(function (x) {
                                return x.FirstGid;
                            }).first().FirstGid - 1);
                    }

                    var gidToSpriteCache = new (System.Collections.Generic.Dictionary$2(System.Int32,TuxPlanetSpeedrunAnyPercentLibrary.Sprite))();

                    var dataIndex = 0;
                    for (var j = (numberOfTileRows - 1) | 0; j >= 0; j = (j - 1) | 0) {
                        for (var i = 0; i < numberOfTileColumns; i = (i + 1) | 0) {
                            var solidGid = System.Array.getItem(solidLayerData, dataIndex, System.Int32);
                            var foregroundGid = System.Array.getItem(foregroundLayerData, dataIndex, System.Int32);
                            var midgroundGid = midgroundLayerData != null ? System.Array.getItem(midgroundLayerData, dataIndex, System.Int32) : 0;
                            var backgroundGid = System.Array.getItem(backgroundLayerData, dataIndex, System.Int32);
                            dataIndex = (dataIndex + 1) | 0;

                            if (backgroundGid !== 0) {
                                if (gidToSpriteCache.containsKey(backgroundGid)) {
                                    ($t2 = backgroundSpritesArray[System.Array.index(i, backgroundSpritesArray)])[System.Array.index(j, $t2)] = gidToSpriteCache.get(backgroundGid);
                                } else {
                                    gidToSpriteCache.set(backgroundGid, TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetSprite(tilesets, backgroundGid, scalingFactorScaled));
                                    ($t3 = backgroundSpritesArray[System.Array.index(i, backgroundSpritesArray)])[System.Array.index(j, $t3)] = gidToSpriteCache.get(backgroundGid);
                                }
                            }

                            if (midgroundGid !== 0) {
                                if (gidToSpriteCache.containsKey(midgroundGid)) {
                                    ($t4 = midgroundSpritesArray[System.Array.index(i, midgroundSpritesArray)])[System.Array.index(j, $t4)] = gidToSpriteCache.get(midgroundGid);
                                } else {
                                    gidToSpriteCache.set(midgroundGid, TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetSprite(tilesets, midgroundGid, scalingFactorScaled));
                                    ($t5 = midgroundSpritesArray[System.Array.index(i, midgroundSpritesArray)])[System.Array.index(j, $t5)] = gidToSpriteCache.get(midgroundGid);
                                }
                            }

                            if (foregroundGid !== 0) {
                                if (foregroundGid >= actorsTileset.FirstGid && (actorTilesetLastGid == null || foregroundGid <= System.Nullable.getValue(actorTilesetLastGid))) {
                                    var actorGidNormalized = (foregroundGid - actorsTileset.FirstGid) | 0;
                                    if (actorGidNormalized === 0) {
                                        tuxLocation = { Item1: Bridge.Int.mul(Bridge.Int.mul(i, solidTileset.TileWidth), (((Bridge.Int.div(scalingFactorScaled, 128)) | 0))), Item2: ((Bridge.Int.mul(Bridge.Int.mul(j, solidTileset.TileHeight), (((Bridge.Int.div(scalingFactorScaled, 128)) | 0))) + Bridge.Int.mul(16, (((Bridge.Int.div(scalingFactorScaled, 128)) | 0)))) | 0) };
                                    } else {
                                        if (actorGidNormalized === 48) {
                                            keyLocations.set(TuxPlanetSpeedrunAnyPercentLibrary.MapKey.Copper, { Item1: ((Bridge.Int.mul(Bridge.Int.mul(i, solidTileset.TileWidth), (((Bridge.Int.div(scalingFactorScaled, 128)) | 0))) + Bridge.Int.mul(8, (((Bridge.Int.div(scalingFactorScaled, 128)) | 0)))) | 0), Item2: ((Bridge.Int.mul(Bridge.Int.mul(j, solidTileset.TileHeight), (((Bridge.Int.div(scalingFactorScaled, 128)) | 0))) + Bridge.Int.mul(8, (((Bridge.Int.div(scalingFactorScaled, 128)) | 0)))) | 0) });
                                        } else if (actorGidNormalized === 49) {
                                            keyLocations.set(TuxPlanetSpeedrunAnyPercentLibrary.MapKey.Silver, { Item1: ((Bridge.Int.mul(Bridge.Int.mul(i, solidTileset.TileWidth), (((Bridge.Int.div(scalingFactorScaled, 128)) | 0))) + Bridge.Int.mul(8, (((Bridge.Int.div(scalingFactorScaled, 128)) | 0)))) | 0), Item2: ((Bridge.Int.mul(Bridge.Int.mul(j, solidTileset.TileHeight), (((Bridge.Int.div(scalingFactorScaled, 128)) | 0))) + Bridge.Int.mul(8, (((Bridge.Int.div(scalingFactorScaled, 128)) | 0)))) | 0) });
                                        } else if (actorGidNormalized === 50) {
                                            keyLocations.set(TuxPlanetSpeedrunAnyPercentLibrary.MapKey.Gold, { Item1: ((Bridge.Int.mul(Bridge.Int.mul(i, solidTileset.TileWidth), (((Bridge.Int.div(scalingFactorScaled, 128)) | 0))) + Bridge.Int.mul(8, (((Bridge.Int.div(scalingFactorScaled, 128)) | 0)))) | 0), Item2: ((Bridge.Int.mul(Bridge.Int.mul(j, solidTileset.TileHeight), (((Bridge.Int.div(scalingFactorScaled, 128)) | 0))) + Bridge.Int.mul(8, (((Bridge.Int.div(scalingFactorScaled, 128)) | 0)))) | 0) });
                                        } else if (actorGidNormalized === 51) {
                                            keyLocations.set(TuxPlanetSpeedrunAnyPercentLibrary.MapKey.Mythril, { Item1: ((Bridge.Int.mul(Bridge.Int.mul(i, solidTileset.TileWidth), (((Bridge.Int.div(scalingFactorScaled, 128)) | 0))) + Bridge.Int.mul(8, (((Bridge.Int.div(scalingFactorScaled, 128)) | 0)))) | 0), Item2: ((Bridge.Int.mul(Bridge.Int.mul(j, solidTileset.TileHeight), (((Bridge.Int.div(scalingFactorScaled, 128)) | 0))) + Bridge.Int.mul(8, (((Bridge.Int.div(scalingFactorScaled, 128)) | 0)))) | 0) });
                                        } else if (actorGidNormalized === 52) {
                                            ($t6 = ($t7 = isKeyTileArrays.get(TuxPlanetSpeedrunAnyPercentLibrary.MapKey.Copper))[System.Array.index(i, $t7)])[System.Array.index(j, $t6)] = true;
                                        } else {
                                            if (actorGidNormalized === 53) {
                                                ($t8 = ($t9 = isKeyTileArrays.get(TuxPlanetSpeedrunAnyPercentLibrary.MapKey.Silver))[System.Array.index(i, $t9)])[System.Array.index(j, $t8)] = true;
                                            } else {
                                                if (actorGidNormalized === 54) {
                                                    ($t10 = ($t11 = isKeyTileArrays.get(TuxPlanetSpeedrunAnyPercentLibrary.MapKey.Gold))[System.Array.index(i, $t11)])[System.Array.index(j, $t10)] = true;
                                                } else {
                                                    if (actorGidNormalized === 55) {
                                                        ($t12 = ($t13 = isKeyTileArrays.get(TuxPlanetSpeedrunAnyPercentLibrary.MapKey.Mythril))[System.Array.index(i, $t13)])[System.Array.index(j, $t12)] = true;
                                                    } else {
                                                        enemies.add(new TuxPlanetSpeedrunAnyPercentLibrary.Tilemap.EnemySpawnLocation(actorGidNormalized, i, j, enemyIdGenerator.GetNewId()));
                                                    }
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if (gidToSpriteCache.containsKey(foregroundGid)) {
                                        ($t14 = foregroundSpritesArray[System.Array.index(i, foregroundSpritesArray)])[System.Array.index(j, $t14)] = gidToSpriteCache.get(foregroundGid);
                                    } else {
                                        gidToSpriteCache.set(foregroundGid, TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetSprite(tilesets, foregroundGid, scalingFactorScaled));
                                        ($t15 = foregroundSpritesArray[System.Array.index(i, foregroundSpritesArray)])[System.Array.index(j, $t15)] = gidToSpriteCache.get(foregroundGid);
                                    }
                                }
                            }

                            if (solidGid !== 0) {
                                var solidGidNormalized = (solidGid - solidTileset.FirstGid) | 0;

                                ($t16 = isGroundArray[System.Array.index(i, isGroundArray)])[System.Array.index(j, $t16)] = solidGidNormalized === 0;
                                ($t17 = isKillZoneArray[System.Array.index(i, isKillZoneArray)])[System.Array.index(j, $t17)] = solidGidNormalized === 41;
                                ($t18 = isSpikesArray[System.Array.index(i, isSpikesArray)])[System.Array.index(j, $t18)] = solidGidNormalized === 43;
                                ($t19 = isEndOfLevelArray[System.Array.index(i, isEndOfLevelArray)])[System.Array.index(j, $t19)] = solidGidNormalized === 37;
                                ($t20 = isCutsceneArray[System.Array.index(i, isCutsceneArray)])[System.Array.index(j, $t20)] = solidGidNormalized === 29;
                            }
                        }
                    }

                    isKeyTileArrays = TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.OptimizeIsKeyTileArrays(isKeyTileArrays);

                    return new TuxPlanetSpeedrunAnyPercentLibrary.Tilemap(backgroundSpritesArray, midgroundSpritesArray, foregroundSpritesArray, isGroundArray, isKillZoneArray, isSpikesArray, isEndOfLevelArray, isCutsceneArray, TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.ComputeCheckpointArray(numberOfTileColumns, numberOfTileRows, solidLayerData, solidTileset, actorsTileset, scalingFactorScaled), isKeyTileArrays, ((Bridge.Int.div(Bridge.Int.mul(solidTileset.TileWidth, scalingFactorScaled), 128)) | 0), ((Bridge.Int.div(Bridge.Int.mul(solidTileset.TileHeight, scalingFactorScaled), 128)) | 0), enemies, cutsceneName, tuxLocation, keyLocations, gameMusic, new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Tilemap.IExtraEnemyToSpawn)).ctor());
                },
                OptimizeIsKeyTileArray: function (isKeyTileArray) {
                    var $t, $t1, $t2;
                    var newArray = System.Array.init(isKeyTileArray.length, null, System.Array.type(System.Boolean));

                    var containsAtLeastOneNonNullSubArray = false;

                    for (var i = 0; i < newArray.length; i = (i + 1) | 0) {
                        var containsAtLeastOneTrueValue = false;
                        for (var j = 0; j < isKeyTileArray[System.Array.index(i, isKeyTileArray)].length; j = (j + 1) | 0) {
                            if (($t = isKeyTileArray[System.Array.index(i, isKeyTileArray)])[System.Array.index(j, $t)]) {
                                containsAtLeastOneTrueValue = true;
                                break;
                            }
                        }

                        if (containsAtLeastOneTrueValue) {
                            containsAtLeastOneNonNullSubArray = true;

                            newArray[System.Array.index(i, newArray)] = System.Array.init(isKeyTileArray[System.Array.index(i, isKeyTileArray)].length, false, System.Boolean);
                            for (var j1 = 0; j1 < isKeyTileArray[System.Array.index(i, isKeyTileArray)].length; j1 = (j1 + 1) | 0) {
                                ($t1 = newArray[System.Array.index(i, newArray)])[System.Array.index(j1, $t1)] = ($t2 = isKeyTileArray[System.Array.index(i, isKeyTileArray)])[System.Array.index(j1, $t2)];
                            }
                        } else {
                            newArray[System.Array.index(i, newArray)] = null;
                        }
                    }

                    if (!containsAtLeastOneNonNullSubArray) {
                        return null;
                    }

                    return newArray;
                },
                OptimizeIsKeyTileArrays: function (isKeyTileArrays) {
                    var $t;
                    var returnValue = new (System.Collections.Generic.Dictionary$2(TuxPlanetSpeedrunAnyPercentLibrary.MapKey,System.Array.type(System.Array.type(System.Boolean))))();

                    $t = Bridge.getEnumerator(isKeyTileArrays);
                    try {
                        while ($t.moveNext()) {
                            var kvp = $t.Current;
                            returnValue.set(kvp.key, TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.OptimizeIsKeyTileArray(kvp.value));
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    return returnValue;
                },
                ComputeCheckpointArray: function (numberOfTileColumns, numberOfTileRows, solidLayerData, solidTileset, actorsTileset, scalingFactorScaled) {
                    var $t, $t1, $t2, $t3;
                    var checkpointArray = System.Array.init(numberOfTileColumns, null, System.Array.type(System.Tuple$2(System.Int32,System.Int32)));
                    var solidLayerGids = System.Array.init(numberOfTileColumns, null, System.Array.type(System.Int32));

                    for (var i = 0; i < numberOfTileColumns; i = (i + 1) | 0) {
                        checkpointArray[System.Array.index(i, checkpointArray)] = System.Array.init(numberOfTileRows, null, System.Tuple$2(System.Int32,System.Int32));
                        for (var j = 0; j < numberOfTileRows; j = (j + 1) | 0) {
                            ($t = checkpointArray[System.Array.index(i, checkpointArray)])[System.Array.index(j, $t)] = null;
                        }

                        solidLayerGids[System.Array.index(i, solidLayerGids)] = System.Array.init(numberOfTileRows, 0, System.Int32);
                        for (var j1 = 0; j1 < numberOfTileRows; j1 = (j1 + 1) | 0) {
                            ($t1 = solidLayerGids[System.Array.index(i, solidLayerGids)])[System.Array.index(j1, $t1)] = 0;
                        }
                    }

                    var dataIndex = 0;
                    for (var j2 = (numberOfTileRows - 1) | 0; j2 >= 0; j2 = (j2 - 1) | 0) {
                        for (var i1 = 0; i1 < numberOfTileColumns; i1 = (i1 + 1) | 0) {
                            var solidGid = System.Array.getItem(solidLayerData, dataIndex, System.Int32);
                            dataIndex = (dataIndex + 1) | 0;

                            ($t2 = solidLayerGids[System.Array.index(i1, solidLayerGids)])[System.Array.index(j2, $t2)] = solidGid;
                        }
                    }

                    for (var i2 = 0; i2 < solidLayerGids.length; i2 = (i2 + 1) | 0) {
                        for (var j3 = 0; j3 < solidLayerGids[System.Array.index(i2, solidLayerGids)].length; j3 = (j3 + 1) | 0) {
                            if (((($t3 = solidLayerGids[System.Array.index(i2, solidLayerGids)])[System.Array.index(j3, $t3)] - actorsTileset.FirstGid) | 0) === 72) {
                                TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.SetCheckpoint(checkpointArray, solidLayerGids, actorsTileset, { Item1: ((Bridge.Int.mul(Bridge.Int.mul(i2, solidTileset.TileWidth), (((Bridge.Int.div(scalingFactorScaled, 128)) | 0))) + ((Bridge.Int.div(Bridge.Int.mul(solidTileset.TileWidth, (((Bridge.Int.div(scalingFactorScaled, 128)) | 0))), 2)) | 0)) | 0), Item2: ((Bridge.Int.mul(Bridge.Int.mul(j3, solidTileset.TileHeight), (((Bridge.Int.div(scalingFactorScaled, 128)) | 0))) + Bridge.Int.mul(16, (((Bridge.Int.div(scalingFactorScaled, 128)) | 0)))) | 0) }, i2, j3);
                            }
                        }
                    }

                    return checkpointArray;
                },
                SetCheckpoint: function (checkpointArray, solidLayerGids, actorsTileset, checkpointDestination, i, j) {
                    var $t, $t1, $t2;
                    if (i < 0 || i >= checkpointArray.length) {
                        return;
                    }

                    if (j < 0 || j >= checkpointArray[System.Array.index(i, checkpointArray)].length) {
                        return;
                    }

                    var normalizedGid = (($t = solidLayerGids[System.Array.index(i, solidLayerGids)])[System.Array.index(j, $t)] - actorsTileset.FirstGid) | 0;

                    if (normalizedGid !== 72 && normalizedGid !== 32) {
                        return;
                    }

                    if (($t1 = checkpointArray[System.Array.index(i, checkpointArray)])[System.Array.index(j, $t1)] != null) {
                        return;
                    }

                    ($t2 = checkpointArray[System.Array.index(i, checkpointArray)])[System.Array.index(j, $t2)] = checkpointDestination;

                    TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.SetCheckpoint(checkpointArray, solidLayerGids, actorsTileset, checkpointDestination, i, ((j - 1) | 0));
                    TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.SetCheckpoint(checkpointArray, solidLayerGids, actorsTileset, checkpointDestination, i, ((j + 1) | 0));
                    TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.SetCheckpoint(checkpointArray, solidLayerGids, actorsTileset, checkpointDestination, ((i - 1) | 0), j);
                    TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.SetCheckpoint(checkpointArray, solidLayerGids, actorsTileset, checkpointDestination, ((i + 1) | 0), j);
                },
                GetSprite: function (tilesets, gid, scalingFactorScaled) {
                    var tilesetToGameImageMapping = new (System.Collections.Generic.Dictionary$2(System.String,TuxPlanetSpeedrunAnyPercentLibrary.GameImage))();
                    tilesetToGameImageMapping.set("Actors", TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Actors);
                    tilesetToGameImageMapping.set("Igloo", TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Igloo);
                    tilesetToGameImageMapping.set("Signpost", TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Signpost);
                    tilesetToGameImageMapping.set("Solid", TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Solid);
                    tilesetToGameImageMapping.set("Spikes", TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Spikes);
                    tilesetToGameImageMapping.set("TsSnow", TuxPlanetSpeedrunAnyPercentLibrary.GameImage.TilemapSnow);
                    tilesetToGameImageMapping.set("TsCastle", TuxPlanetSpeedrunAnyPercentLibrary.GameImage.TilemapCastle);

                    var tileset = System.Linq.Enumerable.from(tilesets).where(function (x) {
                            return x.FirstGid <= gid;
                        }).orderByDescending(function (x) {
                        return x.FirstGid;
                    }).first();

                    var image = tilesetToGameImageMapping.get(tileset.Name);

                    var tilesetX = 0;
                    var tilesetY = 0;

                    gid = (gid - tileset.FirstGid) | 0;

                    var numSpritesInEachRow = (Bridge.Int.div(tileset.ImageWidth, tileset.TileWidth)) | 0;

                    while (gid >= numSpritesInEachRow) {
                        gid = (gid - numSpritesInEachRow) | 0;
                        tilesetY = (tilesetY + tileset.TileHeight) | 0;
                    }

                    while (gid > 0) {
                        gid = (gid - 1) | 0;
                        tilesetX = (tilesetX + tileset.TileWidth) | 0;
                    }

                    return new TuxPlanetSpeedrunAnyPercentLibrary.Sprite(image, tilesetX, tilesetY, tileset.TileWidth, tileset.TileHeight, scalingFactorScaled);
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.MapGenerationFailureException", {
        inherits: [System.Exception]
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.MapKey", {
        $kind: "enum",
        statics: {
            fields: {
                Copper: 0,
                Silver: 1,
                Gold: 2,
                Mythril: 3
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.MapKeyState", {
        statics: {
            fields: {
                MAP_KEY_ACTIVATION_RADIUS_IN_PIXELS: 0
            },
            ctors: {
                init: function () {
                    this.MAP_KEY_ACTIVATION_RADIUS_IN_PIXELS = 300;
                }
            },
            methods: {
                EmptyMapKeyState: function () {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.MapKeyState(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.MapKey)).ctor(), 0, new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.MapKey)).$ctor1(TuxPlanetSpeedrunAnyPercentLibrary.MapKeyUtil.GetOrderedListOfMapKeys()));
                }
            }
        },
        fields: {
            CollectedKeys: null,
            elapsedMicros: 0,
            listOfMapKeys: null
        },
        ctors: {
            ctor: function (collectedKeys, elapsedMicros, listOfMapKeys) {
                this.$initialize();
                this.CollectedKeys = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.MapKey)).$ctor1(collectedKeys);
                this.elapsedMicros = elapsedMicros;
                this.listOfMapKeys = listOfMapKeys;
            }
        },
        methods: {
            ProcessFrame: function (tuxX, tuxY, isTuxTeleporting, tilemap, elapsedMicrosPerFrame) {
                var $t;
                var newElapsedMicros = (this.elapsedMicros + elapsedMicrosPerFrame) | 0;

                if (newElapsedMicros > 2000000000) {
                    newElapsedMicros = 1;
                }

                var newCollectedKeys = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.MapKey)).$ctor1(this.CollectedKeys);

                $t = Bridge.getEnumerator(this.listOfMapKeys, TuxPlanetSpeedrunAnyPercentLibrary.MapKey);
                try {
                    while ($t.moveNext()) {
                        var mapKey = $t.Current;
                        if (newCollectedKeys.contains(mapKey)) {
                            continue;
                        }

                        if (isTuxTeleporting) {
                            continue;
                        }

                        var mapKeyLocation = tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetMapKeyLocation(mapKey, 0, 0);

                        if (mapKeyLocation == null) {
                            continue;
                        }

                        var mapKeyX = mapKeyLocation.Item1;
                        var mapKeyY = mapKeyLocation.Item2;

                        if (((mapKeyX - 24) | 0) <= ((tuxX + 12) | 0) && ((tuxX - 12) | 0) <= ((mapKeyX + 24) | 0) && ((mapKeyY - 24) | 0) <= ((tuxY + 24) | 0) && ((tuxY - 48) | 0) <= ((mapKeyY + 24) | 0)) {
                            newCollectedKeys.add(mapKey);
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }

                return new TuxPlanetSpeedrunAnyPercentLibrary.MapKeyState(newCollectedKeys, newElapsedMicros, this.listOfMapKeys);
            },
            Render: function (absoluteDisplayOutput, translatedDisplayOutput, tilemap, windowWidth, windowHeight) {
                var $t;
                var collectedMapKeysX = 10;

                $t = Bridge.getEnumerator(this.listOfMapKeys, TuxPlanetSpeedrunAnyPercentLibrary.MapKey);
                try {
                    while ($t.moveNext()) {
                        var mapKey = $t.Current;
                        if (System.Linq.Enumerable.from(this.CollectedKeys).contains(mapKey)) {
                            absoluteDisplayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(TuxPlanetSpeedrunAnyPercentLibrary.MapKeyUtil.GetGameImage(mapKey), 0, 0, 16, 16, collectedMapKeysX, ((((windowHeight - 48) | 0) - 10) | 0), 0, 384);

                            collectedMapKeysX = (collectedMapKeysX + (48)) | 0;
                        } else {
                            var mapKeyLocation = tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetMapKeyLocation(mapKey, 0, 0);

                            if (mapKeyLocation != null) {
                                var spriteNum = (((Bridge.Int.div(this.elapsedMicros, (100000))) | 0)) % 4;

                                translatedDisplayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(TuxPlanetSpeedrunAnyPercentLibrary.MapKeyUtil.GetGameImage(mapKey), Bridge.Int.mul(spriteNum, 16), 0, 16, 16, ((mapKeyLocation.Item1 - 24) | 0), ((mapKeyLocation.Item2 - 24) | 0), 0, 384);
                            }
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.MapKeyUtil", {
        statics: {
            methods: {
                GetOrderedListOfMapKeys: function () {
                    var $t;
                    var mapKeysArray = System.Enum.getValues(TuxPlanetSpeedrunAnyPercentLibrary.MapKey);

                    if (mapKeysArray.length === 4) {
                        var returnValue = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.MapKey)).ctor();
                        returnValue.add(TuxPlanetSpeedrunAnyPercentLibrary.MapKey.Copper);
                        returnValue.add(TuxPlanetSpeedrunAnyPercentLibrary.MapKey.Silver);
                        returnValue.add(TuxPlanetSpeedrunAnyPercentLibrary.MapKey.Gold);
                        returnValue.add(TuxPlanetSpeedrunAnyPercentLibrary.MapKey.Mythril);

                        return returnValue;
                    }

                    var list = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.MapKey)).ctor();

                    $t = Bridge.getEnumerator(mapKeysArray);
                    try {
                        while ($t.moveNext()) {
                            var mapKey = Bridge.cast($t.Current, TuxPlanetSpeedrunAnyPercentLibrary.MapKey);
                            list.add(mapKey);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    list = System.Linq.Enumerable.from(list).select(function (x) {
                            return TuxPlanetSpeedrunAnyPercentLibrary.MapKeyUtil.ToSerializableInt(x);
                        }).orderBy(function (x) {
                        return x;
                    }).select(function (x) {
                        return TuxPlanetSpeedrunAnyPercentLibrary.MapKeyUtil.FromSerializableInt(x);
                    }).toList(TuxPlanetSpeedrunAnyPercentLibrary.MapKey);

                    return list;
                },
                GetGameImage: function (mapKey) {
                    switch (mapKey) {
                        case TuxPlanetSpeedrunAnyPercentLibrary.MapKey.Copper: 
                            return TuxPlanetSpeedrunAnyPercentLibrary.GameImage.KeyCopper;
                        case TuxPlanetSpeedrunAnyPercentLibrary.MapKey.Silver: 
                            return TuxPlanetSpeedrunAnyPercentLibrary.GameImage.KeySilver;
                        case TuxPlanetSpeedrunAnyPercentLibrary.MapKey.Gold: 
                            return TuxPlanetSpeedrunAnyPercentLibrary.GameImage.KeyGold;
                        case TuxPlanetSpeedrunAnyPercentLibrary.MapKey.Mythril: 
                            return TuxPlanetSpeedrunAnyPercentLibrary.GameImage.KeyMythril;
                        default: 
                            throw new System.Exception();
                    }
                },
                ToSerializableInt: function (mapKey) {
                    switch (mapKey) {
                        case TuxPlanetSpeedrunAnyPercentLibrary.MapKey.Copper: 
                            return 1;
                        case TuxPlanetSpeedrunAnyPercentLibrary.MapKey.Silver: 
                            return 2;
                        case TuxPlanetSpeedrunAnyPercentLibrary.MapKey.Gold: 
                            return 3;
                        case TuxPlanetSpeedrunAnyPercentLibrary.MapKey.Mythril: 
                            return 4;
                        default: 
                            throw new System.Exception();
                    }
                },
                FromSerializableInt: function (i) {
                    switch (i) {
                        case 1: 
                            return TuxPlanetSpeedrunAnyPercentLibrary.MapKey.Copper;
                        case 2: 
                            return TuxPlanetSpeedrunAnyPercentLibrary.MapKey.Silver;
                        case 3: 
                            return TuxPlanetSpeedrunAnyPercentLibrary.MapKey.Gold;
                        case 4: 
                            return TuxPlanetSpeedrunAnyPercentLibrary.MapKey.Mythril;
                        default: 
                            throw new DTLibrary.DTDeserializationException();
                    }
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.Move", {
        statics: {
            methods: {
                EmptyMove: function () {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.Move(false, false, false, false, false, false, false);
                }
            }
        },
        fields: {
            Jumped: false,
            Teleported: false,
            ArrowLeft: false,
            ArrowRight: false,
            ArrowUp: false,
            ArrowDown: false,
            Respawn: false
        },
        ctors: {
            ctor: function (jumped, teleported, arrowLeft, arrowRight, arrowUp, arrowDown, respawn) {
                this.$initialize();
                this.Jumped = jumped;
                this.Teleported = teleported;
                this.ArrowLeft = arrowLeft;
                this.ArrowRight = arrowRight;
                this.ArrowUp = arrowUp;
                this.ArrowDown = arrowDown;
                this.Respawn = respawn;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.MusicPlayer", {
        fields: {
            /**
             * The current music being played, or null if no music is playing.
             This may not be the same as intendedMusic since it takes a while
             to fade out an existing music and fade in a new one
             *
             * @instance
             * @private
             * @memberof TuxPlanetSpeedrunAnyPercentLibrary.MusicPlayer
             * @type ?TuxPlanetSpeedrunAnyPercentLibrary.GameMusic
             */
            currentMusic: null,
            /**
             * The intended music that should eventually play, or null if we should fade out all music
             *
             * @instance
             * @private
             * @memberof TuxPlanetSpeedrunAnyPercentLibrary.MusicPlayer
             * @type ?TuxPlanetSpeedrunAnyPercentLibrary.GameMusic
             */
            intendedMusic: null,
            /**
             * From 0 to 100 * 1024 (both inclusive)
             Normally, this value is 100 * 1024.
             However, when fading in/out, this value will decrease to represent the drop in music volume.
             *
             * @instance
             * @private
             * @memberof TuxPlanetSpeedrunAnyPercentLibrary.MusicPlayer
             * @type number
             */
            currentFadeInAndOutVolumeMillis: 0,
            /**
             * From 0 to 100.
             For this.currentMusic, the intended volume at which the music should be played.
             We allow this to be set since we might want to play a particular music at a different
             volume depending on circumstances (e.g. maybe the music should be played softer when
             the game is paused)
             *
             * @instance
             * @private
             * @memberof TuxPlanetSpeedrunAnyPercentLibrary.MusicPlayer
             * @type number
             */
            currentMusicVolume: 0,
            /**
             * From 0 to 100.
             For this.intendedMusic, the intended volume at which the music should be played.
             *
             * @instance
             * @private
             * @memberof TuxPlanetSpeedrunAnyPercentLibrary.MusicPlayer
             * @type number
             */
            intendedMusicVolume: 0,
            elapsedMicrosPerFrame: 0
        },
        ctors: {
            ctor: function (elapsedMicrosPerFrame) {
                this.$initialize();
                this.currentMusic = null;
                this.intendedMusic = null;
                this.currentFadeInAndOutVolumeMillis = 0;
                this.currentMusicVolume = 0;
                this.intendedMusicVolume = 0;

                this.elapsedMicrosPerFrame = elapsedMicrosPerFrame;
            }
        },
        methods: {
            DecreaseCurrentFadeInAndOutVolumeMillis: function () {
                this.currentFadeInAndOutVolumeMillis = (this.currentFadeInAndOutVolumeMillis - ((Bridge.Int.div(this.elapsedMicrosPerFrame, 2)) | 0)) | 0;
                if (this.currentFadeInAndOutVolumeMillis < 0) {
                    this.currentFadeInAndOutVolumeMillis = 0;
                }
            },
            IncreaseCurrentFadeInAndOutVolumeMillis: function () {
                this.currentFadeInAndOutVolumeMillis = (this.currentFadeInAndOutVolumeMillis + ((Bridge.Int.div(this.elapsedMicrosPerFrame, 2)) | 0)) | 0;
                if (this.currentFadeInAndOutVolumeMillis > 102400) {
                    this.currentFadeInAndOutVolumeMillis = 102400;
                }
            },
            ProcessFrame: function () {
                if (this.intendedMusic == null) {
                    if (this.currentMusic != null) {
                        this.DecreaseCurrentFadeInAndOutVolumeMillis();
                        if (this.currentFadeInAndOutVolumeMillis === 0) {
                            this.currentMusic = null;
                        }
                    }

                    return;
                }

                if (this.currentMusic == null) {
                    this.currentMusic = this.intendedMusic;
                    this.currentFadeInAndOutVolumeMillis = 0;
                    this.currentMusicVolume = this.intendedMusicVolume;
                    return;
                }

                if (System.Nullable.getValue(this.currentMusic) !== System.Nullable.getValue(this.intendedMusic)) {
                    this.DecreaseCurrentFadeInAndOutVolumeMillis();
                    if (this.currentFadeInAndOutVolumeMillis === 0) {
                        this.currentMusic = null;
                    }
                    return;
                }

                if (this.currentMusicVolume < this.intendedMusicVolume) {
                    var delta = (Bridge.Int.div(this.elapsedMicrosPerFrame, 5000)) | 0;
                    if (delta === 0) {
                        delta = 1;
                    }
                    this.currentMusicVolume = (this.currentMusicVolume + delta) | 0;
                    if (this.currentMusicVolume > this.intendedMusicVolume) {
                        this.currentMusicVolume = this.intendedMusicVolume;
                    }
                }

                if (this.currentMusicVolume > this.intendedMusicVolume) {
                    var delta1 = (Bridge.Int.div(this.elapsedMicrosPerFrame, 5000)) | 0;
                    if (delta1 === 0) {
                        delta1 = 1;
                    }
                    this.currentMusicVolume = (this.currentMusicVolume - delta1) | 0;
                    if (this.currentMusicVolume < this.intendedMusicVolume) {
                        this.currentMusicVolume = this.intendedMusicVolume;
                    }
                }

                this.IncreaseCurrentFadeInAndOutVolumeMillis();
            },
            SetMusic: function (music, volume) {
                this.intendedMusic = music;
                this.intendedMusicVolume = volume;
            },
            StopMusic: function () {
                this.intendedMusic = null;
            },
            RenderMusic: function (musicOutput, userVolume) {
                if (this.currentMusic != null) {
                    musicOutput.DTLibrary$IMusicOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$PlayMusic(System.Nullable.getValue(this.currentMusic), ((Bridge.Int.div(Bridge.Int.mul(((((Bridge.Int.div(Bridge.Int.mul(this.currentFadeInAndOutVolumeMillis, this.currentMusicVolume), 100)) | 0)) >> 10), userVolume), 100)) | 0));
                } else {
                    musicOutput.DTLibrary$IMusicOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$StopMusic();
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.MusicVolumePicker", {
        fields: {
            _xPos: 0,
            _yPos: 0,
            _currentVolume: 0,
            _unmuteVolume: 0,
            _isDraggingVolumeSlider: false,
            _color: 0
        },
        ctors: {
            ctor: function (xPos, yPos, initialVolume, color) {
                this.$initialize();
                this._xPos = xPos;
                this._yPos = yPos;

                this._currentVolume = initialVolume;
                this._unmuteVolume = this._currentVolume;

                this._isDraggingVolumeSlider = false;

                this._color = color;
            }
        },
        methods: {
            ProcessFrame: function (mouseInput, previousMouseInput) {
                var mouseX = mouseInput.DTLibrary$IMouse$GetX();
                var mouseY = mouseInput.DTLibrary$IMouse$GetY();

                if (mouseInput.DTLibrary$IMouse$IsLeftMouseButtonPressed() && !previousMouseInput.DTLibrary$IMouse$IsLeftMouseButtonPressed() && this._xPos <= mouseX && mouseX <= ((this._xPos + 40) | 0) && this._yPos <= mouseY && mouseY <= ((this._yPos + 50) | 0)) {
                    if (this._currentVolume === 0) {
                        this._currentVolume = this._unmuteVolume === 0 ? TuxPlanetSpeedrunAnyPercentLibrary.GlobalState.DEFAULT_VOLUME : this._unmuteVolume;
                        this._unmuteVolume = this._currentVolume;
                    } else {
                        this._unmuteVolume = this._currentVolume;
                        this._currentVolume = 0;
                    }
                }

                if (mouseInput.DTLibrary$IMouse$IsLeftMouseButtonPressed() && !previousMouseInput.DTLibrary$IMouse$IsLeftMouseButtonPressed() && ((this._xPos + 50) | 0) <= mouseX && mouseX <= ((this._xPos + 150) | 0) && ((this._yPos + 10) | 0) <= mouseY && mouseY <= ((this._yPos + 40) | 0)) {
                    this._isDraggingVolumeSlider = true;
                }

                if (this._isDraggingVolumeSlider && mouseInput.DTLibrary$IMouse$IsLeftMouseButtonPressed()) {
                    var volume = (mouseX - (((this._xPos + 50) | 0))) | 0;
                    if (volume < 0) {
                        volume = 0;
                    }
                    if (volume > 100) {
                        volume = 100;
                    }

                    this._currentVolume = volume;
                    this._unmuteVolume = this._currentVolume;
                }

                if (!mouseInput.DTLibrary$IMouse$IsLeftMouseButtonPressed()) {
                    this._isDraggingVolumeSlider = false;
                }
            },
            /**
             * Returns a number from 0 to 100 (both inclusive)
             *
             * @instance
             * @public
             * @this TuxPlanetSpeedrunAnyPercentLibrary.MusicVolumePicker
             * @memberof TuxPlanetSpeedrunAnyPercentLibrary.MusicVolumePicker
             * @return  {number}
             */
            GetCurrentMusicVolume: function () {
                return this._currentVolume;
            },
            Render: function (displayOutput) {
                var image = new TuxPlanetSpeedrunAnyPercentLibrary.GameImage();
                var color;

                switch (this._color) {
                    case TuxPlanetSpeedrunAnyPercentLibrary.SoundAndMusicVolumePicker.Color.Black: 
                        image = this._currentVolume > 0 ? TuxPlanetSpeedrunAnyPercentLibrary.GameImage.MusicOn_Black : TuxPlanetSpeedrunAnyPercentLibrary.GameImage.MusicOff_Black;
                        color = DTLibrary.DTColor.Black();
                        break;
                    case TuxPlanetSpeedrunAnyPercentLibrary.SoundAndMusicVolumePicker.Color.White: 
                        image = this._currentVolume > 0 ? TuxPlanetSpeedrunAnyPercentLibrary.GameImage.MusicOn_White : TuxPlanetSpeedrunAnyPercentLibrary.GameImage.MusicOff_White;
                        color = DTLibrary.DTColor.White();
                        break;
                    default: 
                        throw new System.Exception();
                }

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImage(image, this._xPos, this._yPos);

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle(((this._xPos + 50) | 0), ((this._yPos + 10) | 0), 101, 31, color, false);

                if (this._currentVolume > 0) {
                    displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle(((this._xPos + 50) | 0), ((this._yPos + 10) | 0), this._currentVolume, 31, color, true);
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.Overworld", {
        statics: {
            methods: {
                /**
                 * Can possibly throw DTDeserializationException
                 *
                 * @static
                 * @public
                 * @this TuxPlanetSpeedrunAnyPercentLibrary.Overworld
                 * @memberof TuxPlanetSpeedrunAnyPercentLibrary.Overworld
                 * @param   {DTLibrary.ByteList.Iterator}                     iterator
                 * @return  {TuxPlanetSpeedrunAnyPercentLibrary.Overworld}
                 */
                TryDeserialize: function (iterator) {
                    var windowWidth = iterator.TryPopInt();
                    var windowHeight = iterator.TryPopInt();

                    var tuxXIndex = iterator.TryPopInt();
                    var tuxYIndex = iterator.TryPopInt();
                    var tuxXMibi = iterator.TryPopInt();
                    var tuxYMibi = iterator.TryPopInt();

                    var elapsedMicros = iterator.TryPopInt();

                    var intSet = iterator.TryPopIntSet();

                    if (intSet == null) {
                        throw new DTLibrary.DTDeserializationException();
                    }

                    var completedLevels = new (System.Collections.Generic.HashSet$1(TuxPlanetSpeedrunAnyPercentLibrary.Level)).$ctor1(System.Linq.Enumerable.from(intSet).select(function (x) {
                            return TuxPlanetSpeedrunAnyPercentLibrary.LevelUtil.FromSerializableInt(x);
                        }));

                    var rngSeed = iterator.TryPopString();

                    var pathCount = iterator.TryPopInt();

                    var path = new (System.Collections.Generic.List$1(System.Tuple$2(System.Int32,System.Int32))).ctor();

                    for (var i = 0; i < pathCount; i = (i + 1) | 0) {
                        var x = iterator.TryPopInt();
                        var y = iterator.TryPopInt();
                        path.add({ Item1: x, Item2: y });
                    }

                    var reachableTilesCount = iterator.TryPopInt();

                    var reachableTiles = new (System.Collections.Generic.HashSet$1(System.Tuple$2(System.Int32,System.Int32))).$ctor3(new DTLibrary.IntTupleEqualityComparer());

                    for (var i1 = 0; i1 < reachableTilesCount; i1 = (i1 + 1) | 0) {
                        var x1 = iterator.TryPopInt();
                        var y1 = iterator.TryPopInt();
                        reachableTiles.add({ Item1: x1, Item2: y1 });
                    }

                    return new TuxPlanetSpeedrunAnyPercentLibrary.Overworld.$ctor1(windowWidth, windowHeight, TuxPlanetSpeedrunAnyPercentLibrary.OverworldMap.GenerateOverworldMap(windowWidth, windowHeight, rngSeed), completedLevels, reachableTiles, tuxXIndex, tuxYIndex, tuxXMibi, tuxYMibi, path, elapsedMicros);
                }
            }
        },
        fields: {
            tuxXIndex: 0,
            tuxYIndex: 0,
            tuxXMibi: 0,
            tuxYMibi: 0,
            path: null,
            completedLevels: null,
            reachableTiles: null,
            overworldMap: null,
            windowWidth: 0,
            windowHeight: 0,
            elapsedMicros: 0
        },
        ctors: {
            ctor: function (windowWidth, windowHeight, rngSeed, completedLevels) {
                this.$initialize();
                this.windowWidth = windowWidth;
                this.windowHeight = windowHeight;

                this.overworldMap = TuxPlanetSpeedrunAnyPercentLibrary.OverworldMap.GenerateOverworldMap(windowWidth, windowHeight, rngSeed);

                this.tuxXIndex = this.overworldMap.StartingLocation.Item1;
                this.tuxYIndex = this.overworldMap.StartingLocation.Item2;
                this.tuxXMibi = (((Bridge.Int.mul(this.tuxXIndex, TuxPlanetSpeedrunAnyPercentLibrary.OverworldMap.TILE_WIDTH_IN_PIXELS) + 24) | 0)) << 10;
                this.tuxYMibi = (((Bridge.Int.mul(this.tuxYIndex, TuxPlanetSpeedrunAnyPercentLibrary.OverworldMap.TILE_HEIGHT_IN_PIXELS) + 24) | 0)) << 10;
                this.path = new (System.Collections.Generic.List$1(System.Tuple$2(System.Int32,System.Int32))).ctor();
                this.completedLevels = new (System.Collections.Generic.HashSet$1(TuxPlanetSpeedrunAnyPercentLibrary.Level)).$ctor1(completedLevels);
                this.reachableTiles = TuxPlanetSpeedrunAnyPercentLibrary.OverworldUtil.GetReachableTiles(this.overworldMap.OverworldGameMap, System.Linq.Enumerable.from(completedLevels).toList(TuxPlanetSpeedrunAnyPercentLibrary.Level));

                this.elapsedMicros = 0;
            },
            $ctor1: function (windowWidth, windowHeight, overworldMap, completedLevels, reachableTiles, tuxXIndex, tuxYIndex, tuxXMibi, tuxYMibi, path, elapsedMicros) {
                this.$initialize();
                this.windowWidth = windowWidth;
                this.windowHeight = windowHeight;
                this.overworldMap = overworldMap;
                this.completedLevels = new (System.Collections.Generic.HashSet$1(TuxPlanetSpeedrunAnyPercentLibrary.Level)).$ctor1(completedLevels);
                this.reachableTiles = new (System.Collections.Generic.HashSet$1(System.Tuple$2(System.Int32,System.Int32))).$ctor2(reachableTiles, new DTLibrary.IntTupleEqualityComparer());
                this.tuxXIndex = tuxXIndex;
                this.tuxYIndex = tuxYIndex;
                this.tuxXMibi = tuxXMibi;
                this.tuxYMibi = tuxYMibi;
                this.path = new (System.Collections.Generic.List$1(System.Tuple$2(System.Int32,System.Int32))).$ctor1(path);

                this.elapsedMicros = elapsedMicros;
            }
        },
        methods: {
            GetNumCompletedLevels: function () {
                return this.completedLevels.Count;
            },
            CompleteLevel: function (level) {
                var newCompletedLevels = new (System.Collections.Generic.HashSet$1(TuxPlanetSpeedrunAnyPercentLibrary.Level)).$ctor1(this.completedLevels);

                newCompletedLevels.add(level);

                return new TuxPlanetSpeedrunAnyPercentLibrary.Overworld.$ctor1(this.windowWidth, this.windowHeight, this.overworldMap, newCompletedLevels, TuxPlanetSpeedrunAnyPercentLibrary.OverworldUtil.GetReachableTiles(this.overworldMap.OverworldGameMap, System.Linq.Enumerable.from(newCompletedLevels).toList(TuxPlanetSpeedrunAnyPercentLibrary.Level)), this.tuxXIndex, this.tuxYIndex, this.tuxXMibi, this.tuxYMibi, this.path, this.elapsedMicros);
            },
            ProcessFrame: function (keyboardInput, previousKeyboardInput, windowWidth, windowHeight, elapsedMicrosPerFrame) {
                var selectedLevel = null;

                var newPath = new (System.Collections.Generic.List$1(System.Tuple$2(System.Int32,System.Int32))).$ctor1(this.path);

                if (newPath.Count === 0) {
                    if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Z) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Z) || keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Space) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Space) || keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Enter) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Enter)) {
                        selectedLevel = this.overworldMap.GetLevel(this.tuxXIndex, this.tuxYIndex);
                    }

                    if (selectedLevel == null) {
                        if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.RightArrow)) {
                            var p = TuxPlanetSpeedrunAnyPercentLibrary.OverworldUtil.GetPath(this.overworldMap.OverworldGameMap, System.Linq.Enumerable.from(this.reachableTiles).toList(System.Tuple$2(System.Int32,System.Int32)), { Item1: this.tuxXIndex, Item2: this.tuxYIndex }, { Item1: 1, Item2: 0 });

                            if (p.Count > 0) {
                                newPath = p;
                            }
                        }
                        if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.LeftArrow)) {
                            var p1 = TuxPlanetSpeedrunAnyPercentLibrary.OverworldUtil.GetPath(this.overworldMap.OverworldGameMap, System.Linq.Enumerable.from(this.reachableTiles).toList(System.Tuple$2(System.Int32,System.Int32)), { Item1: this.tuxXIndex, Item2: this.tuxYIndex }, { Item1: -1, Item2: 0 });

                            if (p1.Count > 0) {
                                newPath = p1;
                            }
                        }
                        if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.UpArrow)) {
                            var p2 = TuxPlanetSpeedrunAnyPercentLibrary.OverworldUtil.GetPath(this.overworldMap.OverworldGameMap, System.Linq.Enumerable.from(this.reachableTiles).toList(System.Tuple$2(System.Int32,System.Int32)), { Item1: this.tuxXIndex, Item2: this.tuxYIndex }, { Item1: 0, Item2: 1 });

                            if (p2.Count > 0) {
                                newPath = p2;
                            }
                        }
                        if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.DownArrow)) {
                            var p3 = TuxPlanetSpeedrunAnyPercentLibrary.OverworldUtil.GetPath(this.overworldMap.OverworldGameMap, System.Linq.Enumerable.from(this.reachableTiles).toList(System.Tuple$2(System.Int32,System.Int32)), { Item1: this.tuxXIndex, Item2: this.tuxYIndex }, { Item1: 0, Item2: -1 });

                            if (p3.Count > 0) {
                                newPath = p3;
                            }
                        }
                    }
                }

                var amountOfMibipixelsToWalk = (Bridge.Int.div(elapsedMicrosPerFrame, 3)) | 0;

                var newTuxXMibi = this.tuxXMibi;
                var newTuxYMibi = this.tuxYMibi;

                var newTuxXIndex = this.tuxXIndex;
                var newTuxYIndex = this.tuxYIndex;

                while (true) {
                    if (amountOfMibipixelsToWalk <= 0) {
                        break;
                    }

                    if (newPath.Count === 0) {
                        break;
                    }

                    var nextLocation = newPath.getItem(0);

                    var nextLocationXMibi = (((Bridge.Int.mul(nextLocation.Item1, TuxPlanetSpeedrunAnyPercentLibrary.OverworldMap.TILE_WIDTH_IN_PIXELS) + 24) | 0)) << 10;
                    var nextLocationYMibi = (((Bridge.Int.mul(nextLocation.Item2, TuxPlanetSpeedrunAnyPercentLibrary.OverworldMap.TILE_HEIGHT_IN_PIXELS) + 24) | 0)) << 10;

                    var deltaX = Math.abs(((newTuxXMibi - nextLocationXMibi) | 0));

                    if (deltaX > amountOfMibipixelsToWalk) {
                        var isMovingRight = nextLocationXMibi > newTuxXMibi;
                        newTuxXMibi = (newTuxXMibi + (isMovingRight ? amountOfMibipixelsToWalk : ((-amountOfMibipixelsToWalk) | 0))) | 0;
                        amountOfMibipixelsToWalk = 0;
                        continue;
                    }

                    newTuxXMibi = nextLocationXMibi;
                    amountOfMibipixelsToWalk = (amountOfMibipixelsToWalk - deltaX) | 0;

                    var deltaY = Math.abs(((newTuxYMibi - nextLocationYMibi) | 0));

                    if (deltaY > amountOfMibipixelsToWalk) {
                        var isMovingUp = nextLocationYMibi > newTuxYMibi;
                        newTuxYMibi = (newTuxYMibi + (isMovingUp ? amountOfMibipixelsToWalk : ((-amountOfMibipixelsToWalk) | 0))) | 0;
                        amountOfMibipixelsToWalk = 0;
                        continue;
                    }

                    newTuxYMibi = nextLocationYMibi;
                    amountOfMibipixelsToWalk = (amountOfMibipixelsToWalk - deltaY) | 0;

                    newTuxXIndex = newPath.getItem(0).Item1;
                    newTuxYIndex = newPath.getItem(0).Item2;

                    newPath = System.Linq.Enumerable.from(newPath).skip(1).toList(System.Tuple$2(System.Int32,System.Int32));
                }

                var newElapsedMicros = (this.elapsedMicros + elapsedMicrosPerFrame) | 0;
                if (newElapsedMicros > 2000000000) {
                    newElapsedMicros = 1;
                }

                return new TuxPlanetSpeedrunAnyPercentLibrary.Overworld.Result(new TuxPlanetSpeedrunAnyPercentLibrary.Overworld.$ctor1(this.windowWidth, this.windowHeight, this.overworldMap, this.completedLevels, this.reachableTiles, newTuxXIndex, newTuxYIndex, newTuxXMibi, newTuxYMibi, newPath, newElapsedMicros), selectedLevel);
            },
            Render: function (displayOutput) {
                var cameraXCenter = this.tuxXMibi >> 10;
                var cameraYCenter = this.tuxYMibi >> 10;

                if (cameraXCenter < ((Bridge.Int.div(this.windowWidth, 2)) | 0)) {
                    cameraXCenter = (Bridge.Int.div(this.windowWidth, 2)) | 0;
                }
                if (cameraXCenter > ((this.overworldMap.GetMapWidthInPixels() - ((Bridge.Int.div(this.windowWidth, 2)) | 0)) | 0)) {
                    cameraXCenter = (this.overworldMap.GetMapWidthInPixels() - ((Bridge.Int.div(this.windowWidth, 2)) | 0)) | 0;
                }
                if (cameraYCenter < ((Bridge.Int.div(this.windowHeight, 2)) | 0)) {
                    cameraYCenter = (Bridge.Int.div(this.windowHeight, 2)) | 0;
                }
                if (cameraYCenter > ((this.overworldMap.GetMapHeightInPixels() - ((Bridge.Int.div(this.windowHeight, 2)) | 0)) | 0)) {
                    cameraYCenter = (this.overworldMap.GetMapHeightInPixels() - ((Bridge.Int.div(this.windowHeight, 2)) | 0)) | 0;
                }

                var translatedDisplayOutput = new TuxPlanetSpeedrunAnyPercentLibrary.TuxPlanetSpeedrunTranslatedDisplayOutput(displayOutput, ((-(((cameraXCenter - ((Bridge.Int.div(this.windowWidth, 2)) | 0)) | 0))) | 0), ((-(((cameraYCenter - ((Bridge.Int.div(this.windowHeight, 2)) | 0)) | 0))) | 0));

                this.overworldMap.Render(translatedDisplayOutput, new (System.Collections.Generic.HashSet$1(TuxPlanetSpeedrunAnyPercentLibrary.Level)).$ctor1(this.completedLevels));

                translatedDisplayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(TuxPlanetSpeedrunAnyPercentLibrary.GameImage.TuxOverworld, System.Array.getCount(this.path, System.Tuple$2(System.Int32,System.Int32)) > 0 ? Bridge.Int.mul(((((Bridge.Int.div(this.elapsedMicros, 200000)) | 0)) % 4), 14) : 0, 0, 14, 17, (((this.tuxXMibi >> 10) - 21) | 0), (((((this.tuxYMibi >> 10) - 25) | 0) + 15) | 0), 0, 384);
            },
            Serialize: function (list) {
                var $t, $t1;
                list.AddInt(this.windowWidth);
                list.AddInt(this.windowHeight);

                list.AddInt(this.tuxXIndex);
                list.AddInt(this.tuxYIndex);
                list.AddInt(this.tuxXMibi);
                list.AddInt(this.tuxYMibi);

                list.AddInt(this.elapsedMicros);

                list.AddIntSet(new (System.Collections.Generic.HashSet$1(System.Int32)).$ctor1(System.Linq.Enumerable.from(this.completedLevels).select(function (x) {
                        return TuxPlanetSpeedrunAnyPercentLibrary.LevelUtil.ToSerializableInt(x);
                    })));

                list.AddString(this.overworldMap.RngSeed);

                list.AddInt(System.Array.getCount(this.path, System.Tuple$2(System.Int32,System.Int32)));

                $t = Bridge.getEnumerator(this.path, System.Tuple$2(System.Int32,System.Int32));
                try {
                    while ($t.moveNext()) {
                        var x = $t.Current;
                        list.AddInt(x.Item1);
                        list.AddInt(x.Item2);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }

                list.AddInt(this.reachableTiles.Count);

                $t1 = Bridge.getEnumerator(this.reachableTiles);
                try {
                    while ($t1.moveNext()) {
                        var x1 = $t1.Current;
                        list.AddInt(x1.Item1);
                        list.AddInt(x1.Item2);
                    }
                } finally {
                    if (Bridge.is($t1, System.IDisposable)) {
                        $t1.System$IDisposable$Dispose();
                    }
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.Overworld.Result", {
        $kind: "nested class",
        fields: {
            Overworld: null,
            SelectedLevel: null
        },
        ctors: {
            ctor: function (overworld, selectedLevel) {
                this.$initialize();
                this.Overworld = overworld;
                this.SelectedLevel = selectedLevel;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap", {
        statics: {
            methods: {
                GetWaterLevels: function () {
                    return function (_o1) {
                            _o1.add(TuxPlanetSpeedrunAnyPercentLibrary.Level.Level8);
                            return _o1;
                        }(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Level)).ctor());
                },
                GetMountainLevels: function () {
                    return function (_o1) {
                            _o1.add(TuxPlanetSpeedrunAnyPercentLibrary.Level.Level4);
                            _o1.add(TuxPlanetSpeedrunAnyPercentLibrary.Level.Level7);
                            return _o1;
                        }(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Level)).ctor());
                },
                GetFortressLevels: function () {
                    return function (_o1) {
                            _o1.add(TuxPlanetSpeedrunAnyPercentLibrary.Level.Level10);
                            return _o1;
                        }(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Level)).ctor());
                },
                GenerateOverworldGameMap: function (windowWidth, windowHeight, random) {
                    var tilemap = TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMapGenerator.GenerateOverworldGameMapTileArray(windowWidth, windowHeight, TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.GetWaterLevels(), TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.GetMountainLevels(), TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.GetFortressLevels(), random);

                    return new TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap(tilemap);
                }
            }
        },
        fields: {
            Tilemap: null,
            StartingLocation: null
        },
        ctors: {
            ctor: function (tilemap) {
                var $t, $t1;
                this.$initialize();
                var list = new (System.Collections.Generic.List$1(System.Collections.Generic.IReadOnlyList$1(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile))).ctor();

                for (var i = 0; i < tilemap.length; i = (i + 1) | 0) {
                    list.add(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile)).$ctor1(tilemap[System.Array.index(i, tilemap)]));
                }

                this.Tilemap = list;
                this.StartingLocation = null;

                for (var i1 = 0; i1 < tilemap.length; i1 = (i1 + 1) | 0) {
                    for (var j = 0; j < tilemap[System.Array.index(i1, tilemap)].length; j = (j + 1) | 0) {
                        if (($t = tilemap[System.Array.index(i1, tilemap)])[System.Array.index(j, $t)].Type === TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.TileType.Level && System.Nullable.getValue(($t1 = tilemap[System.Array.index(i1, tilemap)])[System.Array.index(j, $t1)].Level) === TuxPlanetSpeedrunAnyPercentLibrary.Level.Level1) {
                            this.StartingLocation = { Item1: i1, Item2: j };
                            break;
                        }
                    }

                    if (this.StartingLocation != null) {
                        break;
                    }
                }

                if (this.StartingLocation == null) {
                    throw new System.Exception();
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile", {
        $kind: "nested class",
        fields: {
            Type: 0,
            Level: null
        },
        ctors: {
            ctor: function (type, level) {
                this.$initialize();
                this.Type = type;
                this.Level = level;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.TileType", {
        $kind: "nested enum",
        statics: {
            fields: {
                Path: 0,
                Level: 1,
                NonPath: 2
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMapGenerator", {
        statics: {
            methods: {
                GenerateOverworldGameMapTileArray: function (windowWidth, windowHeight, waterLevels, mountainLevels, fortressLevels, random) {
                    var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12;
                    var level1Index = 0;
                    var level2Index = (((level1Index + 10) | 0) + random.DTLibrary$IDTRandom$NextInt(4)) | 0;
                    var level3Index = (((level2Index + 10) | 0) + random.DTLibrary$IDTRandom$NextInt(4)) | 0;
                    var level4Index = (((level3Index + 10) | 0) + random.DTLibrary$IDTRandom$NextInt(4)) | 0;
                    var level5Index = (((level4Index + 10) | 0) + random.DTLibrary$IDTRandom$NextInt(4)) | 0;
                    var level6Index = (((level5Index + 10) | 0) + random.DTLibrary$IDTRandom$NextInt(4)) | 0;
                    var level7Index = (((level6Index + 10) | 0) + random.DTLibrary$IDTRandom$NextInt(4)) | 0;
                    var level8Index = (((level7Index + 10) | 0) + random.DTLibrary$IDTRandom$NextInt(4)) | 0;
                    var level9Index = (((level8Index + 10) | 0) + random.DTLibrary$IDTRandom$NextInt(4)) | 0;
                    var level10Index = (((level9Index + 10) | 0) + random.DTLibrary$IDTRandom$NextInt(4)) | 0;

                    var pathLength = (level10Index + 1) | 0;

                    var levelToPathIndexMapping = new (System.Collections.Generic.Dictionary$2(TuxPlanetSpeedrunAnyPercentLibrary.Level,System.Int32))();
                    levelToPathIndexMapping.set(TuxPlanetSpeedrunAnyPercentLibrary.Level.Level1, level1Index);
                    levelToPathIndexMapping.set(TuxPlanetSpeedrunAnyPercentLibrary.Level.Level2, level2Index);
                    levelToPathIndexMapping.set(TuxPlanetSpeedrunAnyPercentLibrary.Level.Level3, level3Index);
                    levelToPathIndexMapping.set(TuxPlanetSpeedrunAnyPercentLibrary.Level.Level4, level4Index);
                    levelToPathIndexMapping.set(TuxPlanetSpeedrunAnyPercentLibrary.Level.Level5, level5Index);
                    levelToPathIndexMapping.set(TuxPlanetSpeedrunAnyPercentLibrary.Level.Level6, level6Index);
                    levelToPathIndexMapping.set(TuxPlanetSpeedrunAnyPercentLibrary.Level.Level7, level7Index);
                    levelToPathIndexMapping.set(TuxPlanetSpeedrunAnyPercentLibrary.Level.Level8, level8Index);
                    levelToPathIndexMapping.set(TuxPlanetSpeedrunAnyPercentLibrary.Level.Level9, level9Index);
                    levelToPathIndexMapping.set(TuxPlanetSpeedrunAnyPercentLibrary.Level.Level10, level10Index);

                    var path = TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMapGenerator.GeneratePath(pathLength, levelToPathIndexMapping, waterLevels, mountainLevels, fortressLevels, random);

                    var minX = null;
                    var minY = null;

                    $t = Bridge.getEnumerator(path);
                    try {
                        while ($t.moveNext()) {
                            var tile = $t.Current;
                            if (minX == null || System.Nullable.getValue(minX) > tile.Item1) {
                                minX = tile.Item1;
                            }
                            if (minY == null || System.Nullable.getValue(minY) > tile.Item2) {
                                minY = tile.Item2;
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    var padding = 2;

                    path = System.Linq.Enumerable.from(path).select(function (tile1) {
                            return { Item1: ((((tile1.Item1 - System.Nullable.getValue(minX)) | 0) + padding) | 0), Item2: ((((tile1.Item2 - System.Nullable.getValue(minY)) | 0) + padding) | 0) };
                        }).toList(System.Tuple$2(System.Int32,System.Int32));

                    var numberOfColumns = Math.max(((((System.Linq.Enumerable.from(path).select(function (tile1) {
                            return tile1.Item1;
                        }).max() + 1) | 0) + padding) | 0), ((((Bridge.Int.div(windowWidth, TuxPlanetSpeedrunAnyPercentLibrary.OverworldMap.TILE_WIDTH_IN_PIXELS)) | 0) + 1) | 0));
                    var numberOfRows = Math.max(((((System.Linq.Enumerable.from(path).select(function (tile1) {
                            return tile1.Item2;
                        }).max() + 1) | 0) + padding) | 0), ((((Bridge.Int.div(windowHeight, TuxPlanetSpeedrunAnyPercentLibrary.OverworldMap.TILE_HEIGHT_IN_PIXELS)) | 0) + 1) | 0));

                    var tilemap = System.Array.init(numberOfColumns, null, System.Array.type(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile));

                    for (var i = 0; i < tilemap.length; i = (i + 1) | 0) {
                        tilemap[System.Array.index(i, tilemap)] = System.Array.init(numberOfRows, null, TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile);

                        for (var j = 0; j < tilemap[System.Array.index(i, tilemap)].length; j = (j + 1) | 0) {
                            ($t1 = tilemap[System.Array.index(i, tilemap)])[System.Array.index(j, $t1)] = new TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.TileType.NonPath, null);
                        }
                    }

                    for (var i1 = 0; i1 < path.Count; i1 = (i1 + 1) | 0) {
                        ($t2 = tilemap[System.Array.index(path.getItem(i1).Item1, tilemap)])[System.Array.index(path.getItem(i1).Item2, $t2)] = new TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.TileType.Path, null);
                    }

                    ($t3 = tilemap[System.Array.index(path.getItem(level1Index).Item1, tilemap)])[System.Array.index(path.getItem(level1Index).Item2, $t3)] = new TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.TileType.Level, TuxPlanetSpeedrunAnyPercentLibrary.Level.Level1);
                    ($t4 = tilemap[System.Array.index(path.getItem(level2Index).Item1, tilemap)])[System.Array.index(path.getItem(level2Index).Item2, $t4)] = new TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.TileType.Level, TuxPlanetSpeedrunAnyPercentLibrary.Level.Level2);
                    ($t5 = tilemap[System.Array.index(path.getItem(level3Index).Item1, tilemap)])[System.Array.index(path.getItem(level3Index).Item2, $t5)] = new TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.TileType.Level, TuxPlanetSpeedrunAnyPercentLibrary.Level.Level3);
                    ($t6 = tilemap[System.Array.index(path.getItem(level4Index).Item1, tilemap)])[System.Array.index(path.getItem(level4Index).Item2, $t6)] = new TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.TileType.Level, TuxPlanetSpeedrunAnyPercentLibrary.Level.Level4);
                    ($t7 = tilemap[System.Array.index(path.getItem(level5Index).Item1, tilemap)])[System.Array.index(path.getItem(level5Index).Item2, $t7)] = new TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.TileType.Level, TuxPlanetSpeedrunAnyPercentLibrary.Level.Level5);
                    ($t8 = tilemap[System.Array.index(path.getItem(level6Index).Item1, tilemap)])[System.Array.index(path.getItem(level6Index).Item2, $t8)] = new TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.TileType.Level, TuxPlanetSpeedrunAnyPercentLibrary.Level.Level6);
                    ($t9 = tilemap[System.Array.index(path.getItem(level7Index).Item1, tilemap)])[System.Array.index(path.getItem(level7Index).Item2, $t9)] = new TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.TileType.Level, TuxPlanetSpeedrunAnyPercentLibrary.Level.Level7);
                    ($t10 = tilemap[System.Array.index(path.getItem(level8Index).Item1, tilemap)])[System.Array.index(path.getItem(level8Index).Item2, $t10)] = new TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.TileType.Level, TuxPlanetSpeedrunAnyPercentLibrary.Level.Level8);
                    ($t11 = tilemap[System.Array.index(path.getItem(level9Index).Item1, tilemap)])[System.Array.index(path.getItem(level9Index).Item2, $t11)] = new TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.TileType.Level, TuxPlanetSpeedrunAnyPercentLibrary.Level.Level9);
                    ($t12 = tilemap[System.Array.index(path.getItem(level10Index).Item1, tilemap)])[System.Array.index(path.getItem(level10Index).Item2, $t12)] = new TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.TileType.Level, TuxPlanetSpeedrunAnyPercentLibrary.Level.Level10);

                    return tilemap;
                },
                GeneratePath: function (pathLength, levelToPathIndexMapping, waterLevels, mountainLevels, fortressLevels, random) {
                    var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8;
                    var indexesOfSpecialLevels = new (System.Collections.Generic.HashSet$1(System.Int32)).ctor();
                    var indexesOfMountainLevels = new (System.Collections.Generic.List$1(System.Int32)).ctor();

                    $t = Bridge.getEnumerator(waterLevels, TuxPlanetSpeedrunAnyPercentLibrary.Level);
                    try {
                        while ($t.moveNext()) {
                            var waterLevel = $t.Current;
                            indexesOfSpecialLevels.add(levelToPathIndexMapping.get(waterLevel));
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                    $t1 = Bridge.getEnumerator(mountainLevels, TuxPlanetSpeedrunAnyPercentLibrary.Level);
                    try {
                        while ($t1.moveNext()) {
                            var mountainLevel = $t1.Current;
                            indexesOfSpecialLevels.add(levelToPathIndexMapping.get(mountainLevel));
                            indexesOfMountainLevels.add(levelToPathIndexMapping.get(mountainLevel));
                        }
                    } finally {
                        if (Bridge.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$Dispose();
                        }
                    }
                    $t2 = Bridge.getEnumerator(fortressLevels, TuxPlanetSpeedrunAnyPercentLibrary.Level);
                    try {
                        while ($t2.moveNext()) {
                            var fortressLevel = $t2.Current;
                            indexesOfSpecialLevels.add(levelToPathIndexMapping.get(fortressLevel));
                        }
                    } finally {
                        if (Bridge.is($t2, System.IDisposable)) {
                            $t2.System$IDisposable$Dispose();
                        }
                    }

                    indexesOfMountainLevels.Sort();

                    var doesPathIndexHaveRestrictions = System.Array.init(pathLength, false, System.Boolean);

                    for (var i = 0; i < pathLength; i = (i + 1) | 0) {
                        doesPathIndexHaveRestrictions[System.Array.index(i, doesPathIndexHaveRestrictions)] = false;
                    }

                    var straightPathIndexes = new (System.Collections.Generic.HashSet$1(System.Int32)).ctor();
                    var mountainPathIndexes = new (System.Collections.Generic.HashSet$1(System.Int32)).ctor();

                    $t3 = Bridge.getEnumerator(waterLevels, TuxPlanetSpeedrunAnyPercentLibrary.Level);
                    try {
                        while ($t3.moveNext()) {
                            var waterLevel1 = $t3.Current;
                            var waterLevelIndex = levelToPathIndexMapping.get(waterLevel1);

                            var relevantIndexes = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                            if (waterLevelIndex >= 3) {
                                relevantIndexes.add(((waterLevelIndex - 3) | 0));
                            }
                            if (waterLevelIndex >= 2) {
                                relevantIndexes.add(((waterLevelIndex - 2) | 0));
                            }
                            if (waterLevelIndex >= 1) {
                                relevantIndexes.add(((waterLevelIndex - 1) | 0));
                            }
                            relevantIndexes.add(waterLevelIndex);
                            if (waterLevelIndex < ((pathLength - 1) | 0)) {
                                relevantIndexes.add(((waterLevelIndex + 1) | 0));
                            }
                            if (waterLevelIndex < ((pathLength - 2) | 0)) {
                                relevantIndexes.add(((waterLevelIndex + 2) | 0));
                            }
                            if (waterLevelIndex < ((pathLength - 3) | 0)) {
                                relevantIndexes.add(((waterLevelIndex + 3) | 0));
                            }

                            if (System.Linq.Enumerable.from(relevantIndexes).all(function (x) {
                                    return !doesPathIndexHaveRestrictions[System.Array.index(x, doesPathIndexHaveRestrictions)];
                                })) {
                                $t4 = Bridge.getEnumerator(relevantIndexes);
                                try {
                                    while ($t4.moveNext()) {
                                        var relevantIndex = $t4.Current;
                                        straightPathIndexes.add(relevantIndex);
                                        doesPathIndexHaveRestrictions[System.Array.index(relevantIndex, doesPathIndexHaveRestrictions)] = true;
                                    }
                                } finally {
                                    if (Bridge.is($t4, System.IDisposable)) {
                                        $t4.System$IDisposable$Dispose();
                                    }
                                }

                                straightPathIndexes.remove(((waterLevelIndex + 1) | 0));
                            }
                        }
                    } finally {
                        if (Bridge.is($t3, System.IDisposable)) {
                            $t3.System$IDisposable$Dispose();
                        }
                    }

                    $t5 = Bridge.getEnumerator(mountainLevels, TuxPlanetSpeedrunAnyPercentLibrary.Level);
                    try {
                        while ($t5.moveNext()) {
                            var mountainLevel1 = $t5.Current;
                            var mountainLevelIndex = levelToPathIndexMapping.get(mountainLevel1);

                            var relevantIndexes1 = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                            if (mountainLevelIndex >= 3) {
                                relevantIndexes1.add(((mountainLevelIndex - 3) | 0));
                            }
                            if (mountainLevelIndex >= 2) {
                                relevantIndexes1.add(((mountainLevelIndex - 2) | 0));
                            }
                            if (mountainLevelIndex >= 1) {
                                relevantIndexes1.add(((mountainLevelIndex - 1) | 0));
                            }
                            relevantIndexes1.add(mountainLevelIndex);
                            if (mountainLevelIndex < ((pathLength - 1) | 0)) {
                                relevantIndexes1.add(((mountainLevelIndex + 1) | 0));
                            }
                            if (mountainLevelIndex < ((pathLength - 2) | 0)) {
                                relevantIndexes1.add(((mountainLevelIndex + 2) | 0));
                            }
                            if (mountainLevelIndex < ((pathLength - 3) | 0)) {
                                relevantIndexes1.add(((mountainLevelIndex + 3) | 0));
                            }

                            if (System.Linq.Enumerable.from(relevantIndexes1).all(function (x) {
                                    return !doesPathIndexHaveRestrictions[System.Array.index(x, doesPathIndexHaveRestrictions)];
                                })) {
                                $t6 = Bridge.getEnumerator(relevantIndexes1);
                                try {
                                    while ($t6.moveNext()) {
                                        var relevantIndex1 = $t6.Current;
                                        mountainPathIndexes.add(relevantIndex1);
                                        doesPathIndexHaveRestrictions[System.Array.index(relevantIndex1, doesPathIndexHaveRestrictions)] = true;
                                    }
                                } finally {
                                    if (Bridge.is($t6, System.IDisposable)) {
                                        $t6.System$IDisposable$Dispose();
                                    }
                                }
                            }
                        }
                    } finally {
                        if (Bridge.is($t5, System.IDisposable)) {
                            $t5.System$IDisposable$Dispose();
                        }
                    }

                    $t7 = Bridge.getEnumerator(fortressLevels, TuxPlanetSpeedrunAnyPercentLibrary.Level);
                    try {
                        while ($t7.moveNext()) {
                            var fortressLevel1 = $t7.Current;
                            var fortressLevelIndex = levelToPathIndexMapping.get(fortressLevel1);

                            var relevantIndexes2 = new (System.Collections.Generic.List$1(System.Int32)).ctor();
                            if (fortressLevelIndex >= 3) {
                                relevantIndexes2.add(((fortressLevelIndex - 3) | 0));
                            }
                            if (fortressLevelIndex >= 2) {
                                relevantIndexes2.add(((fortressLevelIndex - 2) | 0));
                            }
                            if (fortressLevelIndex >= 1) {
                                relevantIndexes2.add(((fortressLevelIndex - 1) | 0));
                            }
                            relevantIndexes2.add(fortressLevelIndex);
                            if (fortressLevelIndex < ((pathLength - 1) | 0)) {
                                relevantIndexes2.add(((fortressLevelIndex + 1) | 0));
                            }
                            if (fortressLevelIndex < ((pathLength - 2) | 0)) {
                                relevantIndexes2.add(((fortressLevelIndex + 2) | 0));
                            }
                            if (fortressLevelIndex < ((pathLength - 3) | 0)) {
                                relevantIndexes2.add(((fortressLevelIndex + 3) | 0));
                            }

                            if (System.Linq.Enumerable.from(relevantIndexes2).all(function (x) {
                                    return !doesPathIndexHaveRestrictions[System.Array.index(x, doesPathIndexHaveRestrictions)];
                                })) {
                                $t8 = Bridge.getEnumerator(relevantIndexes2);
                                try {
                                    while ($t8.moveNext()) {
                                        var relevantIndex2 = $t8.Current;
                                        straightPathIndexes.add(relevantIndex2);
                                        doesPathIndexHaveRestrictions[System.Array.index(relevantIndex2, doesPathIndexHaveRestrictions)] = true;
                                    }
                                } finally {
                                    if (Bridge.is($t8, System.IDisposable)) {
                                        $t8.System$IDisposable$Dispose();
                                    }
                                }

                                straightPathIndexes.remove(((fortressLevelIndex + 1) | 0));
                            }
                        }
                    } finally {
                        if (Bridge.is($t7, System.IDisposable)) {
                            $t7.System$IDisposable$Dispose();
                        }
                    }

                    var path = new (System.Collections.Generic.List$1(System.Tuple$2(System.Int32,System.Int32))).ctor();

                    path.add({ Item1: 0, Item2: 0 });

                    var getPotentialNextSteps = function (previousLocation, currentLocation, i1) {
                        if (straightPathIndexes.contains(i1)) {
                            if (previousLocation == null) {
                                return null;
                            }

                            return function (_o1) {
                                    _o1.add({ Item1: ((currentLocation.Item1 + (((currentLocation.Item1 - previousLocation.Item1) | 0))) | 0), Item2: ((currentLocation.Item2 + (((currentLocation.Item2 - previousLocation.Item2) | 0))) | 0) });
                                    return _o1;
                                }(new (System.Collections.Generic.List$1(System.Tuple$2(System.Int32,System.Int32))).ctor());
                        }

                        if (mountainPathIndexes.contains(i1)) {
                            return function (_o2) {
                                    _o2.add({ Item1: ((currentLocation.Item1 - 1) | 0), Item2: currentLocation.Item2 });
                                    _o2.add({ Item1: ((currentLocation.Item1 + 1) | 0), Item2: currentLocation.Item2 });
                                    return _o2;
                                }(new (System.Collections.Generic.List$1(System.Tuple$2(System.Int32,System.Int32))).ctor());
                        }

                        return null;
                    };

                    var additionalValidationFunc = function (currentPath) {
                        var $t9, $t10;
                        var index = (System.Array.getCount(currentPath, System.Tuple$2(System.Int32,System.Int32)) - 1) | 0;

                        var shouldCheckLevelCollision = indexesOfSpecialLevels.contains(index) || index === ((pathLength - 1) | 0);
                        var shouldCheckMountainAndPathCollision = indexesOfSpecialLevels.contains(index) || index === ((pathLength - 1) | 0) || index % 3 === 0;

                        if (shouldCheckLevelCollision) {
                            var specialLevelLocations = new (System.Collections.Generic.List$1(System.Tuple$2(System.Int32,System.Int32))).ctor();

                            $t9 = Bridge.getEnumerator(indexesOfSpecialLevels);
                            try {
                                while ($t9.moveNext()) {
                                    var s = $t9.Current;
                                    if (s < System.Array.getCount(currentPath, System.Tuple$2(System.Int32,System.Int32))) {
                                        specialLevelLocations.add(System.Array.getItem(currentPath, s, System.Tuple$2(System.Int32,System.Int32)));
                                    }
                                }
                            } finally {
                                if (Bridge.is($t9, System.IDisposable)) {
                                    $t9.System$IDisposable$Dispose();
                                }
                            }

                            for (var i1 = 0; i1 < specialLevelLocations.Count; i1 = (i1 + 1) | 0) {
                                for (var j = (i1 + 1) | 0; j < specialLevelLocations.Count; j = (j + 1) | 0) {
                                    var levelA = specialLevelLocations.getItem(i1);
                                    var levelB = specialLevelLocations.getItem(j);

                                    if (((Math.abs(((levelA.Item1 - levelB.Item1) | 0)) + Math.abs(((levelA.Item2 - levelB.Item2) | 0))) | 0) <= 6) {
                                        return false;
                                    }
                                }
                            }
                        }

                        if (shouldCheckMountainAndPathCollision) {
                            var pathSet = new (System.Collections.Generic.HashSet$1(System.Tuple$2(System.Int32,System.Int32))).$ctor2(currentPath, new DTLibrary.IntTupleEqualityComparer());

                            $t10 = Bridge.getEnumerator(indexesOfMountainLevels);
                            try {
                                while ($t10.moveNext()) {
                                    var mountainLevelIndex1 = $t10.Current;
                                    if (mountainLevelIndex1 < System.Array.getCount(currentPath, System.Tuple$2(System.Int32,System.Int32))) {
                                        var mountainLevelLocation = System.Array.getItem(currentPath, mountainLevelIndex1, System.Tuple$2(System.Int32,System.Int32));

                                        if (pathSet.contains({ Item1: ((mountainLevelLocation.Item1 - 1) | 0), Item2: ((mountainLevelLocation.Item2 + 2) | 0) }) || pathSet.contains({ Item1: mountainLevelLocation.Item1, Item2: ((mountainLevelLocation.Item2 + 2) | 0) }) || pathSet.contains({ Item1: ((mountainLevelLocation.Item1 + 1) | 0), Item2: ((mountainLevelLocation.Item2 + 2) | 0) })) {
                                            return false;
                                        }
                                    }
                                }
                            } finally {
                                if (Bridge.is($t10, System.IDisposable)) {
                                    $t10.System$IDisposable$Dispose();
                                }
                            }
                        }

                        return true;
                    };

                    var returnVal;

                    var numTries = 0;
                    while (true) {
                        try {
                            returnVal = TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMapGenerator.GeneratePathHelper(path, getPotentialNextSteps, additionalValidationFunc, pathLength, new TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMapGenerator.BacktrackCounter(5000), random);
                            break;
                        } catch ($e1) {
                            $e1 = System.Exception.create($e1);
                            if (Bridge.is($e1, TuxPlanetSpeedrunAnyPercentLibrary.MapGenerationFailureException)) {
                                numTries = (numTries + 1) | 0;
                            } else {
                                throw $e1;
                            }
                        }

                        if (numTries === 10) {
                            returnVal = TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMapGenerator.GeneratePathHelper(path, function (previousLocation, currentLocation, i1) {
                                return function (_o3) {
                                        _o3.add({ Item1: ((currentLocation.Item1 + 1) | 0), Item2: currentLocation.Item2 });
                                        return _o3;
                                    }(new (System.Collections.Generic.List$1(System.Tuple$2(System.Int32,System.Int32))).ctor());
                            }, additionalValidationFunc, pathLength, new TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMapGenerator.BacktrackCounter(null), random);
                            break;
                        }
                    }

                    return new (System.Collections.Generic.List$1(System.Tuple$2(System.Int32,System.Int32))).$ctor1(returnVal);
                },
                GeneratePathHelper: function (path, getPotentialNextSteps, additionalValidationFunc, pathLength, backtrackCounter, random) {
                    var $t, $t1;
                    if (System.Array.getCount(path, System.Tuple$2(System.Int32,System.Int32)) === pathLength) {
                        return new (System.Collections.Generic.List$1(System.Tuple$2(System.Int32,System.Int32))).$ctor1(path);
                    }

                    var occupiedSpaces = new (System.Collections.Generic.HashSet$1(System.Tuple$2(System.Int32,System.Int32))).$ctor2(path, new DTLibrary.IntTupleEqualityComparer());

                    var currentLocation = System.Array.getItem(path, ((System.Array.getCount(path, System.Tuple$2(System.Int32,System.Int32)) - 1) | 0), System.Tuple$2(System.Int32,System.Int32));
                    var previousLocation = System.Array.getCount(path, System.Tuple$2(System.Int32,System.Int32)) === 1 ? null : System.Array.getItem(path, ((System.Array.getCount(path, System.Tuple$2(System.Int32,System.Int32)) - 2) | 0), System.Tuple$2(System.Int32,System.Int32));

                    var potentialNextSteps = null;

                    if (!Bridge.staticEquals(getPotentialNextSteps, null)) {
                        potentialNextSteps = getPotentialNextSteps(previousLocation, currentLocation, System.Array.getCount(path, System.Tuple$2(System.Int32,System.Int32)));
                    }

                    if (potentialNextSteps == null) {
                        potentialNextSteps = function (_o1) {
                                _o1.add({ Item1: ((currentLocation.Item1 - 1) | 0), Item2: currentLocation.Item2 });
                                _o1.add({ Item1: ((currentLocation.Item1 + 1) | 0), Item2: currentLocation.Item2 });
                                _o1.add({ Item1: currentLocation.Item1, Item2: ((currentLocation.Item2 - 1) | 0) });
                                _o1.add({ Item1: currentLocation.Item1, Item2: ((currentLocation.Item2 + 1) | 0) });
                                return _o1;
                            }(new (System.Collections.Generic.List$1(System.Tuple$2(System.Int32,System.Int32))).ctor());
                    }
                    DTLibrary.ListUtil.Shuffle(System.Tuple$2(System.Int32,System.Int32), potentialNextSteps, random);

                    $t = Bridge.getEnumerator(potentialNextSteps);
                    try {
                        while ($t.moveNext()) {
                            var potentialNextStep = { v : $t.Current };
                            if (occupiedSpaces.contains(potentialNextStep.v)) {
                                continue;
                            }

                            var adjacentSpaces = (function ($me, potentialNextStep) {
                                    return function (_o2) {
                                        _o2.add({ Item1: ((potentialNextStep.v.Item1 - 1) | 0), Item2: ((potentialNextStep.v.Item2 - 1) | 0) });
                                        _o2.add({ Item1: ((potentialNextStep.v.Item1 - 1) | 0), Item2: potentialNextStep.v.Item2 });
                                        _o2.add({ Item1: ((potentialNextStep.v.Item1 - 1) | 0), Item2: ((potentialNextStep.v.Item2 + 1) | 0) });
                                        _o2.add({ Item1: potentialNextStep.v.Item1, Item2: ((potentialNextStep.v.Item2 - 1) | 0) });
                                        _o2.add({ Item1: potentialNextStep.v.Item1, Item2: ((potentialNextStep.v.Item2 + 1) | 0) });
                                        _o2.add({ Item1: ((potentialNextStep.v.Item1 + 1) | 0), Item2: ((potentialNextStep.v.Item2 - 1) | 0) });
                                        _o2.add({ Item1: ((potentialNextStep.v.Item1 + 1) | 0), Item2: potentialNextStep.v.Item2 });
                                        _o2.add({ Item1: ((potentialNextStep.v.Item1 + 1) | 0), Item2: ((potentialNextStep.v.Item2 + 1) | 0) });
                                        return _o2;
                                    };
                                })(this, potentialNextStep)(new (System.Collections.Generic.List$1(System.Tuple$2(System.Int32,System.Int32))).ctor());

                            var isTooClose = false;

                            $t1 = Bridge.getEnumerator(adjacentSpaces);
                            try {
                                while ($t1.moveNext()) {
                                    var adjacentSpace = $t1.Current;
                                    if (occupiedSpaces.contains(adjacentSpace)) {
                                        if (!Bridge.objectEquals(adjacentSpace, System.Array.getItem(path, ((System.Array.getCount(path, System.Tuple$2(System.Int32,System.Int32)) - 1) | 0), System.Tuple$2(System.Int32,System.Int32)))) {
                                            if (System.Array.getCount(path, System.Tuple$2(System.Int32,System.Int32)) > 1 && !Bridge.objectEquals(adjacentSpace, System.Array.getItem(path, ((System.Array.getCount(path, System.Tuple$2(System.Int32,System.Int32)) - 2) | 0), System.Tuple$2(System.Int32,System.Int32)))) {
                                                isTooClose = true;
                                                break;
                                            }
                                        }
                                    }
                                }
                            } finally {
                                if (Bridge.is($t1, System.IDisposable)) {
                                    $t1.System$IDisposable$Dispose();
                                }
                            }

                            if (isTooClose) {
                                continue;
                            }

                            var newList = new (System.Collections.Generic.List$1(System.Tuple$2(System.Int32,System.Int32))).$ctor1(path);
                            newList.add(potentialNextStep.v);

                            if (!additionalValidationFunc(newList)) {
                                continue;
                            }

                            newList = TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMapGenerator.GeneratePathHelper(newList, getPotentialNextSteps, additionalValidationFunc, pathLength, backtrackCounter, random);

                            if (newList != null) {
                                return newList;
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    backtrackCounter.Increment();
                    return null;
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMapGenerator.BacktrackCounter", {
        $kind: "nested class",
        fields: {
            maxNumBacktracks: null,
            numBacktracks: 0
        },
        ctors: {
            ctor: function (maxNumBacktracks) {
                this.$initialize();
                this.maxNumBacktracks = maxNumBacktracks;
                this.numBacktracks = 0;
            }
        },
        methods: {
            Increment: function () {
                this.numBacktracks = (this.numBacktracks + 1) | 0;

                if (this.maxNumBacktracks != null && this.numBacktracks > System.Nullable.getValue(this.maxNumBacktracks)) {
                    throw new TuxPlanetSpeedrunAnyPercentLibrary.MapGenerationFailureException();
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.OverworldMap", {
        statics: {
            fields: {
                TILE_WIDTH_IN_PIXELS: 0,
                TILE_HEIGHT_IN_PIXELS: 0
            },
            ctors: {
                init: function () {
                    this.TILE_WIDTH_IN_PIXELS = 48;
                    this.TILE_HEIGHT_IN_PIXELS = 48;
                }
            },
            methods: {
                GenerateOverworldMap: function (windowWidth, windowHeight, rngSeed) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.OverworldMap(windowWidth, windowHeight, rngSeed);
                }
            }
        },
        fields: {
            OverworldGameMap: null,
            foregroundTilemap: null,
            backgroundTilemap: null,
            levelsWithCustomSprite: null,
            RngSeed: null
        },
        props: {
            StartingLocation: {
                get: function () {
                    return this.OverworldGameMap.StartingLocation;
                }
            }
        },
        ctors: {
            ctor: function (windowWidth, windowHeight, rngSeed) {
                this.$initialize();
                var random = new DTLibrary.DTDeterministicRandom.ctor();
                random.DeserializeFromString(rngSeed);

                this.OverworldGameMap = TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.GenerateOverworldGameMap(windowWidth, windowHeight, random);

                var result = TuxPlanetSpeedrunAnyPercentLibrary.OverworldMapGenerator.GenerateSpriteTilemap(this.OverworldGameMap, TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.GetWaterLevels(), TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.GetMountainLevels(), TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.GetFortressLevels(), random);

                this.foregroundTilemap = TuxPlanetSpeedrunAnyPercentLibrary.ArrayUtil.ShallowCopyTArray(TuxPlanetSpeedrunAnyPercentLibrary.Sprite, result.ForegroundTiles);
                this.backgroundTilemap = TuxPlanetSpeedrunAnyPercentLibrary.ArrayUtil.ShallowCopyTArray(TuxPlanetSpeedrunAnyPercentLibrary.Sprite, result.BackgroundTiles);
                this.levelsWithCustomSprite = new (System.Collections.Generic.HashSet$1(TuxPlanetSpeedrunAnyPercentLibrary.Level)).$ctor1(result.LevelsWithCustomSprite);

                this.RngSeed = rngSeed;
            }
        },
        methods: {
            GetTileType: function (i, j) {
                if (i < 0 || i >= System.Array.getCount(this.OverworldGameMap.Tilemap, System.Collections.Generic.IReadOnlyList$1(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile))) {
                    return TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.TileType.NonPath;
                }

                if (j < 0 || j >= System.Array.getCount(System.Array.getItem(this.OverworldGameMap.Tilemap, i, System.Collections.Generic.IReadOnlyList$1(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile)), TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile)) {
                    return TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.TileType.NonPath;
                }

                return System.Array.getItem(System.Array.getItem(this.OverworldGameMap.Tilemap, i, System.Collections.Generic.IReadOnlyList$1(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile)), j, TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile).Type;
            },
            GetLevel: function (i, j) {
                if (i < 0 || i >= System.Array.getCount(this.OverworldGameMap.Tilemap, System.Collections.Generic.IReadOnlyList$1(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile))) {
                    return null;
                }

                if (j < 0 || j >= System.Array.getCount(System.Array.getItem(this.OverworldGameMap.Tilemap, i, System.Collections.Generic.IReadOnlyList$1(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile)), TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile)) {
                    return null;
                }

                return System.Array.getItem(System.Array.getItem(this.OverworldGameMap.Tilemap, i, System.Collections.Generic.IReadOnlyList$1(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile)), j, TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile).Level;
            },
            GetMapWidthInPixels: function () {
                return Bridge.Int.mul(this.foregroundTilemap.length, TuxPlanetSpeedrunAnyPercentLibrary.OverworldMap.TILE_WIDTH_IN_PIXELS);
            },
            GetMapHeightInPixels: function () {
                return Bridge.Int.mul(this.foregroundTilemap[System.Array.index(0, this.foregroundTilemap)].length, TuxPlanetSpeedrunAnyPercentLibrary.OverworldMap.TILE_HEIGHT_IN_PIXELS);
            },
            Render: function (displayOutput, completedLevels) {
                var $t, $t1;
                var renderX = 0;

                for (var i = 0; i < this.foregroundTilemap.length; i = (i + 1) | 0) {
                    var renderY = 0;

                    for (var j = 0; j < this.foregroundTilemap[System.Array.index(i, this.foregroundTilemap)].length; j = (j + 1) | 0) {
                        var background = ($t = this.backgroundTilemap[System.Array.index(i, this.backgroundTilemap)])[System.Array.index(j, $t)];

                        if (background != null) {
                            displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(background.Image, background.X, background.Y, background.Width, background.Height, renderX, renderY, 0, background.ScalingFactorScaled);
                        }

                        var foreground = ($t1 = this.foregroundTilemap[System.Array.index(i, this.foregroundTilemap)])[System.Array.index(j, $t1)];

                        if (foreground != null) {
                            displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(foreground.Image, foreground.X, foreground.Y, foreground.Width, foreground.Height, renderX, renderY, 0, foreground.ScalingFactorScaled);
                        }

                        if (System.Array.getItem(System.Array.getItem(this.OverworldGameMap.Tilemap, i, System.Collections.Generic.IReadOnlyList$1(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile)), j, TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile).Type === TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.TileType.Level && !this.levelsWithCustomSprite.contains(System.Nullable.getValue(System.Array.getItem(System.Array.getItem(this.OverworldGameMap.Tilemap, i, System.Collections.Generic.IReadOnlyList$1(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile)), j, TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile).Level))) {
                            var hasCompletedLevel = completedLevels.contains(System.Nullable.getValue(System.Array.getItem(System.Array.getItem(this.OverworldGameMap.Tilemap, i, System.Collections.Generic.IReadOnlyList$1(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile)), j, TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile).Level));

                            displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(TuxPlanetSpeedrunAnyPercentLibrary.GameImage.LevelIcons, hasCompletedLevel ? 16 : 0, 0, 16, 16, renderX, renderY, 0, 384);
                        }

                        renderY = (renderY + TuxPlanetSpeedrunAnyPercentLibrary.OverworldMap.TILE_HEIGHT_IN_PIXELS) | 0;
                    }

                    renderX = (renderX + TuxPlanetSpeedrunAnyPercentLibrary.OverworldMap.TILE_WIDTH_IN_PIXELS) | 0;
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.OverworldMapGenerator", {
        statics: {
            methods: {
                GenerateSpriteTilemap: function (map, waterLevels, mountainLevels, fortressLevels, random) {
                    var $t, $t1, $t2, $t3, $t4, $t5;
                    var length1 = System.Array.getCount(map.Tilemap, System.Collections.Generic.IReadOnlyList$1(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile));
                    var length2 = System.Array.getCount(System.Array.getItem(map.Tilemap, 0, System.Collections.Generic.IReadOnlyList$1(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile)), TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile);

                    var foregroundTilemap = System.Array.init(length1, null, System.Array.type(TuxPlanetSpeedrunAnyPercentLibrary.Sprite));
                    var isWaterArray = System.Array.init(length1, null, System.Array.type(System.Nullable$1(System.Boolean)));
                    var hasCustomForegroundSpriteArray = System.Array.init(length1, null, System.Array.type(System.Boolean));

                    for (var i = 0; i < length1; i = (i + 1) | 0) {
                        foregroundTilemap[System.Array.index(i, foregroundTilemap)] = System.Array.init(length2, null, TuxPlanetSpeedrunAnyPercentLibrary.Sprite);
                        isWaterArray[System.Array.index(i, isWaterArray)] = System.Array.init(length2, null, System.Nullable$1(System.Boolean));
                        hasCustomForegroundSpriteArray[System.Array.index(i, hasCustomForegroundSpriteArray)] = System.Array.init(length2, false, System.Boolean);

                        for (var j = 0; j < length2; j = (j + 1) | 0) {
                            ($t = foregroundTilemap[System.Array.index(i, foregroundTilemap)])[System.Array.index(j, $t)] = null;

                            if (System.Array.getItem(System.Array.getItem(map.Tilemap, i, System.Collections.Generic.IReadOnlyList$1(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile)), j, TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile).Type !== TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.TileType.NonPath) {
                                ($t1 = isWaterArray[System.Array.index(i, isWaterArray)])[System.Array.index(j, $t1)] = false;
                            } else {
                                ($t2 = isWaterArray[System.Array.index(i, isWaterArray)])[System.Array.index(j, $t2)] = null;
                            }

                            ($t3 = hasCustomForegroundSpriteArray[System.Array.index(i, hasCustomForegroundSpriteArray)])[System.Array.index(j, $t3)] = false;
                        }
                    }

                    TuxPlanetSpeedrunAnyPercentLibrary.OverworldMapGenerator.AddPathToForegroundTilemap(map, foregroundTilemap);

                    var levelsWithCustomSprite = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Level)).ctor();

                    var levelLocations = TuxPlanetSpeedrunAnyPercentLibrary.OverworldMapGenerator.GetLevelLocations(map);

                    TuxPlanetSpeedrunAnyPercentLibrary.OverworldMapGenerator.MarkWaterLevels(isWaterArray, waterLevels, levelLocations);

                    TuxPlanetSpeedrunAnyPercentLibrary.OverworldMapGenerator.MarkMountainLevels(map, isWaterArray, hasCustomForegroundSpriteArray, foregroundTilemap, levelsWithCustomSprite, mountainLevels, levelLocations);

                    TuxPlanetSpeedrunAnyPercentLibrary.OverworldMapGenerator.MarkFortressLevels(map, isWaterArray, hasCustomForegroundSpriteArray, foregroundTilemap, levelsWithCustomSprite, fortressLevels, levelLocations);

                    TuxPlanetSpeedrunAnyPercentLibrary.OverworldMapGenerator.FillOutWaterArray(isWaterArray, random);

                    var nonNullIsWaterArray = System.Array.init(length1, null, System.Array.type(System.Boolean));
                    for (var i1 = 0; i1 < length1; i1 = (i1 + 1) | 0) {
                        nonNullIsWaterArray[System.Array.index(i1, nonNullIsWaterArray)] = System.Array.init(length2, false, System.Boolean);
                        for (var j1 = 0; j1 < length2; j1 = (j1 + 1) | 0) {
                            ($t4 = nonNullIsWaterArray[System.Array.index(i1, nonNullIsWaterArray)])[System.Array.index(j1, $t4)] = System.Nullable.getValue(($t5 = isWaterArray[System.Array.index(i1, isWaterArray)])[System.Array.index(j1, $t5)]);
                        }
                    }

                    TuxPlanetSpeedrunAnyPercentLibrary.OverworldMapGenerator.AddScenery(foregroundTilemap, nonNullIsWaterArray, random);

                    return new TuxPlanetSpeedrunAnyPercentLibrary.OverworldMapGenerator.Result(foregroundTilemap, TuxPlanetSpeedrunAnyPercentLibrary.OverworldMapGenerator.GenerateBackgroundTiles(length1, length2, nonNullIsWaterArray, random), levelsWithCustomSprite);
                },
                AddPathToForegroundTilemap: function (map, foregroundTilemap) {
                    var $t;
                    var numColumns = System.Array.getCount(map.Tilemap, System.Collections.Generic.IReadOnlyList$1(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile));
                    var numRows = System.Array.getCount(System.Array.getItem(map.Tilemap, 0, System.Collections.Generic.IReadOnlyList$1(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile)), TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile);

                    for (var i = 0; i < numColumns; i = (i + 1) | 0) {
                        for (var j = 0; j < numRows; j = (j + 1) | 0) {
                            var spriteX;
                            var spriteY;

                            switch (System.Array.getItem(System.Array.getItem(map.Tilemap, i, System.Collections.Generic.IReadOnlyList$1(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile)), j, TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile).Type) {
                                case TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.TileType.Path: 
                                case TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.TileType.Level: 
                                    var pathOnLeft = i > 0 && System.Array.getItem(System.Array.getItem(map.Tilemap, ((i - 1) | 0), System.Collections.Generic.IReadOnlyList$1(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile)), j, TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile).Type !== TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.TileType.NonPath;
                                    var pathOnRight = i < ((numColumns - 1) | 0) && System.Array.getItem(System.Array.getItem(map.Tilemap, ((i + 1) | 0), System.Collections.Generic.IReadOnlyList$1(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile)), j, TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile).Type !== TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.TileType.NonPath;
                                    var pathOnBottom = j > 0 && System.Array.getItem(System.Array.getItem(map.Tilemap, i, System.Collections.Generic.IReadOnlyList$1(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile)), ((j - 1) | 0), TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile).Type !== TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.TileType.NonPath;
                                    var pathOnTop = j < ((numRows - 1) | 0) && System.Array.getItem(System.Array.getItem(map.Tilemap, i, System.Collections.Generic.IReadOnlyList$1(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile)), ((j + 1) | 0), TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile).Type !== TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.TileType.NonPath;
                                    if (!pathOnLeft && !pathOnRight && !pathOnBottom && !pathOnTop) {
                                        spriteX = 2;
                                        spriteY = 3;
                                    } else if (!pathOnLeft && !pathOnRight && !pathOnBottom && pathOnTop) {
                                        spriteX = 0;
                                        spriteY = 8;
                                    } else if (!pathOnLeft && !pathOnRight && pathOnBottom && !pathOnTop) {
                                        spriteX = 0;
                                        spriteY = 7;
                                    } else if (!pathOnLeft && !pathOnRight && pathOnBottom && pathOnTop) {
                                        spriteX = 2;
                                        spriteY = 4;
                                    } else if (!pathOnLeft && pathOnRight && !pathOnBottom && !pathOnTop) {
                                        spriteX = 1;
                                        spriteY = 7;
                                    } else if (!pathOnLeft && pathOnRight && !pathOnBottom && pathOnTop) {
                                        spriteX = 0;
                                        spriteY = 2;
                                    } else if (!pathOnLeft && pathOnRight && pathOnBottom && !pathOnTop) {
                                        spriteX = 0;
                                        spriteY = 0;
                                    } else if (!pathOnLeft && pathOnRight && pathOnBottom && pathOnTop) {
                                        spriteX = 0;
                                        spriteY = 1;
                                    } else if (pathOnLeft && !pathOnRight && !pathOnBottom && !pathOnTop) {
                                        spriteX = 2;
                                        spriteY = 7;
                                    } else if (pathOnLeft && !pathOnRight && !pathOnBottom && pathOnTop) {
                                        spriteX = 2;
                                        spriteY = 2;
                                    } else if (pathOnLeft && !pathOnRight && pathOnBottom && !pathOnTop) {
                                        spriteX = 2;
                                        spriteY = 0;
                                    } else if (pathOnLeft && !pathOnRight && pathOnBottom && pathOnTop) {
                                        spriteX = 2;
                                        spriteY = 1;
                                    } else if (pathOnLeft && pathOnRight && !pathOnBottom && !pathOnTop) {
                                        spriteX = 2;
                                        spriteY = 3;
                                    } else if (pathOnLeft && pathOnRight && !pathOnBottom && pathOnTop) {
                                        spriteX = 1;
                                        spriteY = 2;
                                    } else if (pathOnLeft && pathOnRight && pathOnBottom && !pathOnTop) {
                                        spriteX = 1;
                                        spriteY = 0;
                                    } else if (pathOnLeft && pathOnRight && pathOnBottom && pathOnTop) {
                                        spriteX = 1;
                                        spriteY = 1;
                                    } else {
                                        throw new System.Exception();
                                    }
                                    break;
                                case TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.TileType.NonPath: 
                                    spriteX = null;
                                    spriteY = null;
                                    break;
                                default: 
                                    throw new System.Exception();
                            }

                            if (spriteX != null) {
                                ($t = foregroundTilemap[System.Array.index(i, foregroundTilemap)])[System.Array.index(j, $t)] = new TuxPlanetSpeedrunAnyPercentLibrary.Sprite(TuxPlanetSpeedrunAnyPercentLibrary.GameImage.PathDirt, System.Nullable.getValue(spriteX) << 4, System.Nullable.getValue(spriteY) << 4, 16, 16, 384);
                            }
                        }
                    }
                },
                GetLevelLocations: function (map) {
                    var length1 = System.Array.getCount(map.Tilemap, System.Collections.Generic.IReadOnlyList$1(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile));
                    var length2 = System.Array.getCount(System.Array.getItem(map.Tilemap, 0, System.Collections.Generic.IReadOnlyList$1(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile)), TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile);

                    var levelLocations = new (System.Collections.Generic.Dictionary$2(TuxPlanetSpeedrunAnyPercentLibrary.Level,System.Tuple$2(System.Int32,System.Int32)))();

                    for (var i = 0; i < length1; i = (i + 1) | 0) {
                        for (var j = 0; j < length2; j = (j + 1) | 0) {
                            if (System.Array.getItem(System.Array.getItem(map.Tilemap, i, System.Collections.Generic.IReadOnlyList$1(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile)), j, TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile).Type === TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.TileType.Level) {
                                levelLocations.set(System.Nullable.getValue(System.Array.getItem(System.Array.getItem(map.Tilemap, i, System.Collections.Generic.IReadOnlyList$1(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile)), j, TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile).Level), { Item1: i, Item2: j });
                            }
                        }
                    }

                    return levelLocations;
                },
                MarkWaterLevels: function (isWaterArray, waterLevels, levelLocations) {
                    var $t, $t1, $t2;
                    var length1 = isWaterArray.length;
                    var length2 = isWaterArray[System.Array.index(0, isWaterArray)].length;

                    $t = Bridge.getEnumerator(waterLevels, TuxPlanetSpeedrunAnyPercentLibrary.Level);
                    try {
                        while ($t.moveNext()) {
                            var level = $t.Current;
                            var levelLocation = { v : levelLocations.System$Collections$Generic$IReadOnlyDictionary$2$TuxPlanetSpeedrunAnyPercentLibrary$Level$System$Tuple$2$System$Int32$System$Int32$getItem(level) };

                            var levelAndAdjacentSquares = (function ($me, levelLocation) {
                                    return function (_o1) {
                                        _o1.add({ Item1: ((levelLocation.v.Item1 - 1) | 0), Item2: ((levelLocation.v.Item2 - 1) | 0) });
                                        _o1.add({ Item1: ((levelLocation.v.Item1 - 1) | 0), Item2: levelLocation.v.Item2 });
                                        _o1.add({ Item1: ((levelLocation.v.Item1 - 1) | 0), Item2: ((levelLocation.v.Item2 + 1) | 0) });
                                        _o1.add({ Item1: levelLocation.v.Item1, Item2: ((levelLocation.v.Item2 - 1) | 0) });
                                        _o1.add({ Item1: levelLocation.v.Item1, Item2: levelLocation.v.Item2 });
                                        _o1.add({ Item1: levelLocation.v.Item1, Item2: ((levelLocation.v.Item2 + 1) | 0) });
                                        _o1.add({ Item1: ((levelLocation.v.Item1 + 1) | 0), Item2: ((levelLocation.v.Item2 - 1) | 0) });
                                        _o1.add({ Item1: ((levelLocation.v.Item1 + 1) | 0), Item2: levelLocation.v.Item2 });
                                        _o1.add({ Item1: ((levelLocation.v.Item1 + 1) | 0), Item2: ((levelLocation.v.Item2 + 1) | 0) });
                                        return _o1;
                                    };
                                })(this, levelLocation)(new (System.Collections.Generic.List$1(System.Tuple$2(System.Int32,System.Int32))).ctor());

                            $t1 = Bridge.getEnumerator(levelAndAdjacentSquares);
                            try {
                                while ($t1.moveNext()) {
                                    var square = $t1.Current;
                                    if (square.Item1 >= 0 && square.Item1 < length1 && square.Item2 >= 0 && square.Item2 < length2) {
                                        ($t2 = isWaterArray[System.Array.index(square.Item1, isWaterArray)])[System.Array.index(square.Item2, $t2)] = true;
                                    }
                                }
                            } finally {
                                if (Bridge.is($t1, System.IDisposable)) {
                                    $t1.System$IDisposable$Dispose();
                                }
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                },
                MarkMountainLevels: function (map, isWaterArray, hasCustomForegroundSpriteArray, foregroundTilemap, levelsWithCustomSprite, mountainLevels, levelLocations) {
                    var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14;
                    var length1 = isWaterArray.length;
                    var length2 = isWaterArray[System.Array.index(0, isWaterArray)].length;

                    $t = Bridge.getEnumerator(mountainLevels, TuxPlanetSpeedrunAnyPercentLibrary.Level);
                    try {
                        while ($t.moveNext()) {
                            var level = $t.Current;
                            var levelLocation = { v : levelLocations.System$Collections$Generic$IReadOnlyDictionary$2$TuxPlanetSpeedrunAnyPercentLibrary$Level$System$Tuple$2$System$Int32$System$Int32$getItem(level) };

                            if (((levelLocation.v.Item1 - 1) | 0) >= 0 && ((levelLocation.v.Item1 + 1) | 0) < length1 && ((levelLocation.v.Item2 + 2) | 0) < length2) {
                                var relevantSquares = (function ($me, levelLocation) {
                                        return function (_o1) {
                                            _o1.add({ Item1: ((levelLocation.v.Item1 - 1) | 0), Item2: levelLocation.v.Item2 });
                                            _o1.add({ Item1: ((levelLocation.v.Item1 - 1) | 0), Item2: ((levelLocation.v.Item2 + 1) | 0) });
                                            _o1.add({ Item1: ((levelLocation.v.Item1 - 1) | 0), Item2: ((levelLocation.v.Item2 + 2) | 0) });
                                            _o1.add({ Item1: levelLocation.v.Item1, Item2: levelLocation.v.Item2 });
                                            _o1.add({ Item1: levelLocation.v.Item1, Item2: ((levelLocation.v.Item2 + 1) | 0) });
                                            _o1.add({ Item1: levelLocation.v.Item1, Item2: ((levelLocation.v.Item2 + 2) | 0) });
                                            _o1.add({ Item1: ((levelLocation.v.Item1 + 1) | 0), Item2: levelLocation.v.Item2 });
                                            _o1.add({ Item1: ((levelLocation.v.Item1 + 1) | 0), Item2: ((levelLocation.v.Item2 + 1) | 0) });
                                            _o1.add({ Item1: ((levelLocation.v.Item1 + 1) | 0), Item2: ((levelLocation.v.Item2 + 2) | 0) });
                                            return _o1;
                                        };
                                    })(this, levelLocation)(new (System.Collections.Generic.List$1(System.Tuple$2(System.Int32,System.Int32))).ctor());

                                var isNotInWater = System.Linq.Enumerable.from(relevantSquares).all(function (x) {
                                        var $t1, $t2;
                                        return ($t1 = isWaterArray[System.Array.index(x.Item1, isWaterArray)])[System.Array.index(x.Item2, $t1)] == null || System.Nullable.getValue(($t2 = isWaterArray[System.Array.index(x.Item1, isWaterArray)])[System.Array.index(x.Item2, $t2)]) === false;
                                    });
                                var isNotAlreadyOccupied = System.Linq.Enumerable.from(relevantSquares).all(function (x) {
                                        var $t1;
                                        return ($t1 = hasCustomForegroundSpriteArray[System.Array.index(x.Item1, hasCustomForegroundSpriteArray)])[System.Array.index(x.Item2, $t1)] === false;
                                    });

                                if (isNotInWater && isNotAlreadyOccupied) {
                                    levelsWithCustomSprite.add(level);

                                    $t1 = Bridge.getEnumerator(relevantSquares);
                                    try {
                                        while ($t1.moveNext()) {
                                            var relevantSquare = $t1.Current;
                                            ($t2 = isWaterArray[System.Array.index(relevantSquare.Item1, isWaterArray)])[System.Array.index(relevantSquare.Item2, $t2)] = false;
                                            ($t3 = hasCustomForegroundSpriteArray[System.Array.index(relevantSquare.Item1, hasCustomForegroundSpriteArray)])[System.Array.index(relevantSquare.Item2, $t3)] = true;
                                        }
                                    } finally {
                                        if (Bridge.is($t1, System.IDisposable)) {
                                            $t1.System$IDisposable$Dispose();
                                        }
                                    }

                                    var getMountainSprite = function (x, y) {
                                        return new TuxPlanetSpeedrunAnyPercentLibrary.Sprite(TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Mountains, Bridge.Int.mul(x, 16), Bridge.Int.mul(y, 16), 16, 16, 384);
                                    };

                                    ($t4 = foregroundTilemap[System.Array.index(((levelLocation.v.Item1 - 1) | 0), foregroundTilemap)])[System.Array.index(levelLocation.v.Item2, $t4)] = getMountainSprite(0, 2);
                                    ($t5 = foregroundTilemap[System.Array.index(((levelLocation.v.Item1 - 1) | 0), foregroundTilemap)])[System.Array.index(((levelLocation.v.Item2 + 1) | 0), $t5)] = getMountainSprite(0, 1);
                                    ($t6 = foregroundTilemap[System.Array.index(((levelLocation.v.Item1 - 1) | 0), foregroundTilemap)])[System.Array.index(((levelLocation.v.Item2 + 2) | 0), $t6)] = getMountainSprite(0, 0);
                                    ($t7 = foregroundTilemap[System.Array.index(levelLocation.v.Item1, foregroundTilemap)])[System.Array.index(levelLocation.v.Item2, $t7)] = getMountainSprite(1, 2);
                                    ($t8 = foregroundTilemap[System.Array.index(levelLocation.v.Item1, foregroundTilemap)])[System.Array.index(((levelLocation.v.Item2 + 1) | 0), $t8)] = getMountainSprite(1, 1);
                                    ($t9 = foregroundTilemap[System.Array.index(levelLocation.v.Item1, foregroundTilemap)])[System.Array.index(((levelLocation.v.Item2 + 2) | 0), $t9)] = getMountainSprite(1, 0);
                                    ($t10 = foregroundTilemap[System.Array.index(((levelLocation.v.Item1 + 1) | 0), foregroundTilemap)])[System.Array.index(levelLocation.v.Item2, $t10)] = getMountainSprite(2, 2);
                                    ($t11 = foregroundTilemap[System.Array.index(((levelLocation.v.Item1 + 1) | 0), foregroundTilemap)])[System.Array.index(((levelLocation.v.Item2 + 1) | 0), $t11)] = getMountainSprite(2, 1);
                                    ($t12 = foregroundTilemap[System.Array.index(((levelLocation.v.Item1 + 1) | 0), foregroundTilemap)])[System.Array.index(((levelLocation.v.Item2 + 2) | 0), $t12)] = getMountainSprite(2, 0);

                                    var isPath = function (x, y) {
                                        if (x < 0 || x >= length1 || y < 0 || y >= length2) {
                                            return false;
                                        }
                                        return System.Array.getItem(System.Array.getItem(map.Tilemap, x, System.Collections.Generic.IReadOnlyList$1(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile)), y, TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile).Type !== TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.TileType.NonPath;
                                    };

                                    if (isPath(((levelLocation.v.Item1 - 2) | 0), levelLocation.v.Item2) && isPath(((levelLocation.v.Item1 - 3) | 0), levelLocation.v.Item2) && isPath(((levelLocation.v.Item1 - 1) | 0), levelLocation.v.Item2) && !isPath(((levelLocation.v.Item1 - 2) | 0), ((levelLocation.v.Item2 - 1) | 0)) && !isPath(((levelLocation.v.Item1 - 2) | 0), ((levelLocation.v.Item2 + 1) | 0))) {
                                        ($t13 = foregroundTilemap[System.Array.index(((levelLocation.v.Item1 - 2) | 0), foregroundTilemap)])[System.Array.index(levelLocation.v.Item2, $t13)] = new TuxPlanetSpeedrunAnyPercentLibrary.Sprite(TuxPlanetSpeedrunAnyPercentLibrary.GameImage.PathDirt, 32, 112, 16, 16, 384);
                                    }

                                    if (isPath(((levelLocation.v.Item1 + 2) | 0), levelLocation.v.Item2) && isPath(((levelLocation.v.Item1 + 3) | 0), levelLocation.v.Item2) && isPath(((levelLocation.v.Item1 + 1) | 0), levelLocation.v.Item2) && !isPath(((levelLocation.v.Item1 + 2) | 0), ((levelLocation.v.Item2 - 1) | 0)) && !isPath(((levelLocation.v.Item1 + 2) | 0), ((levelLocation.v.Item2 + 1) | 0))) {
                                        ($t14 = foregroundTilemap[System.Array.index(((levelLocation.v.Item1 + 2) | 0), foregroundTilemap)])[System.Array.index(levelLocation.v.Item2, $t14)] = new TuxPlanetSpeedrunAnyPercentLibrary.Sprite(TuxPlanetSpeedrunAnyPercentLibrary.GameImage.PathDirt, 16, 112, 16, 16, 384);
                                    }
                                }
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                },
                MarkFortressLevels: function (map, isWaterArray, hasCustomForegroundSpriteArray, foregroundTilemap, levelsWithCustomSprite, fortressLevels, levelLocations) {
                    var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14, $t15, $t16;
                    var length1 = isWaterArray.length;
                    var length2 = isWaterArray[System.Array.index(0, isWaterArray)].length;

                    $t = Bridge.getEnumerator(fortressLevels, TuxPlanetSpeedrunAnyPercentLibrary.Level);
                    try {
                        while ($t.moveNext()) {
                            var level = $t.Current;
                            var levelLocation = { v : levelLocations.System$Collections$Generic$IReadOnlyDictionary$2$TuxPlanetSpeedrunAnyPercentLibrary$Level$System$Tuple$2$System$Int32$System$Int32$getItem(level) };

                            if (((levelLocation.v.Item1 - 1) | 0) >= 0 && ((levelLocation.v.Item1 + 1) | 0) < length1 && ((levelLocation.v.Item2 - 1) | 0) >= 0 && ((levelLocation.v.Item2 + 1) | 0) < length2) {
                                var relevantSquares = (function ($me, levelLocation) {
                                        return function (_o1) {
                                            _o1.add({ Item1: ((levelLocation.v.Item1 - 1) | 0), Item2: ((levelLocation.v.Item2 - 1) | 0) });
                                            _o1.add({ Item1: ((levelLocation.v.Item1 - 1) | 0), Item2: levelLocation.v.Item2 });
                                            _o1.add({ Item1: ((levelLocation.v.Item1 - 1) | 0), Item2: ((levelLocation.v.Item2 + 1) | 0) });
                                            _o1.add({ Item1: levelLocation.v.Item1, Item2: ((levelLocation.v.Item2 - 1) | 0) });
                                            _o1.add({ Item1: levelLocation.v.Item1, Item2: levelLocation.v.Item2 });
                                            _o1.add({ Item1: levelLocation.v.Item1, Item2: ((levelLocation.v.Item2 + 1) | 0) });
                                            _o1.add({ Item1: ((levelLocation.v.Item1 + 1) | 0), Item2: ((levelLocation.v.Item2 - 1) | 0) });
                                            _o1.add({ Item1: ((levelLocation.v.Item1 + 1) | 0), Item2: levelLocation.v.Item2 });
                                            _o1.add({ Item1: ((levelLocation.v.Item1 + 1) | 0), Item2: ((levelLocation.v.Item2 + 1) | 0) });
                                            return _o1;
                                        };
                                    })(this, levelLocation)(new (System.Collections.Generic.List$1(System.Tuple$2(System.Int32,System.Int32))).ctor());

                                var isNotInWater = System.Linq.Enumerable.from(relevantSquares).all(function (x) {
                                        var $t1, $t2;
                                        return ($t1 = isWaterArray[System.Array.index(x.Item1, isWaterArray)])[System.Array.index(x.Item2, $t1)] == null || System.Nullable.getValue(($t2 = isWaterArray[System.Array.index(x.Item1, isWaterArray)])[System.Array.index(x.Item2, $t2)]) === false;
                                    });
                                var isNotAlreadyOccupied = System.Linq.Enumerable.from(relevantSquares).all(function (x) {
                                        var $t1;
                                        return ($t1 = hasCustomForegroundSpriteArray[System.Array.index(x.Item1, hasCustomForegroundSpriteArray)])[System.Array.index(x.Item2, $t1)] === false;
                                    });

                                if (isNotInWater && isNotAlreadyOccupied) {
                                    levelsWithCustomSprite.add(level);

                                    $t1 = Bridge.getEnumerator(relevantSquares);
                                    try {
                                        while ($t1.moveNext()) {
                                            var relevantSquare = $t1.Current;
                                            ($t2 = isWaterArray[System.Array.index(relevantSquare.Item1, isWaterArray)])[System.Array.index(relevantSquare.Item2, $t2)] = false;
                                            ($t3 = hasCustomForegroundSpriteArray[System.Array.index(relevantSquare.Item1, hasCustomForegroundSpriteArray)])[System.Array.index(relevantSquare.Item2, $t3)] = true;
                                        }
                                    } finally {
                                        if (Bridge.is($t1, System.IDisposable)) {
                                            $t1.System$IDisposable$Dispose();
                                        }
                                    }

                                    var getFortressSprite = function (x, y) {
                                        return new TuxPlanetSpeedrunAnyPercentLibrary.Sprite(TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Towns, ((240 + Bridge.Int.mul(x, 16)) | 0), Bridge.Int.mul(y, 16), 16, 16, 384);
                                    };

                                    ($t4 = foregroundTilemap[System.Array.index(((levelLocation.v.Item1 - 1) | 0), foregroundTilemap)])[System.Array.index(((levelLocation.v.Item2 - 1) | 0), $t4)] = getFortressSprite(0, 2);
                                    ($t5 = foregroundTilemap[System.Array.index(((levelLocation.v.Item1 - 1) | 0), foregroundTilemap)])[System.Array.index(levelLocation.v.Item2, $t5)] = getFortressSprite(0, 1);
                                    ($t6 = foregroundTilemap[System.Array.index(((levelLocation.v.Item1 - 1) | 0), foregroundTilemap)])[System.Array.index(((levelLocation.v.Item2 + 1) | 0), $t6)] = getFortressSprite(0, 0);
                                    ($t7 = foregroundTilemap[System.Array.index(levelLocation.v.Item1, foregroundTilemap)])[System.Array.index(((levelLocation.v.Item2 - 1) | 0), $t7)] = getFortressSprite(1, 2);
                                    ($t8 = foregroundTilemap[System.Array.index(levelLocation.v.Item1, foregroundTilemap)])[System.Array.index(levelLocation.v.Item2, $t8)] = getFortressSprite(1, 1);
                                    ($t9 = foregroundTilemap[System.Array.index(levelLocation.v.Item1, foregroundTilemap)])[System.Array.index(((levelLocation.v.Item2 + 1) | 0), $t9)] = getFortressSprite(1, 0);
                                    ($t10 = foregroundTilemap[System.Array.index(((levelLocation.v.Item1 + 1) | 0), foregroundTilemap)])[System.Array.index(((levelLocation.v.Item2 - 1) | 0), $t10)] = getFortressSprite(2, 2);
                                    ($t11 = foregroundTilemap[System.Array.index(((levelLocation.v.Item1 + 1) | 0), foregroundTilemap)])[System.Array.index(levelLocation.v.Item2, $t11)] = getFortressSprite(2, 1);
                                    ($t12 = foregroundTilemap[System.Array.index(((levelLocation.v.Item1 + 1) | 0), foregroundTilemap)])[System.Array.index(((levelLocation.v.Item2 + 1) | 0), $t12)] = getFortressSprite(2, 0);

                                    var isPath = function (x, y) {
                                        if (x < 0 || x >= length1 || y < 0 || y >= length2) {
                                            return false;
                                        }
                                        return System.Array.getItem(System.Array.getItem(map.Tilemap, x, System.Collections.Generic.IReadOnlyList$1(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile)), y, TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile).Type !== TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.TileType.NonPath;
                                    };

                                    if (isPath(((levelLocation.v.Item1 - 2) | 0), levelLocation.v.Item2) && isPath(((levelLocation.v.Item1 - 3) | 0), levelLocation.v.Item2) && isPath(((levelLocation.v.Item1 - 1) | 0), levelLocation.v.Item2) && !isPath(((levelLocation.v.Item1 - 2) | 0), ((levelLocation.v.Item2 - 1) | 0)) && !isPath(((levelLocation.v.Item1 - 2) | 0), ((levelLocation.v.Item2 + 1) | 0))) {
                                        ($t13 = foregroundTilemap[System.Array.index(((levelLocation.v.Item1 - 2) | 0), foregroundTilemap)])[System.Array.index(levelLocation.v.Item2, $t13)] = new TuxPlanetSpeedrunAnyPercentLibrary.Sprite(TuxPlanetSpeedrunAnyPercentLibrary.GameImage.PathDirt, 32, 112, 16, 16, 384);
                                    }

                                    if (isPath(((levelLocation.v.Item1 + 2) | 0), levelLocation.v.Item2) && isPath(((levelLocation.v.Item1 + 3) | 0), levelLocation.v.Item2) && isPath(((levelLocation.v.Item1 + 1) | 0), levelLocation.v.Item2) && !isPath(((levelLocation.v.Item1 + 2) | 0), ((levelLocation.v.Item2 - 1) | 0)) && !isPath(((levelLocation.v.Item1 + 2) | 0), ((levelLocation.v.Item2 + 1) | 0))) {
                                        ($t14 = foregroundTilemap[System.Array.index(((levelLocation.v.Item1 + 2) | 0), foregroundTilemap)])[System.Array.index(levelLocation.v.Item2, $t14)] = new TuxPlanetSpeedrunAnyPercentLibrary.Sprite(TuxPlanetSpeedrunAnyPercentLibrary.GameImage.PathDirt, 16, 112, 16, 16, 384);
                                    }

                                    if (isPath(levelLocation.v.Item1, ((levelLocation.v.Item2 - 2) | 0)) && isPath(levelLocation.v.Item1, ((levelLocation.v.Item2 - 3) | 0)) && isPath(levelLocation.v.Item1, ((levelLocation.v.Item2 - 1) | 0)) && !isPath(((levelLocation.v.Item1 - 1) | 0), ((levelLocation.v.Item2 - 2) | 0)) && !isPath(((levelLocation.v.Item1 + 1) | 0), ((levelLocation.v.Item2 - 2) | 0))) {
                                        ($t15 = foregroundTilemap[System.Array.index(levelLocation.v.Item1, foregroundTilemap)])[System.Array.index(((levelLocation.v.Item2 - 2) | 0), $t15)] = new TuxPlanetSpeedrunAnyPercentLibrary.Sprite(TuxPlanetSpeedrunAnyPercentLibrary.GameImage.PathDirt, 0, 112, 16, 16, 384);
                                    }

                                    if (isPath(levelLocation.v.Item1, ((levelLocation.v.Item2 + 2) | 0)) && isPath(levelLocation.v.Item1, ((levelLocation.v.Item2 + 3) | 0)) && isPath(levelLocation.v.Item1, ((levelLocation.v.Item2 + 1) | 0)) && !isPath(((levelLocation.v.Item1 - 1) | 0), ((levelLocation.v.Item2 + 2) | 0)) && !isPath(((levelLocation.v.Item1 + 1) | 0), ((levelLocation.v.Item2 + 2) | 0))) {
                                        ($t16 = foregroundTilemap[System.Array.index(levelLocation.v.Item1, foregroundTilemap)])[System.Array.index(((levelLocation.v.Item2 + 2) | 0), $t16)] = new TuxPlanetSpeedrunAnyPercentLibrary.Sprite(TuxPlanetSpeedrunAnyPercentLibrary.GameImage.PathDirt, 0, 128, 16, 16, 384);
                                    }
                                }
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }
                },
                AddScenery: function (foregroundTilemap, isWaterArray, random) {
                    var $t, $t1, $t2, $t3;
                    var length1 = foregroundTilemap.length;
                    var length2 = foregroundTilemap[System.Array.index(0, foregroundTilemap)].length;

                    var numLandTiles = 0;

                    for (var i = 0; i < isWaterArray.length; i = (i + 1) | 0) {
                        for (var j = 0; j < isWaterArray[System.Array.index(i, isWaterArray)].length; j = (j + 1) | 0) {
                            if (!($t = isWaterArray[System.Array.index(i, isWaterArray)])[System.Array.index(j, $t)]) {
                                numLandTiles = (numLandTiles + 1) | 0;
                            }
                        }
                    }

                    var maxNumTries = (((Bridge.Int.div(numLandTiles, 20)) | 0) + random.DTLibrary$IDTRandom$NextInt(((((Bridge.Int.div(numLandTiles, 20)) | 0) + 1) | 0))) | 0;

                    for (var numTries = 0; numTries < maxNumTries; numTries = (numTries + 1) | 0) {
                        var i1 = random.DTLibrary$IDTRandom$NextInt(length1);
                        var j1 = random.DTLibrary$IDTRandom$NextInt(length2);

                        if (($t1 = isWaterArray[System.Array.index(i1, isWaterArray)])[System.Array.index(j1, $t1)]) {
                            continue;
                        }

                        if (($t2 = foregroundTilemap[System.Array.index(i1, foregroundTilemap)])[System.Array.index(j1, $t2)] != null) {
                            continue;
                        }

                        var sprite;

                        switch (random.DTLibrary$IDTRandom$NextInt(2)) {
                            case 0: 
                                sprite = new TuxPlanetSpeedrunAnyPercentLibrary.Sprite(TuxPlanetSpeedrunAnyPercentLibrary.GameImage.ForestSnowy, 0, random.DTLibrary$IDTRandom$NextBool() ? 0 : 16, 16, 16, 384);
                                break;
                            case 1: 
                                sprite = new TuxPlanetSpeedrunAnyPercentLibrary.Sprite(TuxPlanetSpeedrunAnyPercentLibrary.GameImage.RocksSnow, random.DTLibrary$IDTRandom$NextBool() ? 16 : 32, 16, 16, 16, 384);
                                break;
                            default: 
                                throw new System.Exception();
                        }

                        ($t3 = foregroundTilemap[System.Array.index(i1, foregroundTilemap)])[System.Array.index(j1, $t3)] = sprite;
                    }
                },
                FillOutWaterArray: function (isWaterArray, random) {
                    var $t, $t1, $t2, $t3, $t4;
                    var length1 = isWaterArray.length;
                    var length2 = isWaterArray[System.Array.index(0, isWaterArray)].length;

                    var waterTiles = new (System.Collections.Generic.List$1(System.Tuple$2(System.Int32,System.Int32))).ctor();

                    for (var i = 0; i < length1; i = (i + 1) | 0) {
                        var isWater = function (x, y) {
                            var $t, $t1;
                            if (x < 0 || x >= length1 || y < 0 || y >= length2) {
                                return false;
                            }
                            return System.Nullable.hasValue(($t = isWaterArray[System.Array.index(x, isWaterArray)])[System.Array.index(y, $t)]) && System.Nullable.getValue(($t1 = isWaterArray[System.Array.index(x, isWaterArray)])[System.Array.index(y, $t1)]);
                        };

                        for (var j = 0; j < length2; j = (j + 1) | 0) {
                            if (isWater(i, j)) {
                                var numAdjacentWater = 0;
                                if (isWater(((i - 1) | 0), j)) {
                                    numAdjacentWater = (numAdjacentWater + 1) | 0;
                                }
                                if (isWater(((i + 1) | 0), j)) {
                                    numAdjacentWater = (numAdjacentWater + 1) | 0;
                                }
                                if (isWater(i, ((j - 1) | 0))) {
                                    numAdjacentWater = (numAdjacentWater + 1) | 0;
                                }
                                if (isWater(i, ((j + 1) | 0))) {
                                    numAdjacentWater = (numAdjacentWater + 1) | 0;
                                }

                                if (numAdjacentWater >= 3) {
                                    waterTiles.add({ Item1: i, Item2: j });
                                }
                            }
                        }
                    }

                    var numWaterTilesAdded = 0;

                    var numWaterTilesToAdd = (Bridge.Int.mul(waterTiles.Count, 30) + random.DTLibrary$IDTRandom$NextInt(((Bridge.Int.mul(waterTiles.Count, 8) + 1) | 0))) | 0;

                    while (true) {
                        if (waterTiles.Count === 0) {
                            break;
                        }

                        if (numWaterTilesAdded >= numWaterTilesToAdd) {
                            break;
                        }

                        var randomIndex = random.DTLibrary$IDTRandom$NextInt(waterTiles.Count);

                        var temp = waterTiles.getItem(randomIndex);
                        waterTiles.setItem(randomIndex, waterTiles.getItem(((waterTiles.Count - 1) | 0)));
                        waterTiles.setItem(((waterTiles.Count - 1) | 0), temp);

                        var toBeProcessed = { v : waterTiles.getItem(((waterTiles.Count - 1) | 0)) };
                        waterTiles.removeAt(((waterTiles.Count - 1) | 0));

                        var adjacentTiles = (function ($me, toBeProcessed) {
                                return function (_o1) {
                                    _o1.add({ Item1: ((toBeProcessed.v.Item1 - 1) | 0), Item2: ((toBeProcessed.v.Item2 - 1) | 0) });
                                    _o1.add({ Item1: ((toBeProcessed.v.Item1 - 1) | 0), Item2: toBeProcessed.v.Item2 });
                                    _o1.add({ Item1: ((toBeProcessed.v.Item1 - 1) | 0), Item2: ((toBeProcessed.v.Item2 + 1) | 0) });
                                    _o1.add({ Item1: toBeProcessed.v.Item1, Item2: ((toBeProcessed.v.Item2 - 1) | 0) });
                                    _o1.add({ Item1: toBeProcessed.v.Item1, Item2: toBeProcessed.v.Item2 });
                                    _o1.add({ Item1: toBeProcessed.v.Item1, Item2: ((toBeProcessed.v.Item2 + 1) | 0) });
                                    _o1.add({ Item1: ((toBeProcessed.v.Item1 + 1) | 0), Item2: ((toBeProcessed.v.Item2 - 1) | 0) });
                                    _o1.add({ Item1: ((toBeProcessed.v.Item1 + 1) | 0), Item2: toBeProcessed.v.Item2 });
                                    _o1.add({ Item1: ((toBeProcessed.v.Item1 + 1) | 0), Item2: ((toBeProcessed.v.Item2 + 1) | 0) });
                                    return _o1;
                                };
                            })(this, toBeProcessed)(new (System.Collections.Generic.List$1(System.Tuple$2(System.Int32,System.Int32))).ctor());
                        adjacentTiles = System.Linq.Enumerable.from(adjacentTiles).where(function (x) {
                                return x.Item1 >= 0 && x.Item1 < length1 && x.Item2 >= 0 && x.Item2 < length2;
                            }).toList(System.Tuple$2(System.Int32,System.Int32));

                        if (System.Linq.Enumerable.from(adjacentTiles).any(function (x) {
                                var $t, $t1;
                                return System.Nullable.hasValue(($t = isWaterArray[System.Array.index(x.Item1, isWaterArray)])[System.Array.index(x.Item2, $t)]) && !System.Nullable.getValue(($t1 = isWaterArray[System.Array.index(x.Item1, isWaterArray)])[System.Array.index(x.Item2, $t1)]);
                            })) {
                            continue;
                        }
                        if (System.Linq.Enumerable.from(adjacentTiles).all(function (x) {
                                var $t, $t1;
                                return System.Nullable.hasValue(($t = isWaterArray[System.Array.index(x.Item1, isWaterArray)])[System.Array.index(x.Item2, $t)]) && System.Nullable.getValue(($t1 = isWaterArray[System.Array.index(x.Item1, isWaterArray)])[System.Array.index(x.Item2, $t1)]);
                            })) {
                            continue;
                        }

                        var waterTilesToAdd = System.Linq.Enumerable.from(adjacentTiles).where(function (x) {
                                var $t;
                                return ($t = isWaterArray[System.Array.index(x.Item1, isWaterArray)])[System.Array.index(x.Item2, $t)] == null;
                            }).toList(System.Tuple$2(System.Int32,System.Int32));

                        var shouldNotAddTheseTiles = System.Linq.Enumerable.from(waterTilesToAdd).any((function ($me, toBeProcessed) {
                                return function (x) {
                                    var tilesAdjacentToThisWaterTile = function (_o2) {
                                            _o2.add({ Item1: ((x.Item1 - 1) | 0), Item2: ((x.Item2 - 1) | 0) });
                                            _o2.add({ Item1: ((x.Item1 - 1) | 0), Item2: x.Item2 });
                                            _o2.add({ Item1: ((x.Item1 - 1) | 0), Item2: ((x.Item2 + 1) | 0) });
                                            _o2.add({ Item1: x.Item1, Item2: ((x.Item2 - 1) | 0) });
                                            _o2.add({ Item1: x.Item1, Item2: ((x.Item2 + 1) | 0) });
                                            _o2.add({ Item1: ((x.Item1 + 1) | 0), Item2: ((x.Item2 - 1) | 0) });
                                            _o2.add({ Item1: ((x.Item1 + 1) | 0), Item2: x.Item2 });
                                            _o2.add({ Item1: ((x.Item1 + 1) | 0), Item2: ((x.Item2 + 1) | 0) });
                                            return _o2;
                                        }(new (System.Collections.Generic.List$1(System.Tuple$2(System.Int32,System.Int32))).ctor());
                                    tilesAdjacentToThisWaterTile = System.Linq.Enumerable.from(tilesAdjacentToThisWaterTile).where(function (t) {
                                            return t.Item1 >= 0 && t.Item1 < length1 && t.Item2 >= 0 && t.Item2 < length2;
                                        }).toList(System.Tuple$2(System.Int32,System.Int32));

                                    var tilesToCheck = System.Linq.Enumerable.from(tilesAdjacentToThisWaterTile).where(function (t) {
                                            return Math.abs(((t.Item1 - toBeProcessed.v.Item1) | 0)) === 2 && Math.abs(((t.Item2 - toBeProcessed.v.Item2) | 0)) === 2 || Math.abs(((t.Item1 - toBeProcessed.v.Item1) | 0)) === 2 && Math.abs(((t.Item2 - toBeProcessed.v.Item2) | 0)) === 1 || Math.abs(((t.Item1 - toBeProcessed.v.Item1) | 0)) === 1 && Math.abs(((t.Item2 - toBeProcessed.v.Item2) | 0)) === 2;
                                        }).toList(System.Tuple$2(System.Int32,System.Int32));

                                    var isBadTile = System.Linq.Enumerable.from(tilesToCheck).any(function (t) {
                                            var $t, $t1;
                                            return System.Nullable.hasValue(($t = isWaterArray[System.Array.index(t.Item1, isWaterArray)])[System.Array.index(t.Item2, $t)]) && System.Nullable.getValue(($t1 = isWaterArray[System.Array.index(t.Item1, isWaterArray)])[System.Array.index(t.Item2, $t1)]);
                                        });

                                    return isBadTile;
                                };
                            })(this, toBeProcessed));

                        if (shouldNotAddTheseTiles) {
                            continue;
                        }

                        $t = Bridge.getEnumerator(adjacentTiles);
                        try {
                            while ($t.moveNext()) {
                                var adjacentTile = $t.Current;
                                if (($t1 = isWaterArray[System.Array.index(adjacentTile.Item1, isWaterArray)])[System.Array.index(adjacentTile.Item2, $t1)] == null) {
                                    ($t2 = isWaterArray[System.Array.index(adjacentTile.Item1, isWaterArray)])[System.Array.index(adjacentTile.Item2, $t2)] = true;
                                    numWaterTilesAdded = (numWaterTilesAdded + 1) | 0;
                                }

                                if (((Math.abs(((adjacentTile.Item1 - toBeProcessed.v.Item1) | 0)) + Math.abs(((adjacentTile.Item2 - toBeProcessed.v.Item2) | 0))) | 0) === 1) {
                                    waterTiles.add(adjacentTile);
                                }
                            }
                        } finally {
                            if (Bridge.is($t, System.IDisposable)) {
                                $t.System$IDisposable$Dispose();
                            }
                        }
                    }

                    for (var i1 = 0; i1 < length1; i1 = (i1 + 1) | 0) {
                        for (var j1 = 0; j1 < length2; j1 = (j1 + 1) | 0) {
                            if (($t3 = isWaterArray[System.Array.index(i1, isWaterArray)])[System.Array.index(j1, $t3)] == null) {
                                ($t4 = isWaterArray[System.Array.index(i1, isWaterArray)])[System.Array.index(j1, $t4)] = false;
                            }
                        }
                    }
                },
                GenerateBackgroundTiles: function (numColumns, numRows, isWaterArray, random) {
                    var $t, $t1;
                    var tilemap = System.Array.init(numColumns, null, System.Array.type(TuxPlanetSpeedrunAnyPercentLibrary.Sprite));

                    var isLand = function (i, j) {
                        var $t;
                        return i >= 0 && i < isWaterArray.length && j >= 0 && j < isWaterArray[System.Array.index(i, isWaterArray)].length && !($t = isWaterArray[System.Array.index(i, isWaterArray)])[System.Array.index(j, $t)];
                    };

                    for (var i = 0; i < numColumns; i = (i + 1) | 0) {
                        tilemap[System.Array.index(i, tilemap)] = System.Array.init(numRows, null, TuxPlanetSpeedrunAnyPercentLibrary.Sprite);

                        for (var j = 0; j < numRows; j = (j + 1) | 0) {
                            var sprite;

                            if (($t = isWaterArray[System.Array.index(i, isWaterArray)])[System.Array.index(j, $t)]) {
                                var x = random.DTLibrary$IDTRandom$NextInt(3);
                                var y = 5;

                                if (isLand(((i - 1) | 0), j) && isLand(i, ((j - 1) | 0))) {
                                    x = 1;
                                    y = 1;
                                } else if (isLand(((i - 1) | 0), j) && isLand(i, ((j + 1) | 0))) {
                                    x = 1;
                                    y = 0;
                                } else if (isLand(((i + 1) | 0), j) && isLand(i, ((j - 1) | 0))) {
                                    x = 2;
                                    y = 1;
                                } else if (isLand(((i + 1) | 0), j) && isLand(i, ((j + 1) | 0))) {
                                    x = 2;
                                    y = 0;
                                } else if (isLand(((i - 1) | 0), j)) {
                                    x = 2;
                                    y = 3;
                                } else if (isLand(((i + 1) | 0), j)) {
                                    x = 0;
                                    y = 3;
                                } else if (isLand(i, ((j - 1) | 0))) {
                                    x = 1;
                                    y = 2;
                                } else if (isLand(i, ((j + 1) | 0))) {
                                    x = 1;
                                    y = 4;
                                } else if (isLand(((i - 1) | 0), ((j - 1) | 0))) {
                                    x = 2;
                                    y = 2;
                                } else if (isLand(((i - 1) | 0), ((j + 1) | 0))) {
                                    x = 2;
                                    y = 4;
                                } else if (isLand(((i + 1) | 0), ((j - 1) | 0))) {
                                    x = 0;
                                    y = 2;
                                } else if (isLand(((i + 1) | 0), ((j + 1) | 0))) {
                                    x = 0;
                                    y = 4;
                                }

                                sprite = new TuxPlanetSpeedrunAnyPercentLibrary.Sprite(TuxPlanetSpeedrunAnyPercentLibrary.GameImage.WaterCliffSnow, x << 4, y << 4, 16, 16, 384);
                            } else {
                                sprite = new TuxPlanetSpeedrunAnyPercentLibrary.Sprite(TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Snow, random.DTLibrary$IDTRandom$NextInt(3) << 4, 80, 16, 16, 384);
                            }

                            ($t1 = tilemap[System.Array.index(i, tilemap)])[System.Array.index(j, $t1)] = sprite;
                        }
                    }

                    return tilemap;
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.OverworldMapGenerator.Result", {
        $kind: "nested class",
        fields: {
            ForegroundTiles: null,
            BackgroundTiles: null,
            LevelsWithCustomSprite: null
        },
        ctors: {
            ctor: function (foregroundTiles, backgroundTiles, levelsWithCustomSprite) {
                this.$initialize();
                this.ForegroundTiles = foregroundTiles;
                this.BackgroundTiles = backgroundTiles;
                this.LevelsWithCustomSprite = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Level)).$ctor1(levelsWithCustomSprite);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.OverworldUtil", {
        statics: {
            methods: {
                GetPath: function (overworldGameMap, reachableTiles, currentLocation, directionOfTravel) {
                    var returnValue = new (System.Collections.Generic.List$1(System.Tuple$2(System.Int32,System.Int32))).ctor();

                    var nextTile = { Item1: ((currentLocation.Item1 + directionOfTravel.Item1) | 0), Item2: ((currentLocation.Item2 + directionOfTravel.Item2) | 0) };

                    if (!System.Linq.Enumerable.from(reachableTiles).contains(nextTile, new DTLibrary.IntTupleEqualityComparer())) {
                        return returnValue;
                    }

                    while (true) {
                        returnValue.add(nextTile);

                        if (System.Array.getItem(System.Array.getItem(overworldGameMap.Tilemap, nextTile.Item1, System.Collections.Generic.IReadOnlyList$1(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile)), nextTile.Item2, TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile).Type === TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.TileType.Level) {
                            break;
                        }

                        var possibleNextTiles = function (_o1) {
                                _o1.add({ Item1: ((nextTile.Item1 - 1) | 0), Item2: nextTile.Item2 });
                                _o1.add({ Item1: ((nextTile.Item1 + 1) | 0), Item2: nextTile.Item2 });
                                _o1.add({ Item1: nextTile.Item1, Item2: ((nextTile.Item2 - 1) | 0) });
                                _o1.add({ Item1: nextTile.Item1, Item2: ((nextTile.Item2 + 1) | 0) });
                                return _o1;
                            }(new (System.Collections.Generic.List$1(System.Tuple$2(System.Int32,System.Int32))).ctor());
                        possibleNextTiles = System.Linq.Enumerable.from(possibleNextTiles).where(function (x) {
                                return System.Linq.Enumerable.from(reachableTiles).contains(x, new DTLibrary.IntTupleEqualityComparer());
                            }).where(function (x) {
                            return !System.Linq.Enumerable.from(returnValue).contains(x, new DTLibrary.IntTupleEqualityComparer());
                        }).where(function (x) {
                            return !Bridge.objectEquals(x, currentLocation);
                        }).toList(System.Tuple$2(System.Int32,System.Int32));

                        if (possibleNextTiles.Count !== 1) {
                            break;
                        }

                        nextTile = possibleNextTiles.getItem(0);
                    }

                    return returnValue;
                },
                GetReachableTiles: function (overworldGameMap, completedLevels) {
                    var completedLevelsSet = new (System.Collections.Generic.HashSet$1(TuxPlanetSpeedrunAnyPercentLibrary.Level)).$ctor1(completedLevels);

                    var returnValue = new (System.Collections.Generic.HashSet$1(System.Tuple$2(System.Int32,System.Int32))).$ctor3(new DTLibrary.IntTupleEqualityComparer());

                    var toBeProcessed = new (System.Collections.Generic.Queue$1(System.Tuple$2(System.Int32,System.Int32))).ctor();
                    toBeProcessed.Enqueue(overworldGameMap.StartingLocation);

                    while (toBeProcessed.Count > 0) {
                        var location = toBeProcessed.Dequeue();
                        var x = location.Item1;
                        var y = location.Item2;

                        if (returnValue.contains(location)) {
                            continue;
                        }

                        if (x < 0 || x >= System.Array.getCount(overworldGameMap.Tilemap, System.Collections.Generic.IReadOnlyList$1(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile))) {
                            continue;
                        }
                        if (y < 0 || y >= System.Array.getCount(System.Array.getItem(overworldGameMap.Tilemap, 0, System.Collections.Generic.IReadOnlyList$1(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile)), TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile)) {
                            continue;
                        }

                        if (System.Array.getItem(System.Array.getItem(overworldGameMap.Tilemap, x, System.Collections.Generic.IReadOnlyList$1(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile)), y, TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile).Type === TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.TileType.NonPath) {
                            continue;
                        }

                        returnValue.add(location);

                        if (System.Array.getItem(System.Array.getItem(overworldGameMap.Tilemap, x, System.Collections.Generic.IReadOnlyList$1(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile)), y, TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile).Type === TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.TileType.Level && !completedLevelsSet.contains(System.Nullable.getValue(System.Array.getItem(System.Array.getItem(overworldGameMap.Tilemap, x, System.Collections.Generic.IReadOnlyList$1(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile)), y, TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile).Level))) {
                            continue;
                        }

                        toBeProcessed.Enqueue({ Item1: ((x - 1) | 0), Item2: y });
                        toBeProcessed.Enqueue({ Item1: ((x + 1) | 0), Item2: y });
                        toBeProcessed.Enqueue({ Item1: x, Item2: ((y - 1) | 0) });
                        toBeProcessed.Enqueue({ Item1: x, Item2: ((y + 1) | 0) });
                    }

                    return returnValue;
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.PauseMenuFrame.Option", {
        $kind: "nested enum",
        statics: {
            fields: {
                Continue: 0,
                RestartLevel: 1,
                BackToMapScreen: 2,
                ToggleInputReplayFunctionality: 3,
                BackToTitleScreen: 4
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.SaveAndLoadData", {
        fields: {
            sessionStateByteList: null,
            soundVolume: null,
            musicVolume: null,
            fileIO: null
        },
        ctors: {
            ctor: function (fileIO) {
                this.$initialize();
                this.fileIO = fileIO;

                this.sessionStateByteList = null;
                this.soundVolume = null;
                this.musicVolume = null;
            }
        },
        methods: {
            SaveData: function (sessionState, soundVolume, musicVolume) {
                this.SaveSessionState(sessionState);

                this.SaveSoundAndMusicVolume(soundVolume, musicVolume);
            },
            SaveSoundAndMusicVolume: function (soundVolume, musicVolume) {
                if (System.Nullable.hasValue(this.soundVolume) && System.Nullable.hasValue(this.musicVolume) && System.Nullable.getValue(this.soundVolume) === soundVolume && System.Nullable.getValue(this.musicVolume) === musicVolume) {
                    return;
                }

                this.soundVolume = soundVolume;
                this.musicVolume = musicVolume;

                var listBuilder = new DTLibrary.ByteList.Builder();

                listBuilder.AddInt(soundVolume);
                listBuilder.AddInt(musicVolume);

                this.fileIO.DTLibrary$IFileIO$PersistData(TuxPlanetSpeedrunAnyPercentLibrary.TuxPlanetSpeedrunAnyPercent.FILE_ID_FOR_SOUND_AND_MUSIC_VOLUME, listBuilder.ToByteList());
            },
            SaveSessionState: function (sessionState) {
                var listBuilder = new DTLibrary.ByteList.Builder();
                sessionState.SerializeEverythingExceptGameLogic(listBuilder);

                var byteList = listBuilder.ToByteList();

                if (this.sessionStateByteList != null && this.sessionStateByteList.equalsT(byteList)) {
                    return;
                }

                this.sessionStateByteList = byteList;

                this.fileIO.DTLibrary$IFileIO$PersistData(TuxPlanetSpeedrunAnyPercentLibrary.TuxPlanetSpeedrunAnyPercent.FILE_ID_FOR_SESSION_STATE, this.sessionStateByteList);

                var simpleDataListBuilder = new DTLibrary.ByteList.Builder();
                sessionState.SerializeSimpleData(simpleDataListBuilder);
                this.fileIO.DTLibrary$IFileIO$PersistVersionedData(TuxPlanetSpeedrunAnyPercentLibrary.TuxPlanetSpeedrunAnyPercent.FILE_ID_FOR_SIMPLE_DATA_SESSION_STATE, TuxPlanetSpeedrunAnyPercentLibrary.SessionState.SIMPLE_DATA_VERSION_NUMBER, simpleDataListBuilder.ToByteList());
            },
            LoadSessionState: function (sessionState, windowWidth, windowHeight, mapInfo) {
                var list = this.fileIO.DTLibrary$IFileIO$FetchData(TuxPlanetSpeedrunAnyPercentLibrary.TuxPlanetSpeedrunAnyPercent.FILE_ID_FOR_SESSION_STATE);

                if (list == null) {
                    this.LoadSessionStateFromSimpleData(sessionState, windowWidth, windowHeight, mapInfo);
                    return;
                }

                try {
                    var iterator = list.GetIterator();
                    sessionState.TryDeserializeEverythingExceptGameLogic(iterator);

                    if (iterator.HasNextByte()) {
                        throw new DTLibrary.DTDeserializationException();
                    }
                } catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    if (Bridge.is($e1, DTLibrary.DTDeserializationException)) {
                        this.LoadSessionStateFromSimpleData(sessionState, windowWidth, windowHeight, mapInfo);
                    } else {
                        throw $e1;
                    }
                }
            },
            LoadSessionStateFromSimpleData: function (sessionState, windowWidth, windowHeight, mapInfo) {
                sessionState.ClearData(windowWidth, windowHeight);

                var list = this.fileIO.DTLibrary$IFileIO$FetchVersionedData(TuxPlanetSpeedrunAnyPercentLibrary.TuxPlanetSpeedrunAnyPercent.FILE_ID_FOR_SIMPLE_DATA_SESSION_STATE, TuxPlanetSpeedrunAnyPercentLibrary.SessionState.SIMPLE_DATA_VERSION_NUMBER);

                if (list == null) {
                    sessionState.ClearData(windowWidth, windowHeight);
                    return;
                }

                try {
                    var iterator = list.GetIterator();
                    sessionState.TryDeserializeFromSimpleData(iterator);

                    if (iterator.HasNextByte()) {
                        throw new DTLibrary.DTDeserializationException();
                    }
                } catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    if (Bridge.is($e1, DTLibrary.DTDeserializationException)) {
                        sessionState.ClearData(windowWidth, windowHeight);
                    } else {
                        throw $e1;
                    }
                }
            },
            LoadSoundVolume: function () {
                var list = this.fileIO.DTLibrary$IFileIO$FetchData(TuxPlanetSpeedrunAnyPercentLibrary.TuxPlanetSpeedrunAnyPercent.FILE_ID_FOR_SOUND_AND_MUSIC_VOLUME);

                if (list == null) {
                    return null;
                }

                try {
                    var iterator = list.GetIterator();
                    var soundVolume = iterator.TryPopInt();
                    iterator.TryPopInt();
                    if (iterator.HasNextByte()) {
                        throw new DTLibrary.DTDeserializationException();
                    }

                    if (soundVolume >= 0 && soundVolume <= 100) {
                        return soundVolume;
                    }
                    return null;
                } catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    if (Bridge.is($e1, DTLibrary.DTDeserializationException)) {
                        return null;
                    } else {
                        throw $e1;
                    }
                }
            },
            LoadMusicVolume: function () {
                var list = this.fileIO.DTLibrary$IFileIO$FetchData(TuxPlanetSpeedrunAnyPercentLibrary.TuxPlanetSpeedrunAnyPercent.FILE_ID_FOR_SOUND_AND_MUSIC_VOLUME);

                if (list == null) {
                    return null;
                }

                try {
                    var iterator = list.GetIterator();

                    iterator.TryPopInt();
                    var musicVolume = iterator.TryPopInt();
                    if (iterator.HasNextByte()) {
                        throw new DTLibrary.DTDeserializationException();
                    }

                    if (musicVolume >= 0 && musicVolume <= 100) {
                        return musicVolume;
                    }
                    return null;
                } catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    if (Bridge.is($e1, DTLibrary.DTDeserializationException)) {
                        return null;
                    } else {
                        throw $e1;
                    }
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.SessionState", {
        statics: {
            fields: {
                SIMPLE_DATA_VERSION_NUMBER: 0
            },
            ctors: {
                init: function () {
                    this.SIMPLE_DATA_VERSION_NUMBER = 1;
                }
            }
        },
        fields: {
            Overworld: null,
            GameLogic: null,
            CanUseSaveStates: false,
            CanUseTimeSlowdown: false,
            CanUseTeleport: false,
            ShouldReplayInputAfterLoadingSaveState: false,
            HasWon: false,
            ElapsedMillis: 0,
            random: null,
            randomValuesUsedForGeneratingLevels: null
        },
        props: {
            CurrentLevel: {
                get: function () {
                    if (this.GameLogic == null) {
                        return null;
                    }
                    return this.GameLogic.Level;
                }
            }
        },
        ctors: {
            ctor: function (windowWidth, windowHeight) {
                this.$initialize();
                var random = new DTLibrary.DTDeterministicRandom.$ctor1(new System.Random.ctor().Next$1(10000000));

                this.Overworld = new TuxPlanetSpeedrunAnyPercentLibrary.Overworld.ctor(windowWidth, windowHeight, random.DTLibrary$IDTDeterministicRandom$SerializeToString(), new (System.Collections.Generic.HashSet$1(TuxPlanetSpeedrunAnyPercentLibrary.Level)).ctor());

                this.GameLogic = null;
                this.CanUseSaveStates = false;
                this.CanUseTimeSlowdown = false;
                this.CanUseTeleport = false;
                this.ShouldReplayInputAfterLoadingSaveState = false;
                this.HasWon = false;
                this.ElapsedMillis = 0;
                this.random = random;
                this.randomValuesUsedForGeneratingLevels = new (System.Collections.Generic.Dictionary$2(TuxPlanetSpeedrunAnyPercentLibrary.Level,System.String))();
            }
        },
        methods: {
            ClearData: function (windowWidth, windowHeight) {
                this.random.DTLibrary$IDTRandom$NextBool();

                this.Overworld = new TuxPlanetSpeedrunAnyPercentLibrary.Overworld.ctor(windowWidth, windowHeight, this.random.DTLibrary$IDTDeterministicRandom$SerializeToString(), new (System.Collections.Generic.HashSet$1(TuxPlanetSpeedrunAnyPercentLibrary.Level)).ctor());

                this.GameLogic = null;
                this.CanUseSaveStates = false;
                this.CanUseTimeSlowdown = false;
                this.CanUseTeleport = false;
                this.ShouldReplayInputAfterLoadingSaveState = false;
                this.HasWon = false;
                this.ElapsedMillis = 0;
                this.randomValuesUsedForGeneratingLevels = new (System.Collections.Generic.Dictionary$2(TuxPlanetSpeedrunAnyPercentLibrary.Level,System.String))();
            },
            AddRandomSeed: function (seed) {
                this.random.DTLibrary$IDTRandom$AddSeed(seed);
                this.random.DTLibrary$IDTRandom$NextBool();
            },
            HasStarted: function () {
                return this.ElapsedMillis > 0;
            },
            AddElapsedMillis: function (elapsedMillis) {
                this.ElapsedMillis = (this.ElapsedMillis + elapsedMillis) | 0;

                if (this.ElapsedMillis > 2000000000) {
                    this.ElapsedMillis = 2000000000;
                }
            },
            SetOverworld: function (overworld) {
                this.Overworld = overworld;
            },
            CompleteLevel: function (level, canUseSaveStates, canUseTimeSlowdown, canUseTeleport) {
                this.Overworld = this.Overworld.CompleteLevel(level);
                if (canUseSaveStates) {
                    this.CanUseSaveStates = true;
                }
                if (canUseTimeSlowdown) {
                    this.CanUseTimeSlowdown = true;
                }
                if (canUseTeleport) {
                    this.CanUseTeleport = true;
                }

                this.GameLogic = null;
            },
            WinGame: function () {
                this.HasWon = true;
            },
            SetShouldReplayInputAfterLoadingSaveState: function (shouldReplayInputAfterLoadingSaveState) {
                this.ShouldReplayInputAfterLoadingSaveState = shouldReplayInputAfterLoadingSaveState;
            },
            SetGameLogic: function (gameLogicState) {
                this.GameLogic = gameLogicState;
            },
            StartLevel: function (level, windowWidth, windowHeight, mapInfo) {
                this.random.DTLibrary$IDTRandom$NextBool();

                if (!this.randomValuesUsedForGeneratingLevels.containsKey(level)) {
                    this.randomValuesUsedForGeneratingLevels.set(level, this.random.DTLibrary$IDTDeterministicRandom$SerializeToString());
                }

                var rngForGeneratingLevel = new DTLibrary.DTDeterministicRandom.ctor();
                rngForGeneratingLevel.DeserializeFromString(this.randomValuesUsedForGeneratingLevels.get(level));

                this.GameLogic = new TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.$ctor1(level, windowWidth, windowHeight, this.CanUseSaveStates, this.CanUseTimeSlowdown, this.CanUseTeleport, mapInfo, rngForGeneratingLevel);
            },
            SerializeEverythingExceptGameLogic: function (list) {
                var $t;
                var currentVersion = TuxPlanetSpeedrunAnyPercentLibrary.VersionInfo.GetVersionInfo().Version;
                list.AddString(currentVersion);

                this.Overworld.Serialize(list);

                list.AddBool(this.CanUseSaveStates);
                list.AddBool(this.CanUseTimeSlowdown);
                list.AddBool(this.CanUseTeleport);

                list.AddBool(this.ShouldReplayInputAfterLoadingSaveState);

                list.AddBool(this.HasWon);
                list.AddInt(this.ElapsedMillis);

                list.AddInt(this.randomValuesUsedForGeneratingLevels.count);

                $t = Bridge.getEnumerator(System.Linq.Enumerable.from(this.randomValuesUsedForGeneratingLevels).orderBy(function (x) {
                        return TuxPlanetSpeedrunAnyPercentLibrary.LevelUtil.ToSerializableInt(x.key);
                    }).toList(System.Collections.Generic.KeyValuePair$2(TuxPlanetSpeedrunAnyPercentLibrary.Level,System.String)));
                try {
                    while ($t.moveNext()) {
                        var kvp = $t.Current;
                        var level = kvp.key;
                        var rngValue = kvp.value;

                        list.AddInt(TuxPlanetSpeedrunAnyPercentLibrary.LevelUtil.ToSerializableInt(level));
                        list.AddString(rngValue);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            },
            /**
             * Can possibly throw DTDeserializationException
             *
             * @instance
             * @public
             * @this TuxPlanetSpeedrunAnyPercentLibrary.SessionState
             * @memberof TuxPlanetSpeedrunAnyPercentLibrary.SessionState
             * @param   {DTLibrary.ByteList.Iterator}    iterator
             * @return  {void}
             */
            TryDeserializeEverythingExceptGameLogic: function (iterator) {
                var currentVersion = TuxPlanetSpeedrunAnyPercentLibrary.VersionInfo.GetVersionInfo().Version;
                var savedDataVersion = iterator.TryPopString();
                if (!Bridge.referenceEquals(currentVersion, savedDataVersion)) {
                    throw new DTLibrary.DTDeserializationException();
                }

                this.Overworld = TuxPlanetSpeedrunAnyPercentLibrary.Overworld.TryDeserialize(iterator);

                this.CanUseSaveStates = iterator.TryPopBool();
                this.CanUseTimeSlowdown = iterator.TryPopBool();
                this.CanUseTeleport = iterator.TryPopBool();

                this.ShouldReplayInputAfterLoadingSaveState = iterator.TryPopBool();

                var hasWon = iterator.TryPopBool();
                this.HasWon = hasWon;

                var elapsedMillis = iterator.TryPopInt();
                this.ElapsedMillis = elapsedMillis;

                this.randomValuesUsedForGeneratingLevels = new (System.Collections.Generic.Dictionary$2(TuxPlanetSpeedrunAnyPercentLibrary.Level,System.String))();
                var numKeyValuePairs = iterator.TryPopInt();

                for (var i = 0; i < numKeyValuePairs; i = (i + 1) | 0) {
                    var level = iterator.TryPopInt();
                    var rngValue = iterator.TryPopString();

                    this.randomValuesUsedForGeneratingLevels.set(TuxPlanetSpeedrunAnyPercentLibrary.LevelUtil.FromSerializableInt(level), rngValue);
                }
            },
            /**
             * Serializes only a subset of data that's likely to remain valid across different versions of the game
             *
             * @instance
             * @public
             * @this TuxPlanetSpeedrunAnyPercentLibrary.SessionState
             * @memberof TuxPlanetSpeedrunAnyPercentLibrary.SessionState
             * @param   {DTLibrary.ByteList.Builder}    list
             * @return  {void}
             */
            SerializeSimpleData: function (list) {
                list.AddInt(TuxPlanetSpeedrunAnyPercentLibrary.SessionState.SIMPLE_DATA_VERSION_NUMBER);
                var numCompletedLevels = this.Overworld.GetNumCompletedLevels();
                list.AddInt(numCompletedLevels);
                list.AddBool(this.CanUseSaveStates);
                list.AddBool(this.CanUseTimeSlowdown);
                list.AddBool(this.CanUseTeleport);
                list.AddInt(this.ElapsedMillis);
            },
            /**
             * Can possibly throw DTDeserializationException
             *
             * @instance
             * @public
             * @this TuxPlanetSpeedrunAnyPercentLibrary.SessionState
             * @memberof TuxPlanetSpeedrunAnyPercentLibrary.SessionState
             * @param   {DTLibrary.ByteList.Iterator}    iterator
             * @return  {void}
             */
            TryDeserializeFromSimpleData: function (iterator) {
                var simpleDataFormattingVersion = iterator.TryPopInt();

                if (simpleDataFormattingVersion !== TuxPlanetSpeedrunAnyPercentLibrary.SessionState.SIMPLE_DATA_VERSION_NUMBER) {
                    throw new DTLibrary.DTDeserializationException();
                }

                var numCompletedLevels = iterator.TryPopInt();

                if (numCompletedLevels >= 1) {
                    this.Overworld = this.Overworld.CompleteLevel(TuxPlanetSpeedrunAnyPercentLibrary.Level.Level1);
                }
                if (numCompletedLevels >= 2) {
                    this.Overworld = this.Overworld.CompleteLevel(TuxPlanetSpeedrunAnyPercentLibrary.Level.Level2);
                }
                if (numCompletedLevels >= 3) {
                    this.Overworld = this.Overworld.CompleteLevel(TuxPlanetSpeedrunAnyPercentLibrary.Level.Level3);
                }
                if (numCompletedLevels >= 4) {
                    this.Overworld = this.Overworld.CompleteLevel(TuxPlanetSpeedrunAnyPercentLibrary.Level.Level4);
                }
                if (numCompletedLevels >= 5) {
                    this.Overworld = this.Overworld.CompleteLevel(TuxPlanetSpeedrunAnyPercentLibrary.Level.Level5);
                }
                if (numCompletedLevels >= 6) {
                    this.Overworld = this.Overworld.CompleteLevel(TuxPlanetSpeedrunAnyPercentLibrary.Level.Level6);
                }
                if (numCompletedLevels >= 7) {
                    this.Overworld = this.Overworld.CompleteLevel(TuxPlanetSpeedrunAnyPercentLibrary.Level.Level7);
                }
                if (numCompletedLevels >= 8) {
                    this.Overworld = this.Overworld.CompleteLevel(TuxPlanetSpeedrunAnyPercentLibrary.Level.Level8);
                }
                if (numCompletedLevels >= 9) {
                    this.Overworld = this.Overworld.CompleteLevel(TuxPlanetSpeedrunAnyPercentLibrary.Level.Level9);
                }
                if (numCompletedLevels >= 10) {
                    this.Overworld = this.Overworld.CompleteLevel(TuxPlanetSpeedrunAnyPercentLibrary.Level.Level10);
                }

                this.CanUseSaveStates = iterator.TryPopBool();
                this.CanUseTimeSlowdown = iterator.TryPopBool();
                this.CanUseTeleport = iterator.TryPopBool();

                this.ShouldReplayInputAfterLoadingSaveState = false;

                this.ElapsedMillis = iterator.TryPopInt();

                this.HasWon = numCompletedLevels >= 10;
                this.GameLogic = null;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.SoundAndMusicVolumePicker", {
        fields: {
            soundVolumePicker: null,
            musicVolumePicker: null
        },
        ctors: {
            ctor: function (xPos, yPos, initialSoundVolume, initialMusicVolume, elapsedMicrosPerFrame, color) {
                this.$initialize();
                this.soundVolumePicker = new TuxPlanetSpeedrunAnyPercentLibrary.SoundVolumePicker(xPos, ((yPos + 50) | 0), initialSoundVolume, color);
                this.musicVolumePicker = new TuxPlanetSpeedrunAnyPercentLibrary.MusicVolumePicker(xPos, yPos, initialMusicVolume, color);
            }
        },
        methods: {
            ProcessFrame: function (mouseInput, previousMouseInput) {
                this.soundVolumePicker.ProcessFrame(mouseInput, previousMouseInput);
                this.musicVolumePicker.ProcessFrame(mouseInput, previousMouseInput);
            },
            /**
             * Returns a number from 0 to 100 (both inclusive)
             *
             * @instance
             * @public
             * @this TuxPlanetSpeedrunAnyPercentLibrary.SoundAndMusicVolumePicker
             * @memberof TuxPlanetSpeedrunAnyPercentLibrary.SoundAndMusicVolumePicker
             * @return  {number}
             */
            GetCurrentSoundVolume: function () {
                return this.soundVolumePicker.GetCurrentSoundVolume();
            },
            /**
             * Returns a number from 0 to 100 (both inclusive)
             *
             * @instance
             * @public
             * @this TuxPlanetSpeedrunAnyPercentLibrary.SoundAndMusicVolumePicker
             * @memberof TuxPlanetSpeedrunAnyPercentLibrary.SoundAndMusicVolumePicker
             * @return  {number}
             */
            GetCurrentMusicVolume: function () {
                return this.musicVolumePicker.GetCurrentMusicVolume();
            },
            Render: function (displayOutput) {
                this.soundVolumePicker.Render(displayOutput);
                this.musicVolumePicker.Render(displayOutput);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.SoundAndMusicVolumePicker.Color", {
        $kind: "nested enum",
        statics: {
            fields: {
                Black: 0,
                White: 1
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.SoundVolumePicker", {
        fields: {
            _xPos: 0,
            _yPos: 0,
            _currentVolume: 0,
            _unmuteVolume: 0,
            _isDraggingVolumeSlider: false,
            _color: 0
        },
        ctors: {
            ctor: function (xPos, yPos, initialVolume, color) {
                this.$initialize();
                this._xPos = xPos;
                this._yPos = yPos;

                this._currentVolume = initialVolume;
                this._unmuteVolume = this._currentVolume;

                this._isDraggingVolumeSlider = false;

                this._color = color;
            }
        },
        methods: {
            ProcessFrame: function (mouseInput, previousMouseInput) {
                var mouseX = mouseInput.DTLibrary$IMouse$GetX();
                var mouseY = mouseInput.DTLibrary$IMouse$GetY();

                if (mouseInput.DTLibrary$IMouse$IsLeftMouseButtonPressed() && !previousMouseInput.DTLibrary$IMouse$IsLeftMouseButtonPressed() && this._xPos <= mouseX && mouseX <= ((this._xPos + 40) | 0) && this._yPos <= mouseY && mouseY <= ((this._yPos + 50) | 0)) {
                    if (this._currentVolume === 0) {
                        this._currentVolume = this._unmuteVolume === 0 ? TuxPlanetSpeedrunAnyPercentLibrary.GlobalState.DEFAULT_VOLUME : this._unmuteVolume;
                        this._unmuteVolume = this._currentVolume;
                    } else {
                        this._unmuteVolume = this._currentVolume;
                        this._currentVolume = 0;
                    }
                }

                if (mouseInput.DTLibrary$IMouse$IsLeftMouseButtonPressed() && !previousMouseInput.DTLibrary$IMouse$IsLeftMouseButtonPressed() && ((this._xPos + 50) | 0) <= mouseX && mouseX <= ((this._xPos + 150) | 0) && ((this._yPos + 10) | 0) <= mouseY && mouseY <= ((this._yPos + 40) | 0)) {
                    this._isDraggingVolumeSlider = true;
                }

                if (this._isDraggingVolumeSlider && mouseInput.DTLibrary$IMouse$IsLeftMouseButtonPressed()) {
                    var volume = (mouseX - (((this._xPos + 50) | 0))) | 0;
                    if (volume < 0) {
                        volume = 0;
                    }
                    if (volume > 100) {
                        volume = 100;
                    }

                    this._currentVolume = volume;
                    this._unmuteVolume = this._currentVolume;
                }

                if (!mouseInput.DTLibrary$IMouse$IsLeftMouseButtonPressed()) {
                    this._isDraggingVolumeSlider = false;
                }
            },
            /**
             * Returns a number from 0 to 100 (both inclusive)
             *
             * @instance
             * @public
             * @this TuxPlanetSpeedrunAnyPercentLibrary.SoundVolumePicker
             * @memberof TuxPlanetSpeedrunAnyPercentLibrary.SoundVolumePicker
             * @return  {number}
             */
            GetCurrentSoundVolume: function () {
                return this._currentVolume;
            },
            Render: function (displayOutput) {
                var image = new TuxPlanetSpeedrunAnyPercentLibrary.GameImage();
                var color;

                switch (this._color) {
                    case TuxPlanetSpeedrunAnyPercentLibrary.SoundAndMusicVolumePicker.Color.Black: 
                        image = this._currentVolume > 0 ? TuxPlanetSpeedrunAnyPercentLibrary.GameImage.SoundOn_Black : TuxPlanetSpeedrunAnyPercentLibrary.GameImage.SoundOff_Black;
                        color = DTLibrary.DTColor.Black();
                        break;
                    case TuxPlanetSpeedrunAnyPercentLibrary.SoundAndMusicVolumePicker.Color.White: 
                        image = this._currentVolume > 0 ? TuxPlanetSpeedrunAnyPercentLibrary.GameImage.SoundOn_White : TuxPlanetSpeedrunAnyPercentLibrary.GameImage.SoundOff_White;
                        color = DTLibrary.DTColor.White();
                        break;
                    default: 
                        throw new System.Exception();
                }

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImage(image, this._xPos, this._yPos);

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle(((this._xPos + 50) | 0), ((this._yPos + 10) | 0), 101, 31, color, false);

                if (this._currentVolume > 0) {
                    displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle(((this._xPos + 50) | 0), ((this._yPos + 10) | 0), this._currentVolume, 31, color, true);
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.Sprite", {
        fields: {
            Image: 0,
            X: 0,
            Y: 0,
            Width: 0,
            Height: 0,
            ScalingFactorScaled: 0
        },
        ctors: {
            ctor: function (image, x, y, width, height, scalingFactorScaled) {
                this.$initialize();
                this.Image = image;
                this.X = x;
                this.Y = y;
                this.Width = width;
                this.Height = height;
                this.ScalingFactorScaled = scalingFactorScaled;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.SpriteUtil", {
        statics: {
            methods: {
                CopySpriteArray: function (array) {
                    var $t, $t1;
                    var newArray = System.Array.init(array.length, null, System.Array.type(TuxPlanetSpeedrunAnyPercentLibrary.Sprite));

                    for (var i = 0; i < newArray.length; i = (i + 1) | 0) {
                        newArray[System.Array.index(i, newArray)] = System.Array.init(array[System.Array.index(i, array)].length, null, TuxPlanetSpeedrunAnyPercentLibrary.Sprite);
                        for (var j = 0; j < newArray[System.Array.index(i, newArray)].length; j = (j + 1) | 0) {
                            ($t = newArray[System.Array.index(i, newArray)])[System.Array.index(j, $t)] = ($t1 = array[System.Array.index(i, array)])[System.Array.index(j, $t1)];
                        }
                    }

                    return newArray;
                },
                EmptySpriteArray: function (length1, length2) {
                    var $t;
                    var array = System.Array.init(length1, null, System.Array.type(TuxPlanetSpeedrunAnyPercentLibrary.Sprite));

                    for (var i = 0; i < length1; i = (i + 1) | 0) {
                        array[System.Array.index(i, array)] = System.Array.init(length2, null, TuxPlanetSpeedrunAnyPercentLibrary.Sprite);
                        for (var j = 0; j < length2; j = (j + 1) | 0) {
                            ($t = array[System.Array.index(i, array)])[System.Array.index(j, $t)] = null;
                        }
                    }

                    return array;
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.Tilemap", {
        statics: {
            methods: {
                GetTilemapWithoutCutscene: function (tilemap) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.Tilemap(tilemap.backgroundSpritesArray, tilemap.midgroundSpritesArray, tilemap.foregroundSpritesArray, tilemap.isGroundArray, tilemap.isKillZoneArray, tilemap.isSpikesArray, tilemap.isEndOfLevelArray, TuxPlanetSpeedrunAnyPercentLibrary.ArrayUtil.EmptyBoolArray(tilemap.isGroundArray.length, tilemap.isGroundArray[System.Array.index(0, tilemap.isGroundArray)].length), tilemap.checkpointArray, tilemap.isKeyTileArrays, tilemap.tileWidth, tilemap.tileHeight, tilemap.enemies, null, tilemap.tuxLocation, tilemap.keyLocations, tilemap.gameMusic, tilemap.extraEnemiesToSpawn);
                },
                GetTilemapWithExtraEnemiesToSpawn: function (tilemap, extraEnemiesToSpawn) {
                    var extraEnemies = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Tilemap.IExtraEnemyToSpawn)).$ctor1(tilemap.extraEnemiesToSpawn);

                    for (var i = 0; i < extraEnemiesToSpawn.Count; i = (i + 1) | 0) {
                        extraEnemies.add(extraEnemiesToSpawn.getItem(i));
                    }

                    return new TuxPlanetSpeedrunAnyPercentLibrary.Tilemap(tilemap.backgroundSpritesArray, tilemap.midgroundSpritesArray, tilemap.foregroundSpritesArray, tilemap.isGroundArray, tilemap.isKillZoneArray, tilemap.isSpikesArray, tilemap.isEndOfLevelArray, tilemap.isCutsceneArray, tilemap.checkpointArray, tilemap.isKeyTileArrays, tilemap.tileWidth, tilemap.tileHeight, tilemap.enemies, tilemap.cutsceneName, tilemap.tuxLocation, tilemap.keyLocations, tilemap.gameMusic, extraEnemies);
                }
            }
        },
        fields: {
            backgroundSpritesArray: null,
            midgroundSpritesArray: null,
            foregroundSpritesArray: null,
            isGroundArray: null,
            isKillZoneArray: null,
            isSpikesArray: null,
            isEndOfLevelArray: null,
            isCutsceneArray: null,
            checkpointArray: null,
            isKeyTileArrays: null,
            isCopperKeyTileArray: null,
            isSilverKeyTileArray: null,
            isGoldKeyTileArray: null,
            isMythrilKeyTileArray: null,
            tileWidth: 0,
            tileHeight: 0,
            tilemapWidth: 0,
            tilemapHeight: 0,
            enemies: null,
            cutsceneName: null,
            tuxLocation: null,
            keyLocations: null,
            gameMusic: 0,
            extraEnemiesToSpawn: null
        },
        ctors: {
            ctor: function (backgroundSpritesArray, midgroundSpritesArray, foregroundSpritesArray, isGroundArray, isKillZoneArray, isSpikesArray, isEndOfLevelArray, isCutsceneArray, checkpointArray, isKeyTileArrays, tileWidth, tileHeight, enemies, cutsceneName, tuxLocation, keyLocations, gameMusic, extraEnemiesToSpawn) {
                var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7;
                this.$initialize();
                this.backgroundSpritesArray = TuxPlanetSpeedrunAnyPercentLibrary.SpriteUtil.CopySpriteArray(backgroundSpritesArray);
                this.midgroundSpritesArray = TuxPlanetSpeedrunAnyPercentLibrary.SpriteUtil.CopySpriteArray(midgroundSpritesArray);
                this.foregroundSpritesArray = TuxPlanetSpeedrunAnyPercentLibrary.SpriteUtil.CopySpriteArray(foregroundSpritesArray);
                this.isGroundArray = TuxPlanetSpeedrunAnyPercentLibrary.ArrayUtil.CopyBoolArray(isGroundArray);
                this.isKillZoneArray = TuxPlanetSpeedrunAnyPercentLibrary.ArrayUtil.CopyBoolArray(isKillZoneArray);
                this.isSpikesArray = TuxPlanetSpeedrunAnyPercentLibrary.ArrayUtil.CopyBoolArray(isSpikesArray);
                this.isEndOfLevelArray = TuxPlanetSpeedrunAnyPercentLibrary.ArrayUtil.CopyBoolArray(isEndOfLevelArray);
                this.isCutsceneArray = TuxPlanetSpeedrunAnyPercentLibrary.ArrayUtil.CopyBoolArray(isCutsceneArray);
                this.checkpointArray = TuxPlanetSpeedrunAnyPercentLibrary.ArrayUtil.ShallowCopyTArray(System.Tuple$2(System.Int32,System.Int32), checkpointArray);

                this.isKeyTileArrays = new (System.Collections.Generic.Dictionary$2(TuxPlanetSpeedrunAnyPercentLibrary.MapKey,System.Array.type(System.Array.type(System.Boolean))))();
                $t = Bridge.getEnumerator(isKeyTileArrays);
                try {
                    while ($t.moveNext()) {
                        var kvp = $t.Current;
                        if (kvp.value == null) {
                            this.isKeyTileArrays.set(kvp.key, null);
                        } else {
                            var copiedArray = System.Array.init(kvp.value.length, null, System.Array.type(System.Boolean));
                            for (var i = 0; i < kvp.value.length; i = (i + 1) | 0) {
                                if (($t1 = kvp.value)[System.Array.index(i, $t1)] == null) {
                                    copiedArray[System.Array.index(i, copiedArray)] = null;
                                } else {
                                    copiedArray[System.Array.index(i, copiedArray)] = System.Array.init(($t2 = kvp.value)[System.Array.index(i, $t2)].length, false, System.Boolean);
                                    for (var j = 0; j < ($t3 = kvp.value)[System.Array.index(i, $t3)].length; j = (j + 1) | 0) {
                                        ($t4 = copiedArray[System.Array.index(i, copiedArray)])[System.Array.index(j, $t4)] = ($t5 = ($t6 = kvp.value)[System.Array.index(i, $t6)])[System.Array.index(j, $t5)];
                                    }
                                }
                            }

                            this.isKeyTileArrays.set(kvp.key, copiedArray);
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                this.isCopperKeyTileArray = this.isKeyTileArrays.get(TuxPlanetSpeedrunAnyPercentLibrary.MapKey.Copper);
                this.isSilverKeyTileArray = this.isKeyTileArrays.get(TuxPlanetSpeedrunAnyPercentLibrary.MapKey.Silver);
                this.isGoldKeyTileArray = this.isKeyTileArrays.get(TuxPlanetSpeedrunAnyPercentLibrary.MapKey.Gold);
                this.isMythrilKeyTileArray = this.isKeyTileArrays.get(TuxPlanetSpeedrunAnyPercentLibrary.MapKey.Mythril);

                this.tileWidth = tileWidth;
                this.tileHeight = tileHeight;
                this.tilemapWidth = Bridge.Int.mul(tileWidth, foregroundSpritesArray.length);
                this.tilemapHeight = Bridge.Int.mul(tileHeight, foregroundSpritesArray[System.Array.index(0, foregroundSpritesArray)].length);
                this.enemies = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Tilemap.EnemySpawnLocation)).$ctor1(enemies);
                this.cutsceneName = cutsceneName;
                this.tuxLocation = tuxLocation;

                this.keyLocations = new (System.Collections.Generic.Dictionary$2(TuxPlanetSpeedrunAnyPercentLibrary.MapKey,System.Tuple$2(System.Int32,System.Int32)))();
                $t7 = Bridge.getEnumerator(keyLocations);
                try {
                    while ($t7.moveNext()) {
                        var kvp1 = $t7.Current;
                        this.keyLocations.set(kvp1.key, kvp1.value);
                    }
                } finally {
                    if (Bridge.is($t7, System.IDisposable)) {
                        $t7.System$IDisposable$Dispose();
                    }
                }

                this.gameMusic = gameMusic;

                this.extraEnemiesToSpawn = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Tilemap.IExtraEnemyToSpawn)).$ctor1(extraEnemiesToSpawn);
            }
        },
        methods: {
            GetArrayValue: function (array, worldX, worldY) {
                var $t;
                if (worldX < 0 || worldY < 0) {
                    return false;
                }

                var arrayI = (Bridge.Int.div(worldX, this.tileWidth)) | 0;
                var arrayJ = (Bridge.Int.div(worldY, this.tileHeight)) | 0;

                if (arrayI < array.length) {
                    if (arrayJ < array[System.Array.index(arrayI, array)].length) {
                        return ($t = array[System.Array.index(arrayI, array)])[System.Array.index(arrayJ, $t)];
                    }
                }

                return false;
            },
            IsGroundNotIncludingKeyTiles: function (x, y) {
                return this.GetArrayValue(this.isGroundArray, x, y);
            },
            IsSpikes: function (x, y) {
                return this.GetArrayValue(this.isSpikesArray, x, y);
            },
            IsKillZone: function (x, y) {
                return this.GetArrayValue(this.isKillZoneArray, x, y);
            },
            IsEndOfLevel: function (x, y) {
                return this.GetArrayValue(this.isEndOfLevelArray, x, y);
            },
            IsKeyTile: function (key, x, y) {
                var $t;
                var array;

                if (key === TuxPlanetSpeedrunAnyPercentLibrary.MapKey.Copper) {
                    array = this.isCopperKeyTileArray;
                } else {
                    if (key === TuxPlanetSpeedrunAnyPercentLibrary.MapKey.Silver) {
                        array = this.isSilverKeyTileArray;
                    } else {
                        if (key === TuxPlanetSpeedrunAnyPercentLibrary.MapKey.Gold) {
                            array = this.isGoldKeyTileArray;
                        } else {
                            if (key === TuxPlanetSpeedrunAnyPercentLibrary.MapKey.Mythril) {
                                array = this.isMythrilKeyTileArray;
                            } else {
                                array = this.isKeyTileArrays.get(key);
                            }
                        }
                    }
                }

                if (array == null) {
                    return false;
                }

                if (x < 0 || y < 0) {
                    return false;
                }

                var arrayI = (Bridge.Int.div(x, this.tileWidth)) | 0;
                var arrayJ = (Bridge.Int.div(y, this.tileHeight)) | 0;

                if (arrayI < array.length) {
                    if (array[System.Array.index(arrayI, array)] == null) {
                        return false;
                    }

                    if (arrayJ < array[System.Array.index(arrayI, array)].length) {
                        return ($t = array[System.Array.index(arrayI, array)])[System.Array.index(arrayJ, $t)];
                    }
                }

                return false;
            },
            GetCutscene: function (x, y) {
                var isCutscene = this.GetArrayValue(this.isCutsceneArray, x, y);

                if (isCutscene) {
                    return this.cutsceneName;
                }

                return null;
            },
            GetCheckpoint: function (x, y) {
                var $t;
                if (x < 0 || y < 0) {
                    return null;
                }

                var arrayI = (Bridge.Int.div(x, this.tileWidth)) | 0;
                var arrayJ = (Bridge.Int.div(y, this.tileHeight)) | 0;

                if (arrayI < this.checkpointArray.length) {
                    if (arrayJ < this.checkpointArray[System.Array.index(arrayI, this.checkpointArray)].length) {
                        return ($t = this.checkpointArray[System.Array.index(arrayI, this.checkpointArray)])[System.Array.index(arrayJ, $t)];
                    }
                }

                return null;
            },
            GetWidth: function () {
                return this.tilemapWidth;
            },
            GetHeight: function () {
                return this.tilemapHeight;
            },
            RenderSprites: function (sprites, renderKeyTiles, tuxX, tuxY, collectedKeys, cameraX, cameraY, windowWidth, windowHeight, displayOutput) {
                var $t, $t1, $t2, $t3, $t4;
                var worldX = 0;

                var windowLeft = (cameraX - ((Bridge.Int.div(windowWidth, 2)) | 0)) | 0;
                var windowRight = (cameraX + ((Bridge.Int.div(windowWidth, 2)) | 0)) | 0;
                var windowBottom = (cameraY - ((Bridge.Int.div(windowHeight, 2)) | 0)) | 0;
                var windowTop = (cameraY + ((Bridge.Int.div(windowHeight, 2)) | 0)) | 0;

                var copperKeyTileArray = this.isKeyTileArrays.get(TuxPlanetSpeedrunAnyPercentLibrary.MapKey.Copper);
                var silverKeyTileArray = this.isKeyTileArrays.get(TuxPlanetSpeedrunAnyPercentLibrary.MapKey.Silver);
                var goldKeyTileArray = this.isKeyTileArrays.get(TuxPlanetSpeedrunAnyPercentLibrary.MapKey.Gold);
                var mythrilKeyTileArray = this.isKeyTileArrays.get(TuxPlanetSpeedrunAnyPercentLibrary.MapKey.Mythril);

                for (var i = 0; i < sprites.length; i = (i + 1) | 0) {
                    if (windowLeft <= ((worldX + this.tileWidth) | 0) && worldX <= windowRight) {
                        var worldY = 0;

                        for (var j = 0; j < sprites[System.Array.index(i, sprites)].length; j = (j + 1) | 0) {
                            if (windowBottom <= ((worldY + this.tileHeight) | 0) && worldY <= windowTop) {
                                var sprite = ($t = sprites[System.Array.index(i, sprites)])[System.Array.index(j, $t)];

                                if (sprite != null) {
                                    displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(sprite.Image, sprite.X, sprite.Y, sprite.Width, sprite.Height, worldX, worldY, 0, sprite.ScalingFactorScaled);
                                }

                                if (renderKeyTiles) {
                                    var imageX;
                                    var mapKey;

                                    if (copperKeyTileArray != null && copperKeyTileArray[System.Array.index(i, copperKeyTileArray)] != null && ($t1 = copperKeyTileArray[System.Array.index(i, copperKeyTileArray)])[System.Array.index(j, $t1)]) {
                                        imageX = 0;
                                        mapKey = TuxPlanetSpeedrunAnyPercentLibrary.MapKey.Copper;
                                    } else if (silverKeyTileArray != null && silverKeyTileArray[System.Array.index(i, silverKeyTileArray)] != null && ($t2 = silverKeyTileArray[System.Array.index(i, silverKeyTileArray)])[System.Array.index(j, $t2)]) {
                                        imageX = 16;
                                        mapKey = TuxPlanetSpeedrunAnyPercentLibrary.MapKey.Silver;
                                    } else if (goldKeyTileArray != null && goldKeyTileArray[System.Array.index(i, goldKeyTileArray)] != null && ($t3 = goldKeyTileArray[System.Array.index(i, goldKeyTileArray)])[System.Array.index(j, $t3)]) {
                                        imageX = 32;
                                        mapKey = TuxPlanetSpeedrunAnyPercentLibrary.MapKey.Gold;
                                    } else if (mythrilKeyTileArray != null && mythrilKeyTileArray[System.Array.index(i, mythrilKeyTileArray)] != null && ($t4 = mythrilKeyTileArray[System.Array.index(i, mythrilKeyTileArray)])[System.Array.index(j, $t4)]) {
                                        imageX = 48;
                                        mapKey = TuxPlanetSpeedrunAnyPercentLibrary.MapKey.Mythril;
                                    } else {
                                        imageX = null;
                                        mapKey = null;
                                    }

                                    if (imageX != null) {
                                        var isTuxInRange;

                                        if (tuxX == null || tuxY == null) {
                                            isTuxInRange = false;
                                        } else {
                                            var deltaX = (System.Nullable.getValue(tuxX) - worldX) | 0;
                                            var deltaY = (System.Nullable.getValue(tuxY) - worldY) | 0;

                                            isTuxInRange = ((Bridge.Int.mul(deltaX, deltaX) + Bridge.Int.mul(deltaY, deltaY)) | 0) <= 90000;
                                        }

                                        if (!System.Linq.Enumerable.from(collectedKeys).contains(System.Nullable.getValue(mapKey)) || !isTuxInRange) {
                                            displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Lock, System.Nullable.getValue(imageX), 0, 16, 16, worldX, worldY, 0, 384);
                                        }
                                    }
                                }
                            }

                            worldY = (worldY + this.tileHeight) | 0;
                        }
                    }

                    worldX = (worldX + this.tileWidth) | 0;
                }
            },
            RenderBackgroundTiles: function (displayOutput, tuxX, tuxY, collectedKeys, cameraX, cameraY, windowWidth, windowHeight) {
                this.RenderSprites(this.backgroundSpritesArray, false, tuxX, tuxY, collectedKeys, cameraX, cameraY, windowWidth, windowHeight, displayOutput);

                this.RenderSprites(this.midgroundSpritesArray, false, tuxX, tuxY, collectedKeys, cameraX, cameraY, windowWidth, windowHeight, displayOutput);
            },
            RenderForegroundTiles: function (displayOutput, tuxX, tuxY, collectedKeys, cameraX, cameraY, windowWidth, windowHeight) {
                this.RenderSprites(this.foregroundSpritesArray, true, tuxX, tuxY, collectedKeys, cameraX, cameraY, windowWidth, windowHeight, displayOutput);
            },
            GetEnemies: function (xOffset, yOffset) {
                var $t;
                var list = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor();

                for (var i = 0; i < this.extraEnemiesToSpawn.Count; i = (i + 1) | 0) {
                    list.add(this.extraEnemiesToSpawn.getItem(i).TuxPlanetSpeedrunAnyPercentLibrary$Tilemap$IExtraEnemyToSpawn$GetEnemy(xOffset, yOffset));
                }

                var halfTileWidth = this.tileWidth >> 1;
                var halfTileHeight = this.tileHeight >> 1;

                $t = Bridge.getEnumerator(this.enemies);
                try {
                    while ($t.moveNext()) {
                        var enemy = $t.Current;
                        if (enemy.ActorId === 13) {
                            var xMibi = (((((Bridge.Int.mul(enemy.TileI, this.tileWidth) + halfTileWidth) | 0) + xOffset) | 0)) << 10;
                            var yMibi = (((((((Bridge.Int.mul(enemy.TileJ, this.tileHeight) + halfTileHeight) | 0) + 3) | 0) + yOffset) | 0)) << 10;

                            var enemySmartcap = TuxPlanetSpeedrunAnyPercentLibrary.EnemySmartcap.GetEnemySmartcap(xMibi, yMibi, true, enemy.EnemyId);

                            list.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemySpawnHelper(enemySmartcap, xMibi, yMibi, 48, 54));
                        } else if (enemy.ActorId === 23) {
                            var xMibi1 = (((((Bridge.Int.mul(enemy.TileI, this.tileWidth) + halfTileWidth) | 0) + xOffset) | 0)) << 10;
                            var yMibi1 = (((((Bridge.Int.mul(enemy.TileJ, this.tileHeight) + halfTileHeight) | 0) + yOffset) | 0)) << 10;

                            var konqi = TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiCutscene.GetEnemyKonqiCutscene(xMibi1, yMibi1, false, TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiCutscene.SHOULD_TELEPORT_OUT_DEFAULT_LEVEL_FLAG, enemy.EnemyId);

                            list.add(konqi);
                        } else if (enemy.ActorId === 26) {
                            var xMibi2 = (((((Bridge.Int.mul(enemy.TileI, this.tileWidth) + halfTileWidth) | 0) + xOffset) | 0)) << 10;
                            var yMibi2 = (((((Bridge.Int.mul(enemy.TileJ, this.tileHeight) + halfTileHeight) | 0) + yOffset) | 0)) << 10;

                            var enemySnail = TuxPlanetSpeedrunAnyPercentLibrary.EnemySnail.GetEnemySnail(xMibi2, yMibi2, true, enemy.EnemyId);

                            list.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemySpawnHelper(enemySnail, xMibi2, yMibi2, 48, 48));
                        } else if (enemy.ActorId === 27) {
                            var xMibi3 = (((((Bridge.Int.mul(enemy.TileI, this.tileWidth) + halfTileWidth) | 0) + xOffset) | 0)) << 10;
                            var yMibi3 = (((((Bridge.Int.mul(enemy.TileJ, this.tileHeight) + halfTileHeight) | 0) + yOffset) | 0)) << 10;

                            var enemyOrange = TuxPlanetSpeedrunAnyPercentLibrary.EnemyOrange.GetEnemyOrange(xMibi3, yMibi3, false, enemy.EnemyId);

                            list.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemySpawnHelper(enemyOrange, xMibi3, yMibi3, 48, 48));
                        } else if (enemy.ActorId === 46) {
                            var xMibi4 = (((((Bridge.Int.mul(enemy.TileI, this.tileWidth) + halfTileWidth) | 0) + xOffset) | 0)) << 10;
                            var yMibi4 = (((((Bridge.Int.mul(enemy.TileJ, this.tileHeight) + halfTileHeight) | 0) + yOffset) | 0)) << 10;

                            var enemyFlyamanita = TuxPlanetSpeedrunAnyPercentLibrary.EnemyFlyamanita.GetEnemyFlyamanita(xMibi4, yMibi4, enemy.EnemyId);

                            list.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemySpawnHelper(enemyFlyamanita, xMibi4, yMibi4, 60, 60));
                        } else if (enemy.ActorId === 67) {
                            var xMibi5 = (((((Bridge.Int.mul(enemy.TileI, this.tileWidth) + halfTileWidth) | 0) + xOffset) | 0)) << 10;
                            var yMibi5 = (((((Bridge.Int.mul(enemy.TileJ, this.tileHeight) + halfTileHeight) | 0) + yOffset) | 0)) << 10;

                            var enemyBlazeborn = TuxPlanetSpeedrunAnyPercentLibrary.EnemyBlazeborn.GetEnemyBlazeborn(xMibi5, yMibi5, true, enemy.EnemyId);

                            list.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemySpawnHelper(enemyBlazeborn, xMibi5, yMibi5, 48, 48));
                        } else if (enemy.ActorId === 73) {
                            var xMibi6 = (((((Bridge.Int.mul(enemy.TileI, this.tileWidth) + halfTileWidth) | 0) + xOffset) | 0)) << 10;
                            var yMibi6 = (((((Bridge.Int.mul(enemy.TileJ, this.tileHeight) + halfTileHeight) | 0) + yOffset) | 0)) << 10;

                            var enemyBouncecap = TuxPlanetSpeedrunAnyPercentLibrary.EnemyBouncecap.GetEnemyBouncecap(xMibi6, yMibi6, enemy.EnemyId);

                            list.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemySpawnHelper(enemyBouncecap, xMibi6, yMibi6, 48, 48));
                        } else {
                            throw new System.Exception();
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }

                return list;
            },
            PlayMusic: function () {
                return this.gameMusic;
            },
            GetTuxLocation: function (xOffset, yOffset) {
                if (this.tuxLocation != null) {
                    return { Item1: ((this.tuxLocation.Item1 + xOffset) | 0), Item2: ((this.tuxLocation.Item2 + yOffset) | 0) };
                }

                return null;
            },
            GetMapKeyLocation: function (mapKey, xOffset, yOffset) {
                var keyLocation = this.keyLocations.get(mapKey);

                if (keyLocation != null) {
                    return { Item1: ((keyLocation.Item1 + xOffset) | 0), Item2: ((keyLocation.Item2 + yOffset) | 0) };
                }

                return null;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.Tilemap.EnemySpawnLocation", {
        $kind: "nested class",
        fields: {
            ActorId: 0,
            TileI: 0,
            TileJ: 0,
            EnemyId: null
        },
        ctors: {
            ctor: function (actorId, tileI, tileJ, enemyId) {
                this.$initialize();
                this.ActorId = actorId;
                this.TileI = tileI;
                this.TileJ = tileJ;
                this.EnemyId = enemyId;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.TitleScreenFrame.Option", {
        $kind: "nested enum",
        statics: {
            fields: {
                ContinueGame: 0,
                NewGame: 1,
                Quit: 2
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.TuxPlanetSpeedrunAnyPercent", {
        statics: {
            fields: {
                FILE_ID_FOR_GLOBAL_CONFIGURATION: 0,
                FILE_ID_FOR_SESSION_STATE: 0,
                FILE_ID_FOR_SOUND_AND_MUSIC_VOLUME: 0,
                FILE_ID_FOR_SIMPLE_DATA_SESSION_STATE: 0
            },
            ctors: {
                init: function () {
                    this.FILE_ID_FOR_GLOBAL_CONFIGURATION = 1;
                    this.FILE_ID_FOR_SESSION_STATE = 2;
                    this.FILE_ID_FOR_SOUND_AND_MUSIC_VOLUME = 3;
                    this.FILE_ID_FOR_SIMPLE_DATA_SESSION_STATE = 4;
                }
            },
            methods: {
                GetFirstFrame: function (globalState) {
                    var frame = new TuxPlanetSpeedrunAnyPercentLibrary.InitialLoadingScreenFrame(globalState, false);
                    return frame;
                },
                GetPerformanceTest: function (globalState) {
                    var frame = new TuxPlanetSpeedrunAnyPercentLibrary.InitialLoadingScreenFrame(globalState, true);
                    return frame;
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.TuxState", {
        statics: {
            fields: {
                JUMP_Y_SPEED: 0,
                JUMP_BUFFER_DURATION: 0,
                LAST_TIME_ON_GROUND_BUFFER_DURATION: 0,
                TELEPORT_DURATION: 0,
                TELEPORT_COOLDOWN: 0,
                FINISHED_LEVEL_ANIMATION_DURATION: 0,
                IS_DEAD_ANIMATION_DURATION: 0
            },
            ctors: {
                init: function () {
                    this.JUMP_Y_SPEED = 1100000;
                    this.JUMP_BUFFER_DURATION = 500000;
                    this.LAST_TIME_ON_GROUND_BUFFER_DURATION = 500000;
                    this.TELEPORT_DURATION = 150000;
                    this.TELEPORT_COOLDOWN = 10000;
                    this.FINISHED_LEVEL_ANIMATION_DURATION = 1500000;
                    this.IS_DEAD_ANIMATION_DURATION = 3000000;
                }
            },
            methods: {
                GetDefaultTuxState: function (x, y) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.TuxState(x << 10, y << 10, 0, 0, new (System.Collections.Generic.List$1(System.Boolean)).ctor(), false, null, null, null, null, false, 0, null, false, null, true);
                }
            }
        },
        fields: {
            XMibi: 0,
            YMibi: 0,
            XSpeedInMibipixelsPerSecond: 0,
            YSpeedInMibipixelsPerSecond: 0,
            PreviousJumps: null,
            IsOnGround: false,
            LastTimeOnGround: null,
            TeleportStartingLocation: null,
            TeleportInProgressElapsedMicros: null,
            TeleportCooldown: null,
            HasAlreadyUsedTeleport: false,
            SpriteElapsedMicros: 0,
            HasFinishedLevelElapsedMicros: null,
            IsStillHoldingJumpButton: false,
            IsDeadElapsedMicros: null,
            IsFacingRight: false
        },
        props: {
            HasFinishedLevel: {
                get: function () {
                    return this.HasFinishedLevelElapsedMicros != null;
                }
            },
            IsDead: {
                get: function () {
                    return this.IsDeadElapsedMicros != null;
                }
            }
        },
        ctors: {
            ctor: function (xMibi, yMibi, xSpeedInMibipixelsPerSecond, ySpeedInMibipixelsPerSecond, previousJumps, isOnGround, lastTimeOnGround, teleportStartingLocation, teleportInProgressElapsedMicros, teleportCooldown, hasAlreadyUsedTeleport, spriteElapsedMicros, hasFinishedLevelElapsedMicros, isStillHoldingJumpButton, isDeadElapsedMicros, isFacingRight) {
                this.$initialize();
                this.XMibi = xMibi;
                this.YMibi = yMibi;
                this.XSpeedInMibipixelsPerSecond = xSpeedInMibipixelsPerSecond;
                this.YSpeedInMibipixelsPerSecond = ySpeedInMibipixelsPerSecond;
                this.PreviousJumps = new (System.Collections.Generic.List$1(System.Boolean)).$ctor1(previousJumps);
                this.IsOnGround = isOnGround;
                this.LastTimeOnGround = lastTimeOnGround;
                this.TeleportStartingLocation = teleportStartingLocation;
                this.TeleportInProgressElapsedMicros = teleportInProgressElapsedMicros;
                this.TeleportCooldown = teleportCooldown;
                this.HasAlreadyUsedTeleport = hasAlreadyUsedTeleport;
                this.SpriteElapsedMicros = spriteElapsedMicros;
                this.HasFinishedLevelElapsedMicros = hasFinishedLevelElapsedMicros;
                this.IsStillHoldingJumpButton = isStillHoldingJumpButton;
                this.IsDeadElapsedMicros = isDeadElapsedMicros;
                this.IsFacingRight = isFacingRight;
            }
        },
        methods: {
            SetYSpeedInMibipixelsPerSecond: function (ySpeedInMibipixelsPerSecond) {
                return new TuxPlanetSpeedrunAnyPercentLibrary.TuxState(this.XMibi, this.YMibi, this.XSpeedInMibipixelsPerSecond, ySpeedInMibipixelsPerSecond, this.PreviousJumps, this.IsOnGround, this.LastTimeOnGround, this.TeleportStartingLocation, this.TeleportInProgressElapsedMicros, this.TeleportCooldown, this.HasAlreadyUsedTeleport, this.SpriteElapsedMicros, this.HasFinishedLevelElapsedMicros, this.IsStillHoldingJumpButton, this.IsDeadElapsedMicros, this.IsFacingRight);
            },
            SetLastTimeOnGround: function (lastTimeOnGround) {
                return new TuxPlanetSpeedrunAnyPercentLibrary.TuxState(this.XMibi, this.YMibi, this.XSpeedInMibipixelsPerSecond, this.YSpeedInMibipixelsPerSecond, this.PreviousJumps, this.IsOnGround, lastTimeOnGround, this.TeleportStartingLocation, this.TeleportInProgressElapsedMicros, this.TeleportCooldown, this.HasAlreadyUsedTeleport, this.SpriteElapsedMicros, this.HasFinishedLevelElapsedMicros, this.IsStillHoldingJumpButton, this.IsDeadElapsedMicros, this.IsFacingRight);
            },
            SetIsStillHoldingJumpButton: function (isStillHoldingJumpButton) {
                return new TuxPlanetSpeedrunAnyPercentLibrary.TuxState(this.XMibi, this.YMibi, this.XSpeedInMibipixelsPerSecond, this.YSpeedInMibipixelsPerSecond, this.PreviousJumps, this.IsOnGround, this.LastTimeOnGround, this.TeleportStartingLocation, this.TeleportInProgressElapsedMicros, this.TeleportCooldown, this.HasAlreadyUsedTeleport, this.SpriteElapsedMicros, this.HasFinishedLevelElapsedMicros, isStillHoldingJumpButton, this.IsDeadElapsedMicros, this.IsFacingRight);
            },
            SetHasAlreadyUsedTeleport: function (hasAlreadyUsedTeleport) {
                return new TuxPlanetSpeedrunAnyPercentLibrary.TuxState(this.XMibi, this.YMibi, this.XSpeedInMibipixelsPerSecond, this.YSpeedInMibipixelsPerSecond, this.PreviousJumps, this.IsOnGround, this.LastTimeOnGround, this.TeleportStartingLocation, this.TeleportInProgressElapsedMicros, this.TeleportCooldown, hasAlreadyUsedTeleport, this.SpriteElapsedMicros, this.HasFinishedLevelElapsedMicros, this.IsStillHoldingJumpButton, this.IsDeadElapsedMicros, this.IsFacingRight);
            },
            Kill: function () {
                return new TuxPlanetSpeedrunAnyPercentLibrary.TuxState(this.XMibi, this.YMibi, 0, 0, new (System.Collections.Generic.List$1(System.Boolean)).ctor(), false, null, null, null, null, true, 0, null, false, 0, this.IsFacingRight);
            },
            GetHitbox: function () {
                return new TuxPlanetSpeedrunAnyPercentLibrary.Hitbox((((this.XMibi >> 10) - 12) | 0), (((this.YMibi >> 10) - 48) | 0), 24, 72);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.TuxStateProcessing", {
        statics: {
            fields: {
                SPRITE_MILLIS: 0
            },
            ctors: {
                init: function () {
                    this.SPRITE_MILLIS = 300;
                }
            },
            methods: {
                ProcessFrame_TuxDead: function (tuxState, move, elapsedMicrosPerFrame, soundOutput) {
                    if (System.Nullable.getValue(tuxState.IsDeadElapsedMicros) === 0) {
                        soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$PlaySound(TuxPlanetSpeedrunAnyPercentLibrary.GameSound.Die);
                    }

                    var newIsDeadElapsedMicros = (System.Nullable.getValue(tuxState.IsDeadElapsedMicros) + elapsedMicrosPerFrame) | 0;

                    return new TuxPlanetSpeedrunAnyPercentLibrary.TuxStateProcessing.Result(new TuxPlanetSpeedrunAnyPercentLibrary.TuxState(tuxState.XMibi, tuxState.YMibi, 0, 0, new (System.Collections.Generic.List$1(System.Boolean)).ctor(), false, null, null, null, null, true, ((tuxState.SpriteElapsedMicros + elapsedMicrosPerFrame) | 0), null, false, newIsDeadElapsedMicros, tuxState.IsFacingRight), false, newIsDeadElapsedMicros >= TuxPlanetSpeedrunAnyPercentLibrary.TuxState.IS_DEAD_ANIMATION_DURATION || move.Respawn, false);
                },
                GetMoveInfo: function (tuxState, move) {
                    if (tuxState.HasFinishedLevel) {
                        return new TuxPlanetSpeedrunAnyPercentLibrary.TuxStateProcessing.MoveInfo(true, false, false);
                    }

                    var isMovingRight = move.ArrowRight && !move.ArrowLeft;
                    var isMovingLeft = move.ArrowLeft && !move.ArrowRight;
                    var hasJumped = move.Jumped && (System.Array.getCount(tuxState.PreviousJumps, System.Boolean) === 0 || !System.Array.getItem(tuxState.PreviousJumps, 0, System.Boolean));

                    if (!hasJumped && move.Jumped) {
                        var previousMoveIndex = 0;

                        while (true) {
                            if (previousMoveIndex >= ((System.Array.getCount(tuxState.PreviousJumps, System.Boolean) - 1) | 0)) {
                                break;
                            }

                            if (System.Array.getItem(tuxState.PreviousJumps, previousMoveIndex, System.Boolean) && !System.Array.getItem(tuxState.PreviousJumps, ((previousMoveIndex + 1) | 0), System.Boolean)) {
                                hasJumped = true;
                                break;
                            }

                            previousMoveIndex = (previousMoveIndex + 1) | 0;
                        }
                    }

                    return new TuxPlanetSpeedrunAnyPercentLibrary.TuxStateProcessing.MoveInfo(isMovingRight, isMovingLeft, hasJumped);
                },
                ProcessFrame_TuxTeleport: function (tuxState, elapsedMicrosPerFrame) {
                    var newTeleportInProgressElapsedMicros = Bridge.Int.clip32(System.Nullable.getValue(tuxState.TeleportInProgressElapsedMicros) + elapsedMicrosPerFrame);
                    var hasFinishedTeleporting;

                    if (System.Nullable.getValue(newTeleportInProgressElapsedMicros) >= TuxPlanetSpeedrunAnyPercentLibrary.TuxState.TELEPORT_DURATION) {
                        hasFinishedTeleporting = true;
                    } else {
                        hasFinishedTeleporting = false;
                    }

                    return new TuxPlanetSpeedrunAnyPercentLibrary.TuxStateProcessing.Result(new TuxPlanetSpeedrunAnyPercentLibrary.TuxState(tuxState.XMibi, tuxState.YMibi, tuxState.XSpeedInMibipixelsPerSecond, tuxState.YSpeedInMibipixelsPerSecond, tuxState.PreviousJumps, tuxState.IsOnGround, tuxState.LastTimeOnGround, hasFinishedTeleporting ? null : tuxState.TeleportStartingLocation, hasFinishedTeleporting ? null : newTeleportInProgressElapsedMicros, hasFinishedTeleporting ? TuxPlanetSpeedrunAnyPercentLibrary.TuxState.TELEPORT_COOLDOWN : null, hasFinishedTeleporting ? true : false, tuxState.SpriteElapsedMicros, tuxState.HasFinishedLevelElapsedMicros, tuxState.IsStillHoldingJumpButton, tuxState.IsDeadElapsedMicros, tuxState.IsFacingRight), false, false, false);
                },
                IsTeleportable: function (tilemap, x, y) {
                    return !tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(x, y) && !tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsSpikes(x, y) && !tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsKillZone(x, y);
                },
                ProcessFrame: function (tuxState, move, previousMove, canUseTeleport, debugMode, debug_tuxInvulnerable, debugKeyboardInput, debugPreviousKeyboardInput, displayProcessing, soundOutput, elapsedMicrosPerFrame, tilemap) {
                    if (tuxState.IsDead) {
                        return TuxPlanetSpeedrunAnyPercentLibrary.TuxStateProcessing.ProcessFrame_TuxDead(tuxState, move, elapsedMicrosPerFrame, soundOutput);
                    }

                    if (tuxState.TeleportInProgressElapsedMicros != null) {
                        return TuxPlanetSpeedrunAnyPercentLibrary.TuxStateProcessing.ProcessFrame_TuxTeleport(tuxState, elapsedMicrosPerFrame);
                    }

                    var moveInfo = TuxPlanetSpeedrunAnyPercentLibrary.TuxStateProcessing.GetMoveInfo(tuxState, move);

                    var isMovingRight = moveInfo.IsMovingRight;
                    var isMovingLeft = moveInfo.IsMovingLeft;
                    var hasJumped = moveInfo.HasJumped;

                    var tuxX = tuxState.XMibi >> 10;
                    var tuxY = tuxState.YMibi >> 10;

                    var newIsOnGround = tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(tuxX, ((((tuxY - 48) | 0) - 1) | 0)) && !tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(tuxX, ((tuxY - 48) | 0)) || tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(((tuxX - 12) | 0), ((((tuxY - 48) | 0) - 1) | 0)) && !tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(((tuxX - 12) | 0), ((tuxY - 48) | 0)) || tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(((tuxX + 12) | 0), ((((tuxY - 48) | 0) - 1) | 0)) && !tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(((tuxX + 12) | 0), ((tuxY - 48) | 0));

                    var newLastTimeOnGround;
                    if (newIsOnGround && tuxState.YSpeedInMibipixelsPerSecond <= 0) {
                        newLastTimeOnGround = 0;
                    } else {
                        if (tuxState.LastTimeOnGround == null) {
                            newLastTimeOnGround = null;
                        } else {
                            newLastTimeOnGround = Bridge.Int.clip32(System.Nullable.getValue(tuxState.LastTimeOnGround) + elapsedMicrosPerFrame);
                        }
                    }

                    var newXMibi = tuxState.XMibi;
                    var newYMibi = tuxState.YMibi;

                    var newXSpeedInMibipixelsPerSecond = tuxState.XSpeedInMibipixelsPerSecond;
                    var newYSpeedInMibipixelsPerSecond = tuxState.YSpeedInMibipixelsPerSecond;

                    var newPreviousJumps = new (System.Collections.Generic.List$1(System.Boolean)).ctor();
                    var numFramesToTrack = (((Bridge.Int.div(TuxPlanetSpeedrunAnyPercentLibrary.TuxState.JUMP_BUFFER_DURATION, elapsedMicrosPerFrame)) | 0) + 1) | 0;
                    if (System.Array.getCount(tuxState.PreviousJumps, System.Boolean) < numFramesToTrack) {
                        newPreviousJumps.add(move.Jumped);
                        newPreviousJumps.AddRange(tuxState.PreviousJumps);
                    } else {
                        newPreviousJumps.add(move.Jumped);
                        for (var i = 0; i < ((numFramesToTrack - 1) | 0); i = (i + 1) | 0) {
                            newPreviousJumps.add(System.Array.getItem(tuxState.PreviousJumps, i, System.Boolean));
                        }
                    }

                    var newHasFinishedLevelElapsedMicros = tuxState.HasFinishedLevelElapsedMicros;

                    if (System.Nullable.hasValue(newHasFinishedLevelElapsedMicros)) {
                        newHasFinishedLevelElapsedMicros = Bridge.Int.clip32(System.Nullable.getValue(newHasFinishedLevelElapsedMicros) + elapsedMicrosPerFrame);
                    } else {
                        if (tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsEndOfLevel(tuxX, tuxY)) {
                            soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$PlaySound(TuxPlanetSpeedrunAnyPercentLibrary.GameSound.JingleWin01);
                            newHasFinishedLevelElapsedMicros = 0;
                        } else {
                            if (debugMode && debugKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.One) && !debugPreviousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.One)) {
                                soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$PlaySound(TuxPlanetSpeedrunAnyPercentLibrary.GameSound.JingleWin01);
                                newHasFinishedLevelElapsedMicros = TuxPlanetSpeedrunAnyPercentLibrary.TuxState.FINISHED_LEVEL_ANIMATION_DURATION;
                            }
                        }
                    }

                    var newSpriteElapsedMicros = (tuxState.SpriteElapsedMicros + elapsedMicrosPerFrame) | 0;

                    if (newSpriteElapsedMicros >= 2000000000) {
                        newSpriteElapsedMicros = 0;
                    }

                    if (isMovingRight) {
                        newXSpeedInMibipixelsPerSecond = (newXSpeedInMibipixelsPerSecond + (Bridge.Int.mul(elapsedMicrosPerFrame, 3))) | 0;
                    }

                    if (isMovingLeft) {
                        newXSpeedInMibipixelsPerSecond = (newXSpeedInMibipixelsPerSecond - (Bridge.Int.mul(elapsedMicrosPerFrame, 3))) | 0;
                    }

                    if (!isMovingRight && !isMovingLeft) {
                        if (newXSpeedInMibipixelsPerSecond > 0) {
                            newXSpeedInMibipixelsPerSecond = (newXSpeedInMibipixelsPerSecond - (Bridge.Int.mul(elapsedMicrosPerFrame, 3))) | 0;
                            if (newXSpeedInMibipixelsPerSecond < 0) {
                                newXSpeedInMibipixelsPerSecond = 0;
                            }
                        }
                        if (newXSpeedInMibipixelsPerSecond < 0) {
                            newXSpeedInMibipixelsPerSecond = (newXSpeedInMibipixelsPerSecond + (Bridge.Int.mul(elapsedMicrosPerFrame, 3))) | 0;
                            if (newXSpeedInMibipixelsPerSecond > 0) {
                                newXSpeedInMibipixelsPerSecond = 0;
                            }
                        }
                    }

                    if (newXSpeedInMibipixelsPerSecond > 1000000) {
                        newXSpeedInMibipixelsPerSecond = 1000000;
                    }

                    if (newXSpeedInMibipixelsPerSecond < -1000000) {
                        newXSpeedInMibipixelsPerSecond = -1000000;
                    }

                    var newIsStillHoldingJumpButton = tuxState.IsStillHoldingJumpButton && move.Jumped;

                    if (hasJumped && System.Nullable.hasValue(tuxState.LastTimeOnGround) && System.Nullable.getValue(tuxState.LastTimeOnGround) <= TuxPlanetSpeedrunAnyPercentLibrary.TuxState.LAST_TIME_ON_GROUND_BUFFER_DURATION && tuxState.YSpeedInMibipixelsPerSecond <= 0) {
                        soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$PlaySound(TuxPlanetSpeedrunAnyPercentLibrary.GameSound.Jump);
                        newYSpeedInMibipixelsPerSecond = TuxPlanetSpeedrunAnyPercentLibrary.TuxState.JUMP_Y_SPEED;
                        newIsStillHoldingJumpButton = true;
                        newLastTimeOnGround = null;
                        newPreviousJumps = new (System.Collections.Generic.List$1(System.Boolean)).ctor();
                    }

                    if (!newIsStillHoldingJumpButton && tuxState.IsStillHoldingJumpButton) {
                        newYSpeedInMibipixelsPerSecond = (Bridge.Int.div(Bridge.Int.mul(newYSpeedInMibipixelsPerSecond, 2), 5)) | 0;
                    }

                    if (!tuxState.IsOnGround && newYSpeedInMibipixelsPerSecond >= -3000000) {
                        newYSpeedInMibipixelsPerSecond = (newYSpeedInMibipixelsPerSecond - (Bridge.Int.mul(elapsedMicrosPerFrame, 3))) | 0;
                    }

                    var proposedNewYMibi = System.Int64.clip32(System.Int64(newYMibi).add(System.Int64(newYSpeedInMibipixelsPerSecond).mul(System.Int64(elapsedMicrosPerFrame)).div(System.Int64(1024)).div(System.Int64(1024))));
                    if (newYSpeedInMibipixelsPerSecond > 0) {
                        while (true) {
                            if (tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(((Bridge.Int.div(newXMibi, 1024)) | 0), ((((Bridge.Int.div(proposedNewYMibi, 1024)) | 0) + 24) | 0)) || tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(((((Bridge.Int.div(newXMibi, 1024)) | 0) - 12) | 0), ((((Bridge.Int.div(proposedNewYMibi, 1024)) | 0) + 24) | 0)) || tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(((((Bridge.Int.div(newXMibi, 1024)) | 0) + 12) | 0), ((((Bridge.Int.div(proposedNewYMibi, 1024)) | 0) + 24) | 0))) {
                                newYSpeedInMibipixelsPerSecond = 0;
                                proposedNewYMibi = (proposedNewYMibi - 1024) | 0;
                                if (proposedNewYMibi <= newYMibi) {
                                    proposedNewYMibi = newYMibi;
                                    break;
                                }
                            } else {
                                break;
                            }
                        }
                    }
                    if (newYSpeedInMibipixelsPerSecond < 0) {
                        while (true) {
                            if (tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(((Bridge.Int.div(newXMibi, 1024)) | 0), ((((Bridge.Int.div(proposedNewYMibi, 1024)) | 0) - 48) | 0)) || tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(((((Bridge.Int.div(newXMibi, 1024)) | 0) - 12) | 0), ((((Bridge.Int.div(proposedNewYMibi, 1024)) | 0) - 48) | 0)) || tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(((((Bridge.Int.div(newXMibi, 1024)) | 0) + 12) | 0), ((((Bridge.Int.div(proposedNewYMibi, 1024)) | 0) - 48) | 0))) {
                                newYSpeedInMibipixelsPerSecond = 0;
                                proposedNewYMibi = (proposedNewYMibi + 1024) | 0;
                                if (proposedNewYMibi >= newYMibi) {
                                    proposedNewYMibi = newYMibi;
                                    break;
                                }
                            } else {
                                break;
                            }
                        }
                    }

                    newYMibi = proposedNewYMibi;

                    var proposedNewXMibi = System.Int64.clip32(System.Int64(newXMibi).add(System.Int64(newXSpeedInMibipixelsPerSecond).mul(System.Int64(elapsedMicrosPerFrame)).div(System.Int64(1024)).div(System.Int64(1024))));
                    if (newXSpeedInMibipixelsPerSecond > 0) {
                        while (true) {
                            if (tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(((((Bridge.Int.div(proposedNewXMibi, 1024)) | 0) + 12) | 0), ((((Bridge.Int.div(newYMibi, 1024)) | 0) - 48) | 0)) || tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(((((Bridge.Int.div(proposedNewXMibi, 1024)) | 0) + 12) | 0), ((Bridge.Int.div(newYMibi, 1024)) | 0)) || tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(((((Bridge.Int.div(proposedNewXMibi, 1024)) | 0) + 12) | 0), ((((Bridge.Int.div(newYMibi, 1024)) | 0) + 24) | 0))) {
                                newXSpeedInMibipixelsPerSecond = 0;
                                proposedNewXMibi = (proposedNewXMibi - 1024) | 0;
                                if (proposedNewXMibi <= newXMibi) {
                                    proposedNewXMibi = newXMibi;
                                    break;
                                }
                            } else {
                                break;
                            }
                        }
                    }
                    if (newXSpeedInMibipixelsPerSecond < 0) {
                        while (true) {
                            if (tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(((((Bridge.Int.div(proposedNewXMibi, 1024)) | 0) - 12) | 0), ((((Bridge.Int.div(newYMibi, 1024)) | 0) - 48) | 0)) || tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(((((Bridge.Int.div(proposedNewXMibi, 1024)) | 0) - 12) | 0), ((Bridge.Int.div(newYMibi, 1024)) | 0)) || tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(((((Bridge.Int.div(proposedNewXMibi, 1024)) | 0) - 12) | 0), ((((Bridge.Int.div(newYMibi, 1024)) | 0) + 24) | 0))) {
                                newXSpeedInMibipixelsPerSecond = 0;
                                proposedNewXMibi = (proposedNewXMibi + 1024) | 0;
                                if (proposedNewXMibi >= newXMibi) {
                                    proposedNewXMibi = newXMibi;
                                    break;
                                }
                            } else {
                                break;
                            }
                        }
                    }

                    newXMibi = proposedNewXMibi;

                    var newIsDeadElapsedMicros = null;

                    if (tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsKillZone((((tuxState.XMibi >> 10) - 12) | 0), (((tuxState.YMibi >> 10) - 48) | 0)) || tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsKillZone((((tuxState.XMibi >> 10) + 12) | 0), (((tuxState.YMibi >> 10) - 48) | 0)) || tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsKillZone((((tuxState.XMibi >> 10) - 12) | 0), (((tuxState.YMibi >> 10) + 24) | 0)) || tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsKillZone((((tuxState.XMibi >> 10) + 12) | 0), (((tuxState.YMibi >> 10) + 24) | 0))) {
                        newIsDeadElapsedMicros = 0;
                    }

                    if (!debug_tuxInvulnerable) {
                        if (tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsSpikes((((tuxState.XMibi >> 10) - 12) | 0), (((tuxState.YMibi >> 10) - 48) | 0)) || tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsSpikes((((tuxState.XMibi >> 10) + 12) | 0), (((tuxState.YMibi >> 10) - 48) | 0)) || tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsSpikes((((tuxState.XMibi >> 10) - 12) | 0), (((tuxState.YMibi >> 10) + 24) | 0)) || tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsSpikes((((tuxState.XMibi >> 10) + 12) | 0), (((tuxState.YMibi >> 10) + 24) | 0))) {
                            newIsDeadElapsedMicros = 0;
                        }
                    }

                    var newTeleportCooldown = tuxState.TeleportCooldown;
                    if (newTeleportCooldown != null) {
                        newTeleportCooldown = Bridge.Int.clip32(System.Nullable.getValue(newTeleportCooldown) - elapsedMicrosPerFrame);
                        if (System.Nullable.getValue(newTeleportCooldown) <= 0) {
                            newTeleportCooldown = null;
                        }
                    }

                    var newTeleportStartingLocation = null;
                    var newTeleportInProgressElapsedMicros = tuxState.TeleportInProgressElapsedMicros;
                    if (newIsDeadElapsedMicros == null && canUseTeleport && newHasFinishedLevelElapsedMicros == null && tuxState.TeleportCooldown == null && !tuxState.HasAlreadyUsedTeleport && move.Teleported && !previousMove.Teleported) {
                        soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$PlaySound(TuxPlanetSpeedrunAnyPercentLibrary.GameSound.Teleport);

                        newTeleportStartingLocation = { Item1: tuxState.XMibi, Item2: tuxState.YMibi };
                        newTeleportInProgressElapsedMicros = 0;

                        var deltaX;

                        if (move.ArrowRight && !move.ArrowLeft) {
                            deltaX = 1;
                        } else {
                            if (move.ArrowLeft && !move.ArrowRight) {
                                deltaX = -1;
                            } else {
                                deltaX = 0;
                            }
                        }

                        var deltaY;

                        if (move.ArrowUp && !move.ArrowDown) {
                            deltaY = 1;
                        } else {
                            if (move.ArrowDown && !move.ArrowUp) {
                                deltaY = -1;
                            } else {
                                deltaY = 0;
                            }
                        }

                        if (deltaX === 0 && deltaY === 0) {
                            deltaX = tuxState.IsFacingRight ? 1 : -1;
                        }

                        var interval = 100;

                        if (deltaX === 0 || deltaY === 0) {
                            interval = 141;
                        }

                        while (true) {
                            if (interval === 0) {
                                newTeleportStartingLocation = null;
                                newTeleportInProgressElapsedMicros = null;
                                newTeleportCooldown = TuxPlanetSpeedrunAnyPercentLibrary.TuxState.TELEPORT_COOLDOWN;
                                break;
                            }

                            proposedNewXMibi = (newXMibi + Bridge.Int.mul(Bridge.Int.mul(Bridge.Int.mul(deltaX, 1024), interval), 2)) | 0;
                            proposedNewYMibi = (newYMibi + Bridge.Int.mul(Bridge.Int.mul(Bridge.Int.mul(deltaY, 1024), interval), 2)) | 0;
                            interval = (interval - 1) | 0;

                            if (TuxPlanetSpeedrunAnyPercentLibrary.TuxStateProcessing.IsTeleportable(tilemap, ((((Bridge.Int.div(proposedNewXMibi, 1024)) | 0) - 12) | 0), ((((Bridge.Int.div(proposedNewYMibi, 1024)) | 0) - 48) | 0)) && TuxPlanetSpeedrunAnyPercentLibrary.TuxStateProcessing.IsTeleportable(tilemap, ((((Bridge.Int.div(proposedNewXMibi, 1024)) | 0) - 12) | 0), ((((Bridge.Int.div(proposedNewYMibi, 1024)) | 0) - 6) | 0)) && TuxPlanetSpeedrunAnyPercentLibrary.TuxStateProcessing.IsTeleportable(tilemap, ((((Bridge.Int.div(proposedNewXMibi, 1024)) | 0) - 12) | 0), ((((Bridge.Int.div(proposedNewYMibi, 1024)) | 0) + 24) | 0)) && TuxPlanetSpeedrunAnyPercentLibrary.TuxStateProcessing.IsTeleportable(tilemap, ((((Bridge.Int.div(proposedNewXMibi, 1024)) | 0) + 12) | 0), ((((Bridge.Int.div(proposedNewYMibi, 1024)) | 0) - 48) | 0)) && TuxPlanetSpeedrunAnyPercentLibrary.TuxStateProcessing.IsTeleportable(tilemap, ((((Bridge.Int.div(proposedNewXMibi, 1024)) | 0) + 12) | 0), ((((Bridge.Int.div(proposedNewYMibi, 1024)) | 0) - 6) | 0)) && TuxPlanetSpeedrunAnyPercentLibrary.TuxStateProcessing.IsTeleportable(tilemap, ((((Bridge.Int.div(proposedNewXMibi, 1024)) | 0) + 12) | 0), ((((Bridge.Int.div(proposedNewYMibi, 1024)) | 0) + 24) | 0))) {
                                newXMibi = proposedNewXMibi;
                                newYMibi = proposedNewYMibi;
                                newXSpeedInMibipixelsPerSecond = Bridge.Int.mul(Bridge.Int.mul(deltaX, 1024), (deltaX === 0 || deltaY === 0 ? 1448 : 1024));
                                newYSpeedInMibipixelsPerSecond = Bridge.Int.mul(Bridge.Int.mul(deltaY, 1024), (deltaX === 0 || deltaY === 0 ? 1448 : 1024));
                                newLastTimeOnGround = null;
                                break;
                            }
                        }
                    }

                    return new TuxPlanetSpeedrunAnyPercentLibrary.TuxStateProcessing.Result(new TuxPlanetSpeedrunAnyPercentLibrary.TuxState(newXMibi, newYMibi, newXSpeedInMibipixelsPerSecond, newYSpeedInMibipixelsPerSecond, newPreviousJumps, newIsOnGround, newLastTimeOnGround, newTeleportStartingLocation, newTeleportInProgressElapsedMicros, newTeleportCooldown, tuxState.HasAlreadyUsedTeleport ? !newIsOnGround : false, newSpriteElapsedMicros, newHasFinishedLevelElapsedMicros, newIsStillHoldingJumpButton, newIsDeadElapsedMicros, isMovingRight ? true : (isMovingLeft ? false : tuxState.IsFacingRight)), System.Nullable.hasValue(newHasFinishedLevelElapsedMicros) && System.Nullable.getValue(newHasFinishedLevelElapsedMicros) >= TuxPlanetSpeedrunAnyPercentLibrary.TuxState.FINISHED_LEVEL_ANIMATION_DURATION, false, System.Nullable.hasValue(newHasFinishedLevelElapsedMicros));
                },
                Render: function (tuxState, displayOutput, camera, windowWidth, windowHeight) {
                    var image = tuxState.IsFacingRight ? TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Tux : TuxPlanetSpeedrunAnyPercentLibrary.GameImage.TuxMirrored;

                    displayOutput = new TuxPlanetSpeedrunAnyPercentLibrary.TuxPlanetSpeedrunTranslatedDisplayOutput(displayOutput, ((-(((camera.X - (windowWidth >> 1)) | 0))) | 0), ((-(((camera.Y - (windowHeight >> 1)) | 0))) | 0));

                    if (tuxState.IsDead) {
                        var spriteNum = (((Bridge.Int.div(tuxState.SpriteElapsedMicros, (300000))) | 0)) % 2;


                        var initialDeadYVelocity = 450;
                        var acceleration = -800;
                        var time = (Bridge.Int.div(System.Nullable.getValue(tuxState.IsDeadElapsedMicros), 1000)) | 0;
                        var deadYOffset = (((Bridge.Int.div(((Bridge.Int.div(Bridge.Int.mul(((Bridge.Int.div(Bridge.Int.mul(acceleration, time), 1000)) | 0), time), 2)) | 0), 1000)) | 0) + ((Bridge.Int.div(Bridge.Int.mul(initialDeadYVelocity, time), 1000)) | 0)) | 0;

                        displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(image, ((64 + Bridge.Int.mul(spriteNum, 32)) | 0), 192, 32, 32, ((((Bridge.Int.div(tuxState.XMibi, 1024)) | 0) - 48) | 0), ((((((Bridge.Int.div(tuxState.YMibi, 1024)) | 0) - 48) | 0) + deadYOffset) | 0), 0, 384);
                    } else if (tuxState.TeleportInProgressElapsedMicros != null) {
                        var deltaX = (tuxState.XMibi - tuxState.TeleportStartingLocation.Item1) | 0;
                        var deltaY = (tuxState.YMibi - tuxState.TeleportStartingLocation.Item2) | 0;

                        for (var i = Math.max(0, ((System.Nullable.getValue(tuxState.TeleportInProgressElapsedMicros) - 50000) | 0)); i < System.Nullable.getValue(tuxState.TeleportInProgressElapsedMicros); i = (i + (5000)) | 0) {
                            var renderXMibi = (tuxState.TeleportStartingLocation.Item1 + ((Bridge.Int.div(Bridge.Int.mul(deltaX, (i >> 10)), (146))) | 0)) | 0;
                            var renderYMibi = (tuxState.TeleportStartingLocation.Item2 + ((Bridge.Int.div(Bridge.Int.mul(deltaY, (i >> 10)), (146))) | 0)) | 0;

                            var alpha = (Bridge.Int.div(Bridge.Int.mul((((i - (((System.Nullable.getValue(tuxState.TeleportInProgressElapsedMicros) - 50000) | 0))) | 0)), 170), 50000)) | 0;

                            if (alpha > 0 && alpha <= 255) {
                                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle((((renderXMibi >> 10) - 20) | 0), (((renderYMibi >> 10) - 20) | 0), 40, 40, new DTLibrary.DTColor.$ctor1(255, 255, 255, alpha), true);
                            }
                        }
                    } else {
                        var spriteNum1;

                        var tuxXSpeedNormalized = tuxState.IsFacingRight ? tuxState.XSpeedInMibipixelsPerSecond : ((-tuxState.XSpeedInMibipixelsPerSecond) | 0);

                        if (tuxXSpeedNormalized === 0 && tuxState.YSpeedInMibipixelsPerSecond === 0) {
                            spriteNum1 = (((Bridge.Int.div(tuxState.SpriteElapsedMicros, (300000))) | 0)) % 4;
                        } else {
                            if (tuxState.YSpeedInMibipixelsPerSecond === 0 && tuxXSpeedNormalized < 0) {
                                spriteNum1 = 4;
                            } else {
                                if (tuxState.YSpeedInMibipixelsPerSecond === 0 && tuxXSpeedNormalized < 10000) {
                                    spriteNum1 = (((((Bridge.Int.div(tuxState.SpriteElapsedMicros, (80000))) | 0)) % 8) + 8) | 0;
                                } else {
                                    if (tuxState.YSpeedInMibipixelsPerSecond === 0) {
                                        spriteNum1 = (((((Bridge.Int.div(tuxState.SpriteElapsedMicros, (80000))) | 0)) % 8) + 16) | 0;
                                    } else {
                                        if (tuxState.YSpeedInMibipixelsPerSecond > 0) {
                                            spriteNum1 = 33;
                                        } else {
                                            if (tuxState.YSpeedInMibipixelsPerSecond < 0) {
                                                spriteNum1 = 36;
                                            } else {
                                                spriteNum1 = 0;
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        var imageX = Bridge.Int.mul((spriteNum1 % 8), 32);
                        var imageY = Bridge.Int.mul(((Bridge.Int.div(spriteNum1, 8)) | 0), 32);

                        displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(image, imageX, imageY, 32, 32, ((((Bridge.Int.div(tuxState.XMibi, 1024)) | 0) - 48) | 0), ((((Bridge.Int.div(tuxState.YMibi, 1024)) | 0) - 48) | 0), 0, 384);
                    }
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.TuxStateProcessing.MoveInfo", {
        $kind: "nested class",
        fields: {
            IsMovingRight: false,
            IsMovingLeft: false,
            HasJumped: false
        },
        ctors: {
            ctor: function (isMovingRight, isMovingLeft, hasJumped) {
                this.$initialize();
                this.IsMovingRight = isMovingRight;
                this.IsMovingLeft = isMovingLeft;
                this.HasJumped = hasJumped;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.TuxStateProcessing.Result", {
        $kind: "nested class",
        fields: {
            TuxState: null,
            EndLevel: false,
            HasDied: false,
            ShouldStopMusic: false
        },
        ctors: {
            ctor: function (tuxState, endLevel, hasDied, shouldStopMusic) {
                this.$initialize();
                this.TuxState = tuxState;
                this.EndLevel = endLevel;
                this.HasDied = hasDied;
                this.ShouldStopMusic = shouldStopMusic;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.VersionInfo", {
        statics: {
            methods: {
                GetVersionInfo: function () {
                    var versionHistory = TuxPlanetSpeedrunAnyPercentLibrary.VersionInfo.GetVersionHistory();

                    return versionHistory.getItem(((versionHistory.Count - 1) | 0));
                },
                GetVersionHistory: function () {
                    var list = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.VersionInfo)).ctor();

                    list.add(new TuxPlanetSpeedrunAnyPercentLibrary.VersionInfo("1.00", "1204514613893229"));
                    list.add(new TuxPlanetSpeedrunAnyPercentLibrary.VersionInfo("1.01", "3012096945791874"));
                    list.add(new TuxPlanetSpeedrunAnyPercentLibrary.VersionInfo("1.02", "7537950542756516"));
                    list.add(new TuxPlanetSpeedrunAnyPercentLibrary.VersionInfo("1.03", "3031094705805517"));
                    list.add(new TuxPlanetSpeedrunAnyPercentLibrary.VersionInfo("1.04", "5271794898295337"));

                    return list;
                },
                /**
                 * Returns a guid that doesn't change between versions, but is unique to this game
                 and isn't used by other games.
                 *
                 * @static
                 * @public
                 * @this TuxPlanetSpeedrunAnyPercentLibrary.VersionInfo
                 * @memberof TuxPlanetSpeedrunAnyPercentLibrary.VersionInfo
                 * @return  {string}
                 */
                GetGuidForGame: function () {
                    return "1754720524504623";
                }
            }
        },
        fields: {
            Version: null,
            AlphanumericVersionGuid: null
        },
        ctors: {
            ctor: function (version, alphanumericVersionGuid) {
                this.$initialize();
                this.Version = version;
                this.AlphanumericVersionGuid = alphanumericVersionGuid;
            }
        }
    });

    Bridge.define("DTLibrary.ConsoleLogger", {
        inherits: [DTLibrary.IDTLogger],
        alias: [
            "Write", "DTLibrary$IDTLogger$Write",
            "WriteLine$1", "DTLibrary$IDTLogger$WriteLine$1",
            "WriteLine", "DTLibrary$IDTLogger$WriteLine"
        ],
        methods: {
            Write: function (str) {
                System.Console.Write(str);
            },
            WriteLine$1: function (str) {
                System.Console.WriteLine(str);
            },
            WriteLine: function () {
                System.Console.WriteLine();
            }
        }
    });

    /**
     * CopiedKeyboard is just an easy way to make a deep copy
     of an IKeyboard object.  Its constructor takes an IKeyboard
     object in order to create a copy of the keyboard.
     In general, making a copy of the IKeyboard object can
     be useful, since this copy is immutable and is guaranteed
     not to change.
     *
     * @public
     * @class DTLibrary.CopiedKeyboard
     * @implements  DTLibrary.IKeyboard
     */
    Bridge.define("DTLibrary.CopiedKeyboard", {
        inherits: [DTLibrary.IKeyboard],
        fields: {
            mapping: null
        },
        alias: ["IsPressed", "DTLibrary$IKeyboard$IsPressed"],
        ctors: {
            ctor: function (keyboard) {
                var $t;
                this.$initialize();
                this.mapping = new (System.Collections.Generic.Dictionary$2(DTLibrary.Key,System.Boolean))();
                $t = Bridge.getEnumerator(System.Enum.getValues(DTLibrary.Key));
                try {
                    while ($t.moveNext()) {
                        var key = Bridge.cast($t.Current, DTLibrary.Key);
                        this.mapping.set(key, keyboard.DTLibrary$IKeyboard$IsPressed(key));
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            }
        },
        methods: {
            IsPressed: function (key) {
                return this.mapping.get(key);
            }
        }
    });

    /**
     * CopiedMouse is just an easy way to make a deep copy
     of an IMouse object.  Its constructor takes an IMouse
     object in order to create a copy of the mouse.
     In general, making a copy of the IMouse object can
     be useful, since this copy is immutable and is guaranteed
     not to change.
     *
     * @public
     * @class DTLibrary.CopiedMouse
     * @implements  DTLibrary.IMouse
     */
    Bridge.define("DTLibrary.CopiedMouse", {
        inherits: [DTLibrary.IMouse],
        fields: {
            x: 0,
            y: 0,
            leftMouse: false,
            rightMouse: false
        },
        alias: [
            "GetX", "DTLibrary$IMouse$GetX",
            "GetY", "DTLibrary$IMouse$GetY",
            "IsLeftMouseButtonPressed", "DTLibrary$IMouse$IsLeftMouseButtonPressed",
            "IsRightMouseButtonPressed", "DTLibrary$IMouse$IsRightMouseButtonPressed"
        ],
        ctors: {
            ctor: function (mouse) {
                this.$initialize();
                this.x = mouse.DTLibrary$IMouse$GetX();
                this.y = mouse.DTLibrary$IMouse$GetY();
                this.leftMouse = mouse.DTLibrary$IMouse$IsLeftMouseButtonPressed();
                this.rightMouse = mouse.DTLibrary$IMouse$IsRightMouseButtonPressed();
            }
        },
        methods: {
            GetX: function () {
                return this.x;
            },
            GetY: function () {
                return this.y;
            },
            IsLeftMouseButtonPressed: function () {
                return this.leftMouse;
            },
            IsRightMouseButtonPressed: function () {
                return this.rightMouse;
            }
        }
    });

    Bridge.define("DTLibrary.DisplayLogger", {
        inherits: [DTLibrary.IDTLogger],
        statics: {
            fields: {
                NUMBER_OF_LINES_TO_LOG: 0
            },
            ctors: {
                init: function () {
                    this.NUMBER_OF_LINES_TO_LOG = 5;
                }
            }
        },
        fields: {
            lines: null,
            x: 0,
            y: 0
        },
        alias: [
            "Write", "DTLibrary$IDTLogger$Write",
            "WriteLine$1", "DTLibrary$IDTLogger$WriteLine$1",
            "WriteLine", "DTLibrary$IDTLogger$WriteLine"
        ],
        ctors: {
            ctor: function (x, y) {
                this.$initialize();
                this.x = x;
                this.y = y;
                this.lines = System.Array.init(6, null, System.String);
                for (var i = 0; i < this.lines.length; i = (i + 1) | 0) {
                    this.lines[System.Array.index(i, this.lines)] = "";
                }
            }
        },
        methods: {
            Render: function (ImageEnum, FontEnum, displayOutput, font, color) {
                var text = "";

                if (this.lines[System.Array.index(((this.lines.length - 1) | 0), this.lines)].length > 0) {
                    for (var i = 1; i < this.lines.length; i = (i + 1) | 0) {
                        text = (text || "") + (this.lines[System.Array.index(i, this.lines)] || "") + "\n";
                    }
                } else {
                    for (var i1 = 0; i1 < ((this.lines.length - 1) | 0); i1 = (i1 + 1) | 0) {
                        text = (text || "") + (this.lines[System.Array.index(i1, this.lines)] || "") + "\n";
                    }
                }

                displayOutput["DTLibrary$IDisplayOutput$2$" + Bridge.getTypeAlias(ImageEnum) + "$" + Bridge.getTypeAlias(FontEnum) + "$TryDrawText"](this.x, this.y, text, font, color);
            },
            Write: function (str) {
                while (true) {
                    var index = System.String.indexOf(str, String.fromCharCode(10));

                    if (index < 0) {
                        this.lines[System.Array.index(((this.lines.length - 1) | 0), this.lines)] = (this.lines[System.Array.index(((this.lines.length - 1) | 0), this.lines)] || "") + (str || "");
                        break;
                    }

                    var line = str.substr(0, index);
                    this.lines[System.Array.index(((this.lines.length - 1) | 0), this.lines)] = (this.lines[System.Array.index(((this.lines.length - 1) | 0), this.lines)] || "") + (line || "");

                    for (var i = 1; i < this.lines.length; i = (i + 1) | 0) {
                        this.lines[System.Array.index(((i - 1) | 0), this.lines)] = this.lines[System.Array.index(i, this.lines)];
                    }
                    this.lines[System.Array.index(((this.lines.length - 1) | 0), this.lines)] = "";

                    str = str.substr(((index + 1) | 0));
                }
            },
            WriteLine$1: function (str) {
                this.Write((str || "") + "\n");
            },
            WriteLine: function () {
                this.Write("\n");
            }
        }
    });

    /**
     * An interface that marks an implementation of IDTRandom as completely deterministic.
     Deterministic is defined to mean that the implementation will always
     return the same values given the same seed and sequence of function calls.
     This means that an instance of IDTDeterministicRandom must behave identically
     across a variety of dimensions.
     For instance:
     * Two instances on different computers (with the same seed and function calls)
       must return the same values.
     * Two instances being executed at different times (with the same seed and function calls)
       must return the same values.
     * Two instances being executed on different versions of C# (with the same seed and function calls)
       must return the same values.
     * Two instances being executed on different operating systems (with the same seed and function calls)
       must return the same values.
     *
     * @abstract
     * @public
     * @class DTLibrary.IDTDeterministicRandom
     * @implements  DTLibrary.IDTRandom
     */
    Bridge.define("DTLibrary.IDTDeterministicRandom", {
        inherits: [DTLibrary.IDTRandom],
        $kind: "interface"
    });

    Bridge.define("DTLibrary.DTDisplay$2", function (ImageEnum, FontEnum) { return {
        inherits: [DTLibrary.IDisplayProcessing$1(ImageEnum),DTLibrary.IDisplayOutput$2(ImageEnum,FontEnum),DTLibrary.IDisplayCleanup],
        alias: [
            "DrawImage", "DTLibrary$IDisplayOutput$2$" + Bridge.getTypeAlias(ImageEnum) + "$" + Bridge.getTypeAlias(FontEnum) + "$DrawImage",
            "DrawImageRotatedClockwise$2", "DTLibrary$IDisplayOutput$2$" + Bridge.getTypeAlias(ImageEnum) + "$" + Bridge.getTypeAlias(FontEnum) + "$DrawImageRotatedClockwise"
        ],
        methods: {
            DrawImage: function (image, x, y) {
                this.DrawImageRotatedClockwise$1(image, x, y, 0, 128);
            },
            DrawImageRotatedClockwise$2: function (image, x, y, degreesScaled) {
                this.DrawImageRotatedClockwise$1(image, x, y, degreesScaled, 128);
            }
        }
    }; });

    /**
     * An implementation of IDTRandom that simply
     uses the System.Random class.
     *
     * @public
     * @class DTLibrary.DTRandom
     * @implements  DTLibrary.IDTRandom
     */
    Bridge.define("DTLibrary.DTRandom", {
        inherits: [DTLibrary.IDTRandom],
        fields: {
            random: null
        },
        alias: [
            "AddSeed", "DTLibrary$IDTRandom$AddSeed",
            "NextInt", "DTLibrary$IDTRandom$NextInt",
            "NextBool", "DTLibrary$IDTRandom$NextBool"
        ],
        ctors: {
            ctor: function () {
                this.$initialize();
                this.random = new System.Random.ctor();
            }
        },
        methods: {
            AddSeed: function (i) {
                this.random = new System.Random.$ctor1(i);
            },
            NextInt: function (i) {
                return this.random.Next$1(i);
            },
            NextBool: function () {
                return this.NextInt(2) === 1;
            }
        }
    });

    /**
     * An implementation of IKeyboard that simply represents
     no input (i.e. no keys are pressed).
     *
     * @public
     * @class DTLibrary.EmptyKeyboard
     * @implements  DTLibrary.IKeyboard
     */
    Bridge.define("DTLibrary.EmptyKeyboard", {
        inherits: [DTLibrary.IKeyboard],
        alias: ["IsPressed", "DTLibrary$IKeyboard$IsPressed"],
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            IsPressed: function (key) {
                return false;
            }
        }
    });

    Bridge.define("DTLibrary.EmptyLogger", {
        inherits: [DTLibrary.IDTLogger],
        alias: [
            "Write", "DTLibrary$IDTLogger$Write",
            "WriteLine$1", "DTLibrary$IDTLogger$WriteLine$1",
            "WriteLine", "DTLibrary$IDTLogger$WriteLine"
        ],
        methods: {
            Write: function (str) { },
            WriteLine$1: function (str) { },
            WriteLine: function () { }
        }
    });

    /**
     * An implementation of IMouse that simply represents
     no input.
     *
     * @public
     * @class DTLibrary.EmptyMouse
     * @implements  DTLibrary.IMouse
     */
    Bridge.define("DTLibrary.EmptyMouse", {
        inherits: [DTLibrary.IMouse],
        alias: [
            "GetX", "DTLibrary$IMouse$GetX",
            "GetY", "DTLibrary$IMouse$GetY",
            "IsLeftMouseButtonPressed", "DTLibrary$IMouse$IsLeftMouseButtonPressed",
            "IsRightMouseButtonPressed", "DTLibrary$IMouse$IsRightMouseButtonPressed"
        ],
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            GetX: function () {
                return 0;
            },
            GetY: function () {
                return 0;
            },
            IsLeftMouseButtonPressed: function () {
                return false;
            },
            IsRightMouseButtonPressed: function () {
                return false;
            }
        }
    });

    Bridge.definei("DTLibrary.IMusic$1", function (MusicEnum) { return {
        inherits: [DTLibrary.IMusicOutput$1(MusicEnum),DTLibrary.IMusicProcessing,DTLibrary.IMusicCleanup],
        $kind: "interface"
    }; });

    Bridge.define("DTLibrary.EmptySoundOutput$1", function (SoundEnum) { return {
        inherits: [DTLibrary.ISoundOutput$1(SoundEnum)],
        fields: {
            soundVolume: 0
        },
        alias: [
            "LoadSounds", "DTLibrary$ISoundOutput$1$" + Bridge.getTypeAlias(SoundEnum) + "$LoadSounds",
            "SetSoundVolume", "DTLibrary$ISoundOutput$1$" + Bridge.getTypeAlias(SoundEnum) + "$SetSoundVolume",
            "GetSoundVolume", "DTLibrary$ISoundOutput$1$" + Bridge.getTypeAlias(SoundEnum) + "$GetSoundVolume",
            "PlaySound", "DTLibrary$ISoundOutput$1$" + Bridge.getTypeAlias(SoundEnum) + "$PlaySound",
            "ProcessFrame", "DTLibrary$ISoundOutput$1$" + Bridge.getTypeAlias(SoundEnum) + "$ProcessFrame",
            "DisposeSounds", "DTLibrary$ISoundOutput$1$" + Bridge.getTypeAlias(SoundEnum) + "$DisposeSounds"
        ],
        ctors: {
            ctor: function () {
                this.$initialize();
                this.soundVolume = 100;
            }
        },
        methods: {
            LoadSounds: function () {
                return true;
            },
            SetSoundVolume: function (volume) {
                this.soundVolume = volume;
            },
            GetSoundVolume: function () {
                return this.soundVolume;
            },
            PlaySound: function (sound) { },
            ProcessFrame: function () { },
            DisposeSounds: function () { }
        }
    }; });

    Bridge.define("DTLibrary.SimpleTimer", {
        inherits: [DTLibrary.ITimer],
        alias: ["GetNumberOfMicroSeconds", "DTLibrary$ITimer$GetNumberOfMicroSeconds"],
        methods: {
            GetNumberOfMicroSeconds: function () {
                return System.DateTime.getTicks(System.DateTime.getNow()).div(System.Int64(10));
            }
        }
    });

    Bridge.define("DTLibrary.SimulatedMouse", {
        inherits: [DTLibrary.IMouse],
        fields: {
            x: 0,
            y: 0,
            isLeftMouseButtonPressed: false,
            isRightMouseButtonPressed: false
        },
        alias: [
            "GetX", "DTLibrary$IMouse$GetX",
            "GetY", "DTLibrary$IMouse$GetY",
            "IsLeftMouseButtonPressed", "DTLibrary$IMouse$IsLeftMouseButtonPressed",
            "IsRightMouseButtonPressed", "DTLibrary$IMouse$IsRightMouseButtonPressed"
        ],
        ctors: {
            ctor: function (x, y, isLeftMouseButtonPressed, isRightMouseButtonPressed) {
                this.$initialize();
                this.x = x;
                this.y = y;
                this.isLeftMouseButtonPressed = isLeftMouseButtonPressed;
                this.isRightMouseButtonPressed = isRightMouseButtonPressed;
            }
        },
        methods: {
            GetX: function () {
                return this.x;
            },
            GetY: function () {
                return this.y;
            },
            IsLeftMouseButtonPressed: function () {
                return this.isLeftMouseButtonPressed;
            },
            IsRightMouseButtonPressed: function () {
                return this.isRightMouseButtonPressed;
            }
        }
    });

    Bridge.define("DTLibrary.TranslatedDisplayOutput$2", function (ImageEnum, FontEnum) { return {
        inherits: [DTLibrary.IDisplayOutput$2(ImageEnum,FontEnum)],
        fields: {
            display: null,
            xOffsetInPixels: 0,
            yOffsetInPixels: 0
        },
        alias: [
            "DrawRectangle", "DTLibrary$IDisplayOutput$2$" + Bridge.getTypeAlias(ImageEnum) + "$" + Bridge.getTypeAlias(FontEnum) + "$DrawRectangle",
            "DrawText", "DTLibrary$IDisplayOutput$2$" + Bridge.getTypeAlias(ImageEnum) + "$" + Bridge.getTypeAlias(FontEnum) + "$DrawText",
            "TryDrawText", "DTLibrary$IDisplayOutput$2$" + Bridge.getTypeAlias(ImageEnum) + "$" + Bridge.getTypeAlias(FontEnum) + "$TryDrawText",
            "DrawInitialLoadingScreen", "DTLibrary$IDisplayOutput$2$" + Bridge.getTypeAlias(ImageEnum) + "$" + Bridge.getTypeAlias(FontEnum) + "$DrawInitialLoadingScreen",
            "DrawImage", "DTLibrary$IDisplayOutput$2$" + Bridge.getTypeAlias(ImageEnum) + "$" + Bridge.getTypeAlias(FontEnum) + "$DrawImage",
            "DrawImageRotatedClockwise$2", "DTLibrary$IDisplayOutput$2$" + Bridge.getTypeAlias(ImageEnum) + "$" + Bridge.getTypeAlias(FontEnum) + "$DrawImageRotatedClockwise",
            "DrawImageRotatedClockwise$1", "DTLibrary$IDisplayOutput$2$" + Bridge.getTypeAlias(ImageEnum) + "$" + Bridge.getTypeAlias(FontEnum) + "$DrawImageRotatedClockwise$1",
            "DrawImageRotatedClockwise", "DTLibrary$IDisplayOutput$2$" + Bridge.getTypeAlias(ImageEnum) + "$" + Bridge.getTypeAlias(FontEnum) + "$DrawImageRotatedClockwise$2",
            "GetWidth", "DTLibrary$IDisplayOutput$2$" + Bridge.getTypeAlias(ImageEnum) + "$" + Bridge.getTypeAlias(FontEnum) + "$GetWidth",
            "GetHeight", "DTLibrary$IDisplayOutput$2$" + Bridge.getTypeAlias(ImageEnum) + "$" + Bridge.getTypeAlias(FontEnum) + "$GetHeight"
        ],
        ctors: {
            ctor: function (display, xOffsetInPixels, yOffsetInPixels) {
                this.$initialize();
                this.display = display;
                this.xOffsetInPixels = xOffsetInPixels;
                this.yOffsetInPixels = yOffsetInPixels;
            }
        },
        methods: {
            DrawRectangle: function (x, y, width, height, color, fill) {
                this.display["DTLibrary$IDisplayOutput$2$" + Bridge.getTypeAlias(ImageEnum) + "$" + Bridge.getTypeAlias(FontEnum) + "$DrawRectangle"](((x + this.xOffsetInPixels) | 0), ((y + this.yOffsetInPixels) | 0), width, height, color, fill);
            },
            DrawText: function (x, y, text, font, color) {
                this.display["DTLibrary$IDisplayOutput$2$" + Bridge.getTypeAlias(ImageEnum) + "$" + Bridge.getTypeAlias(FontEnum) + "$DrawText"](((x + this.xOffsetInPixels) | 0), ((y + this.yOffsetInPixels) | 0), text, font, color);
            },
            TryDrawText: function (x, y, text, font, color) {
                this.display["DTLibrary$IDisplayOutput$2$" + Bridge.getTypeAlias(ImageEnum) + "$" + Bridge.getTypeAlias(FontEnum) + "$TryDrawText"](((x + this.xOffsetInPixels) | 0), ((y + this.yOffsetInPixels) | 0), text, font, color);
            },
            DrawInitialLoadingScreen: function () {
                this.display["DTLibrary$IDisplayOutput$2$" + Bridge.getTypeAlias(ImageEnum) + "$" + Bridge.getTypeAlias(FontEnum) + "$DrawInitialLoadingScreen"]();
            },
            DrawImage: function (image, x, y) {
                this.DrawImageRotatedClockwise$1(image, x, y, 0, 128);
            },
            DrawImageRotatedClockwise$2: function (image, x, y, degreesScaled) {
                this.DrawImageRotatedClockwise$1(image, x, y, degreesScaled, 128);
            },
            DrawImageRotatedClockwise$1: function (image, x, y, degreesScaled, scalingFactorScaled) {
                this.display["DTLibrary$IDisplayOutput$2$" + Bridge.getTypeAlias(ImageEnum) + "$" + Bridge.getTypeAlias(FontEnum) + "$DrawImageRotatedClockwise$1"](image, ((x + this.xOffsetInPixels) | 0), ((y + this.yOffsetInPixels) | 0), degreesScaled, scalingFactorScaled);
            },
            DrawImageRotatedClockwise: function (image, imageX, imageY, imageWidth, imageHeight, x, y, degreesScaled, scalingFactorScaled) {
                this.display["DTLibrary$IDisplayOutput$2$" + Bridge.getTypeAlias(ImageEnum) + "$" + Bridge.getTypeAlias(FontEnum) + "$DrawImageRotatedClockwise$2"](image, imageX, imageY, imageWidth, imageHeight, ((x + this.xOffsetInPixels) | 0), ((y + this.yOffsetInPixels) | 0), degreesScaled, scalingFactorScaled);
            },
            GetWidth: function (image) {
                return this.display["DTLibrary$IDisplayOutput$2$" + Bridge.getTypeAlias(ImageEnum) + "$" + Bridge.getTypeAlias(FontEnum) + "$GetWidth"](image);
            },
            GetHeight: function (image) {
                return this.display["DTLibrary$IDisplayOutput$2$" + Bridge.getTypeAlias(ImageEnum) + "$" + Bridge.getTypeAlias(FontEnum) + "$GetHeight"](image);
            }
        }
    }; });

    /**
     * An implementation of IMouse that takes an existing IMouse object (in the constructor)
     and creates an IMouse implementation that's simply the same mouse input, but translated
     by some offset.
     *
     * @public
     * @class DTLibrary.TranslatedMouse
     * @implements  DTLibrary.IMouse
     */
    Bridge.define("DTLibrary.TranslatedMouse", {
        inherits: [DTLibrary.IMouse],
        fields: {
            x: 0,
            y: 0,
            pressedLeft: false,
            pressedRight: false
        },
        alias: [
            "GetX", "DTLibrary$IMouse$GetX",
            "GetY", "DTLibrary$IMouse$GetY",
            "IsLeftMouseButtonPressed", "DTLibrary$IMouse$IsLeftMouseButtonPressed",
            "IsRightMouseButtonPressed", "DTLibrary$IMouse$IsRightMouseButtonPressed"
        ],
        ctors: {
            ctor: function (mouse, xOffset, yOffset) {
                this.$initialize();
                this.x = (mouse.DTLibrary$IMouse$GetX() + xOffset) | 0;
                this.y = (mouse.DTLibrary$IMouse$GetY() + yOffset) | 0;
                this.pressedLeft = mouse.DTLibrary$IMouse$IsLeftMouseButtonPressed();
                this.pressedRight = mouse.DTLibrary$IMouse$IsRightMouseButtonPressed();
            }
        },
        methods: {
            GetX: function () {
                return this.x;
            },
            GetY: function () {
                return this.y;
            },
            IsLeftMouseButtonPressed: function () {
                return this.pressedLeft;
            },
            IsRightMouseButtonPressed: function () {
                return this.pressedRight;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.GameImage", {
        $kind: "enum",
        statics: {
            fields: {
                SoundOn_Black: 0,
                SoundOff_Black: 1,
                MusicOn_Black: 2,
                MusicOff_Black: 3,
                SoundOn_White: 4,
                SoundOff_White: 5,
                MusicOn_White: 6,
                MusicOff_White: 7,
                TilemapSnow: 8,
                TilemapCastle: 9,
                BossDoor: 10,
                Tux: 11,
                TuxMirrored: 12,
                Konqi: 13,
                KonqiMirrored: 14,
                KonqiFire: 15,
                KonqiFireMirrored: 16,
                Yeti: 17,
                YetiMirrored: 18,
                Blazeborn: 19,
                BlazebornMirrored: 20,
                Smartcap: 21,
                SmartcapMirrored: 22,
                Bouncecap: 23,
                BouncecapMirrored: 24,
                Flyamanita: 25,
                FlyamanitaMirrored: 26,
                Snail: 27,
                SnailMirrored: 28,
                SnailBlue: 29,
                SnailBlueMirrored: 30,
                FishBlue: 31,
                FishBlueMirrored: 32,
                FishGreen: 33,
                FishGreenMirrored: 34,
                FishRed: 35,
                FishRedMirrored: 36,
                Orange: 37,
                OrangeMirrored: 38,
                Poof: 39,
                BossHealth: 40,
                C4: 41,
                Coin: 42,
                EarthShell: 43,
                Igloo: 44,
                Actors: 45,
                Solid: 46,
                Spikes: 47,
                Flash: 48,
                ExplodeF: 49,
                Flame: 50,
                FlameBlue: 51,
                Lock: 52,
                KeyCopper: 53,
                KeySilver: 54,
                KeyGold: 55,
                KeyMythril: 56,
                Signpost: 57,
                PathDirt: 58,
                ForestSnowy: 59,
                RocksSnow: 60,
                Snow: 61,
                WaterCliffSnow: 62,
                Mountains: 63,
                Towns: 64,
                LevelIcons: 65,
                TuxOverworld: 66,
                WaterSurface: 67,
                OceanBackground: 68,
                Arctis2: 69,
                CaveBackground: 70
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercent.BridgeFileIO", {
        inherits: [DTLibrary.IFileIO],
        alias: [
            "PersistData", "DTLibrary$IFileIO$PersistData",
            "PersistVersionedData", "DTLibrary$IFileIO$PersistVersionedData",
            "FetchData", "DTLibrary$IFileIO$FetchData",
            "FetchVersionedData", "DTLibrary$IFileIO$FetchVersionedData"
        ],
        ctors: {
            ctor: function () {
                this.$initialize();
                eval("\r\n\t\t\t\twindow.BridgeFileIOJavascript = ((function () {\r\n\t\t\t\t\t'use strict';\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar persistData = function (fileName, base64String) {\r\n\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\tlocalStorage.setItem(fileName, base64String);\r\n\t\t\t\t\t\t} catch (error) {\r\n\t\t\t\t\t\t\t// do nothing\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\tvar fetchData = function (fileName) {\r\n\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\tvar value = localStorage.getItem(fileName);\r\n\t\t\t\t\t\t\treturn value;\r\n\t\t\t\t\t\t} catch (error) {\r\n\t\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar hasData = function (fileName) {\r\n\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\tvar value = localStorage.getItem(fileName);\r\n\t\t\t\t\t\t\treturn value !== null;\r\n\t\t\t\t\t\t} catch (error) {\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tpersistData: persistData,\r\n\t\t\t\t\t\tfetchData: fetchData,\r\n\t\t\t\t\t\thasData: hasData\r\n\t\t\t\t\t};\r\n\t\t\t\t})());\r\n\t\t\t");
            }
        },
        methods: {
            GetFileName: function (fileId) {
                var versionInfo = TuxPlanetSpeedrunAnyPercentLibrary.VersionInfo.GetVersionInfo();
                var alphanumericVersionGuid = versionInfo.AlphanumericVersionGuid;
                return "guid" + (alphanumericVersionGuid || "") + "_file" + (DTLibrary.StringUtil.ToStringCultureInvariant(fileId) || "");
            },
            GetVersionedFileName: function (fileId, version) {
                var gameGuid = TuxPlanetSpeedrunAnyPercentLibrary.VersionInfo.GetGuidForGame();
                return "guid" + (gameGuid || "") + "_file" + (DTLibrary.StringUtil.ToStringCultureInvariant(fileId) || "") + "_version" + (DTLibrary.StringUtil.ToStringCultureInvariant(version) || "");
            },
            PersistData: function (fileId, data) {
                var list = new (System.Collections.Generic.List$1(System.Byte)).ctor();

                var iterator = data.GetIterator();

                while (true) {
                    if (!iterator.HasNextByte()) {
                        break;
                    }

                    list.add(iterator.TryPop());
                }

                var array = System.Array.init(list.Count, 0, System.Byte);
                for (var i = 0; i < array.length; i = (i + 1) | 0) {
                    array[System.Array.index(i, array)] = list.getItem(i);
                }

                var base64String = System.Convert.toBase64String(array, null, null, null);

                window.BridgeFileIOJavascript.persistData(this.GetFileName(fileId), base64String);
            },
            PersistVersionedData: function (fileId, version, data) {
                var list = new (System.Collections.Generic.List$1(System.Byte)).ctor();

                var iterator = data.GetIterator();

                while (true) {
                    if (!iterator.HasNextByte()) {
                        break;
                    }

                    list.add(iterator.TryPop());
                }

                var array = System.Array.init(list.Count, 0, System.Byte);
                for (var i = 0; i < array.length; i = (i + 1) | 0) {
                    array[System.Array.index(i, array)] = list.getItem(i);
                }

                var base64String = System.Convert.toBase64String(array, null, null, null);

                window.BridgeFileIOJavascript.persistData(this.GetVersionedFileName(fileId, version), base64String);
            },
            FetchData: function (fileId) {
                var fileName = this.GetFileName(fileId);

                var hasData = eval("window.BridgeFileIOJavascript.hasData('" + (fileName || "") + "')");

                if (!hasData) {
                    return null;
                }

                var result = eval("window.BridgeFileIOJavascript.fetchData('" + (fileName || "") + "')");

                if (result == null) {
                    return null;
                }

                try {
                    var array = System.Convert.fromBase64String(result);
                    var byteList = new DTLibrary.ByteList.Builder();

                    for (var i = 0; i < array.length; i = (i + 1) | 0) {
                        byteList.Add(array[System.Array.index(i, array)]);
                    }

                    return byteList.ToByteList();
                } catch ($e1) {
                    $e1 = System.Exception.create($e1);
                }

                return null;
            },
            FetchVersionedData: function (fileId, version) {
                var fileName = this.GetVersionedFileName(fileId, version);

                var hasData = eval("window.BridgeFileIOJavascript.hasData('" + (fileName || "") + "')");

                if (!hasData) {
                    return null;
                }

                var result = eval("window.BridgeFileIOJavascript.fetchData('" + (fileName || "") + "')");

                if (result == null) {
                    return null;
                }

                try {
                    var array = System.Convert.fromBase64String(result);
                    var byteList = new DTLibrary.ByteList.Builder();

                    for (var i = 0; i < array.length; i = (i + 1) | 0) {
                        byteList.Add(array[System.Array.index(i, array)]);
                    }

                    return byteList.ToByteList();
                } catch ($e1) {
                    $e1 = System.Exception.create($e1);
                }

                return null;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercent.BridgeKeyboard", {
        inherits: [DTLibrary.IKeyboard],
        alias: ["IsPressed", "DTLibrary$IKeyboard$IsPressed"],
        ctors: {
            ctor: function (disableArrowKeyScrolling) {
                this.$initialize();
                eval("\r\n\t\t\t\twindow.BridgeKeyboardJavascript = ((function () {\r\n\t\t\t\t\t'use strict';\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar keysBeingPressed = [];\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar disableArrowKeyScrolling = " + ((disableArrowKeyScrolling ? "true" : "false") || "") + ";\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar mapKeyToCanonicalKey = function (key) {\r\n\t\t\t\t\t\tif (key === 'A')\r\n\t\t\t\t\t\t\treturn 'a';\r\n\t\t\t\t\t\tif (key === 'B')\r\n\t\t\t\t\t\t\treturn 'b';\r\n\t\t\t\t\t\tif (key === 'C')\r\n\t\t\t\t\t\t\treturn 'c';\r\n\t\t\t\t\t\tif (key === 'D')\r\n\t\t\t\t\t\t\treturn 'd';\r\n\t\t\t\t\t\tif (key === 'E')\r\n\t\t\t\t\t\t\treturn 'e';\r\n\t\t\t\t\t\tif (key === 'F')\r\n\t\t\t\t\t\t\treturn 'f';\r\n\t\t\t\t\t\tif (key === 'G')\r\n\t\t\t\t\t\t\treturn 'g';\r\n\t\t\t\t\t\tif (key === 'H')\r\n\t\t\t\t\t\t\treturn 'h';\r\n\t\t\t\t\t\tif (key === 'I')\r\n\t\t\t\t\t\t\treturn 'i';\r\n\t\t\t\t\t\tif (key === 'J')\r\n\t\t\t\t\t\t\treturn 'j';\r\n\t\t\t\t\t\tif (key === 'K')\r\n\t\t\t\t\t\t\treturn 'k';\r\n\t\t\t\t\t\tif (key === 'L')\r\n\t\t\t\t\t\t\treturn 'l';\r\n\t\t\t\t\t\tif (key === 'M')\r\n\t\t\t\t\t\t\treturn 'm';\r\n\t\t\t\t\t\tif (key === 'N')\r\n\t\t\t\t\t\t\treturn 'n';\r\n\t\t\t\t\t\tif (key === 'O')\r\n\t\t\t\t\t\t\treturn 'o';\r\n\t\t\t\t\t\tif (key === 'P')\r\n\t\t\t\t\t\t\treturn 'p';\r\n\t\t\t\t\t\tif (key === 'Q')\r\n\t\t\t\t\t\t\treturn 'q';\r\n\t\t\t\t\t\tif (key === 'R')\r\n\t\t\t\t\t\t\treturn 'r';\r\n\t\t\t\t\t\tif (key === 'S')\r\n\t\t\t\t\t\t\treturn 's';\r\n\t\t\t\t\t\tif (key === 'T')\r\n\t\t\t\t\t\t\treturn 't';\r\n\t\t\t\t\t\tif (key === 'U')\r\n\t\t\t\t\t\t\treturn 'u';\r\n\t\t\t\t\t\tif (key === 'V')\r\n\t\t\t\t\t\t\treturn 'v';\r\n\t\t\t\t\t\tif (key === 'W')\r\n\t\t\t\t\t\t\treturn 'w';\r\n\t\t\t\t\t\tif (key === 'X')\r\n\t\t\t\t\t\t\treturn 'x';\r\n\t\t\t\t\t\tif (key === 'Y')\r\n\t\t\t\t\t\t\treturn 'y';\r\n\t\t\t\t\t\tif (key === 'Z')\r\n\t\t\t\t\t\t\treturn 'z';\r\n\t\t\t\t\t\tif (key === '!')\r\n\t\t\t\t\t\t\treturn '1';\r\n\t\t\t\t\t\tif (key === '@')\r\n\t\t\t\t\t\t\treturn '2';\r\n\t\t\t\t\t\tif (key === '#')\r\n\t\t\t\t\t\t\treturn '3';\r\n\t\t\t\t\t\tif (key === '$')\r\n\t\t\t\t\t\t\treturn '4';\r\n\t\t\t\t\t\tif (key === '%')\r\n\t\t\t\t\t\t\treturn '5';\r\n\t\t\t\t\t\tif (key === '^')\r\n\t\t\t\t\t\t\treturn '6';\r\n\t\t\t\t\t\tif (key === '&')\r\n\t\t\t\t\t\t\treturn '7';\r\n\t\t\t\t\t\tif (key === '*')\r\n\t\t\t\t\t\t\treturn '8';\r\n\t\t\t\t\t\tif (key === '(')\r\n\t\t\t\t\t\t\treturn '9';\r\n\t\t\t\t\t\tif (key === ')')\r\n\t\t\t\t\t\t\treturn '0';\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\treturn key;\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar keyDownHandler = function (e) {\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (disableArrowKeyScrolling) {\r\n\t\t\t\t\t\t\tif (e.key === 'ArrowRight' || e.key === 'ArrowLeft' || e.key === 'ArrowUp' || e.key === 'ArrowDown' || e.key === ' ')\r\n\t\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tvar key = mapKeyToCanonicalKey(e.key);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tfor (var i = 0; i < keysBeingPressed.length; i++) {\r\n\t\t\t\t\t\t\tif (keysBeingPressed[i] === key)\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tkeysBeingPressed.push(key);\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar keyUpHandler = function (e) {\r\n\t\t\t\t\t\tvar key = mapKeyToCanonicalKey(e.key);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tvar newArray = [];\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tfor (var i = 0; i < keysBeingPressed.length; i++) {\r\n\t\t\t\t\t\t\tif (keysBeingPressed[i] !== key)\r\n\t\t\t\t\t\t\t\tnewArray.push(keysBeingPressed[i]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tkeysBeingPressed = newArray;\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\r\n\t\t\t\t\tdocument.addEventListener('keydown', function (e) { keyDownHandler(e); }, false);\r\n\t\t\t\t\tdocument.addEventListener('keyup', function (e) { keyUpHandler(e); }, false);\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar isKeyPressed = function (k) {\r\n\t\t\t\t\t\tfor (var i = 0; i < keysBeingPressed.length; i++) {\r\n\t\t\t\t\t\t\tif (keysBeingPressed[i] === k)\r\n\t\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tisKeyPressed: isKeyPressed\r\n\t\t\t\t\t};\r\n\t\t\t\t})());\r\n\t\t\t");
            }
        },
        methods: {
            IsPressed: function (key) {
                var correspondingKeyCode;

                switch (key) {
                    case DTLibrary.Key.A: 
                        correspondingKeyCode = "a";
                        break;
                    case DTLibrary.Key.B: 
                        correspondingKeyCode = "b";
                        break;
                    case DTLibrary.Key.C: 
                        correspondingKeyCode = "c";
                        break;
                    case DTLibrary.Key.D: 
                        correspondingKeyCode = "d";
                        break;
                    case DTLibrary.Key.E: 
                        correspondingKeyCode = "e";
                        break;
                    case DTLibrary.Key.F: 
                        correspondingKeyCode = "f";
                        break;
                    case DTLibrary.Key.G: 
                        correspondingKeyCode = "g";
                        break;
                    case DTLibrary.Key.H: 
                        correspondingKeyCode = "h";
                        break;
                    case DTLibrary.Key.I: 
                        correspondingKeyCode = "i";
                        break;
                    case DTLibrary.Key.J: 
                        correspondingKeyCode = "j";
                        break;
                    case DTLibrary.Key.K: 
                        correspondingKeyCode = "k";
                        break;
                    case DTLibrary.Key.L: 
                        correspondingKeyCode = "l";
                        break;
                    case DTLibrary.Key.M: 
                        correspondingKeyCode = "m";
                        break;
                    case DTLibrary.Key.N: 
                        correspondingKeyCode = "n";
                        break;
                    case DTLibrary.Key.O: 
                        correspondingKeyCode = "o";
                        break;
                    case DTLibrary.Key.P: 
                        correspondingKeyCode = "p";
                        break;
                    case DTLibrary.Key.Q: 
                        correspondingKeyCode = "q";
                        break;
                    case DTLibrary.Key.R: 
                        correspondingKeyCode = "r";
                        break;
                    case DTLibrary.Key.S: 
                        correspondingKeyCode = "s";
                        break;
                    case DTLibrary.Key.T: 
                        correspondingKeyCode = "t";
                        break;
                    case DTLibrary.Key.U: 
                        correspondingKeyCode = "u";
                        break;
                    case DTLibrary.Key.V: 
                        correspondingKeyCode = "v";
                        break;
                    case DTLibrary.Key.W: 
                        correspondingKeyCode = "w";
                        break;
                    case DTLibrary.Key.X: 
                        correspondingKeyCode = "x";
                        break;
                    case DTLibrary.Key.Y: 
                        correspondingKeyCode = "y";
                        break;
                    case DTLibrary.Key.Z: 
                        correspondingKeyCode = "z";
                        break;
                    case DTLibrary.Key.Zero: 
                        correspondingKeyCode = "0";
                        break;
                    case DTLibrary.Key.One: 
                        correspondingKeyCode = "1";
                        break;
                    case DTLibrary.Key.Two: 
                        correspondingKeyCode = "2";
                        break;
                    case DTLibrary.Key.Three: 
                        correspondingKeyCode = "3";
                        break;
                    case DTLibrary.Key.Four: 
                        correspondingKeyCode = "4";
                        break;
                    case DTLibrary.Key.Five: 
                        correspondingKeyCode = "5";
                        break;
                    case DTLibrary.Key.Six: 
                        correspondingKeyCode = "6";
                        break;
                    case DTLibrary.Key.Seven: 
                        correspondingKeyCode = "7";
                        break;
                    case DTLibrary.Key.Eight: 
                        correspondingKeyCode = "8";
                        break;
                    case DTLibrary.Key.Nine: 
                        correspondingKeyCode = "9";
                        break;
                    case DTLibrary.Key.UpArrow: 
                        correspondingKeyCode = "ArrowUp";
                        break;
                    case DTLibrary.Key.DownArrow: 
                        correspondingKeyCode = "ArrowDown";
                        break;
                    case DTLibrary.Key.LeftArrow: 
                        correspondingKeyCode = "ArrowLeft";
                        break;
                    case DTLibrary.Key.RightArrow: 
                        correspondingKeyCode = "ArrowRight";
                        break;
                    case DTLibrary.Key.Delete: 
                        correspondingKeyCode = "Delete";
                        break;
                    case DTLibrary.Key.Backspace: 
                        correspondingKeyCode = "Backspace";
                        break;
                    case DTLibrary.Key.Enter: 
                        correspondingKeyCode = "Enter";
                        break;
                    case DTLibrary.Key.Shift: 
                        correspondingKeyCode = "Shift";
                        break;
                    case DTLibrary.Key.Space: 
                        correspondingKeyCode = " ";
                        break;
                    case DTLibrary.Key.Esc: 
                        correspondingKeyCode = "Escape";
                        break;
                    default: 
                        throw new System.Exception();
                }

                var result = window.BridgeKeyboardJavascript.isKeyPressed(correspondingKeyCode);

                if (result) {
                    return true;
                }

                return false;

            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercent.BridgeMouse", {
        inherits: [DTLibrary.IMouse],
        alias: [
            "GetX", "DTLibrary$IMouse$GetX",
            "GetY", "DTLibrary$IMouse$GetY",
            "IsLeftMouseButtonPressed", "DTLibrary$IMouse$IsLeftMouseButtonPressed",
            "IsRightMouseButtonPressed", "DTLibrary$IMouse$IsRightMouseButtonPressed"
        ],
        ctors: {
            ctor: function () {
                this.$initialize();
                eval("\r\n\t\t\t\twindow.BridgeMouseJavascript = ((function () {\r\n\t\t\t\t\t'use strict';\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar mouseXPosition = 0;\r\n\t\t\t\t\tvar mouseYPosition = 0;\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar canvas = null;\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar mouseMoveHandler = function (e) {\r\n\t\t\t\t\t\r\n\t\t\t\t\t\tif (canvas === null) {\r\n\t\t\t\t\t\t\tcanvas = document.getElementById('bridgeCanvas');\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif (canvas === null)\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tvar xPosition = (e.pageX !== null && e.pageX !== undefined ? e.pageX : e.clientX) - canvas.offsetLeft;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (xPosition < -5)\r\n\t\t\t\t\t\t\txPosition = -5;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (xPosition > canvas.width + 5)\r\n\t\t\t\t\t\t\txPosition = canvas.width + 5;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tvar yPosition = (e.pageY !== null && e.pageY !== undefined ? e.pageY : e.clientY) - canvas.offsetTop;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (yPosition < -5)\r\n\t\t\t\t\t\t\tyPosition = -5;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (yPosition > canvas.height + 5)\r\n\t\t\t\t\t\t\tyPosition = canvas.height + 5;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tmouseXPosition = xPosition;\r\n\t\t\t\t\t\tmouseYPosition = canvas.height - yPosition - 1;\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar isLeftMouseButtonPressed = false;\r\n\t\t\t\t\tvar isRightMouseButtonPressed = false;\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar checkMouseButtonHandler = function (e) {\r\n\t\t\t\t\t\tif ((e.buttons & 1) === 1)\r\n\t\t\t\t\t\t\tisLeftMouseButtonPressed = true;\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tisLeftMouseButtonPressed = false;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif ((e.buttons & 2) === 2)\r\n\t\t\t\t\t\t\tisRightMouseButtonPressed = true;\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tisRightMouseButtonPressed = false;\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\tvar disableContextMenu;\r\n\t\t\t\t\tdisableContextMenu = function () {\r\n\t\t\t\t\t\tif (canvas === null) {\r\n\t\t\t\t\t\t\tcanvas = document.getElementById('bridgeCanvas');\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif (canvas === null) {\r\n\t\t\t\t\t\t\t\tsetTimeout(disableContextMenu, 50);\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tcanvas.addEventListener('contextmenu', function (e) { e.preventDefault(); });\r\n\t\t\t\t\t};\r\n\t\t\t\t\tdisableContextMenu();\r\n\t\t\t\t\t\r\n\t\t\t\t\tdocument.addEventListener('mousemove', function (e) { mouseMoveHandler(e); checkMouseButtonHandler(e); }, false);\r\n\t\t\t\t\tdocument.addEventListener('mousedown', function (e) { checkMouseButtonHandler(e); }, false);\r\n\t\t\t\t\tdocument.addEventListener('mouseup', function (e) { checkMouseButtonHandler(e); }, false);\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tisLeftMouseButtonPressed: function () { return isLeftMouseButtonPressed; },\r\n\t\t\t\t\t\tisRightMouseButtonPressed: function () { return isRightMouseButtonPressed; },\r\n\t\t\t\t\t\tgetMouseX: function () { return Math.round(mouseXPosition); },\r\n\t\t\t\t\t\tgetMouseY: function () { return Math.round(mouseYPosition); }\r\n\t\t\t\t\t};\r\n\t\t\t\t})());\r\n\t\t\t");
            }
        },
        methods: {
            GetX: function () {
                return window.BridgeMouseJavascript.getMouseX();
            },
            GetY: function () {
                return window.BridgeMouseJavascript.getMouseY();
            },
            IsLeftMouseButtonPressed: function () {
                return window.BridgeMouseJavascript.isLeftMouseButtonPressed();
            },
            IsRightMouseButtonPressed: function () {
                return window.BridgeMouseJavascript.isRightMouseButtonPressed();
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.GameMusic", {
        $kind: "enum",
        statics: {
            fields: {
                Airship2: 0,
                Theme: 1,
                PeaceAtLast: 2,
                Chipdisko: 3,
                Jewels: 4,
                KonqiBossTheme: 5,
                YetiBossTheme: 6
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.GameSound", {
        $kind: "enum",
        statics: {
            fields: {
                Click: 0,
                JingleWin01: 1,
                Die: 2,
                Squish: 3,
                Jump: 4,
                Teleport: 5,
                Explosion00Modified: 6,
                Explosion02: 7
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.Background_Arctis", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.IBackground],
        alias: ["Render", "TuxPlanetSpeedrunAnyPercentLibrary$IBackground$Render"],
        methods: {
            Render: function (cameraX, cameraY, windowWidth, windowHeight, displayOutput) {
                var displacement = (Bridge.Int.div(((-cameraX) | 0), 8)) | 0;

                var image = TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Arctis2;

                var imageWidth = displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$GetWidth(image);
                var scalingFactor = 1;

                if (displacement >= 0) {
                    displacement = displacement % (Bridge.Int.mul(imageWidth, scalingFactor));
                } else {
                    var multiple = (Bridge.Int.div((((-displacement) | 0)), (Bridge.Int.mul(imageWidth, scalingFactor)))) | 0;
                    displacement = (displacement + Bridge.Int.mul(Bridge.Int.mul(multiple, imageWidth), scalingFactor)) | 0;
                    while (displacement >= Bridge.Int.mul(imageWidth, scalingFactor)) {
                        displacement = (displacement - Bridge.Int.mul(imageWidth, scalingFactor)) | 0;
                    }
                    while (displacement < 0) {
                        displacement = (displacement + Bridge.Int.mul(imageWidth, scalingFactor)) | 0;
                    }
                }

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle(0, 0, windowWidth, windowHeight, DTLibrary.DTColor.White(), true);

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$1(image, displacement, 0, 0, Bridge.Int.mul(scalingFactor, 128));

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$1(image, ((displacement - Bridge.Int.mul(imageWidth, scalingFactor)) | 0), 0, 0, Bridge.Int.mul(scalingFactor, 128));
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.Background_Cave", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.IBackground],
        alias: ["Render", "TuxPlanetSpeedrunAnyPercentLibrary$IBackground$Render"],
        methods: {
            Render: function (cameraX, cameraY, windowWidth, windowHeight, displayOutput) {
                var image = TuxPlanetSpeedrunAnyPercentLibrary.GameImage.CaveBackground;
                var scalingFactor = 3;

                var displacementX = (Bridge.Int.div(((-cameraX) | 0), 6)) | 0;

                var imageWidth = displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$GetWidth(image);

                if (displacementX >= 0) {
                    displacementX = displacementX % (Bridge.Int.mul(imageWidth, scalingFactor));
                } else {
                    var multiple = (Bridge.Int.div((((-displacementX) | 0)), (Bridge.Int.mul(imageWidth, scalingFactor)))) | 0;
                    displacementX = (displacementX + Bridge.Int.mul(Bridge.Int.mul(multiple, imageWidth), scalingFactor)) | 0;
                    while (displacementX >= Bridge.Int.mul(imageWidth, scalingFactor)) {
                        displacementX = (displacementX - Bridge.Int.mul(imageWidth, scalingFactor)) | 0;
                    }
                    while (displacementX < 0) {
                        displacementX = (displacementX + Bridge.Int.mul(imageWidth, scalingFactor)) | 0;
                    }
                }

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$1(image, displacementX, 0, 0, Bridge.Int.mul(scalingFactor, 128));

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$1(image, ((displacementX - Bridge.Int.mul(imageWidth, scalingFactor)) | 0), 0, 0, Bridge.Int.mul(scalingFactor, 128));
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.Background_Ocean", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.IBackground],
        alias: ["Render", "TuxPlanetSpeedrunAnyPercentLibrary$IBackground$Render"],
        methods: {
            Render: function (cameraX, cameraY, windowWidth, windowHeight, displayOutput) {
                var displacement = (Bridge.Int.div(((-cameraX) | 0), 8)) | 0;

                var image = TuxPlanetSpeedrunAnyPercentLibrary.GameImage.OceanBackground;

                var imageWidth = displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$GetWidth(image);
                var scalingFactor = 3;

                if (displacement >= 0) {
                    displacement = displacement % (Bridge.Int.mul(imageWidth, scalingFactor));
                } else {
                    var multiple = (Bridge.Int.div((((-displacement) | 0)), (Bridge.Int.mul(imageWidth, scalingFactor)))) | 0;
                    displacement = (displacement + Bridge.Int.mul(Bridge.Int.mul(multiple, imageWidth), scalingFactor)) | 0;
                    while (displacement >= Bridge.Int.mul(imageWidth, scalingFactor)) {
                        displacement = (displacement - Bridge.Int.mul(imageWidth, scalingFactor)) | 0;
                    }
                    while (displacement < 0) {
                        displacement = (displacement + Bridge.Int.mul(imageWidth, scalingFactor)) | 0;
                    }
                }

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$1(image, displacement, 0, 0, Bridge.Int.mul(scalingFactor, 128));

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$1(image, ((displacement - Bridge.Int.mul(imageWidth, scalingFactor)) | 0), 0, 0, Bridge.Int.mul(scalingFactor, 128));
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.BoundedTilemap", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.ITilemap],
        fields: {
            tilemap: null,
            width: 0,
            height: 0
        },
        alias: [
            "IsGround", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround",
            "IsSpikes", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsSpikes",
            "IsKillZone", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsKillZone",
            "IsEndOfLevel", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsEndOfLevel",
            "GetCutscene", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetCutscene",
            "GetCheckpoint", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetCheckpoint",
            "GetWidth", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetWidth",
            "GetHeight", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetHeight",
            "GetTuxLocation", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetTuxLocation",
            "GetMapKeyLocation", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetMapKeyLocation",
            "GetEnemies", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetEnemies",
            "PlayMusic", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$PlayMusic",
            "RenderBackgroundTiles", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$RenderBackgroundTiles",
            "RenderForegroundTiles", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$RenderForegroundTiles"
        ],
        ctors: {
            ctor: function (tilemap) {
                this.$initialize();
                this.tilemap = tilemap;
                this.width = tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetWidth();
                this.height = tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetHeight();
            }
        },
        methods: {
            IsGround: function (x, y) {
                if (x < 0) {
                    return true;
                }
                if (x >= this.width) {
                    return true;
                }

                return this.tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(x, y);
            },
            IsSpikes: function (x, y) {
                return this.tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsSpikes(x, y);
            },
            IsKillZone: function (x, y) {
                if (y < 0) {
                    return true;
                }

                return this.tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsKillZone(x, y);
            },
            IsEndOfLevel: function (x, y) {
                return this.tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsEndOfLevel(x, y);
            },
            GetCutscene: function (x, y) {
                return this.tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetCutscene(x, y);
            },
            GetCheckpoint: function (x, y) {
                return this.tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetCheckpoint(x, y);
            },
            GetWidth: function () {
                return this.width;
            },
            GetHeight: function () {
                return this.height;
            },
            GetTuxLocation: function (xOffset, yOffset) {
                return this.tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetTuxLocation(xOffset, yOffset);
            },
            GetMapKeyLocation: function (mapKey, xOffset, yOffset) {
                return this.tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetMapKeyLocation(mapKey, xOffset, yOffset);
            },
            GetEnemies: function (xOffset, yOffset) {
                return this.tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetEnemies(xOffset, yOffset);
            },
            PlayMusic: function () {
                return this.tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$PlayMusic();
            },
            RenderBackgroundTiles: function (displayOutput, cameraX, cameraY, windowWidth, windowHeight) {
                this.tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$RenderBackgroundTiles(displayOutput, cameraX, cameraY, windowWidth, windowHeight);
            },
            RenderForegroundTiles: function (displayOutput, cameraX, cameraY, windowWidth, windowHeight) {
                this.tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$RenderForegroundTiles(displayOutput, cameraX, cameraY, windowWidth, windowHeight);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.ITilemap],
        statics: {
            methods: {
                NormalizeTilemaps: function (tilemaps) {
                    var $t;
                    var minX = null;
                    var minY = null;

                    $t = Bridge.getEnumerator(tilemaps);
                    try {
                        while ($t.moveNext()) {
                            var tilemap = $t.Current;
                            var tilemapMinX = tilemap.XOffset;

                            var tilemapMinY = tilemap.YOffset;

                            if (minX == null || System.Nullable.getValue(minX) > tilemapMinX) {
                                minX = tilemapMinX;
                            }

                            if (minY == null || System.Nullable.getValue(minY) > tilemapMinY) {
                                minY = tilemapMinY;
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    return System.Linq.Enumerable.from(tilemaps).select(function (t) {
                            return new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(t.Tilemap, ((t.XOffset - System.Nullable.getValue(minX)) | 0), ((t.YOffset - System.Nullable.getValue(minY)) | 0), t.AlwaysIncludeTilemap);
                        }).toList(TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset);
                }
            }
        },
        fields: {
            tilemaps: null,
            width: 0,
            height: 0,
            tuxX: null,
            tuxY: null,
            mapKeyState: null,
            listOfAllMapKeys: null
        },
        alias: [
            "PlayMusic", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$PlayMusic",
            "IsGround", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround",
            "IsSpikes", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsSpikes",
            "IsKillZone", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsKillZone",
            "IsEndOfLevel", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsEndOfLevel",
            "GetCutscene", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetCutscene",
            "GetCheckpoint", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetCheckpoint",
            "RenderBackgroundTiles", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$RenderBackgroundTiles",
            "RenderForegroundTiles", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$RenderForegroundTiles",
            "GetWidth", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetWidth",
            "GetHeight", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetHeight",
            "GetEnemies", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetEnemies",
            "GetTuxLocation", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetTuxLocation",
            "GetMapKeyLocation", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetMapKeyLocation"
        ],
        ctors: {
            ctor: function (normalizedTilemaps, width, height, tuxX, tuxY, mapKeyState) {
                this.$initialize();
                this.tilemaps = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset)).$ctor1(normalizedTilemaps);

                this.width = width;
                this.height = height;
                this.tuxX = tuxX;
                this.tuxY = tuxY;
                this.mapKeyState = mapKeyState;
                this.listOfAllMapKeys = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.MapKey)).$ctor1(TuxPlanetSpeedrunAnyPercentLibrary.MapKeyUtil.GetOrderedListOfMapKeys());
            }
        },
        methods: {
            PlayMusic: function () {
                var $t;
                $t = Bridge.getEnumerator(this.tilemaps);
                try {
                    while ($t.moveNext()) {
                        var tilemap = $t.Current;
                        var music = tilemap.Tilemap.PlayMusic();

                        if (music != null) {
                            return System.Nullable.getValue(music);
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }

                return null;
            },
            IsGround: function (x, y) {
                for (var i = 0; i < this.tilemaps.Count; i = (i + 1) | 0) {
                    var tilemap = this.tilemaps.getItem(i);
                    if (tilemap.Tilemap.IsGroundNotIncludingKeyTiles(((x - tilemap.XOffset) | 0), ((y - tilemap.YOffset) | 0))) {
                        return true;
                    }

                    var mapKeysCount = System.Array.getCount(this.listOfAllMapKeys, TuxPlanetSpeedrunAnyPercentLibrary.MapKey);
                    for (var mapKeyIndex = 0; mapKeyIndex < mapKeysCount; mapKeyIndex = (mapKeyIndex + 1) | 0) {
                        var mapKey = System.Array.getItem(this.listOfAllMapKeys, mapKeyIndex, TuxPlanetSpeedrunAnyPercentLibrary.MapKey);
                        if (tilemap.Tilemap.IsKeyTile(mapKey, ((x - tilemap.XOffset) | 0), ((y - tilemap.YOffset) | 0))) {
                            if (!System.Linq.Enumerable.from(this.mapKeyState.CollectedKeys).contains(mapKey)) {
                                return true;
                            }

                            if (this.tuxX == null || this.tuxY == null) {
                                return true;
                            }

                            var deltaX = Math.abs(((System.Nullable.getValue(this.tuxX) - x) | 0));
                            var deltaY = Math.abs(((System.Nullable.getValue(this.tuxY) - y) | 0));

                            if (((Bridge.Int.mul(deltaX, deltaX) + Bridge.Int.mul(deltaY, deltaY)) | 0) > 90000) {
                                return true;
                            }
                        }
                    }
                }

                return false;
            },
            IsSpikes: function (x, y) {
                for (var i = 0; i < this.tilemaps.Count; i = (i + 1) | 0) {
                    var tilemap = this.tilemaps.getItem(i);
                    if (tilemap.Tilemap.IsSpikes(((x - tilemap.XOffset) | 0), ((y - tilemap.YOffset) | 0))) {
                        return true;
                    }
                }

                return false;
            },
            IsKillZone: function (x, y) {
                for (var i = 0; i < this.tilemaps.Count; i = (i + 1) | 0) {
                    var tilemap = this.tilemaps.getItem(i);
                    if (tilemap.Tilemap.IsKillZone(((x - tilemap.XOffset) | 0), ((y - tilemap.YOffset) | 0))) {
                        return true;
                    }
                }

                return false;
            },
            IsEndOfLevel: function (x, y) {
                for (var i = 0; i < this.tilemaps.Count; i = (i + 1) | 0) {
                    var tilemap = this.tilemaps.getItem(i);
                    if (tilemap.Tilemap.IsEndOfLevel(((x - tilemap.XOffset) | 0), ((y - tilemap.YOffset) | 0))) {
                        return true;
                    }
                }

                return false;
            },
            GetCutscene: function (x, y) {
                for (var i = 0; i < this.tilemaps.Count; i = (i + 1) | 0) {
                    var tilemap = this.tilemaps.getItem(i);
                    var cutscene = tilemap.Tilemap.GetCutscene(((x - tilemap.XOffset) | 0), ((y - tilemap.YOffset) | 0));

                    if (cutscene != null) {
                        return cutscene;
                    }
                }

                return null;
            },
            GetCheckpoint: function (x, y) {
                for (var i = 0; i < this.tilemaps.Count; i = (i + 1) | 0) {
                    var tilemap = this.tilemaps.getItem(i);
                    var checkpoint = tilemap.Tilemap.GetCheckpoint(((x - tilemap.XOffset) | 0), ((y - tilemap.YOffset) | 0));

                    if (checkpoint != null) {
                        return { Item1: ((checkpoint.Item1 + tilemap.XOffset) | 0), Item2: ((checkpoint.Item2 + tilemap.YOffset) | 0) };
                    }
                }

                return null;
            },
            RenderBackgroundTiles: function (displayOutput, cameraX, cameraY, windowWidth, windowHeight) {
                var $t;
                $t = Bridge.getEnumerator(this.tilemaps);
                try {
                    while ($t.moveNext()) {
                        var tilemap = $t.Current;
                        var translatedDisplayOutput = new TuxPlanetSpeedrunAnyPercentLibrary.TuxPlanetSpeedrunTranslatedDisplayOutput(displayOutput, tilemap.XOffset, tilemap.YOffset);

                        tilemap.Tilemap.RenderBackgroundTiles(translatedDisplayOutput, Bridge.Int.clip32(System.Nullable.sub(this.tuxX, tilemap.XOffset)), Bridge.Int.clip32(System.Nullable.sub(this.tuxY, tilemap.YOffset)), this.mapKeyState.CollectedKeys, ((cameraX - tilemap.XOffset) | 0), ((cameraY - tilemap.YOffset) | 0), windowWidth, windowHeight);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            },
            RenderForegroundTiles: function (displayOutput, cameraX, cameraY, windowWidth, windowHeight) {
                var $t;
                $t = Bridge.getEnumerator(this.tilemaps);
                try {
                    while ($t.moveNext()) {
                        var tilemap = $t.Current;
                        var translatedDisplayOutput = new TuxPlanetSpeedrunAnyPercentLibrary.TuxPlanetSpeedrunTranslatedDisplayOutput(displayOutput, tilemap.XOffset, tilemap.YOffset);

                        tilemap.Tilemap.RenderForegroundTiles(translatedDisplayOutput, Bridge.Int.clip32(System.Nullable.sub(this.tuxX, tilemap.XOffset)), Bridge.Int.clip32(System.Nullable.sub(this.tuxY, tilemap.YOffset)), this.mapKeyState.CollectedKeys, ((cameraX - tilemap.XOffset) | 0), ((cameraY - tilemap.YOffset) | 0), windowWidth, windowHeight);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            },
            GetWidth: function () {
                return this.width;
            },
            GetHeight: function () {
                return this.height;
            },
            GetEnemies: function (xOffset, yOffset) {
                var $t;
                var enemies = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor();

                $t = Bridge.getEnumerator(this.tilemaps);
                try {
                    while ($t.moveNext()) {
                        var tilemap = $t.Current;
                        var tilemapEnemies = tilemap.Tilemap.GetEnemies(((tilemap.XOffset + xOffset) | 0), ((tilemap.YOffset + yOffset) | 0));
                        enemies.AddRange(tilemapEnemies);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }

                return enemies;
            },
            GetTuxLocation: function (xOffset, yOffset) {
                for (var i = 0; i < this.tilemaps.Count; i = (i + 1) | 0) {
                    var tilemap = this.tilemaps.getItem(i);
                    var tuxLocation = tilemap.Tilemap.GetTuxLocation(((xOffset + tilemap.XOffset) | 0), ((yOffset + tilemap.YOffset) | 0));

                    if (tuxLocation != null) {
                        return tuxLocation;
                    }
                }

                return null;
            },
            GetMapKeyLocation: function (mapKey, xOffset, yOffset) {
                for (var i = 0; i < this.tilemaps.Count; i = (i + 1) | 0) {
                    var tilemap = this.tilemaps.getItem(i);
                    var keyLocation = tilemap.Tilemap.GetMapKeyLocation(mapKey, ((xOffset + tilemap.XOffset) | 0), ((yOffset + tilemap.YOffset) | 0));

                    if (keyLocation != null) {
                        return keyLocation;
                    }
                }

                return null;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_KonqiBossDefeated", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.ICutscene],
        statics: {
            methods: {
                GetCutscene: function (customLevelInfo) {
                    var dialogues = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Dialogue)).ctor();

                    dialogues.add(TuxPlanetSpeedrunAnyPercentLibrary.Dialogue.GetDialogue(500, 250, 490, 92, "Why are you allowed to jump on \nme when I have flames on my \nhead? :("));

                    var dialogueList = new TuxPlanetSpeedrunAnyPercentLibrary.DialogueList(dialogues);

                    return new TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_KonqiBossDefeated(TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_KonqiBossDefeated.Status.A_Dialogue, dialogueList, true, new (System.Collections.Generic.Dictionary$2(System.String,System.String))(customLevelInfo));
                }
            }
        },
        fields: {
            status: 0,
            dialogueList: null,
            isFirstFrame: false,
            customLevelInfo: null
        },
        alias: [
            "GetCutsceneName", "TuxPlanetSpeedrunAnyPercentLibrary$ICutscene$GetCutsceneName",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$ICutscene$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$ICutscene$Render"
        ],
        ctors: {
            ctor: function (status, dialogueList, isFirstFrame, customLevelInfo) {
                this.$initialize();
                this.status = status;
                this.dialogueList = dialogueList;
                this.isFirstFrame = isFirstFrame;
                this.customLevelInfo = customLevelInfo;
            }
        },
        methods: {
            GetCutsceneName: function () {
                return TuxPlanetSpeedrunAnyPercentLibrary.CutsceneProcessing.KONQI_BOSS_DEFEATED_CUTSCENE;
            },
            ProcessFrame: function (move, tuxXMibi, tuxYMibi, cameraState, elapsedMicrosPerFrame, windowWidth, windowHeight, tilemap, enemies, levelFlags) {
                var newCameraState;
                var newDialogueList;
                var newStatus = new TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_KonqiBossDefeated.Status();
                var newEnemies = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).$ctor1(enemies);
                var newLevelFlags = new (System.Collections.Generic.List$1(System.String)).ctor();

                switch (this.status) {
                    case TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_KonqiBossDefeated.Status.A_Dialogue: 
                        {
                            newLevelFlags.add(TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.STOP_LOCKING_CAMERA_ON_KONQI_BOSS_ROOM);
                            newLevelFlags.add(TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.LOCK_CAMERA_ON_KONQI_DEFEATED_BOSS_ROOM);
                            newLevelFlags.add(TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.STOP_PLAYING_KONQI_BOSS_MUSIC);
                            newLevelFlags.add(TuxPlanetSpeedrunAnyPercentLibrary.EnemyBossDoor.LEVEL_FLAG_CLOSE_BOSS_DOORS_INSTANTLY);

                            var dialogueListResult = this.dialogueList.ProcessFrame(move, elapsedMicrosPerFrame);

                            newDialogueList = dialogueListResult.DialogueList;

                            newCameraState = TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.GetKonqiBossRoomCameraState(this.customLevelInfo, tilemap, windowWidth, windowHeight);

                            if (dialogueListResult.IsDone) {
                                newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_KonqiBossDefeated.Status.B_KonqiTeleportsOut;
                                newLevelFlags.add(TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.SPAWN_KONQI_BOSS_DEFEAT);
                                newLevelFlags.add(TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.SPAWN_MYTHRIL_KEY);
                            } else {
                                newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_KonqiBossDefeated.Status.A_Dialogue;
                            }

                            break;
                        }
                    case TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_KonqiBossDefeated.Status.B_KonqiTeleportsOut: 
                        {
                            var destinationCameraState = TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.GetKonqiDefeatedCameraState(this.customLevelInfo, tilemap, windowWidth, windowHeight);

                            newCameraState = TuxPlanetSpeedrunAnyPercentLibrary.CameraState.SmoothCameraState$2(cameraState, destinationCameraState, elapsedMicrosPerFrame, TuxPlanetSpeedrunAnyPercentLibrary.CameraState.CUTSCENE_CAMERA_SPEED);

                            if (cameraState.X === destinationCameraState.X && cameraState.Y === destinationCameraState.Y) {
                                newLevelFlags.add(TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.CREATE_CHECKPOINT_AFTER_DEFEATING_KONQI);
                                return new TuxPlanetSpeedrunAnyPercentLibrary.CutsceneProcessing.Result(TuxPlanetSpeedrunAnyPercentLibrary.Move.EmptyMove(), cameraState, newEnemies, newLevelFlags, null, false, false, false);
                            }

                            newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_KonqiBossDefeated.Status.B_KonqiTeleportsOut;
                            newDialogueList = this.dialogueList;

                            break;
                        }
                    default: 
                        throw new System.Exception();
                }

                var newMove;

                if (this.isFirstFrame) {
                    newMove = new TuxPlanetSpeedrunAnyPercentLibrary.Move(false, false, false, true, false, false, false);
                } else {
                    newMove = TuxPlanetSpeedrunAnyPercentLibrary.Move.EmptyMove();
                }

                return new TuxPlanetSpeedrunAnyPercentLibrary.CutsceneProcessing.Result(newMove, newCameraState, newEnemies, newLevelFlags, new TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_KonqiBossDefeated(newStatus, newDialogueList, false, this.customLevelInfo), false, false, false);
            },
            Render: function (displayOutput, windowWidth, windowHeight) {
                if (this.status === TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_KonqiBossDefeated.Status.A_Dialogue) {
                    this.dialogueList.Render(displayOutput, windowWidth, windowHeight);
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_KonqiBossIntro", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.ICutscene],
        statics: {
            fields: {
                LEVEL_FLAG_KONQI_BOSS_INTRO_CUTSCENE_KONQI_TELEPORT_OUT: null
            },
            ctors: {
                init: function () {
                    this.LEVEL_FLAG_KONQI_BOSS_INTRO_CUTSCENE_KONQI_TELEPORT_OUT = "konqiBossIntroCutsceneKonqiTeleportOut";
                }
            },
            methods: {
                GetCutscene: function (customLevelInfo) {
                    var dialogues = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Dialogue)).ctor();

                    dialogues.add(TuxPlanetSpeedrunAnyPercentLibrary.Dialogue.GetDialogue(500, 355, 490, 40, "Hello Tux!"));

                    dialogues.add(TuxPlanetSpeedrunAnyPercentLibrary.Dialogue.GetDialogue(500, 245, 490, 150, "The World Boss is currently on \nvacation. \n\nSo I'll serve as the substitute \nboss today."));

                    dialogues.add(TuxPlanetSpeedrunAnyPercentLibrary.Dialogue.GetDialogue(500, 355, 490, 40, "Are you ready?"));

                    var dialogueList = new TuxPlanetSpeedrunAnyPercentLibrary.DialogueList(dialogues);

                    return new TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_KonqiBossIntro(TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_KonqiBossIntro.Status.A_SpawnKonqi, dialogueList, new (System.Collections.Generic.Dictionary$2(System.String,System.String))(customLevelInfo));
                }
            }
        },
        fields: {
            status: 0,
            dialogueList: null,
            customLevelInfo: null
        },
        alias: [
            "GetCutsceneName", "TuxPlanetSpeedrunAnyPercentLibrary$ICutscene$GetCutsceneName",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$ICutscene$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$ICutscene$Render"
        ],
        ctors: {
            ctor: function (status, dialogueList, customLevelInfo) {
                this.$initialize();
                this.status = status;
                this.dialogueList = dialogueList;
                this.customLevelInfo = customLevelInfo;
            }
        },
        methods: {
            GetCutsceneName: function () {
                return TuxPlanetSpeedrunAnyPercentLibrary.CutsceneProcessing.KONQI_BOSS_INTRO_CUTSCENE;
            },
            ProcessFrame: function (move, tuxXMibi, tuxYMibi, cameraState, elapsedMicrosPerFrame, windowWidth, windowHeight, tilemap, enemies, levelFlags) {
                var newCameraState;
                var newDialogueList;
                var newStatus = new TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_KonqiBossIntro.Status();
                var newEnemies = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).$ctor1(enemies);

                var newLevelFlags = new (System.Collections.Generic.List$1(System.String)).ctor();

                var konqiXMibi = (((DTLibrary.StringUtil.ParseAsIntCultureInvariant(this.customLevelInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$System$String$getItem(TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.BOSS_ROOM_X_OFFSET_START)) + 816) | 0)) << 10;
                var konqiYMibi = 172032;

                switch (this.status) {
                    case TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_KonqiBossIntro.Status.A_SpawnKonqi: 
                        {
                            newCameraState = cameraState;
                            newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_KonqiBossIntro.Status.B_Camera;
                            newDialogueList = this.dialogueList;
                            newEnemies.add(TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiCutscene.GetEnemyKonqiCutscene(konqiXMibi, konqiYMibi, false, TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_KonqiBossIntro.LEVEL_FLAG_KONQI_BOSS_INTRO_CUTSCENE_KONQI_TELEPORT_OUT, "enemyKonqiCutscene_konqiBossIntro"));
                            break;
                        }
                    case TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_KonqiBossIntro.Status.B_Camera: 
                        {
                            var destinationCameraState = TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.GetKonqiBossRoomCameraState(this.customLevelInfo, tilemap, windowWidth, windowHeight);

                            newDialogueList = this.dialogueList;

                            if (cameraState.X === destinationCameraState.X && cameraState.Y === destinationCameraState.Y) {
                                newCameraState = cameraState;
                                newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_KonqiBossIntro.Status.C_Dialogue;
                            } else {
                                newCameraState = TuxPlanetSpeedrunAnyPercentLibrary.CameraState.SmoothCameraState$2(cameraState, destinationCameraState, elapsedMicrosPerFrame, TuxPlanetSpeedrunAnyPercentLibrary.CameraState.CUTSCENE_CAMERA_SPEED);
                                newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_KonqiBossIntro.Status.B_Camera;
                            }

                            break;
                        }
                    case TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_KonqiBossIntro.Status.C_Dialogue: 
                        var dialogueListResult = this.dialogueList.ProcessFrame(move, elapsedMicrosPerFrame);
                        newCameraState = cameraState;
                        newDialogueList = dialogueListResult.DialogueList;
                        if (dialogueListResult.IsDone) {
                            newLevelFlags.add(TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.LOCK_CAMERA_ON_KONQI_BOSS_ROOM);
                            newLevelFlags.add(TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.MARK_LEFT_AND_RIGHT_WALLS_OF_BOSS_ROOM_AS_GROUND);
                            newLevelFlags.add(TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_KonqiBossIntro.LEVEL_FLAG_KONQI_BOSS_INTRO_CUTSCENE_KONQI_TELEPORT_OUT);
                            newLevelFlags.add(TuxPlanetSpeedrunAnyPercentLibrary.EnemyBossDoor.LEVEL_FLAG_CLOSE_BOSS_DOORS);
                            newLevelFlags.add(TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.START_PLAYING_KONQI_BOSS_MUSIC);

                            var bossRoomXOffsetStart = DTLibrary.StringUtil.ParseAsIntCultureInvariant(this.customLevelInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$System$String$getItem(TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.BOSS_ROOM_X_OFFSET_START));
                            var bossRoomXOffsetEnd = DTLibrary.StringUtil.ParseAsIntCultureInvariant(this.customLevelInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$System$String$getItem(TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.BOSS_ROOM_X_OFFSET_END));

                            newEnemies.add(TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiBoss.GetEnemyKonqiBoss(konqiXMibi, konqiYMibi, "cutscene_konqiBossIntro_konqiBoss", this.customLevelInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$System$String$getItem(TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.KONQI_BOSS_RNG_SEED)));
                            newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_KonqiBossIntro.Status.D_Delay;
                        } else {
                            newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_KonqiBossIntro.Status.C_Dialogue;
                        }
                        break;
                    case TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_KonqiBossIntro.Status.D_Delay: 
                        {
                            return new TuxPlanetSpeedrunAnyPercentLibrary.CutsceneProcessing.Result(TuxPlanetSpeedrunAnyPercentLibrary.Move.EmptyMove(), cameraState, newEnemies, newLevelFlags, null, false, false, false);
                        }
                    default: 
                        throw new System.Exception();
                }

                var newMove;

                if ((tuxXMibi >> 10) < ((DTLibrary.StringUtil.ParseAsIntCultureInvariant(this.customLevelInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$System$String$getItem(TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.BOSS_ROOM_X_OFFSET_START)) - 50) | 0)) {
                    newMove = new TuxPlanetSpeedrunAnyPercentLibrary.Move(false, false, false, true, false, false, false);
                } else {
                    newMove = TuxPlanetSpeedrunAnyPercentLibrary.Move.EmptyMove();
                }

                return new TuxPlanetSpeedrunAnyPercentLibrary.CutsceneProcessing.Result(newMove, newCameraState, newEnemies, newLevelFlags, new TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_KonqiBossIntro(newStatus, newDialogueList, this.customLevelInfo), false, false, false);
            },
            Render: function (displayOutput, windowWidth, windowHeight) {
                if (this.status === TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_KonqiBossIntro.Status.C_Dialogue) {
                    this.dialogueList.Render(displayOutput, windowWidth, windowHeight);
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_Level8", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.ICutscene],
        statics: {
            fields: {
                CUTSCENE_CAMERA_X: 0,
                CUTSCENE_CAMERA_Y: 0
            },
            ctors: {
                init: function () {
                    this.CUTSCENE_CAMERA_X = 2880;
                    this.CUTSCENE_CAMERA_Y = 600;
                }
            },
            methods: {
                GetCutscene: function () {
                    var dialogues = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Dialogue)).ctor();

                    dialogues.add(TuxPlanetSpeedrunAnyPercentLibrary.Dialogue.GetDialogue(500, 340, 490, 120, "Meh. A water level. \n\nWater levels are terrible in every \nsingle video game ever."));

                    dialogues.add(TuxPlanetSpeedrunAnyPercentLibrary.Dialogue.GetDialogue(10, 340, 446, 63, "Agreed. And there are sometimes \norcas in the water."));

                    dialogues.add(TuxPlanetSpeedrunAnyPercentLibrary.Dialogue.GetDialogue(500, 360, 490, 40, "Let's just skip this level."));

                    var dialogueList = new TuxPlanetSpeedrunAnyPercentLibrary.DialogueList(dialogues);

                    return new TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_Level8(TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_Level8.Status.A_Camera, dialogueList);
                }
            }
        },
        fields: {
            status: 0,
            dialogueList: null
        },
        alias: [
            "GetCutsceneName", "TuxPlanetSpeedrunAnyPercentLibrary$ICutscene$GetCutsceneName",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$ICutscene$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$ICutscene$Render"
        ],
        ctors: {
            ctor: function (status, dialogueList) {
                this.$initialize();
                this.status = status;
                this.dialogueList = dialogueList;
            }
        },
        methods: {
            GetCutsceneName: function () {
                return TuxPlanetSpeedrunAnyPercentLibrary.CutsceneProcessing.LEVEL_8_CUTSCENE;
            },
            ProcessFrame: function (move, tuxXMibi, tuxYMibi, cameraState, elapsedMicrosPerFrame, windowWidth, windowHeight, tilemap, enemies, levelFlags) {
                var newCameraState;
                var newDialogueList;
                var newStatus = new TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_Level8.Status();
                var newlyAddedLevelFlags = new (System.Collections.Generic.List$1(System.String)).ctor();

                switch (this.status) {
                    case TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_Level8.Status.A_Camera: 
                        {
                            var destinationCameraState = TuxPlanetSpeedrunAnyPercentLibrary.CameraState.GetCameraState(TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_Level8.CUTSCENE_CAMERA_X, TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_Level8.CUTSCENE_CAMERA_Y);

                            newDialogueList = this.dialogueList;

                            if (cameraState.X === destinationCameraState.X && cameraState.Y === destinationCameraState.Y) {
                                newCameraState = cameraState;
                                newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_Level8.Status.B_Dialogue;
                            } else {
                                newCameraState = TuxPlanetSpeedrunAnyPercentLibrary.CameraState.SmoothCameraState$2(cameraState, destinationCameraState, elapsedMicrosPerFrame, TuxPlanetSpeedrunAnyPercentLibrary.CameraState.CUTSCENE_CAMERA_SPEED);
                                newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_Level8.Status.A_Camera;
                            }

                            break;
                        }
                    case TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_Level8.Status.B_Dialogue: 
                        var dialogueListResult = this.dialogueList.ProcessFrame(move, elapsedMicrosPerFrame);
                        newCameraState = cameraState;
                        newDialogueList = dialogueListResult.DialogueList;
                        if (dialogueListResult.IsDone) {
                            newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_Level8.Status.C_Win;
                        } else {
                            newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_Level8.Status.B_Dialogue;
                        }
                        break;
                    case TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_Level8.Status.C_Win: 
                        newlyAddedLevelFlags.add(TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level8.HAS_FINISHED_CUTSCENE);
                        newCameraState = cameraState;
                        newDialogueList = this.dialogueList;
                        newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_Level8.Status.C_Win;
                        break;
                    default: 
                        throw new System.Exception();
                }

                return new TuxPlanetSpeedrunAnyPercentLibrary.CutsceneProcessing.Result(new TuxPlanetSpeedrunAnyPercentLibrary.Move(false, false, false, true, false, false, false), newCameraState, new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).$ctor1(enemies), newlyAddedLevelFlags, new TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_Level8(newStatus, newDialogueList), false, false, false);
            },
            Render: function (displayOutput, windowWidth, windowHeight) {
                if (this.status === TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_Level8.Status.B_Dialogue) {
                    this.dialogueList.Render(displayOutput, windowWidth, windowHeight);
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_SaveState", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.ICutscene],
        statics: {
            fields: {
                KONQI_DISAPPEAR_WAIT_TIME: 0
            },
            ctors: {
                init: function () {
                    this.KONQI_DISAPPEAR_WAIT_TIME = 500000;
                }
            },
            methods: {
                GetCutscene: function () {
                    var dialogues = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Dialogue)).ctor();

                    dialogues.add(TuxPlanetSpeedrunAnyPercentLibrary.Dialogue.GetDialogue(500, 460, 490, 40, "Hello. I'm Konqi! Nice to meet you!"));

                    dialogues.add(TuxPlanetSpeedrunAnyPercentLibrary.Dialogue.GetDialogue(10, 460, 172, 40, "Hello Konqi."));

                    dialogues.add(TuxPlanetSpeedrunAnyPercentLibrary.Dialogue.GetDialogue(500, 400, 490, 150, "These levels are so terribly \ndesigned. \n\nBut I have something that can \nhelp -- savestates!"));

                    dialogues.add(TuxPlanetSpeedrunAnyPercentLibrary.Dialogue.GetDialogue(500, 400, 490, 60, "Press S to create a new savestate \nand press A to load that savestate!"));

                    var dialogueList = new TuxPlanetSpeedrunAnyPercentLibrary.DialogueList(dialogues);

                    return new TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_SaveState(true, TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_SaveState.Status.A_Camera, 0, dialogueList);
                }
            }
        },
        fields: {
            isFirstFrame: false,
            status: 0,
            konqiDisappearElapsedMicros: 0,
            dialogueList: null
        },
        alias: [
            "GetCutsceneName", "TuxPlanetSpeedrunAnyPercentLibrary$ICutscene$GetCutsceneName",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$ICutscene$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$ICutscene$Render"
        ],
        ctors: {
            ctor: function (isFirstFrame, status, konqiDisappearElapsedMicros, dialogueList) {
                this.$initialize();
                this.isFirstFrame = isFirstFrame;
                this.status = status;
                this.konqiDisappearElapsedMicros = konqiDisappearElapsedMicros;
                this.dialogueList = dialogueList;
            }
        },
        methods: {
            GetCutsceneName: function () {
                return TuxPlanetSpeedrunAnyPercentLibrary.CutsceneProcessing.SAVESTATE_CUTSCENE;
            },
            ProcessFrame: function (move, tuxXMibi, tuxYMibi, cameraState, elapsedMicrosPerFrame, windowWidth, windowHeight, tilemap, enemies, levelFlags) {
                var newCameraState;
                var newDialogueList;
                var newStatus = new TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_SaveState.Status();
                var newKonqiDisappearElapsedMicros = this.konqiDisappearElapsedMicros;
                var newEnemies = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).$ctor1(enemies);
                var newlyAddedLevelFlags = null;

                switch (this.status) {
                    case TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_SaveState.Status.A_Camera: 
                        {
                            var destinationCameraState = TuxPlanetSpeedrunAnyPercentLibrary.CameraState.GetCameraState((((tuxXMibi >> 10) + 440) | 0), tuxYMibi >> 10);

                            newDialogueList = this.dialogueList;

                            if (cameraState.X >= destinationCameraState.X && Math.abs(((cameraState.Y - destinationCameraState.Y) | 0)) <= 25) {
                                newCameraState = cameraState;
                                newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_SaveState.Status.B_Dialogue;
                            } else {
                                newCameraState = TuxPlanetSpeedrunAnyPercentLibrary.CameraState.SmoothCameraState$2(cameraState, destinationCameraState, elapsedMicrosPerFrame, TuxPlanetSpeedrunAnyPercentLibrary.CameraState.CUTSCENE_CAMERA_SPEED);
                                newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_SaveState.Status.A_Camera;
                            }

                            break;
                        }
                    case TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_SaveState.Status.B_Dialogue: 
                        var dialogueListResult = this.dialogueList.ProcessFrame(move, elapsedMicrosPerFrame);
                        newCameraState = cameraState;
                        newDialogueList = dialogueListResult.DialogueList;
                        if (dialogueListResult.IsDone) {
                            newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_SaveState.Status.C_KonqiDisappear;
                            if (newlyAddedLevelFlags == null) {
                                newlyAddedLevelFlags = new (System.Collections.Generic.List$1(System.String)).ctor();
                            }
                            newlyAddedLevelFlags.add(TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiCutscene.SHOULD_TELEPORT_OUT_DEFAULT_LEVEL_FLAG);
                        } else {
                            newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_SaveState.Status.B_Dialogue;
                        }
                        break;
                    case TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_SaveState.Status.C_KonqiDisappear: 
                        newKonqiDisappearElapsedMicros = (newKonqiDisappearElapsedMicros + elapsedMicrosPerFrame) | 0;
                        newCameraState = cameraState;
                        newDialogueList = this.dialogueList;
                        if (newKonqiDisappearElapsedMicros >= TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_SaveState.KONQI_DISAPPEAR_WAIT_TIME) {
                            newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_SaveState.Status.D_Camera;
                        } else {
                            newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_SaveState.Status.C_KonqiDisappear;
                        }
                        break;
                    case TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_SaveState.Status.D_Camera: 
                        {
                            var destinationCameraState1 = TuxPlanetSpeedrunAnyPercentLibrary.CameraStateProcessing.ComputeCameraState(tuxXMibi, tuxYMibi, null, null, tilemap, windowWidth, windowHeight);

                            newDialogueList = this.dialogueList;
                            newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_SaveState.Status.D_Camera;

                            if (cameraState.X <= destinationCameraState1.X) {
                                return new TuxPlanetSpeedrunAnyPercentLibrary.CutsceneProcessing.Result(TuxPlanetSpeedrunAnyPercentLibrary.Move.EmptyMove(), cameraState, newEnemies, newlyAddedLevelFlags, null, true, false, false);
                            } else {
                                newCameraState = TuxPlanetSpeedrunAnyPercentLibrary.CameraState.SmoothCameraState$2(cameraState, destinationCameraState1, elapsedMicrosPerFrame, TuxPlanetSpeedrunAnyPercentLibrary.CameraState.CUTSCENE_CAMERA_SPEED);
                            }

                            break;
                        }
                    default: 
                        throw new System.Exception();
                }

                return new TuxPlanetSpeedrunAnyPercentLibrary.CutsceneProcessing.Result(this.isFirstFrame ? new TuxPlanetSpeedrunAnyPercentLibrary.Move(false, false, false, true, false, false, false) : TuxPlanetSpeedrunAnyPercentLibrary.Move.EmptyMove(), newCameraState, newEnemies, newlyAddedLevelFlags, new TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_SaveState(false, newStatus, newKonqiDisappearElapsedMicros, newDialogueList), this.status === TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_SaveState.Status.C_KonqiDisappear || this.status === TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_SaveState.Status.D_Camera, false, false);
            },
            Render: function (displayOutput, windowWidth, windowHeight) {
                if (this.status === TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_SaveState.Status.B_Dialogue) {
                    this.dialogueList.Render(displayOutput, windowWidth, windowHeight);
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_Teleport", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.ICutscene],
        statics: {
            fields: {
                KONQI_DISAPPEAR_WAIT_TIME: 0
            },
            ctors: {
                init: function () {
                    this.KONQI_DISAPPEAR_WAIT_TIME = 500000;
                }
            },
            methods: {
                GetCutscene: function () {
                    var dialogues = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Dialogue)).ctor();

                    dialogues.add(TuxPlanetSpeedrunAnyPercentLibrary.Dialogue.GetDialogue(500, 460, 490, 40, "Hello again!"));

                    dialogues.add(TuxPlanetSpeedrunAnyPercentLibrary.Dialogue.GetDialogue(10, 460, 172, 40, "Hi Konqi!"));

                    dialogues.add(TuxPlanetSpeedrunAnyPercentLibrary.Dialogue.GetDialogue(500, 400, 490, 60, "The terrain ahead is rough, but I \ncan grant you a new power!"));

                    dialogues.add(TuxPlanetSpeedrunAnyPercentLibrary.Dialogue.GetDialogue(500, 400, 490, 60, "Press X to do a short-range \nteleport!"));

                    var dialogueList = new TuxPlanetSpeedrunAnyPercentLibrary.DialogueList(dialogues);

                    return new TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_Teleport(true, TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_Teleport.Status.A_Camera, 0, dialogueList);
                }
            }
        },
        fields: {
            isFirstFrame: false,
            status: 0,
            konqiDisappearElapsedMicros: 0,
            dialogueList: null
        },
        alias: [
            "GetCutsceneName", "TuxPlanetSpeedrunAnyPercentLibrary$ICutscene$GetCutsceneName",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$ICutscene$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$ICutscene$Render"
        ],
        ctors: {
            ctor: function (isFirstFrame, status, konqiDisappearElapsedMicros, dialogueList) {
                this.$initialize();
                this.isFirstFrame = isFirstFrame;
                this.status = status;
                this.konqiDisappearElapsedMicros = konqiDisappearElapsedMicros;
                this.dialogueList = dialogueList;
            }
        },
        methods: {
            GetCutsceneName: function () {
                return TuxPlanetSpeedrunAnyPercentLibrary.CutsceneProcessing.TELEPORT_CUTSCENE;
            },
            ProcessFrame: function (move, tuxXMibi, tuxYMibi, cameraState, elapsedMicrosPerFrame, windowWidth, windowHeight, tilemap, enemies, levelFlags) {
                var newCameraState;
                var newDialogueList;
                var newStatus = new TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_Teleport.Status();
                var newKonqiDisappearElapsedMicros = this.konqiDisappearElapsedMicros;
                var newEnemies = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).$ctor1(enemies);
                var newlyAddedLevelFlags = null;

                switch (this.status) {
                    case TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_Teleport.Status.A_Camera: 
                        {
                            var destinationCameraState = TuxPlanetSpeedrunAnyPercentLibrary.CameraState.GetCameraState(Math.min((((tuxXMibi >> 10) + 440) | 0), ((tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetWidth() - ((Bridge.Int.div(windowWidth, 2)) | 0)) | 0)), tuxYMibi >> 10);

                            newDialogueList = this.dialogueList;

                            if (cameraState.X >= destinationCameraState.X && Math.abs(((cameraState.Y - destinationCameraState.Y) | 0)) <= 25) {
                                newCameraState = cameraState;
                                newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_Teleport.Status.B_Dialogue;
                            } else {
                                newCameraState = TuxPlanetSpeedrunAnyPercentLibrary.CameraState.SmoothCameraState$2(cameraState, destinationCameraState, elapsedMicrosPerFrame, TuxPlanetSpeedrunAnyPercentLibrary.CameraState.CUTSCENE_CAMERA_SPEED);
                                newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_Teleport.Status.A_Camera;
                            }

                            break;
                        }
                    case TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_Teleport.Status.B_Dialogue: 
                        var dialogueListResult = this.dialogueList.ProcessFrame(move, elapsedMicrosPerFrame);
                        newCameraState = cameraState;
                        newDialogueList = dialogueListResult.DialogueList;
                        if (dialogueListResult.IsDone) {
                            newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_Teleport.Status.C_KonqiDisappear;
                            if (newlyAddedLevelFlags == null) {
                                newlyAddedLevelFlags = new (System.Collections.Generic.List$1(System.String)).ctor();
                            }
                            newlyAddedLevelFlags.add(TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiCutscene.SHOULD_TELEPORT_OUT_DEFAULT_LEVEL_FLAG);
                        } else {
                            newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_Teleport.Status.B_Dialogue;
                        }
                        break;
                    case TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_Teleport.Status.C_KonqiDisappear: 
                        newKonqiDisappearElapsedMicros = (newKonqiDisappearElapsedMicros + elapsedMicrosPerFrame) | 0;
                        newCameraState = cameraState;
                        newDialogueList = this.dialogueList;
                        if (newKonqiDisappearElapsedMicros >= TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_Teleport.KONQI_DISAPPEAR_WAIT_TIME) {
                            newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_Teleport.Status.D_Camera;
                        } else {
                            newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_Teleport.Status.C_KonqiDisappear;
                        }
                        break;
                    case TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_Teleport.Status.D_Camera: 
                        {
                            var destinationCameraState1 = TuxPlanetSpeedrunAnyPercentLibrary.CameraStateProcessing.ComputeCameraState(tuxXMibi, tuxYMibi, null, null, tilemap, windowWidth, windowHeight);

                            newDialogueList = this.dialogueList;
                            newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_Teleport.Status.D_Camera;

                            if (cameraState.X <= destinationCameraState1.X) {
                                return new TuxPlanetSpeedrunAnyPercentLibrary.CutsceneProcessing.Result(TuxPlanetSpeedrunAnyPercentLibrary.Move.EmptyMove(), cameraState, newEnemies, newlyAddedLevelFlags, null, false, false, true);
                            } else {
                                newCameraState = TuxPlanetSpeedrunAnyPercentLibrary.CameraState.SmoothCameraState$2(cameraState, destinationCameraState1, elapsedMicrosPerFrame, TuxPlanetSpeedrunAnyPercentLibrary.CameraState.CUTSCENE_CAMERA_SPEED);
                            }

                            break;
                        }
                    default: 
                        throw new System.Exception();
                }

                return new TuxPlanetSpeedrunAnyPercentLibrary.CutsceneProcessing.Result(this.isFirstFrame ? new TuxPlanetSpeedrunAnyPercentLibrary.Move(false, false, false, true, false, false, false) : TuxPlanetSpeedrunAnyPercentLibrary.Move.EmptyMove(), newCameraState, newEnemies, newlyAddedLevelFlags, new TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_Teleport(false, newStatus, newKonqiDisappearElapsedMicros, newDialogueList), false, false, this.status === TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_Teleport.Status.C_KonqiDisappear || this.status === TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_Teleport.Status.D_Camera);
            },
            Render: function (displayOutput, windowWidth, windowHeight) {
                if (this.status === TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_Teleport.Status.B_Dialogue) {
                    this.dialogueList.Render(displayOutput, windowWidth, windowHeight);
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_TimeSlowdown", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.ICutscene],
        statics: {
            fields: {
                KONQI_DISAPPEAR_WAIT_TIME: 0
            },
            ctors: {
                init: function () {
                    this.KONQI_DISAPPEAR_WAIT_TIME = 500000;
                }
            },
            methods: {
                GetCutscene: function () {
                    var dialogues = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Dialogue)).ctor();

                    dialogues.add(TuxPlanetSpeedrunAnyPercentLibrary.Dialogue.GetDialogue(500, 460, 490, 40, "Hello again!"));

                    dialogues.add(TuxPlanetSpeedrunAnyPercentLibrary.Dialogue.GetDialogue(10, 460, 172, 40, "Hello Konqi!"));

                    dialogues.add(TuxPlanetSpeedrunAnyPercentLibrary.Dialogue.GetDialogue(500, 400, 490, 60, "I've brought a new power that \nshould help -- time dilation!"));

                    dialogues.add(TuxPlanetSpeedrunAnyPercentLibrary.Dialogue.GetDialogue(500, 400, 490, 60, "Hold the left shift key to \nslow down time!"));

                    var dialogueList = new TuxPlanetSpeedrunAnyPercentLibrary.DialogueList(dialogues);

                    return new TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_TimeSlowdown(true, TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_TimeSlowdown.Status.A_Camera, 0, dialogueList);
                }
            }
        },
        fields: {
            isFirstFrame: false,
            status: 0,
            konqiDisappearElapsedMicros: 0,
            dialogueList: null
        },
        alias: [
            "GetCutsceneName", "TuxPlanetSpeedrunAnyPercentLibrary$ICutscene$GetCutsceneName",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$ICutscene$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$ICutscene$Render"
        ],
        ctors: {
            ctor: function (isFirstFrame, status, konqiDisappearElapsedMicros, dialogueList) {
                this.$initialize();
                this.isFirstFrame = isFirstFrame;
                this.status = status;
                this.konqiDisappearElapsedMicros = konqiDisappearElapsedMicros;
                this.dialogueList = dialogueList;
            }
        },
        methods: {
            GetCutsceneName: function () {
                return TuxPlanetSpeedrunAnyPercentLibrary.CutsceneProcessing.TIME_SLOWDOWN_CUTSCENE;
            },
            ProcessFrame: function (move, tuxXMibi, tuxYMibi, cameraState, elapsedMicrosPerFrame, windowWidth, windowHeight, tilemap, enemies, levelFlags) {
                var newCameraState;
                var newDialogueList;
                var newStatus = new TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_TimeSlowdown.Status();
                var newKonqiDisappearElapsedMicros = this.konqiDisappearElapsedMicros;
                var newEnemies = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).$ctor1(enemies);
                var newlyAddedLevelFlags = null;

                switch (this.status) {
                    case TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_TimeSlowdown.Status.A_Camera: 
                        {
                            var destinationCameraState = TuxPlanetSpeedrunAnyPercentLibrary.CameraState.GetCameraState(Math.min((((tuxXMibi >> 10) + 440) | 0), ((tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetWidth() - ((Bridge.Int.div(windowWidth, 2)) | 0)) | 0)), tuxYMibi >> 10);

                            newDialogueList = this.dialogueList;

                            if (cameraState.X >= destinationCameraState.X && Math.abs(((cameraState.Y - destinationCameraState.Y) | 0)) <= 5) {
                                newCameraState = cameraState;
                                newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_TimeSlowdown.Status.B_Dialogue;
                            } else {
                                newCameraState = TuxPlanetSpeedrunAnyPercentLibrary.CameraState.SmoothCameraState$2(cameraState, destinationCameraState, elapsedMicrosPerFrame, TuxPlanetSpeedrunAnyPercentLibrary.CameraState.CUTSCENE_CAMERA_SPEED);
                                newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_TimeSlowdown.Status.A_Camera;
                            }

                            break;
                        }
                    case TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_TimeSlowdown.Status.B_Dialogue: 
                        var dialogueListResult = this.dialogueList.ProcessFrame(move, elapsedMicrosPerFrame);
                        newCameraState = cameraState;
                        newDialogueList = dialogueListResult.DialogueList;
                        if (dialogueListResult.IsDone) {
                            newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_TimeSlowdown.Status.C_KonqiDisappear;
                            if (newlyAddedLevelFlags == null) {
                                newlyAddedLevelFlags = new (System.Collections.Generic.List$1(System.String)).ctor();
                            }
                            newlyAddedLevelFlags.add(TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiCutscene.SHOULD_TELEPORT_OUT_DEFAULT_LEVEL_FLAG);
                        } else {
                            newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_TimeSlowdown.Status.B_Dialogue;
                        }
                        break;
                    case TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_TimeSlowdown.Status.C_KonqiDisappear: 
                        newKonqiDisappearElapsedMicros = (newKonqiDisappearElapsedMicros + elapsedMicrosPerFrame) | 0;
                        newCameraState = cameraState;
                        newDialogueList = this.dialogueList;
                        if (newKonqiDisappearElapsedMicros >= TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_TimeSlowdown.KONQI_DISAPPEAR_WAIT_TIME) {
                            newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_TimeSlowdown.Status.D_Camera;
                        } else {
                            newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_TimeSlowdown.Status.C_KonqiDisappear;
                        }
                        break;
                    case TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_TimeSlowdown.Status.D_Camera: 
                        {
                            var destinationCameraState1 = TuxPlanetSpeedrunAnyPercentLibrary.CameraStateProcessing.ComputeCameraState(tuxXMibi, tuxYMibi, null, null, tilemap, windowWidth, windowHeight);

                            newDialogueList = this.dialogueList;
                            newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_TimeSlowdown.Status.D_Camera;

                            if (cameraState.X <= destinationCameraState1.X) {
                                return new TuxPlanetSpeedrunAnyPercentLibrary.CutsceneProcessing.Result(TuxPlanetSpeedrunAnyPercentLibrary.Move.EmptyMove(), cameraState, newEnemies, newlyAddedLevelFlags, null, false, true, false);
                            } else {
                                newCameraState = TuxPlanetSpeedrunAnyPercentLibrary.CameraState.SmoothCameraState$2(cameraState, destinationCameraState1, elapsedMicrosPerFrame, TuxPlanetSpeedrunAnyPercentLibrary.CameraState.CUTSCENE_CAMERA_SPEED);
                            }

                            break;
                        }
                    default: 
                        throw new System.Exception();
                }

                return new TuxPlanetSpeedrunAnyPercentLibrary.CutsceneProcessing.Result(this.isFirstFrame ? new TuxPlanetSpeedrunAnyPercentLibrary.Move(false, false, false, true, false, false, false) : TuxPlanetSpeedrunAnyPercentLibrary.Move.EmptyMove(), newCameraState, newEnemies, newlyAddedLevelFlags, new TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_TimeSlowdown(false, newStatus, newKonqiDisappearElapsedMicros, newDialogueList), false, this.status === TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_TimeSlowdown.Status.C_KonqiDisappear || this.status === TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_TimeSlowdown.Status.D_Camera, false);
            },
            Render: function (displayOutput, windowWidth, windowHeight) {
                if (this.status === TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_TimeSlowdown.Status.B_Dialogue) {
                    this.dialogueList.Render(displayOutput, windowWidth, windowHeight);
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_YetiBossDefeated", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.ICutscene],
        statics: {
            fields: {
                LEVEL_FLAG_YETI_IS_FACING_RIGHT: null
            },
            ctors: {
                init: function () {
                    this.LEVEL_FLAG_YETI_IS_FACING_RIGHT = "Cutscene_YetiBossDefeated_yetiIsFacingRight";
                }
            },
            methods: {
                GetCutscene: function (customLevelInfo) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_YetiBossDefeated(TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_YetiBossDefeated.Status.A_Dialogue, null, new (System.Collections.Generic.Dictionary$2(System.String,System.String))(customLevelInfo));
                }
            }
        },
        fields: {
            status: 0,
            dialogueList: null,
            customLevelInfo: null
        },
        alias: [
            "GetCutsceneName", "TuxPlanetSpeedrunAnyPercentLibrary$ICutscene$GetCutsceneName",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$ICutscene$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$ICutscene$Render"
        ],
        ctors: {
            ctor: function (status, dialogueList, customLevelInfo) {
                this.$initialize();
                this.status = status;
                this.dialogueList = dialogueList;
                this.customLevelInfo = customLevelInfo;
            }
        },
        methods: {
            GetCutsceneName: function () {
                return TuxPlanetSpeedrunAnyPercentLibrary.CutsceneProcessing.YETI_BOSS_DEFEATED_CUTSCENE;
            },
            ProcessFrame: function (move, tuxXMibi, tuxYMibi, cameraState, elapsedMicrosPerFrame, windowWidth, windowHeight, tilemap, enemies, levelFlags) {
                var newCameraState;
                var newDialogueList;
                var newStatus = new TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_YetiBossDefeated.Status();
                var newEnemies = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).$ctor1(enemies);
                var newLevelFlags = new (System.Collections.Generic.List$1(System.String)).ctor();

                var currentDialogueList = this.dialogueList;

                if (currentDialogueList == null) {
                    var dialogues = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Dialogue)).ctor();

                    dialogues.add(TuxPlanetSpeedrunAnyPercentLibrary.Dialogue.GetDialogue(System.Linq.Enumerable.from(levelFlags).contains(TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_YetiBossDefeated.LEVEL_FLAG_YETI_IS_FACING_RIGHT) ? 400 : 100, 185, 490, 120, "Oww... \n\nOk you win. But time isn't called \nuntil you finish the level."));

                    currentDialogueList = new TuxPlanetSpeedrunAnyPercentLibrary.DialogueList(dialogues);
                }

                switch (this.status) {
                    case TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_YetiBossDefeated.Status.A_Dialogue: 
                        {
                            newLevelFlags.add(TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.STOP_PLAYING_YETI_BOSS_MUSIC);
                            newLevelFlags.add(TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.STOP_LOCKING_CAMERA_ON_YETI_BOSS_ROOM);
                            newLevelFlags.add(TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.SET_CAMERA_TO_YETI_DEFEATED_LOGIC);

                            var dialogueListResult = currentDialogueList.ProcessFrame(move, elapsedMicrosPerFrame);

                            newDialogueList = dialogueListResult.DialogueList;

                            newCameraState = TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.GetYetiBossRoomCameraState(this.customLevelInfo, tilemap, windowWidth, windowHeight);

                            if (dialogueListResult.IsDone) {
                                newLevelFlags.add(TuxPlanetSpeedrunAnyPercentLibrary.EnemyBossDoor.LEVEL_FLAG_OPEN_BOSS_DOORS);
                                newLevelFlags.add(TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.STOP_MARKING_LEFT_AND_RIGHT_WALLS_OF_BOSS_ROOM_AS_GROUND);
                                newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_YetiBossDefeated.Status.B_Camera;
                            } else {
                                newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_YetiBossDefeated.Status.A_Dialogue;
                            }

                            break;
                        }
                    case TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_YetiBossDefeated.Status.B_Camera: 
                        {
                            var destinationCameraState = TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.GetYetiBossDefeatedCameraState(this.customLevelInfo, tilemap, tuxXMibi, tuxYMibi, windowWidth, windowHeight);

                            newDialogueList = currentDialogueList;
                            newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_YetiBossDefeated.Status.B_Camera;

                            if (cameraState.X === destinationCameraState.X && cameraState.Y === destinationCameraState.Y) {
                                return new TuxPlanetSpeedrunAnyPercentLibrary.CutsceneProcessing.Result(TuxPlanetSpeedrunAnyPercentLibrary.Move.EmptyMove(), cameraState, newEnemies, newLevelFlags, null, false, false, false);
                            } else {
                                newCameraState = TuxPlanetSpeedrunAnyPercentLibrary.CameraState.SmoothCameraState$2(cameraState, destinationCameraState, elapsedMicrosPerFrame, TuxPlanetSpeedrunAnyPercentLibrary.CameraState.CUTSCENE_CAMERA_SPEED);
                            }

                            break;
                        }
                    default: 
                        throw new System.Exception();
                }

                var newMove = TuxPlanetSpeedrunAnyPercentLibrary.Move.EmptyMove();

                return new TuxPlanetSpeedrunAnyPercentLibrary.CutsceneProcessing.Result(newMove, newCameraState, newEnemies, newLevelFlags, new TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_YetiBossDefeated(newStatus, newDialogueList, this.customLevelInfo), false, false, false);
            },
            Render: function (displayOutput, windowWidth, windowHeight) {
                if (this.status === TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_YetiBossDefeated.Status.A_Dialogue) {
                    this.dialogueList.Render(displayOutput, windowWidth, windowHeight);
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_YetiBossIntro", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.ICutscene],
        statics: {
            fields: {
                LEVEL_FLAG_TALKED_WITH_YETI_KONQI_DISAPPEAR: null
            },
            ctors: {
                init: function () {
                    this.LEVEL_FLAG_TALKED_WITH_YETI_KONQI_DISAPPEAR = "talkedWithYetiKonqiDisappear";
                }
            },
            methods: {
                GetCutscene: function (customLevelInfo) {
                    var dialogues1 = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Dialogue)).ctor();

                    dialogues1.add(TuxPlanetSpeedrunAnyPercentLibrary.Dialogue.GetDialogue(730, 255, 260, 90, "Hi Yeti. I thought \nyou were on \nvacation."));

                    dialogues1.add(TuxPlanetSpeedrunAnyPercentLibrary.Dialogue.GetDialogue(590, 245, 195, 40, "Just got back."));

                    dialogues1.add(TuxPlanetSpeedrunAnyPercentLibrary.Dialogue.GetDialogue(730, 245, 260, 180, "Perfect timing!\n\nYou have a \nchallenger. \n\nThis is Tux!"));

                    var dialogueList1 = new TuxPlanetSpeedrunAnyPercentLibrary.DialogueList(dialogues1);

                    var dialogues2 = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Dialogue)).ctor();

                    dialogues2.add(TuxPlanetSpeedrunAnyPercentLibrary.Dialogue.GetDialogue(490, 245, 500, 235, "Hello Tux. \n\nYou may know me as the Icy Island \nboss from SuperTux and SuperTux \nAdvance. The devs never gave me a \nname but you can just call me Yeti. \n\nNice to meet you!"));

                    dialogues2.add(TuxPlanetSpeedrunAnyPercentLibrary.Dialogue.GetDialogue(500, 245, 490, 65, "I'll be serving as the final boss. \nGood luck; have fun!"));

                    var dialogueList2 = new TuxPlanetSpeedrunAnyPercentLibrary.DialogueList(dialogues2);

                    return new TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_YetiBossIntro(TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_YetiBossIntro.Status.A_SpawnEnemies, dialogueList1, dialogueList2, true, new (System.Collections.Generic.Dictionary$2(System.String,System.String))(customLevelInfo));
                }
            }
        },
        fields: {
            status: 0,
            dialogueList1: null,
            dialogueList2: null,
            isFirstFrame: false,
            customLevelInfo: null
        },
        alias: [
            "GetCutsceneName", "TuxPlanetSpeedrunAnyPercentLibrary$ICutscene$GetCutsceneName",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$ICutscene$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$ICutscene$Render"
        ],
        ctors: {
            ctor: function (status, dialogueList1, dialogueList2, isFirstFrame, customLevelInfo) {
                this.$initialize();
                this.status = status;
                this.dialogueList1 = dialogueList1;
                this.dialogueList2 = dialogueList2;
                this.isFirstFrame = isFirstFrame;
                this.customLevelInfo = customLevelInfo;
            }
        },
        methods: {
            GetCutsceneName: function () {
                return TuxPlanetSpeedrunAnyPercentLibrary.CutsceneProcessing.YETI_BOSS_INTRO_CUTSCENE;
            },
            ProcessFrame: function (move, tuxXMibi, tuxYMibi, cameraState, elapsedMicrosPerFrame, windowWidth, windowHeight, tilemap, enemies, levelFlags) {
                var newCameraState;
                var newDialogueList1;
                var newDialogueList2;
                var newStatus = new TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_YetiBossIntro.Status();
                var newEnemies = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).$ctor1(enemies);

                var newLevelFlags = new (System.Collections.Generic.List$1(System.String)).ctor();

                var konqiXMibi = (((DTLibrary.StringUtil.ParseAsIntCultureInvariant(this.customLevelInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$System$String$getItem(TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.BOSS_ROOM_X_OFFSET_START)) + 816) | 0)) << 10;

                switch (this.status) {
                    case TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_YetiBossIntro.Status.A_SpawnEnemies: 
                        {
                            newCameraState = cameraState;
                            newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_YetiBossIntro.Status.B_Camera;
                            newDialogueList1 = this.dialogueList1;
                            newDialogueList2 = this.dialogueList2;

                            newEnemies.add(TuxPlanetSpeedrunAnyPercentLibrary.EnemyYetiCutscene.GetEnemyYetiCutscene(((konqiXMibi - 196608) | 0), 983040, this.customLevelInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$System$String$getItem(TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.YETI_BOSS_RNG_SEED), "enemyYetiCutscene"));

                            newEnemies.add(TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiCutscene.GetEnemyKonqiCutscene(konqiXMibi, 909312, true, TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_YetiBossIntro.LEVEL_FLAG_TALKED_WITH_YETI_KONQI_DISAPPEAR, "yetiBossIntroCutscene_konqi"));

                            break;
                        }
                    case TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_YetiBossIntro.Status.B_Camera: 
                        {
                            var destinationCameraState = TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.GetYetiBossRoomCameraState(this.customLevelInfo, tilemap, windowWidth, windowHeight);

                            newDialogueList1 = this.dialogueList1;
                            newDialogueList2 = this.dialogueList2;

                            if (cameraState.X === destinationCameraState.X && cameraState.Y === destinationCameraState.Y) {
                                newCameraState = cameraState;
                                newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_YetiBossIntro.Status.C_Dialogue1;
                            } else {
                                newCameraState = TuxPlanetSpeedrunAnyPercentLibrary.CameraState.SmoothCameraState$2(cameraState, destinationCameraState, elapsedMicrosPerFrame, TuxPlanetSpeedrunAnyPercentLibrary.CameraState.CUTSCENE_CAMERA_SPEED);
                                newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_YetiBossIntro.Status.B_Camera;
                            }

                            break;
                        }
                    case TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_YetiBossIntro.Status.C_Dialogue1: 
                        {
                            var dialogueListResult = this.dialogueList1.ProcessFrame(move, elapsedMicrosPerFrame);

                            newCameraState = cameraState;
                            newDialogueList1 = dialogueListResult.DialogueList;
                            newDialogueList2 = this.dialogueList2;

                            if (dialogueListResult.IsDone) {
                                newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_YetiBossIntro.Status.D_KonqiDisappear;
                            } else {
                                newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_YetiBossIntro.Status.C_Dialogue1;
                            }

                            break;
                        }
                    case TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_YetiBossIntro.Status.D_KonqiDisappear: 
                        newCameraState = cameraState;
                        newDialogueList1 = this.dialogueList1;
                        newDialogueList2 = this.dialogueList2;
                        newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_YetiBossIntro.Status.E_Dialogue2;
                        newLevelFlags.add(TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_YetiBossIntro.LEVEL_FLAG_TALKED_WITH_YETI_KONQI_DISAPPEAR);
                        newLevelFlags.add(TuxPlanetSpeedrunAnyPercentLibrary.EnemyYetiCutscene.LEVEL_FLAG_SWITCH_DIRECTIONS);
                        break;
                    case TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_YetiBossIntro.Status.E_Dialogue2: 
                        {
                            var dialogueListResult1 = this.dialogueList2.ProcessFrame(move, elapsedMicrosPerFrame);

                            newCameraState = cameraState;
                            newDialogueList1 = this.dialogueList1;
                            newDialogueList2 = dialogueListResult1.DialogueList;

                            if (dialogueListResult1.IsDone) {
                                newLevelFlags.add(TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.STOP_LOCKING_CAMERA_ON_KONQI_DEFEATED_BOSS_ROOM);
                                newLevelFlags.add(TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.LOCK_CAMERA_ON_YETI_BOSS_ROOM);
                                newLevelFlags.add(TuxPlanetSpeedrunAnyPercentLibrary.EnemyYetiCutscene.LEVEL_FLAG_DESPAWN_YETI_CUTSCENE_AND_SPAWN_YETI_BOSS);
                                newLevelFlags.add(TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.START_PLAYING_YETI_BOSS_MUSIC);
                                newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_YetiBossIntro.Status.F_Delay;
                            } else {
                                newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_YetiBossIntro.Status.E_Dialogue2;
                            }

                            break;
                        }
                    case TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_YetiBossIntro.Status.F_Delay: 
                        {
                            return new TuxPlanetSpeedrunAnyPercentLibrary.CutsceneProcessing.Result(TuxPlanetSpeedrunAnyPercentLibrary.Move.EmptyMove(), cameraState, newEnemies, newLevelFlags, null, false, false, false);
                        }
                    default: 
                        throw new System.Exception();
                }

                var newMove;

                if (this.isFirstFrame) {
                    newMove = new TuxPlanetSpeedrunAnyPercentLibrary.Move(false, false, false, true, false, false, false);
                } else {
                    newMove = TuxPlanetSpeedrunAnyPercentLibrary.Move.EmptyMove();
                }

                return new TuxPlanetSpeedrunAnyPercentLibrary.CutsceneProcessing.Result(newMove, newCameraState, newEnemies, newLevelFlags, new TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_YetiBossIntro(newStatus, newDialogueList1, newDialogueList2, false, this.customLevelInfo), false, false, false);
            },
            Render: function (displayOutput, windowWidth, windowHeight) {
                if (this.status === TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_YetiBossIntro.Status.C_Dialogue1) {
                    this.dialogueList1.Render(displayOutput, windowWidth, windowHeight);
                }
                if (this.status === TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_YetiBossIntro.Status.E_Dialogue2) {
                    this.dialogueList2.Render(displayOutput, windowWidth, windowHeight);
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemyAddLevelFlag", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.IEnemy],
        fields: {
            levelFlag: null,
            EnemyId: null
        },
        alias: [
            "EnemyId", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId",
            "GetHitboxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetHitboxes",
            "GetDamageBoxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDamageBoxes",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$Render",
            "GetDeadEnemy", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDeadEnemy"
        ],
        ctors: {
            ctor: function (levelFlag, enemyId) {
                this.$initialize();
                this.levelFlag = levelFlag;
                this.EnemyId = enemyId;
            }
        },
        methods: {
            GetHitboxes: function () {
                return null;
            },
            GetDamageBoxes: function () {
                return null;
            },
            ProcessFrame: function (cameraX, cameraY, windowWidth, windowHeight, elapsedMicrosPerFrame, tuxState, random, tilemap, levelFlags, soundOutput) {
                return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(null, null, Bridge.fn.bind(this, function (_o1) {
                        _o1.add(this.levelFlag);
                        return _o1;
                    })(new (System.Collections.Generic.List$1(System.String)).ctor()));
            },
            Render: function (displayOutput) { },
            GetDeadEnemy: function () {
                return null;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemyBlazeborn", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.IEnemy],
        statics: {
            methods: {
                GetEnemyBlazeborn: function (xMibi, yMibi, isFacingRight, enemyId) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyBlazeborn(xMibi, yMibi, isFacingRight, 0, enemyId);
                },
                IsGroundOrSpike: function (tilemap, x, y) {
                    return tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(x, y) || tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsSpikes(x, y);
                }
            }
        },
        fields: {
            xMibi: 0,
            yMibi: 0,
            isFacingRight: false,
            elapsedMicros: 0,
            EnemyId: null
        },
        alias: [
            "EnemyId", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId",
            "GetHitboxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetHitboxes",
            "GetDamageBoxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDamageBoxes",
            "GetDeadEnemy", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDeadEnemy",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$Render"
        ],
        ctors: {
            ctor: function (xMibi, yMibi, isFacingRight, elapsedMicros, enemyId) {
                this.$initialize();
                this.xMibi = xMibi;
                this.yMibi = yMibi;
                this.isFacingRight = isFacingRight;
                this.elapsedMicros = elapsedMicros;
                this.EnemyId = enemyId;
            }
        },
        methods: {
            GetHitboxes: function () {
                return Bridge.fn.bind(this, function (_o1) {
                        _o1.add(new TuxPlanetSpeedrunAnyPercentLibrary.Hitbox((((this.xMibi >> 10) - 24) | 0), (((this.yMibi >> 10) - 24) | 0), 48, 42));
                        return _o1;
                    })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Hitbox)).ctor());
            },
            GetDamageBoxes: function () {
                return null;
            },
            GetDeadEnemy: function () {
                return null;
            },
            ProcessFrame: function (cameraX, cameraY, windowWidth, windowHeight, elapsedMicrosPerFrame, tuxState, random, tilemap, levelFlags, soundOutput) {
                var list = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor();

                var newElapsedMicros = (this.elapsedMicros + elapsedMicrosPerFrame) | 0;

                if (newElapsedMicros > 2000000000) {
                    newElapsedMicros = 0;
                }

                var newXMibi = this.xMibi;
                var newYMibi = this.yMibi;
                var newIsFacingRight = this.isFacingRight;

                if (this.isFacingRight) {
                    newXMibi = (newXMibi + (((Bridge.Int.div(Bridge.Int.mul(elapsedMicrosPerFrame, 180), 1000)) | 0))) | 0;
                } else {
                    newXMibi = (newXMibi - (((Bridge.Int.div(Bridge.Int.mul(elapsedMicrosPerFrame, 180), 1000)) | 0))) | 0;
                }

                if (newIsFacingRight) {
                    if (TuxPlanetSpeedrunAnyPercentLibrary.EnemyBlazeborn.IsGroundOrSpike(tilemap, (((newXMibi >> 10) + 24) | 0), newYMibi >> 10)) {
                        newIsFacingRight = false;
                    }
                    if (!TuxPlanetSpeedrunAnyPercentLibrary.EnemyBlazeborn.IsGroundOrSpike(tilemap, (((newXMibi >> 10) + 12) | 0), (((newYMibi >> 10) - 33) | 0))) {
                        newIsFacingRight = false;
                    }
                } else {
                    if (TuxPlanetSpeedrunAnyPercentLibrary.EnemyBlazeborn.IsGroundOrSpike(tilemap, (((newXMibi >> 10) - 24) | 0), newYMibi >> 10)) {
                        newIsFacingRight = true;
                    }
                    if (!TuxPlanetSpeedrunAnyPercentLibrary.EnemyBlazeborn.IsGroundOrSpike(tilemap, (((newXMibi >> 10) - 12) | 0), (((newYMibi >> 10) - 33) | 0))) {
                        newIsFacingRight = true;
                    }
                }

                var isOutOfBounds = (((newXMibi >> 10) + 24) | 0) < ((((cameraX - ((Bridge.Int.div(windowWidth, 2)) | 0)) | 0) - TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0) || (((newXMibi >> 10) - 24) | 0) > ((((cameraX + ((Bridge.Int.div(windowWidth, 2)) | 0)) | 0) + TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0) || (((newYMibi >> 10) + 24) | 0) < ((((cameraY - ((Bridge.Int.div(windowHeight, 2)) | 0)) | 0) - TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0) || (((newYMibi >> 10) - 24) | 0) > ((((cameraY + ((Bridge.Int.div(windowHeight, 2)) | 0)) | 0) + TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0);

                if (!isOutOfBounds) {
                    list.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemyBlazeborn(newXMibi, newYMibi, newIsFacingRight, newElapsedMicros, this.EnemyId));
                }

                return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(list, null, null);
            },
            Render: function (displayOutput) {
                var image = this.isFacingRight ? TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Blazeborn : TuxPlanetSpeedrunAnyPercentLibrary.GameImage.BlazebornMirrored;

                var spriteNum = (Bridge.Int.div((this.elapsedMicros % 1000000), 250000)) | 0;

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(image, Bridge.Int.mul(spriteNum, 16), 0, 16, 16, (((this.xMibi >> 10) - 24) | 0), (((this.yMibi >> 10) - 24) | 0), 0, 384);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemyBossDoor", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.IEnemy],
        statics: {
            fields: {
                DOOR_ANIMATION_DURATION: 0,
                LEVEL_FLAG_CLOSE_BOSS_DOORS: null,
                LEVEL_FLAG_CLOSE_BOSS_DOORS_INSTANTLY: null,
                LEVEL_FLAG_OPEN_BOSS_DOORS: null
            },
            ctors: {
                init: function () {
                    this.DOOR_ANIMATION_DURATION = 500000;
                    this.LEVEL_FLAG_CLOSE_BOSS_DOORS = "closeBossDoors";
                    this.LEVEL_FLAG_CLOSE_BOSS_DOORS_INSTANTLY = "closeBossDoorsInstantly";
                    this.LEVEL_FLAG_OPEN_BOSS_DOORS = "openBossDoors";
                }
            },
            methods: {
                GetEnemyBossDoor: function (xMibi, yMibi, isUpperDoor, enemyId) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyBossDoor(xMibi >> 10, yMibi >> 10, 0, 0, isUpperDoor, enemyId);
                }
            }
        },
        fields: {
            x: 0,
            y: 0,
            elapsedMicrosClosing: 0,
            elapsedMicrosOpening: 0,
            isUpperDoor: false,
            EnemyId: null
        },
        alias: [
            "EnemyId", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId",
            "GetHitboxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetHitboxes",
            "GetDamageBoxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDamageBoxes",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$Render",
            "GetDeadEnemy", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDeadEnemy"
        ],
        ctors: {
            ctor: function (x, y, elapsedMicrosClosing, elapsedMicrosOpening, isUpperDoor, enemyId) {
                this.$initialize();
                this.x = x;
                this.y = y;
                this.elapsedMicrosClosing = elapsedMicrosClosing;
                this.elapsedMicrosOpening = elapsedMicrosOpening;
                this.isUpperDoor = isUpperDoor;
                this.EnemyId = enemyId;
            }
        },
        methods: {
            GetHitboxes: function () {
                return null;
            },
            GetDamageBoxes: function () {
                return null;
            },
            ProcessFrame: function (cameraX, cameraY, windowWidth, windowHeight, elapsedMicrosPerFrame, tuxState, random, tilemap, levelFlags, soundOutput) {
                var newElapsedMicrosClosing = this.elapsedMicrosClosing;
                var newElapsedMicrosOpening = this.elapsedMicrosOpening;

                if (newElapsedMicrosClosing <= TuxPlanetSpeedrunAnyPercentLibrary.EnemyBossDoor.DOOR_ANIMATION_DURATION) {
                    if (System.Linq.Enumerable.from(levelFlags).contains(TuxPlanetSpeedrunAnyPercentLibrary.EnemyBossDoor.LEVEL_FLAG_CLOSE_BOSS_DOORS_INSTANTLY)) {
                        newElapsedMicrosClosing = 500001;
                    } else {
                        if (System.Linq.Enumerable.from(levelFlags).contains(TuxPlanetSpeedrunAnyPercentLibrary.EnemyBossDoor.LEVEL_FLAG_CLOSE_BOSS_DOORS)) {
                            newElapsedMicrosClosing = (newElapsedMicrosClosing + elapsedMicrosPerFrame) | 0;
                        }
                    }
                }

                if (newElapsedMicrosOpening <= TuxPlanetSpeedrunAnyPercentLibrary.EnemyBossDoor.DOOR_ANIMATION_DURATION) {
                    if (System.Linq.Enumerable.from(levelFlags).contains(TuxPlanetSpeedrunAnyPercentLibrary.EnemyBossDoor.LEVEL_FLAG_OPEN_BOSS_DOORS)) {
                        newElapsedMicrosOpening = (newElapsedMicrosOpening + elapsedMicrosPerFrame) | 0;
                    }
                }

                if (newElapsedMicrosOpening >= TuxPlanetSpeedrunAnyPercentLibrary.EnemyBossDoor.DOOR_ANIMATION_DURATION) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(null, Bridge.fn.bind(this, function (_o1) {
                            _o1.add(this.EnemyId);
                            return _o1;
                        })(new (System.Collections.Generic.List$1(System.String)).ctor()), null);
                }

                return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(Bridge.fn.bind(this, function (_o2) {
                        _o2.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemyBossDoor(this.x, this.y, newElapsedMicrosClosing, newElapsedMicrosOpening, this.isUpperDoor, this.EnemyId));
                        return _o2;
                    })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor()), null, null);
            },
            Render: function (displayOutput) {
                var numPixels;

                if (this.elapsedMicrosClosing < TuxPlanetSpeedrunAnyPercentLibrary.EnemyBossDoor.DOOR_ANIMATION_DURATION) {
                    numPixels = (Bridge.Int.div(Bridge.Int.mul(32, this.elapsedMicrosClosing), TuxPlanetSpeedrunAnyPercentLibrary.EnemyBossDoor.DOOR_ANIMATION_DURATION)) | 0;
                } else {
                    if (this.elapsedMicrosOpening < TuxPlanetSpeedrunAnyPercentLibrary.EnemyBossDoor.DOOR_ANIMATION_DURATION) {
                        numPixels = (32 - ((Bridge.Int.div(Bridge.Int.mul(32, this.elapsedMicrosOpening), TuxPlanetSpeedrunAnyPercentLibrary.EnemyBossDoor.DOOR_ANIMATION_DURATION)) | 0)) | 0;
                    } else {
                        numPixels = 32;
                    }
                }

                var imageY;
                var y;

                if (this.isUpperDoor) {
                    imageY = (32 - numPixels) | 0;
                    y = (this.y + Bridge.Int.mul((((32 - numPixels) | 0)), 3)) | 0;
                } else {
                    imageY = 0;
                    y = this.y;
                }

                if (numPixels > 0) {
                    displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(TuxPlanetSpeedrunAnyPercentLibrary.GameImage.BossDoor, 0, imageY, 16, numPixels, this.x, y, 0, 384);
                }
            },
            GetDeadEnemy: function () {
                return null;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemyBouncecap", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.IEnemy],
        statics: {
            methods: {
                GetEnemyBouncecap: function (xMibi, yMibi, enemyId) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyBouncecap(xMibi, yMibi, false, 0, enemyId);
                },
                IsGroundOrSpike: function (tilemap, x, y) {
                    return tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(x, y) || tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsSpikes(x, y);
                }
            }
        },
        fields: {
            xMibi: 0,
            yMibi: 0,
            isFacingRight: false,
            ySpeedInMibipixelsPerSecond: 0,
            EnemyId: null
        },
        alias: [
            "EnemyId", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId",
            "GetHitboxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetHitboxes",
            "GetDamageBoxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDamageBoxes",
            "GetDeadEnemy", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDeadEnemy",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$Render"
        ],
        ctors: {
            ctor: function (xMibi, yMibi, isFacingRight, ySpeedInMibipixelsPerSecond, enemyId) {
                this.$initialize();
                this.xMibi = xMibi;
                this.yMibi = yMibi;
                this.isFacingRight = isFacingRight;
                this.ySpeedInMibipixelsPerSecond = ySpeedInMibipixelsPerSecond;
                this.EnemyId = enemyId;
            }
        },
        methods: {
            GetHitboxes: function () {
                return Bridge.fn.bind(this, function (_o1) {
                        _o1.add(new TuxPlanetSpeedrunAnyPercentLibrary.Hitbox((((this.xMibi >> 10) - 21) | 0), (((this.yMibi >> 10) - 21) | 0), 42, 42));
                        return _o1;
                    })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Hitbox)).ctor());
            },
            GetDamageBoxes: function () {
                return null;
            },
            GetDeadEnemy: function () {
                return null;
            },
            ProcessFrame: function (cameraX, cameraY, windowWidth, windowHeight, elapsedMicrosPerFrame, tuxState, random, tilemap, levelFlags, soundOutput) {
                var list = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor();

                var newYMibi = this.yMibi;
                var newIsFacingRight;
                var newYSpeedInMibipixelsPerSecond = this.ySpeedInMibipixelsPerSecond;

                if (tuxState.TeleportStartingLocation != null) {
                    newIsFacingRight = tuxState.TeleportStartingLocation.Item1 > this.xMibi;
                } else {
                    newIsFacingRight = tuxState.XMibi > this.xMibi;
                }

                if (newYSpeedInMibipixelsPerSecond >= -5000000) {
                    newYSpeedInMibipixelsPerSecond = (newYSpeedInMibipixelsPerSecond - (Bridge.Int.mul(elapsedMicrosPerFrame, 3))) | 0;
                }

                var isOnGround = TuxPlanetSpeedrunAnyPercentLibrary.EnemyBouncecap.IsGroundOrSpike(tilemap, this.xMibi >> 10, (((newYMibi >> 10) - 24) | 0)) || TuxPlanetSpeedrunAnyPercentLibrary.EnemyBouncecap.IsGroundOrSpike(tilemap, (((this.xMibi >> 10) - 21) | 0), (((newYMibi >> 10) - 24) | 0)) || TuxPlanetSpeedrunAnyPercentLibrary.EnemyBouncecap.IsGroundOrSpike(tilemap, (((this.xMibi >> 10) + 21) | 0), (((newYMibi >> 10) - 24) | 0));

                if (isOnGround) {
                    newYSpeedInMibipixelsPerSecond = 1100000;
                }

                newYMibi = System.Int64.clip32(System.Int64(newYMibi).add(System.Int64(newYSpeedInMibipixelsPerSecond).mul(System.Int64(elapsedMicrosPerFrame)).div(System.Int64(1000)).div(System.Int64(1000))));

                var isOutOfBounds = (((this.xMibi >> 10) + 24) | 0) < ((((cameraX - (windowWidth >> 1)) | 0) - TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0) || (((this.xMibi >> 10) - 24) | 0) > ((((cameraX + (windowWidth >> 1)) | 0) + TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0) || (((newYMibi >> 10) + 24) | 0) < ((((cameraY - (windowHeight >> 1)) | 0) - TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0) || (((newYMibi >> 10) - 24) | 0) > ((((cameraY + (windowHeight >> 1)) | 0) + TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0);

                if (!isOutOfBounds) {
                    list.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemyBouncecap(this.xMibi, newYMibi, newIsFacingRight, newYSpeedInMibipixelsPerSecond, this.EnemyId));
                }

                return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(list, null, null);
            },
            Render: function (displayOutput) {
                var image = this.isFacingRight ? TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Bouncecap : TuxPlanetSpeedrunAnyPercentLibrary.GameImage.BouncecapMirrored;

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$1(image, (((this.xMibi >> 10) - 24) | 0), (((this.yMibi >> 10) - 24) | 0), 0, 384);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemyCreationTilemap", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.ITilemap],
        fields: {
            mapTilemap: null,
            enemiesUnaffectedByXOffsetAndYOffset: null
        },
        alias: [
            "IsGround", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround",
            "IsKillZone", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsKillZone",
            "IsSpikes", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsSpikes",
            "IsEndOfLevel", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsEndOfLevel",
            "GetCutscene", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetCutscene",
            "GetCheckpoint", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetCheckpoint",
            "GetWidth", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetWidth",
            "GetHeight", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetHeight",
            "GetTuxLocation", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetTuxLocation",
            "GetMapKeyLocation", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetMapKeyLocation",
            "GetEnemies", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetEnemies",
            "PlayMusic", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$PlayMusic",
            "RenderBackgroundTiles", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$RenderBackgroundTiles",
            "RenderForegroundTiles", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$RenderForegroundTiles"
        ],
        ctors: {
            ctor: function (mapTilemap, enemiesUnaffectedByXOffsetAndYOffset) {
                this.$initialize();
                this.mapTilemap = mapTilemap;
                this.enemiesUnaffectedByXOffsetAndYOffset = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).$ctor1(enemiesUnaffectedByXOffsetAndYOffset);
            }
        },
        methods: {
            IsGround: function (x, y) {
                return this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(x, y);
            },
            IsKillZone: function (x, y) {
                return this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsKillZone(x, y);
            },
            IsSpikes: function (x, y) {
                return this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsSpikes(x, y);
            },
            IsEndOfLevel: function (x, y) {
                return this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsEndOfLevel(x, y);
            },
            GetCutscene: function (x, y) {
                return this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetCutscene(x, y);
            },
            GetCheckpoint: function (x, y) {
                return this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetCheckpoint(x, y);
            },
            GetWidth: function () {
                return this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetWidth();
            },
            GetHeight: function () {
                return this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetHeight();
            },
            GetTuxLocation: function (xOffset, yOffset) {
                return this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetTuxLocation(xOffset, yOffset);
            },
            GetMapKeyLocation: function (mapKey, xOffset, yOffset) {
                return this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetMapKeyLocation(mapKey, xOffset, yOffset);
            },
            GetEnemies: function (xOffset, yOffset) {
                var returnValue = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).$ctor1(this.enemiesUnaffectedByXOffsetAndYOffset);

                var mapTilemapEnemies = this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetEnemies(xOffset, yOffset);
                returnValue.AddRange(mapTilemapEnemies);

                return returnValue;
            },
            PlayMusic: function () {
                return this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$PlayMusic();
            },
            RenderBackgroundTiles: function (displayOutput, cameraX, cameraY, windowWidth, windowHeight) {
                this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$RenderBackgroundTiles(displayOutput, cameraX, cameraY, windowWidth, windowHeight);
            },
            RenderForegroundTiles: function (displayOutput, cameraX, cameraY, windowWidth, windowHeight) {
                this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$RenderForegroundTiles(displayOutput, cameraX, cameraY, windowWidth, windowHeight);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemyDeadMultiplePoof", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.IEnemy],
        statics: {
            methods: {
                SpawnEnemyDeadMultiplePoof: function (enemyDeadPoofList, enemyId) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyDeadMultiplePoof(enemyDeadPoofList, enemyId);
                }
            }
        },
        fields: {
            enemyDeadPoofList: null,
            EnemyId: null
        },
        alias: [
            "EnemyId", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId",
            "GetHitboxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetHitboxes",
            "GetDamageBoxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDamageBoxes",
            "GetDeadEnemy", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDeadEnemy",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$Render"
        ],
        ctors: {
            ctor: function (enemyDeadPoofList, enemyId) {
                this.$initialize();
                this.enemyDeadPoofList = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).$ctor1(enemyDeadPoofList);
                this.EnemyId = enemyId;
            }
        },
        methods: {
            GetHitboxes: function () {
                return null;
            },
            GetDamageBoxes: function () {
                return null;
            },
            GetDeadEnemy: function () {
                return null;
            },
            ProcessFrame: function (cameraX, cameraY, windowWidth, windowHeight, elapsedMicrosPerFrame, tuxState, random, tilemap, levelFlags, soundOutput) {
                var $t;
                var newEnemyDeadPoofList = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor();
                var newlyKilledEnemies = new (System.Collections.Generic.List$1(System.String)).ctor();
                var newlyAddedLevelFlags = new (System.Collections.Generic.List$1(System.String)).ctor();

                for (var i = 0; i < System.Array.getCount(this.enemyDeadPoofList, TuxPlanetSpeedrunAnyPercentLibrary.IEnemy); i = (i + 1) | 0) {
                    var result = System.Array.getItem(this.enemyDeadPoofList, i, TuxPlanetSpeedrunAnyPercentLibrary.IEnemy).TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ProcessFrame(cameraX, cameraY, windowWidth, windowHeight, elapsedMicrosPerFrame, tuxState, random, tilemap, levelFlags, soundOutput);

                    if (result.EnemiesNullable != null) {
                        newEnemyDeadPoofList.AddRange(result.EnemiesNullable);
                    }
                    if (result.NewlyKilledEnemiesNullable != null) {
                        newlyKilledEnemies.AddRange(result.NewlyKilledEnemiesNullable);
                    }
                    if (result.NewlyAddedLevelFlagsNullable != null) {
                        $t = Bridge.getEnumerator(result.NewlyAddedLevelFlagsNullable, System.String);
                        try {
                            while ($t.moveNext()) {
                                var levelFlag = $t.Current;
                                if (!newlyAddedLevelFlags.contains(levelFlag)) {
                                    newlyAddedLevelFlags.add(levelFlag);
                                }
                            }
                        } finally {
                            if (Bridge.is($t, System.IDisposable)) {
                                $t.System$IDisposable$Dispose();
                            }
                        }
                    }
                }

                var newEnemies = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor();

                if (newEnemyDeadPoofList.Count > 0) {
                    newEnemies.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemyDeadMultiplePoof(newEnemyDeadPoofList, this.EnemyId));
                }

                return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(newEnemies, newlyKilledEnemies, newlyAddedLevelFlags);
            },
            Render: function (displayOutput) {
                for (var i = 0; i < System.Array.getCount(this.enemyDeadPoofList, TuxPlanetSpeedrunAnyPercentLibrary.IEnemy); i = (i + 1) | 0) {
                    System.Array.getItem(this.enemyDeadPoofList, i, TuxPlanetSpeedrunAnyPercentLibrary.IEnemy).TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$Render(displayOutput);
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemyDeadPoof", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.IEnemy],
        statics: {
            fields: {
                DEAD_ANIMATION_DURATION: 0
            },
            ctors: {
                init: function () {
                    this.DEAD_ANIMATION_DURATION = 500000;
                }
            },
            methods: {
                SpawnEnemyDeadPoof: function (xMibi, yMibi, enemyId) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyDeadPoof(xMibi >> 10, yMibi >> 10, 0, enemyId);
                }
            }
        },
        fields: {
            x: 0,
            y: 0,
            elapsedMicros: 0,
            EnemyId: null
        },
        alias: [
            "EnemyId", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId",
            "GetHitboxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetHitboxes",
            "GetDamageBoxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDamageBoxes",
            "GetDeadEnemy", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDeadEnemy",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$Render"
        ],
        ctors: {
            ctor: function (x, y, elapsedMicros, enemyId) {
                this.$initialize();
                this.x = x;
                this.y = y;
                this.elapsedMicros = elapsedMicros;
                this.EnemyId = enemyId;
            }
        },
        methods: {
            GetHitboxes: function () {
                return null;
            },
            GetDamageBoxes: function () {
                return null;
            },
            GetDeadEnemy: function () {
                return null;
            },
            ProcessFrame: function (cameraX, cameraY, windowWidth, windowHeight, elapsedMicrosPerFrame, tuxState, random, tilemap, levelFlags, soundOutput) {
                var newElapsedMicros = (this.elapsedMicros + elapsedMicrosPerFrame) | 0;

                if (newElapsedMicros >= TuxPlanetSpeedrunAnyPercentLibrary.EnemyDeadPoof.DEAD_ANIMATION_DURATION) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(null, null, null);
                }

                return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(Bridge.fn.bind(this, function (_o1) {
                        _o1.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemyDeadPoof(this.x, this.y, newElapsedMicros, this.EnemyId));
                        return _o1;
                    })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor()), null, null);
            },
            Render: function (displayOutput) {
                var spriteNum = (((Bridge.Int.div(this.elapsedMicros, (125000))) | 0)) % 4;

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Poof, Bridge.Int.mul(spriteNum, 16), 0, 16, 16, ((this.x - 24) | 0), ((this.y - 24) | 0), 0, 384);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteFlyamanita", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.IEnemy],
        statics: {
            fields: {
                GREATER_ORBITER_RADIUS_IN_PIXELS: 0,
                GREATER_ORBITER_ROTATION_SPEED_IN_ANGLES_SCALED_PER_SECOND: 0,
                LESSER_ORBITER_RADIUS_IN_PIXELS: 0,
                LESSER_ORBITER_ROTATION_SPEED_IN_ANGLES_SCALED_PER_SECOND: 0
            },
            ctors: {
                init: function () {
                    this.GREATER_ORBITER_RADIUS_IN_PIXELS = 400;
                    this.GREATER_ORBITER_ROTATION_SPEED_IN_ANGLES_SCALED_PER_SECOND = 6400;
                    this.LESSER_ORBITER_RADIUS_IN_PIXELS = 150;
                    this.LESSER_ORBITER_ROTATION_SPEED_IN_ANGLES_SCALED_PER_SECOND = 7680;
                }
            },
            methods: {
                GetEnemyEliteFlyamanita: function (xMibi, yMibi, rngSeed, enemyId) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteFlyamanita(xMibi, yMibi, false, 0, rngSeed, false, "enemyEliteFlyamanitaIsDeadLevelFlag[" + (enemyId || "") + "]", enemyId);
                },
                GetGreaterOrbiterLocation: function (eliteFlyamanitaXMibi, eliteFlyamanitaYMibi, angleScaled) {
                    return { Item1: ((eliteFlyamanitaXMibi + Bridge.Int.mul(TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteFlyamanita.GREATER_ORBITER_RADIUS_IN_PIXELS, DTLibrary.DTMath.CosineScaled(angleScaled))) | 0), Item2: ((eliteFlyamanitaYMibi + Bridge.Int.mul(TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteFlyamanita.GREATER_ORBITER_RADIUS_IN_PIXELS, DTLibrary.DTMath.SineScaled(angleScaled))) | 0) };
                },
                GetLesserOrbiterLocation: function (eliteFlyamanitaXMibi, eliteFlyamanitaYMibi, greaterOrbiterAngleScaled, angleScaled) {
                    var greaterOrbiterLocation = TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteFlyamanita.GetGreaterOrbiterLocation(eliteFlyamanitaXMibi, eliteFlyamanitaYMibi, greaterOrbiterAngleScaled);

                    return { Item1: ((greaterOrbiterLocation.Item1 + Bridge.Int.mul(TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteFlyamanita.LESSER_ORBITER_RADIUS_IN_PIXELS, DTLibrary.DTMath.CosineScaled(angleScaled))) | 0), Item2: ((greaterOrbiterLocation.Item2 + Bridge.Int.mul(TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteFlyamanita.LESSER_ORBITER_RADIUS_IN_PIXELS, DTLibrary.DTMath.SineScaled(angleScaled))) | 0) };
                }
            }
        },
        fields: {
            xMibi: 0,
            yMibi: 0,
            isFacingRight: false,
            elapsedMicros: 0,
            rngSeed: null,
            hasSpawnedOrbiters: false,
            eliteFlyamanitaIsDeadLevelFlag: null,
            EnemyId: null
        },
        alias: [
            "EnemyId", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId",
            "GetHitboxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetHitboxes",
            "GetDamageBoxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDamageBoxes",
            "GetDeadEnemy", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDeadEnemy",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$Render"
        ],
        ctors: {
            ctor: function (xMibi, yMibi, isFacingRight, elapsedMicros, rngSeed, hasSpawnedOrbiters, isDeadLevelFlag, enemyId) {
                this.$initialize();
                this.xMibi = xMibi;
                this.yMibi = yMibi;
                this.isFacingRight = isFacingRight;
                this.elapsedMicros = elapsedMicros;
                this.rngSeed = rngSeed;
                this.hasSpawnedOrbiters = hasSpawnedOrbiters;
                this.eliteFlyamanitaIsDeadLevelFlag = isDeadLevelFlag;
                this.EnemyId = enemyId;
            }
        },
        methods: {
            GetHitboxes: function () {
                var list = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Hitbox)).ctor();
                list.add(new TuxPlanetSpeedrunAnyPercentLibrary.Hitbox((((this.xMibi >> 10) - 63) | 0), (((this.yMibi >> 10) - 63) | 0), 126, 126));

                return list;
            },
            GetDamageBoxes: function () {
                var list = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Hitbox)).ctor();
                list.add(new TuxPlanetSpeedrunAnyPercentLibrary.Hitbox((((this.xMibi >> 10) - 63) | 0), (((this.yMibi >> 10) - 63) | 0), 126, 126));

                return list;
            },
            GetDeadEnemy: function () {
                var random = new DTLibrary.DTDeterministicRandom.$ctor1(0);
                random.DeserializeFromString(this.rngSeed);

                var angularSpeedInAnglesScaledPerSecond = Bridge.Int.mul((((random.NextInt(51200) + 15360) | 0)), (random.NextBool() ? 1 : -1));

                return TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteFlyamanitaDead.SpawnEnemyEliteFlyamanitaDead(this.xMibi, this.yMibi, angularSpeedInAnglesScaledPerSecond, this.eliteFlyamanitaIsDeadLevelFlag, (this.EnemyId || "") + "_EnemyEliteFlyamanitaDead");
            },
            ProcessFrame: function (cameraX, cameraY, windowWidth, windowHeight, elapsedMicrosPerFrame, tuxState, random, tilemap, levelFlags, soundOutput) {
                var list = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor();

                var newIsFacingRight;

                if (tuxState.TeleportStartingLocation != null) {
                    newIsFacingRight = tuxState.TeleportStartingLocation.Item1 > this.xMibi;
                } else {
                    newIsFacingRight = tuxState.XMibi > this.xMibi;
                }

                var newElapsedMicros = (this.elapsedMicros + elapsedMicrosPerFrame) | 0;
                if (newElapsedMicros > 2000000000) {
                    newElapsedMicros = 1;
                }

                var newRngSeed = this.rngSeed;

                if (!this.hasSpawnedOrbiters) {
                    var enemyRng = new DTLibrary.DTDeterministicRandom.$ctor1(0);
                    enemyRng.DeserializeFromString(newRngSeed);

                    var angleScaledBaseValue = enemyRng.NextInt(46080);

                    var isRotatingClockwise = enemyRng.NextBool();

                    for (var i = 0; i < 3; i = (i + 1) | 0) {
                        enemyRng.NextBool();
                        var orbiterRngSeed = enemyRng.SerializeToString();
                        enemyRng.NextBool();

                        list.add(TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteFlyamanitaGreaterOrbiter.GetEnemyEliteFlyamanitaGreaterOrbiter(this.xMibi, this.yMibi, ((angleScaledBaseValue + Bridge.Int.mul(i, (15360))) | 0), isRotatingClockwise, i !== 0, this.eliteFlyamanitaIsDeadLevelFlag, orbiterRngSeed, (this.EnemyId || "") + "_orbiter[" + (DTLibrary.StringUtil.ToStringCultureInvariant(i) || "") + "]"));
                    }

                    newRngSeed = enemyRng.SerializeToString();
                }

                list.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteFlyamanita(this.xMibi, this.yMibi, newIsFacingRight, newElapsedMicros, newRngSeed, true, this.eliteFlyamanitaIsDeadLevelFlag, this.EnemyId));

                return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(list, null, null);
            },
            Render: function (displayOutput) {
                var image = this.isFacingRight ? TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Flyamanita : TuxPlanetSpeedrunAnyPercentLibrary.GameImage.FlyamanitaMirrored;

                var spriteNum = (((Bridge.Int.div(this.elapsedMicros, (100000))) | 0)) % 4;

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(image, Bridge.Int.mul(spriteNum, 20), 0, 20, 20, (((this.xMibi >> 10) - 90) | 0), (((this.yMibi >> 10) - 90) | 0), 0, 1152);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteFlyamanitaDead", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.IEnemy],
        statics: {
            methods: {
                SpawnEnemyEliteFlyamanitaDead: function (xMibi, yMibi, angularSpeedInAnglesScaledPerSecond, eliteFlyamanitaIsDeadLevelFlag, enemyId) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteFlyamanitaDead(xMibi, yMibi, 0, angularSpeedInAnglesScaledPerSecond, 0, eliteFlyamanitaIsDeadLevelFlag, false, enemyId);
                }
            }
        },
        fields: {
            xMibi: 0,
            yMibi: 0,
            ySpeedInMibipixelsPerSecond: 0,
            angularSpeedInAnglesScaledPerSecond: 0,
            angleScaled: 0,
            eliteFlyamanitaIsDeadLevelFlag: null,
            hasAddedLevelFlag: false,
            EnemyId: null
        },
        alias: [
            "EnemyId", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId",
            "GetDeadEnemy", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDeadEnemy",
            "GetHitboxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetHitboxes",
            "GetDamageBoxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDamageBoxes",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$Render"
        ],
        ctors: {
            ctor: function (xMibi, yMibi, ySpeedInMibipixelsPerSecond, angularSpeedInAnglesScaledPerSecond, angleScaled, eliteFlyamanitaIsDeadLevelFlag, hasAddedLevelFlag, enemyId) {
                this.$initialize();
                this.xMibi = xMibi;
                this.yMibi = yMibi;
                this.ySpeedInMibipixelsPerSecond = ySpeedInMibipixelsPerSecond;
                this.angularSpeedInAnglesScaledPerSecond = angularSpeedInAnglesScaledPerSecond;
                this.angleScaled = angleScaled;
                this.eliteFlyamanitaIsDeadLevelFlag = eliteFlyamanitaIsDeadLevelFlag;
                this.hasAddedLevelFlag = hasAddedLevelFlag;
                this.EnemyId = enemyId;
            }
        },
        methods: {
            GetDeadEnemy: function () {
                return null;
            },
            GetHitboxes: function () {
                return null;
            },
            GetDamageBoxes: function () {
                return null;
            },
            ProcessFrame: function (cameraX, cameraY, windowWidth, windowHeight, elapsedMicrosPerFrame, tuxState, random, tilemap, levelFlags, soundOutput) {
                var newlyAddedLevelFlags;

                if (this.hasAddedLevelFlag) {
                    newlyAddedLevelFlags = null;
                } else {
                    newlyAddedLevelFlags = Bridge.fn.bind(this, function (_o1) {
                            _o1.add(this.eliteFlyamanitaIsDeadLevelFlag);
                            return _o1;
                        })(new (System.Collections.Generic.List$1(System.String)).ctor());
                }

                var isOutOfBounds = (((this.xMibi >> 10) + 90) | 0) < ((((cameraX - (windowWidth >> 1)) | 0) - TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0) || (((this.xMibi >> 10) - 90) | 0) > ((((cameraX + (windowWidth >> 1)) | 0) + TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0) || (((this.yMibi >> 10) + 90) | 0) < ((((cameraY - (windowHeight >> 1)) | 0) - TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0) || (((this.yMibi >> 10) - 90) | 0) > ((((cameraY + (windowHeight >> 1)) | 0) + TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0);

                if (isOutOfBounds) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(null, null, newlyAddedLevelFlags);
                }

                var newYSpeedInMibipixelsPerSecond = this.ySpeedInMibipixelsPerSecond;
                if (newYSpeedInMibipixelsPerSecond >= -5000000) {
                    newYSpeedInMibipixelsPerSecond = (newYSpeedInMibipixelsPerSecond - (Bridge.Int.mul(elapsedMicrosPerFrame, 3))) | 0;
                }

                var newAngleScaled = this.angleScaled;
                newAngleScaled = (newAngleScaled + (((Bridge.Int.div(Bridge.Int.mul(((Bridge.Int.div(this.angularSpeedInAnglesScaledPerSecond, 1000)) | 0), elapsedMicrosPerFrame), 1000)) | 0))) | 0;
                while (newAngleScaled >= 46080) {
                    newAngleScaled = (newAngleScaled - (46080)) | 0;
                }
                while (newAngleScaled < 0) {
                    newAngleScaled = (newAngleScaled + (46080)) | 0;
                }

                var newYMibi = System.Int64.clip32(System.Int64(this.yMibi).add(System.Int64(newYSpeedInMibipixelsPerSecond).mul(System.Int64(elapsedMicrosPerFrame)).div(System.Int64(1000)).div(System.Int64(1000))));

                return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(Bridge.fn.bind(this, function (_o2) {
                        _o2.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteFlyamanitaDead(this.xMibi, newYMibi, newYSpeedInMibipixelsPerSecond, this.angularSpeedInAnglesScaledPerSecond, newAngleScaled, this.eliteFlyamanitaIsDeadLevelFlag, true, this.EnemyId));
                        return _o2;
                    })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor()), null, newlyAddedLevelFlags);
            },
            Render: function (displayOutput) {
                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Flyamanita, 0, 0, 20, 20, (((this.xMibi >> 10) - 90) | 0), (((this.yMibi >> 10) - 90) | 0), this.angleScaled, 1152);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteFlyamanitaGreaterOrbiter", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.IEnemy],
        statics: {
            methods: {
                GetEnemyEliteFlyamanitaGreaterOrbiter: function (eliteFlyamanitaXMibi, eliteFlyamanitaYMibi, angleScaled, isRotatingClockwise, isSpikes, eliteFlyamanitaIsDeadLevelFlag, rngSeed, enemyId) {
                    var location = TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteFlyamanita.GetGreaterOrbiterLocation(eliteFlyamanitaXMibi, eliteFlyamanitaYMibi, angleScaled);

                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteFlyamanitaGreaterOrbiter(location.Item1, location.Item2, false, 0, eliteFlyamanitaXMibi, eliteFlyamanitaYMibi, DTLibrary.DTMath.NormalizeDegreesScaled(angleScaled), isRotatingClockwise, isSpikes, eliteFlyamanitaIsDeadLevelFlag, (eliteFlyamanitaIsDeadLevelFlag || "") + "_orbiter[" + (enemyId || "") + "]", rngSeed, false, enemyId);
                }
            }
        },
        fields: {
            xMibi: 0,
            yMibi: 0,
            isFacingRight: false,
            elapsedMicros: 0,
            eliteFlyamanitaXMibi: 0,
            eliteFlyamanitaYMibi: 0,
            angleScaled: 0,
            isRotatingClockwise: false,
            isSpikes: false,
            eliteFlyamanitaIsDeadLevelFlag: null,
            greaterOrbiterIsDeadLevelFlag: null,
            rngSeed: null,
            hasSpawnedOrbiters: false,
            EnemyId: null
        },
        alias: [
            "EnemyId", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId",
            "GetHitboxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetHitboxes",
            "GetDamageBoxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDamageBoxes",
            "GetDeadEnemy", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDeadEnemy",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$Render"
        ],
        ctors: {
            ctor: function (xMibi, yMibi, isFacingRight, elapsedMicros, eliteFlyamanitaXMibi, eliteFlyamanitaYMibi, angleScaled, isRotatingClockwise, isSpikes, eliteFlyamanitaIsDeadLevelFlag, greaterOrbiterIsDeadLevelFlag, rngSeed, hasSpawnedOrbiters, enemyId) {
                this.$initialize();
                this.xMibi = xMibi;
                this.yMibi = yMibi;
                this.isFacingRight = isFacingRight;
                this.elapsedMicros = elapsedMicros;
                this.eliteFlyamanitaXMibi = eliteFlyamanitaXMibi;
                this.eliteFlyamanitaYMibi = eliteFlyamanitaYMibi;
                this.angleScaled = angleScaled;
                this.isRotatingClockwise = isRotatingClockwise;
                this.isSpikes = isSpikes;
                this.eliteFlyamanitaIsDeadLevelFlag = eliteFlyamanitaIsDeadLevelFlag;
                this.greaterOrbiterIsDeadLevelFlag = greaterOrbiterIsDeadLevelFlag;
                this.rngSeed = rngSeed;
                this.hasSpawnedOrbiters = hasSpawnedOrbiters;
                this.EnemyId = enemyId;
            }
        },
        methods: {
            GetHitboxes: function () {
                var hitbox = this.isSpikes ? new TuxPlanetSpeedrunAnyPercentLibrary.Hitbox((((this.xMibi >> 10) - 36) | 0), (((this.yMibi >> 10) - 36) | 0), 72, 72) : new TuxPlanetSpeedrunAnyPercentLibrary.Hitbox((((this.xMibi >> 10) - 48) | 0), (((this.yMibi >> 10) - 48) | 0), 96, 96);

                var list = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Hitbox)).ctor();
                list.add(hitbox);

                return list;
            },
            GetDamageBoxes: function () {
                if (this.isSpikes) {
                    return null;
                }

                var list = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Hitbox)).ctor();
                list.add(new TuxPlanetSpeedrunAnyPercentLibrary.Hitbox((((this.xMibi >> 10) - 48) | 0), (((this.yMibi >> 10) - 48) | 0), 96, 96));

                return list;
            },
            GetDeadEnemy: function () {
                var random = new DTLibrary.DTDeterministicRandom.$ctor1(0);
                random.DeserializeFromString(this.rngSeed);

                return TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteFlyamanitaGreaterOrbiterDead.SpawnEnemyEliteFlyamanitaGreaterOrbiterDead(this.xMibi, this.yMibi, Bridge.Int.mul((((random.NextInt(51200) + 15360) | 0)), (random.NextBool() ? 1 : -1)), this.isSpikes, this.greaterOrbiterIsDeadLevelFlag, (this.EnemyId || "") + "_SpawnEnemyEliteFlyamanitaGreaterOrbiterDead");
            },
            ProcessFrame: function (cameraX, cameraY, windowWidth, windowHeight, elapsedMicrosPerFrame, tuxState, random, tilemap, levelFlags, soundOutput) {
                var isEliteFlyamanitaDead = false;

                for (var i = 0; i < System.Array.getCount(levelFlags, System.String); i = (i + 1) | 0) {
                    var levelFlag = System.Array.getItem(levelFlags, i, System.String);
                    if (Bridge.referenceEquals(levelFlag, this.eliteFlyamanitaIsDeadLevelFlag)) {
                        isEliteFlyamanitaDead = true;
                        break;
                    }
                }

                if (isEliteFlyamanitaDead) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(Bridge.fn.bind(this, function (_o1) {
                            _o1.add(this.GetDeadEnemy());
                            return _o1;
                        })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor()), Bridge.fn.bind(this, function (_o2) {
                            _o2.add(this.EnemyId);
                            return _o2;
                        })(new (System.Collections.Generic.List$1(System.String)).ctor()), null);
                }

                var list = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor();

                var newIsFacingRight;

                if (tuxState.TeleportStartingLocation != null) {
                    newIsFacingRight = tuxState.TeleportStartingLocation.Item1 > this.xMibi;
                } else {
                    newIsFacingRight = tuxState.XMibi > this.xMibi;
                }

                var newElapsedMicros = (this.elapsedMicros + elapsedMicrosPerFrame) | 0;
                if (newElapsedMicros > 2000000000) {
                    newElapsedMicros = 1;
                }

                var newAngleScaled = this.angleScaled;

                if (this.isRotatingClockwise) {
                    newAngleScaled = (newAngleScaled - ((Bridge.Int.div(Bridge.Int.mul(6, elapsedMicrosPerFrame), 1000)) | 0)) | 0;
                } else {
                    newAngleScaled = (newAngleScaled + ((Bridge.Int.div(Bridge.Int.mul(6, elapsedMicrosPerFrame), 1000)) | 0)) | 0;
                }

                var newLocation = TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteFlyamanita.GetGreaterOrbiterLocation(this.eliteFlyamanitaXMibi, this.eliteFlyamanitaYMibi, newAngleScaled);

                var newRngSeed = this.rngSeed;

                if (!this.hasSpawnedOrbiters) {
                    var enemyRng = new DTLibrary.DTDeterministicRandom.$ctor1(0);
                    enemyRng.DeserializeFromString(newRngSeed);

                    var lesserOrbiterAngleScaledBaseValue = enemyRng.NextInt(46080);

                    var areLesserOrbitersRotatingClockwise = enemyRng.NextBool();

                    for (var i1 = 0; i1 < 3; i1 = (i1 + 1) | 0) {
                        enemyRng.NextBool();
                        var orbiterRngSeed = enemyRng.SerializeToString();
                        enemyRng.NextBool();

                        list.add(TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteFlyamanitaLesserOrbiter.GetEnemyEliteFlyamanitaLesserOrbiter(this.eliteFlyamanitaXMibi, this.eliteFlyamanitaYMibi, this.angleScaled, this.isRotatingClockwise, ((lesserOrbiterAngleScaledBaseValue + Bridge.Int.mul(i1, (15360))) | 0), areLesserOrbitersRotatingClockwise, i1 === 0, this.eliteFlyamanitaIsDeadLevelFlag, this.greaterOrbiterIsDeadLevelFlag, orbiterRngSeed, (this.EnemyId || "") + "_orbiter[" + (DTLibrary.StringUtil.ToStringCultureInvariant(i1) || "") + "]"));
                    }

                    newRngSeed = enemyRng.SerializeToString();
                }

                list.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteFlyamanitaGreaterOrbiter(newLocation.Item1, newLocation.Item2, newIsFacingRight, newElapsedMicros, this.eliteFlyamanitaXMibi, this.eliteFlyamanitaYMibi, DTLibrary.DTMath.NormalizeDegreesScaled(newAngleScaled), this.isRotatingClockwise, this.isSpikes, this.eliteFlyamanitaIsDeadLevelFlag, this.greaterOrbiterIsDeadLevelFlag, newRngSeed, true, this.EnemyId));

                return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(list, null, null);
            },
            Render: function (displayOutput) {
                if (this.isSpikes) {
                    displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Spikes, 0, 0, 16, 16, (((this.xMibi >> 10) - 48) | 0), (((this.yMibi >> 10) - 48) | 0), 0, 768);
                } else {
                    var image = this.isFacingRight ? TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Flyamanita : TuxPlanetSpeedrunAnyPercentLibrary.GameImage.FlyamanitaMirrored;

                    var spriteNum = (((Bridge.Int.div(this.elapsedMicros, (100000))) | 0)) % 4;

                    displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(image, Bridge.Int.mul(spriteNum, 20), 0, 20, 20, (((this.xMibi >> 10) - 60) | 0), (((this.yMibi >> 10) - 60) | 0), 0, 768);
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteFlyamanitaGreaterOrbiterDead", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.IEnemy],
        statics: {
            methods: {
                SpawnEnemyEliteFlyamanitaGreaterOrbiterDead: function (xMibi, yMibi, angularSpeedInAnglesScaledPerSecond, isSpikes, eliteFlyamanitaGreaterOrbiterIsDeadLevelFlag, enemyId) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteFlyamanitaGreaterOrbiterDead(xMibi, yMibi, 0, angularSpeedInAnglesScaledPerSecond, 0, isSpikes, eliteFlyamanitaGreaterOrbiterIsDeadLevelFlag, false, enemyId);
                }
            }
        },
        fields: {
            xMibi: 0,
            yMibi: 0,
            ySpeedInMibipixelsPerSecond: 0,
            angularSpeedInAnglesScaledPerSecond: 0,
            angleScaled: 0,
            isSpikes: false,
            eliteFlyamanitaGreaterOrbiterIsDeadLevelFlag: null,
            hasAddedLevelFlag: false,
            EnemyId: null
        },
        alias: [
            "EnemyId", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId",
            "GetHitboxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetHitboxes",
            "GetDamageBoxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDamageBoxes",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$Render",
            "GetDeadEnemy", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDeadEnemy"
        ],
        ctors: {
            ctor: function (xMibi, yMibi, ySpeedInMibipixelsPerSecond, angularSpeedInAnglesScaledPerSecond, angleScaled, isSpikes, eliteFlyamanitaGreaterOrbiterIsDeadLevelFlag, hasAddedLevelFlag, enemyId) {
                this.$initialize();
                this.xMibi = xMibi;
                this.yMibi = yMibi;
                this.ySpeedInMibipixelsPerSecond = ySpeedInMibipixelsPerSecond;
                this.angularSpeedInAnglesScaledPerSecond = angularSpeedInAnglesScaledPerSecond;
                this.angleScaled = angleScaled;
                this.isSpikes = isSpikes;
                this.eliteFlyamanitaGreaterOrbiterIsDeadLevelFlag = eliteFlyamanitaGreaterOrbiterIsDeadLevelFlag;
                this.hasAddedLevelFlag = hasAddedLevelFlag;
                this.EnemyId = enemyId;
            }
        },
        methods: {
            GetHitboxes: function () {
                if (this.isSpikes) {
                    var list = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Hitbox)).ctor();
                    list.add(new TuxPlanetSpeedrunAnyPercentLibrary.Hitbox((((this.xMibi >> 10) - 36) | 0), (((this.yMibi >> 10) - 36) | 0), 72, 72));

                    return list;
                }

                return null;
            },
            GetDamageBoxes: function () {
                return null;
            },
            ProcessFrame: function (cameraX, cameraY, windowWidth, windowHeight, elapsedMicrosPerFrame, tuxState, random, tilemap, levelFlags, soundOutput) {
                var newlyAddedLevelFlags;

                if (this.hasAddedLevelFlag) {
                    newlyAddedLevelFlags = null;
                } else {
                    newlyAddedLevelFlags = Bridge.fn.bind(this, function (_o1) {
                            _o1.add(this.eliteFlyamanitaGreaterOrbiterIsDeadLevelFlag);
                            return _o1;
                        })(new (System.Collections.Generic.List$1(System.String)).ctor());
                }

                var isOutOfBounds = (((this.xMibi >> 10) + 60) | 0) < ((((cameraX - (windowWidth >> 1)) | 0) - TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0) || (((this.xMibi >> 10) - 60) | 0) > ((((cameraX + (windowWidth >> 1)) | 0) + TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0) || (((this.yMibi >> 10) + 60) | 0) < ((((cameraY - (windowHeight >> 1)) | 0) - TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0) || (((this.yMibi >> 10) - 60) | 0) > ((((cameraY + (windowHeight >> 1)) | 0) + TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0);

                if (isOutOfBounds) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(null, null, newlyAddedLevelFlags);
                }

                var newYSpeedInMibipixelsPerSecond = this.ySpeedInMibipixelsPerSecond;
                if (newYSpeedInMibipixelsPerSecond >= -5000000) {
                    newYSpeedInMibipixelsPerSecond = (newYSpeedInMibipixelsPerSecond - (Bridge.Int.mul(elapsedMicrosPerFrame, 3))) | 0;
                }

                var newAngleScaled = this.angleScaled;
                newAngleScaled = (newAngleScaled + (((Bridge.Int.div(Bridge.Int.mul(((Bridge.Int.div(this.angularSpeedInAnglesScaledPerSecond, 1000)) | 0), elapsedMicrosPerFrame), 1000)) | 0))) | 0;
                while (newAngleScaled >= 46080) {
                    newAngleScaled = (newAngleScaled - (46080)) | 0;
                }
                while (newAngleScaled < 0) {
                    newAngleScaled = (newAngleScaled + (46080)) | 0;
                }

                var newYMibi = System.Int64.clip32(System.Int64(this.yMibi).add(System.Int64(newYSpeedInMibipixelsPerSecond).mul(System.Int64(elapsedMicrosPerFrame)).div(System.Int64(1000)).div(System.Int64(1000))));

                return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(Bridge.fn.bind(this, function (_o2) {
                        _o2.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteFlyamanitaGreaterOrbiterDead(this.xMibi, newYMibi, newYSpeedInMibipixelsPerSecond, this.angularSpeedInAnglesScaledPerSecond, newAngleScaled, this.isSpikes, this.eliteFlyamanitaGreaterOrbiterIsDeadLevelFlag, true, this.EnemyId));
                        return _o2;
                    })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor()), null, newlyAddedLevelFlags);
            },
            Render: function (displayOutput) {
                if (this.isSpikes) {
                    displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Spikes, 0, 0, 16, 16, (((this.xMibi >> 10) - 48) | 0), (((this.yMibi >> 10) - 48) | 0), 0, 768);
                } else {
                    displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Flyamanita, 0, 0, 20, 20, (((this.xMibi >> 10) - 60) | 0), (((this.yMibi >> 10) - 60) | 0), this.angleScaled, 768);
                }
            },
            GetDeadEnemy: function () {
                return null;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteFlyamanitaLesserOrbiter", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.IEnemy],
        statics: {
            methods: {
                GetEnemyEliteFlyamanitaLesserOrbiter: function (eliteFlyamanitaXMibi, eliteFlyamanitaYMibi, greaterOrbiterAngleScaled, greaterOrbiterIsRotatingClockwise, angleScaled, isRotatingClockwise, isSpikes, eliteFlyamanitaIsDeadLevelFlag, greaterOrbiterIsDeadLevelFlag, rngSeed, enemyId) {
                    var location = TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteFlyamanita.GetLesserOrbiterLocation(eliteFlyamanitaXMibi, eliteFlyamanitaYMibi, greaterOrbiterAngleScaled, angleScaled);

                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteFlyamanitaLesserOrbiter(location.Item1, location.Item2, false, 0, eliteFlyamanitaXMibi, eliteFlyamanitaYMibi, DTLibrary.DTMath.NormalizeDegreesScaled(greaterOrbiterAngleScaled), greaterOrbiterIsRotatingClockwise, DTLibrary.DTMath.NormalizeDegreesScaled(angleScaled), isRotatingClockwise, isSpikes, eliteFlyamanitaIsDeadLevelFlag, greaterOrbiterIsDeadLevelFlag, rngSeed, enemyId);
                }
            }
        },
        fields: {
            xMibi: 0,
            yMibi: 0,
            isFacingRight: false,
            elapsedMicros: 0,
            eliteFlyamanitaXMibi: 0,
            eliteFlyamanitaYMibi: 0,
            greaterOrbiterAngleScaled: 0,
            greaterOrbiterIsRotatingClockwise: false,
            angleScaled: 0,
            isRotatingClockwise: false,
            isSpikes: false,
            eliteFlyamanitaIsDeadLevelFlag: null,
            greaterOrbiterIsDeadLevelFlag: null,
            rngSeed: null,
            EnemyId: null
        },
        alias: [
            "EnemyId", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId",
            "GetHitboxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetHitboxes",
            "GetDamageBoxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDamageBoxes",
            "GetDeadEnemy", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDeadEnemy",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$Render"
        ],
        ctors: {
            ctor: function (xMibi, yMibi, isFacingRight, elapsedMicros, eliteFlyamanitaXMibi, eliteFlyamanitaYMibi, greaterOrbiterAngleScaled, greaterOrbiterIsRotatingClockwise, angleScaled, isRotatingClockwise, isSpikes, eliteFlyamanitaIsDeadLevelFlag, greaterOrbiterIsDeadLevelFlag, rngSeed, enemyId) {
                this.$initialize();
                this.xMibi = xMibi;
                this.yMibi = yMibi;
                this.isFacingRight = isFacingRight;
                this.elapsedMicros = elapsedMicros;
                this.eliteFlyamanitaXMibi = eliteFlyamanitaXMibi;
                this.eliteFlyamanitaYMibi = eliteFlyamanitaYMibi;
                this.greaterOrbiterAngleScaled = greaterOrbiterAngleScaled;
                this.greaterOrbiterIsRotatingClockwise = greaterOrbiterIsRotatingClockwise;
                this.angleScaled = angleScaled;
                this.isRotatingClockwise = isRotatingClockwise;
                this.isSpikes = isSpikes;
                this.eliteFlyamanitaIsDeadLevelFlag = eliteFlyamanitaIsDeadLevelFlag;
                this.greaterOrbiterIsDeadLevelFlag = greaterOrbiterIsDeadLevelFlag;
                this.rngSeed = rngSeed;
                this.EnemyId = enemyId;
            }
        },
        methods: {
            GetHitboxes: function () {
                var hitbox = this.isSpikes ? new TuxPlanetSpeedrunAnyPercentLibrary.Hitbox((((this.xMibi >> 10) - 18) | 0), (((this.yMibi >> 10) - 18) | 0), 36, 36) : new TuxPlanetSpeedrunAnyPercentLibrary.Hitbox((((this.xMibi >> 10) - 27) | 0), (((this.yMibi >> 10) - 27) | 0), 54, 54);

                var list = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Hitbox)).ctor();
                list.add(hitbox);

                return list;
            },
            GetDamageBoxes: function () {
                if (this.isSpikes) {
                    return null;
                }

                var list = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Hitbox)).ctor();
                list.add(new TuxPlanetSpeedrunAnyPercentLibrary.Hitbox((((this.xMibi >> 10) - 30) | 0), (((this.yMibi >> 10) - 30) | 0), 60, 60));

                return list;
            },
            GetDeadEnemy: function () {
                var random = new DTLibrary.DTDeterministicRandom.$ctor1(0);
                random.DeserializeFromString(this.rngSeed);

                return TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteFlyamanitaLesserOrbiterDead.SpawnEnemyEliteFlyamanitaLesserOrbiterDead(this.xMibi, this.yMibi, Bridge.Int.mul((((random.NextInt(51200) + 15360) | 0)), (random.NextBool() ? 1 : -1)), this.isSpikes, (this.EnemyId || "") + "_SpawnEnemyEliteFlyamanitaLesserOrbiterDead");
            },
            ProcessFrame: function (cameraX, cameraY, windowWidth, windowHeight, elapsedMicrosPerFrame, tuxState, random, tilemap, levelFlags, soundOutput) {
                var isEliteFlyamanitaOrGreaterOrbiterDead = false;

                var levelFlagsCount = System.Array.getCount(levelFlags, System.String);
                for (var i = 0; i < levelFlagsCount; i = (i + 1) | 0) {
                    var levelFlag = System.Array.getItem(levelFlags, i, System.String);
                    if (Bridge.referenceEquals(levelFlag, this.eliteFlyamanitaIsDeadLevelFlag) || Bridge.referenceEquals(levelFlag, this.greaterOrbiterIsDeadLevelFlag)) {
                        isEliteFlyamanitaOrGreaterOrbiterDead = true;
                        break;
                    }
                }

                if (isEliteFlyamanitaOrGreaterOrbiterDead) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(Bridge.fn.bind(this, function (_o1) {
                            _o1.add(this.GetDeadEnemy());
                            return _o1;
                        })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor()), Bridge.fn.bind(this, function (_o2) {
                            _o2.add(this.EnemyId);
                            return _o2;
                        })(new (System.Collections.Generic.List$1(System.String)).ctor()), null);
                }

                var list = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).$ctor2(1);

                var newIsFacingRight;

                if (tuxState.TeleportStartingLocation != null) {
                    newIsFacingRight = tuxState.TeleportStartingLocation.Item1 > this.xMibi;
                } else {
                    newIsFacingRight = tuxState.XMibi > this.xMibi;
                }

                var newElapsedMicros = (this.elapsedMicros + elapsedMicrosPerFrame) | 0;
                if (newElapsedMicros > 2000000000) {
                    newElapsedMicros = 1;
                }

                var newGreaterOrbiterAngleScaled = this.greaterOrbiterAngleScaled;

                if (this.greaterOrbiterIsRotatingClockwise) {
                    newGreaterOrbiterAngleScaled = (newGreaterOrbiterAngleScaled - ((Bridge.Int.div(Bridge.Int.mul(6, elapsedMicrosPerFrame), 1000)) | 0)) | 0;
                } else {
                    newGreaterOrbiterAngleScaled = (newGreaterOrbiterAngleScaled + ((Bridge.Int.div(Bridge.Int.mul(6, elapsedMicrosPerFrame), 1000)) | 0)) | 0;
                }

                var newAngleScaled = this.angleScaled;

                if (this.isRotatingClockwise) {
                    newAngleScaled = (newAngleScaled - ((Bridge.Int.div(Bridge.Int.mul(7, elapsedMicrosPerFrame), 1000)) | 0)) | 0;
                } else {
                    newAngleScaled = (newAngleScaled + ((Bridge.Int.div(Bridge.Int.mul(7, elapsedMicrosPerFrame), 1000)) | 0)) | 0;
                }

                var newLocation = TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteFlyamanita.GetLesserOrbiterLocation(this.eliteFlyamanitaXMibi, this.eliteFlyamanitaYMibi, this.greaterOrbiterAngleScaled, newAngleScaled);

                list.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteFlyamanitaLesserOrbiter(newLocation.Item1, newLocation.Item2, newIsFacingRight, newElapsedMicros, this.eliteFlyamanitaXMibi, this.eliteFlyamanitaYMibi, DTLibrary.DTMath.NormalizeDegreesScaled(newGreaterOrbiterAngleScaled), this.greaterOrbiterIsRotatingClockwise, DTLibrary.DTMath.NormalizeDegreesScaled(newAngleScaled), this.isRotatingClockwise, this.isSpikes, this.eliteFlyamanitaIsDeadLevelFlag, this.greaterOrbiterIsDeadLevelFlag, this.rngSeed, this.EnemyId));

                return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(list, null, null);
            },
            Render: function (displayOutput) {
                if (this.isSpikes) {
                    displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Spikes, 0, 0, 16, 16, (((this.xMibi >> 10) - 24) | 0), (((this.yMibi >> 10) - 24) | 0), 0, 384);
                } else {
                    var image = this.isFacingRight ? TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Flyamanita : TuxPlanetSpeedrunAnyPercentLibrary.GameImage.FlyamanitaMirrored;

                    var spriteNum = (((Bridge.Int.div(this.elapsedMicros, (100000))) | 0)) % 4;

                    displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(image, Bridge.Int.mul(spriteNum, 20), 0, 20, 20, (((this.xMibi >> 10) - 30) | 0), (((this.yMibi >> 10) - 30) | 0), 0, 384);
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteFlyamanitaLesserOrbiterDead", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.IEnemy],
        statics: {
            methods: {
                SpawnEnemyEliteFlyamanitaLesserOrbiterDead: function (xMibi, yMibi, angularSpeedInAnglesScaledPerSecond, isSpikes, enemyId) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteFlyamanitaLesserOrbiterDead(xMibi, yMibi, 0, angularSpeedInAnglesScaledPerSecond, 0, isSpikes, enemyId);
                }
            }
        },
        fields: {
            xMibi: 0,
            yMibi: 0,
            ySpeedInMibipixelsPerSecond: 0,
            angularSpeedInAnglesScaledPerSecond: 0,
            angleScaled: 0,
            isSpikes: false,
            EnemyId: null
        },
        alias: [
            "EnemyId", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId",
            "GetHitboxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetHitboxes",
            "GetDamageBoxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDamageBoxes",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$Render",
            "GetDeadEnemy", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDeadEnemy"
        ],
        ctors: {
            ctor: function (xMibi, yMibi, ySpeedInMibipixelsPerSecond, angularSpeedInAnglesScaledPerSecond, angleScaled, isSpikes, enemyId) {
                this.$initialize();
                this.xMibi = xMibi;
                this.yMibi = yMibi;
                this.ySpeedInMibipixelsPerSecond = ySpeedInMibipixelsPerSecond;
                this.angularSpeedInAnglesScaledPerSecond = angularSpeedInAnglesScaledPerSecond;
                this.angleScaled = angleScaled;
                this.isSpikes = isSpikes;
                this.EnemyId = enemyId;
            }
        },
        methods: {
            GetHitboxes: function () {
                if (this.isSpikes) {
                    var list = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Hitbox)).ctor();
                    list.add(new TuxPlanetSpeedrunAnyPercentLibrary.Hitbox((((this.xMibi >> 10) - 18) | 0), (((this.yMibi >> 10) - 18) | 0), 36, 36));

                    return list;
                }

                return null;
            },
            GetDamageBoxes: function () {
                return null;
            },
            ProcessFrame: function (cameraX, cameraY, windowWidth, windowHeight, elapsedMicrosPerFrame, tuxState, random, tilemap, levelFlags, soundOutput) {
                var isOutOfBounds = (((this.xMibi >> 10) + 30) | 0) < ((((cameraX - (windowWidth >> 1)) | 0) - TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0) || (((this.xMibi >> 10) - 30) | 0) > ((((cameraX + (windowWidth >> 1)) | 0) + TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0) || (((this.yMibi >> 10) + 30) | 0) < ((((cameraY - (windowHeight >> 1)) | 0) - TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0) || (((this.yMibi >> 10) - 30) | 0) > ((((cameraY + (windowHeight >> 1)) | 0) + TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0);

                if (isOutOfBounds) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(null, null, null);
                }

                var newYSpeedInMibipixelsPerSecond = this.ySpeedInMibipixelsPerSecond;
                if (newYSpeedInMibipixelsPerSecond >= -5000000) {
                    newYSpeedInMibipixelsPerSecond = (newYSpeedInMibipixelsPerSecond - (Bridge.Int.mul(elapsedMicrosPerFrame, 3))) | 0;
                }

                var newAngleScaled = this.angleScaled;
                newAngleScaled = (newAngleScaled + (((Bridge.Int.div(Bridge.Int.mul(((Bridge.Int.div(this.angularSpeedInAnglesScaledPerSecond, 1000)) | 0), elapsedMicrosPerFrame), 1000)) | 0))) | 0;
                while (newAngleScaled >= 46080) {
                    newAngleScaled = (newAngleScaled - (46080)) | 0;
                }
                while (newAngleScaled < 0) {
                    newAngleScaled = (newAngleScaled + (46080)) | 0;
                }

                var newYMibi = System.Int64.clip32(System.Int64(this.yMibi).add(System.Int64(newYSpeedInMibipixelsPerSecond).mul(System.Int64(elapsedMicrosPerFrame)).div(System.Int64(1000)).div(System.Int64(1000))));

                return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(Bridge.fn.bind(this, function (_o1) {
                        _o1.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteFlyamanitaLesserOrbiterDead(this.xMibi, newYMibi, newYSpeedInMibipixelsPerSecond, this.angularSpeedInAnglesScaledPerSecond, newAngleScaled, this.isSpikes, this.EnemyId));
                        return _o1;
                    })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor()), null, null);
            },
            Render: function (displayOutput) {
                if (this.isSpikes) {
                    displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Spikes, 0, 0, 16, 16, (((this.xMibi >> 10) - 24) | 0), (((this.yMibi >> 10) - 24) | 0), 0, 384);
                } else {
                    displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Flyamanita, 0, 0, 20, 20, (((this.xMibi >> 10) - 30) | 0), (((this.yMibi >> 10) - 30) | 0), this.angleScaled, 384);
                }
            },
            GetDeadEnemy: function () {
                return null;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteOrange", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.IEnemy],
        statics: {
            fields: {
                ORBITERS_SPEED_IN_ANGLES_SCALED_PER_SECOND: 0,
                ORBITERS_RADIUS_IN_PIXELS: 0
            },
            ctors: {
                init: function () {
                    this.ORBITERS_SPEED_IN_ANGLES_SCALED_PER_SECOND = 23040;
                    this.ORBITERS_RADIUS_IN_PIXELS = 150;
                }
            },
            methods: {
                GetEnemyEliteOrange: function (xMibi, yMibi, isFacingRight, orbitersAngleScaled, isOrbitingClockwise, enemyId) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteOrange(xMibi, yMibi, Bridge.Int.mul(150000, (isFacingRight ? 1 : -1)), 0, orbitersAngleScaled, isOrbitingClockwise, TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteOrange.ComputeOrbitersXAndYMibi(xMibi, yMibi, orbitersAngleScaled), 0, enemyId);
                },
                ComputeOrbitersXAndYMibi: function (xMibi, yMibi, orbitersAngleScaled) {
                    orbitersAngleScaled = DTLibrary.DTMath.NormalizeDegreesScaled(orbitersAngleScaled);

                    var list = new (System.Collections.Generic.List$1(System.Tuple$2(System.Int32,System.Int32))).ctor();

                    list.add({ Item1: ((xMibi + Bridge.Int.mul(TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteOrange.ORBITERS_RADIUS_IN_PIXELS, DTLibrary.DTMath.CosineScaled(orbitersAngleScaled))) | 0), Item2: ((yMibi + Bridge.Int.mul(TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteOrange.ORBITERS_RADIUS_IN_PIXELS, DTLibrary.DTMath.SineScaled(orbitersAngleScaled))) | 0) });

                    orbitersAngleScaled = (orbitersAngleScaled + (15360)) | 0;

                    list.add({ Item1: ((xMibi + Bridge.Int.mul(TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteOrange.ORBITERS_RADIUS_IN_PIXELS, DTLibrary.DTMath.CosineScaled(orbitersAngleScaled))) | 0), Item2: ((yMibi + Bridge.Int.mul(TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteOrange.ORBITERS_RADIUS_IN_PIXELS, DTLibrary.DTMath.SineScaled(orbitersAngleScaled))) | 0) });

                    orbitersAngleScaled = (orbitersAngleScaled + (15360)) | 0;

                    list.add({ Item1: ((xMibi + Bridge.Int.mul(TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteOrange.ORBITERS_RADIUS_IN_PIXELS, DTLibrary.DTMath.CosineScaled(orbitersAngleScaled))) | 0), Item2: ((yMibi + Bridge.Int.mul(TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteOrange.ORBITERS_RADIUS_IN_PIXELS, DTLibrary.DTMath.SineScaled(orbitersAngleScaled))) | 0) });

                    return list;
                },
                IsGroundOrSpike: function (tilemap, x, y) {
                    return tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(x, y) || tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsSpikes(x, y);
                }
            }
        },
        fields: {
            xMibi: 0,
            yMibi: 0,
            xSpeedInMibipixelsPerSecond: 0,
            ySpeedInMibipixelsPerSecond: 0,
            orbitersAngleScaled: 0,
            isOrbitingClockwise: false,
            orbitersXAndYMibi: null,
            elapsedMicros: 0,
            EnemyId: null
        },
        alias: [
            "EnemyId", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId",
            "GetHitboxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetHitboxes",
            "GetDamageBoxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDamageBoxes",
            "GetDeadEnemy", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDeadEnemy",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$Render"
        ],
        ctors: {
            ctor: function (xMibi, yMibi, xSpeedInMibipixelsPerSecond, ySpeedInMibipixelsPerSecond, orbitersAngleScaled, isOrbitingClockwise, orbitersXAndYMibi, elapsedMicros, enemyId) {
                this.$initialize();
                this.xMibi = xMibi;
                this.yMibi = yMibi;
                this.xSpeedInMibipixelsPerSecond = xSpeedInMibipixelsPerSecond;
                this.ySpeedInMibipixelsPerSecond = ySpeedInMibipixelsPerSecond;
                this.orbitersAngleScaled = orbitersAngleScaled;
                this.isOrbitingClockwise = isOrbitingClockwise;
                this.orbitersXAndYMibi = orbitersXAndYMibi;
                this.elapsedMicros = elapsedMicros;
                this.EnemyId = enemyId;
            }
        },
        methods: {
            GetHitboxes: function () {
                var list = Bridge.fn.bind(this, function (_o1) {
                        _o1.add(new TuxPlanetSpeedrunAnyPercentLibrary.Hitbox((((this.xMibi >> 10) - 18) | 0), (((this.yMibi >> 10) - 18) | 0), 36, 36));
                        return _o1;
                    })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Hitbox)).ctor());

                for (var i = 0; i < this.orbitersXAndYMibi.Count; i = (i + 1) | 0) {
                    var orbiterXAndYMibi = this.orbitersXAndYMibi.getItem(i);

                    list.add(new TuxPlanetSpeedrunAnyPercentLibrary.Hitbox((((orbiterXAndYMibi.Item1 >> 10) - 18) | 0), (((orbiterXAndYMibi.Item2 >> 10) - 18) | 0), 36, 36));
                }

                return list;
            },
            GetDamageBoxes: function () {
                return Bridge.fn.bind(this, function (_o1) {
                        _o1.add(new TuxPlanetSpeedrunAnyPercentLibrary.Hitbox((((this.xMibi >> 10) - 21) | 0), (((this.yMibi >> 10) - 21) | 0), 42, 42));
                        return _o1;
                    })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Hitbox)).ctor());
            },
            GetDeadEnemy: function () {
                var enemyDeadPoofList = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.EnemyDeadPoof)).ctor();

                enemyDeadPoofList.add(TuxPlanetSpeedrunAnyPercentLibrary.EnemyDeadPoof.SpawnEnemyDeadPoof(this.xMibi, this.yMibi, (this.EnemyId || "") + "_enemyDeadPoof_main"));

                for (var i = 0; i < this.orbitersXAndYMibi.Count; i = (i + 1) | 0) {
                    var orbiterXAndYMibi = this.orbitersXAndYMibi.getItem(i);

                    enemyDeadPoofList.add(TuxPlanetSpeedrunAnyPercentLibrary.EnemyDeadPoof.SpawnEnemyDeadPoof(orbiterXAndYMibi.Item1, orbiterXAndYMibi.Item2, (this.EnemyId || "") + "_enemyDeadPoof_orbiter" + (DTLibrary.StringUtil.ToStringCultureInvariant(i) || "")));
                }

                return TuxPlanetSpeedrunAnyPercentLibrary.EnemyDeadMultiplePoof.SpawnEnemyDeadMultiplePoof(enemyDeadPoofList, (this.EnemyId || "") + "_enemyDeadMultiplePoof");
            },
            ProcessFrame: function (cameraX, cameraY, windowWidth, windowHeight, elapsedMicrosPerFrame, tuxState, random, tilemap, levelFlags, soundOutput) {
                var list = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor();

                var x = this.xMibi >> 10;
                var y = this.yMibi >> 10;

                var newXMibi = this.xMibi;
                var newYMibi = this.yMibi;
                var newXSpeedInMibipixelsPerSecond = this.xSpeedInMibipixelsPerSecond;
                var newYSpeedInMibipixelsPerSecond = this.ySpeedInMibipixelsPerSecond;

                var isOnGround = TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteOrange.IsGroundOrSpike(tilemap, x, ((((y - 24) | 0) - 1) | 0)) && !TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteOrange.IsGroundOrSpike(tilemap, x, ((y - 24) | 0)) || TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteOrange.IsGroundOrSpike(tilemap, ((x - 18) | 0), ((((y - 24) | 0) - 1) | 0)) && !TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteOrange.IsGroundOrSpike(tilemap, ((x - 18) | 0), ((y - 24) | 0)) || TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteOrange.IsGroundOrSpike(tilemap, ((x + 18) | 0), ((((y - 24) | 0) - 1) | 0)) && !TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteOrange.IsGroundOrSpike(tilemap, ((x + 18) | 0), ((y - 24) | 0));

                if (isOnGround) {
                    newYSpeedInMibipixelsPerSecond = 1050000;
                } else {
                    newYSpeedInMibipixelsPerSecond = (newYSpeedInMibipixelsPerSecond - (Bridge.Int.mul(elapsedMicrosPerFrame, 3))) | 0;
                }

                if (newYSpeedInMibipixelsPerSecond < -2000000) {
                    newYSpeedInMibipixelsPerSecond = -2000000;
                }

                var proposedNewYMibi = System.Int64.clip32(System.Int64(newYMibi).add(System.Int64(newYSpeedInMibipixelsPerSecond).mul(System.Int64(elapsedMicrosPerFrame)).div(System.Int64(1000)).div(System.Int64(1000))));
                if (newYSpeedInMibipixelsPerSecond > 0) {
                    while (true) {
                        if (TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteOrange.IsGroundOrSpike(tilemap, ((Bridge.Int.div(newXMibi, 1024)) | 0), ((((Bridge.Int.div(proposedNewYMibi, 1024)) | 0) + 24) | 0)) || TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteOrange.IsGroundOrSpike(tilemap, ((((Bridge.Int.div(newXMibi, 1024)) | 0) - 24) | 0), ((((Bridge.Int.div(proposedNewYMibi, 1024)) | 0) + 24) | 0)) || TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteOrange.IsGroundOrSpike(tilemap, ((((Bridge.Int.div(newXMibi, 1024)) | 0) + 24) | 0), ((((Bridge.Int.div(proposedNewYMibi, 1024)) | 0) + 24) | 0))) {
                            newYSpeedInMibipixelsPerSecond = 0;
                            proposedNewYMibi = (proposedNewYMibi - 1024) | 0;
                            if (proposedNewYMibi <= newYMibi) {
                                proposedNewYMibi = newYMibi;
                                break;
                            }
                        } else {
                            break;
                        }
                    }
                }
                if (newYSpeedInMibipixelsPerSecond < 0) {
                    while (true) {
                        if (TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteOrange.IsGroundOrSpike(tilemap, ((Bridge.Int.div(newXMibi, 1024)) | 0), ((((Bridge.Int.div(proposedNewYMibi, 1024)) | 0) - 24) | 0)) || TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteOrange.IsGroundOrSpike(tilemap, ((((Bridge.Int.div(newXMibi, 1024)) | 0) - 24) | 0), ((((Bridge.Int.div(proposedNewYMibi, 1024)) | 0) - 24) | 0)) || TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteOrange.IsGroundOrSpike(tilemap, ((((Bridge.Int.div(newXMibi, 1024)) | 0) + 24) | 0), ((((Bridge.Int.div(proposedNewYMibi, 1024)) | 0) - 24) | 0))) {
                            newYSpeedInMibipixelsPerSecond = 0;
                            proposedNewYMibi = (proposedNewYMibi + 1024) | 0;
                            if (proposedNewYMibi >= newYMibi) {
                                proposedNewYMibi = newYMibi;
                                break;
                            }
                        } else {
                            break;
                        }
                    }
                }

                newYMibi = proposedNewYMibi;

                var proposedNewXMibi = System.Int64.clip32(System.Int64(newXMibi).add(System.Int64(newXSpeedInMibipixelsPerSecond).mul(System.Int64(elapsedMicrosPerFrame)).div(System.Int64(1000)).div(System.Int64(1000))));
                if (newXSpeedInMibipixelsPerSecond > 0) {
                    while (true) {
                        if (TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteOrange.IsGroundOrSpike(tilemap, ((((Bridge.Int.div(proposedNewXMibi, 1024)) | 0) + 24) | 0), ((((Bridge.Int.div(newYMibi, 1024)) | 0) - 24) | 0)) || TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteOrange.IsGroundOrSpike(tilemap, ((((Bridge.Int.div(proposedNewXMibi, 1024)) | 0) + 24) | 0), ((Bridge.Int.div(newYMibi, 1024)) | 0)) || TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteOrange.IsGroundOrSpike(tilemap, ((((Bridge.Int.div(proposedNewXMibi, 1024)) | 0) + 24) | 0), ((((Bridge.Int.div(newYMibi, 1024)) | 0) + 24) | 0))) {
                            proposedNewXMibi = (proposedNewXMibi - 1024) | 0;
                            if (proposedNewXMibi <= newXMibi) {
                                proposedNewXMibi = newXMibi;
                                break;
                            }
                        } else {
                            break;
                        }
                    }
                }
                if (newXSpeedInMibipixelsPerSecond < 0) {
                    while (true) {
                        if (TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteOrange.IsGroundOrSpike(tilemap, ((((Bridge.Int.div(proposedNewXMibi, 1024)) | 0) - 24) | 0), ((((Bridge.Int.div(newYMibi, 1024)) | 0) - 24) | 0)) || TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteOrange.IsGroundOrSpike(tilemap, ((((Bridge.Int.div(proposedNewXMibi, 1024)) | 0) - 24) | 0), ((Bridge.Int.div(newYMibi, 1024)) | 0)) || TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteOrange.IsGroundOrSpike(tilemap, ((((Bridge.Int.div(proposedNewXMibi, 1024)) | 0) - 24) | 0), ((((Bridge.Int.div(newYMibi, 1024)) | 0) + 24) | 0))) {
                            proposedNewXMibi = (proposedNewXMibi + 1024) | 0;
                            if (proposedNewXMibi >= newXMibi) {
                                proposedNewXMibi = newXMibi;
                                break;
                            }
                        } else {
                            break;
                        }
                    }
                }

                newXMibi = proposedNewXMibi;

                if (newXSpeedInMibipixelsPerSecond > 0) {
                    if (newXMibi <= this.xMibi) {
                        newXSpeedInMibipixelsPerSecond = (-newXSpeedInMibipixelsPerSecond) | 0;
                    }
                } else {
                    if (newXMibi >= this.xMibi) {
                        newXSpeedInMibipixelsPerSecond = (-newXSpeedInMibipixelsPerSecond) | 0;
                    }
                }

                var newElapsedMicros = (this.elapsedMicros + elapsedMicrosPerFrame) | 0;
                if (newElapsedMicros > 2000000000) {
                    newElapsedMicros = 1;
                }

                var isOutOfBounds = (((((this.xMibi >> 10) + TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteOrange.ORBITERS_RADIUS_IN_PIXELS) | 0) + 24) | 0) < ((((cameraX - (windowWidth >> 1)) | 0) - TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0) || (((((this.xMibi >> 10) - TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteOrange.ORBITERS_RADIUS_IN_PIXELS) | 0) - 24) | 0) > ((((cameraX + (windowWidth >> 1)) | 0) + TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0) || (((((this.yMibi >> 10) + TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteOrange.ORBITERS_RADIUS_IN_PIXELS) | 0) + 24) | 0) < ((((cameraY - (windowHeight >> 1)) | 0) - TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0) || (((((this.yMibi >> 10) - TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteOrange.ORBITERS_RADIUS_IN_PIXELS) | 0) - 24) | 0) > ((((cameraY + (windowHeight >> 1)) | 0) + TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0);

                var newOrbitersAngleScaled;

                if (this.isOrbitingClockwise) {
                    newOrbitersAngleScaled = (this.orbitersAngleScaled - ((Bridge.Int.div(Bridge.Int.mul(23, elapsedMicrosPerFrame), 1000)) | 0)) | 0;
                } else {
                    newOrbitersAngleScaled = (this.orbitersAngleScaled + ((Bridge.Int.div(Bridge.Int.mul(23, elapsedMicrosPerFrame), 1000)) | 0)) | 0;
                }

                newOrbitersAngleScaled = DTLibrary.DTMath.NormalizeDegreesScaled(newOrbitersAngleScaled);

                if (!isOutOfBounds) {
                    list.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteOrange(newXMibi, newYMibi, newXSpeedInMibipixelsPerSecond, newYSpeedInMibipixelsPerSecond, newOrbitersAngleScaled, this.isOrbitingClockwise, TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteOrange.ComputeOrbitersXAndYMibi(newXMibi, newYMibi, newOrbitersAngleScaled), newElapsedMicros, this.EnemyId));
                }

                return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(list, null, null);
            },
            Render: function (displayOutput) {
                var isFacingRight = this.xSpeedInMibipixelsPerSecond > 0;

                var image = isFacingRight ? TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Orange : TuxPlanetSpeedrunAnyPercentLibrary.GameImage.OrangeMirrored;

                var spriteNum = (((Bridge.Int.div(this.elapsedMicros, (100000))) | 0)) % 8;

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(image, Bridge.Int.mul(spriteNum, 16), 0, 16, 16, (((this.xMibi >> 10) - 24) | 0), (((this.yMibi >> 10) - 24) | 0), 0, 384);

                for (var i = 0; i < this.orbitersXAndYMibi.Count; i = (i + 1) | 0) {
                    var orbiterXAndYMibi = this.orbitersXAndYMibi.getItem(i);

                    displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Spikes, 0, 0, 16, 16, (((orbiterXAndYMibi.Item1 >> 10) - 24) | 0), (((orbiterXAndYMibi.Item2 >> 10) - 24) | 0), 0, 384);
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteOrange_YetiVersion", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.IEnemy],
        statics: {
            fields: {
                ORBITERS_SPEED_IN_ANGLES_SCALED_PER_SECOND: 0,
                ORBITERS_MAX_RADIUS_IN_PIXELS: 0,
                ORBITERS_RADIUS_INCREASE_IN_MIBIPIXELS_PER_SECOND: 0,
                LEVEL_FLAG_DESPAWN_ENEMY_ELITE_ORANGE_YETI_VERSION: null
            },
            ctors: {
                init: function () {
                    this.ORBITERS_SPEED_IN_ANGLES_SCALED_PER_SECOND = 23040;
                    this.ORBITERS_MAX_RADIUS_IN_PIXELS = 150;
                    this.ORBITERS_RADIUS_INCREASE_IN_MIBIPIXELS_PER_SECOND = 102400;
                    this.LEVEL_FLAG_DESPAWN_ENEMY_ELITE_ORANGE_YETI_VERSION = "despawnEnemyEliteOrangeYetiVersion";
                }
            },
            methods: {
                GetEnemyEliteOrange_YetiVersion: function (xMibi, yMibi, xSpeedInMibipixelsPerSecond, jumpSpeed, orbitersAngleScaled, isOrbitingClockwise, enemyId) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteOrange_YetiVersion(xMibi, yMibi, xSpeedInMibipixelsPerSecond, 0, jumpSpeed, orbitersAngleScaled, 0, isOrbitingClockwise, TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteOrange_YetiVersion.ComputeOrbitersXAndYMibi(xMibi, yMibi, orbitersAngleScaled, 0), 0, enemyId);
                },
                ComputeOrbitersXAndYMibi: function (xMibi, yMibi, orbitersAngleScaled, orbitersRadiusInMibipixels) {
                    orbitersAngleScaled = DTLibrary.DTMath.NormalizeDegreesScaled(orbitersAngleScaled);

                    var list = new (System.Collections.Generic.List$1(System.Tuple$2(System.Int32,System.Int32))).ctor();

                    var orbitersRadiusInPixels = orbitersRadiusInMibipixels >> 10;

                    list.add({ Item1: ((xMibi + Bridge.Int.mul(orbitersRadiusInPixels, DTLibrary.DTMath.CosineScaled(orbitersAngleScaled))) | 0), Item2: ((yMibi + Bridge.Int.mul(orbitersRadiusInPixels, DTLibrary.DTMath.SineScaled(orbitersAngleScaled))) | 0) });

                    orbitersAngleScaled = (orbitersAngleScaled + (15360)) | 0;

                    list.add({ Item1: ((xMibi + Bridge.Int.mul(orbitersRadiusInPixels, DTLibrary.DTMath.CosineScaled(orbitersAngleScaled))) | 0), Item2: ((yMibi + Bridge.Int.mul(orbitersRadiusInPixels, DTLibrary.DTMath.SineScaled(orbitersAngleScaled))) | 0) });

                    orbitersAngleScaled = (orbitersAngleScaled + (15360)) | 0;

                    list.add({ Item1: ((xMibi + Bridge.Int.mul(orbitersRadiusInPixels, DTLibrary.DTMath.CosineScaled(orbitersAngleScaled))) | 0), Item2: ((yMibi + Bridge.Int.mul(orbitersRadiusInPixels, DTLibrary.DTMath.SineScaled(orbitersAngleScaled))) | 0) });

                    return list;
                }
            }
        },
        fields: {
            xMibi: 0,
            yMibi: 0,
            xSpeedInMibipixelsPerSecond: 0,
            ySpeedInMibipixelsPerSecond: 0,
            jumpSpeed: 0,
            orbitersAngleScaled: 0,
            orbitersRadiusInMibipixels: 0,
            isOrbitingClockwise: false,
            orbitersXAndYMibi: null,
            elapsedMicros: 0,
            EnemyId: null
        },
        alias: [
            "EnemyId", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId",
            "GetHitboxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetHitboxes",
            "GetDamageBoxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDamageBoxes",
            "GetDeadEnemy", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDeadEnemy",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$Render"
        ],
        ctors: {
            ctor: function (xMibi, yMibi, xSpeedInMibipixelsPerSecond, ySpeedInMibipixelsPerSecond, jumpSpeed, orbitersAngleScaled, orbitersRadiusInMibipixels, isOrbitingClockwise, orbitersXAndYMibi, elapsedMicros, enemyId) {
                this.$initialize();
                this.xMibi = xMibi;
                this.yMibi = yMibi;
                this.xSpeedInMibipixelsPerSecond = xSpeedInMibipixelsPerSecond;
                this.ySpeedInMibipixelsPerSecond = ySpeedInMibipixelsPerSecond;
                this.jumpSpeed = jumpSpeed;
                this.orbitersAngleScaled = orbitersAngleScaled;
                this.orbitersRadiusInMibipixels = orbitersRadiusInMibipixels;
                this.isOrbitingClockwise = isOrbitingClockwise;
                this.orbitersXAndYMibi = orbitersXAndYMibi;
                this.elapsedMicros = elapsedMicros;
                this.EnemyId = enemyId;
            }
        },
        methods: {
            GetHitboxes: function () {
                var list = Bridge.fn.bind(this, function (_o1) {
                        _o1.add(new TuxPlanetSpeedrunAnyPercentLibrary.Hitbox((((this.xMibi >> 10) - 18) | 0), (((this.yMibi >> 10) - 18) | 0), 36, 36));
                        return _o1;
                    })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Hitbox)).ctor());

                for (var i = 0; i < this.orbitersXAndYMibi.Count; i = (i + 1) | 0) {
                    var orbiterXAndYMibi = this.orbitersXAndYMibi.getItem(i);

                    list.add(new TuxPlanetSpeedrunAnyPercentLibrary.Hitbox((((orbiterXAndYMibi.Item1 >> 10) - 18) | 0), (((orbiterXAndYMibi.Item2 >> 10) - 18) | 0), 36, 36));
                }

                return list;
            },
            GetDamageBoxes: function () {
                return Bridge.fn.bind(this, function (_o1) {
                        _o1.add(new TuxPlanetSpeedrunAnyPercentLibrary.Hitbox((((this.xMibi >> 10) - 21) | 0), (((this.yMibi >> 10) - 21) | 0), 42, 42));
                        return _o1;
                    })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Hitbox)).ctor());
            },
            GetDeadEnemy: function () {
                var enemyDeadPoofList = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.EnemyDeadPoof)).ctor();

                enemyDeadPoofList.add(TuxPlanetSpeedrunAnyPercentLibrary.EnemyDeadPoof.SpawnEnemyDeadPoof(this.xMibi, this.yMibi, (this.EnemyId || "") + "_enemyDeadPoof_main"));

                for (var i = 0; i < this.orbitersXAndYMibi.Count; i = (i + 1) | 0) {
                    var orbiterXAndYMibi = this.orbitersXAndYMibi.getItem(i);

                    enemyDeadPoofList.add(TuxPlanetSpeedrunAnyPercentLibrary.EnemyDeadPoof.SpawnEnemyDeadPoof(orbiterXAndYMibi.Item1, orbiterXAndYMibi.Item2, (this.EnemyId || "") + "_enemyDeadPoof_orbiter" + (DTLibrary.StringUtil.ToStringCultureInvariant(i) || "")));
                }

                return TuxPlanetSpeedrunAnyPercentLibrary.EnemyDeadMultiplePoof.SpawnEnemyDeadMultiplePoof(enemyDeadPoofList, (this.EnemyId || "") + "_enemyDeadMultiplePoof");
            },
            ProcessFrame: function (cameraX, cameraY, windowWidth, windowHeight, elapsedMicrosPerFrame, tuxState, random, tilemap, levelFlags, soundOutput) {
                if (System.Linq.Enumerable.from(levelFlags).contains(TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteOrange_YetiVersion.LEVEL_FLAG_DESPAWN_ENEMY_ELITE_ORANGE_YETI_VERSION)) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(Bridge.fn.bind(this, function (_o1) {
                            _o1.add(this.GetDeadEnemy());
                            return _o1;
                        })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor()), null, null);
                }

                var list = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor();

                var x = this.xMibi >> 10;
                var y = this.yMibi >> 10;

                var newXMibi = this.xMibi;
                var newYMibi = this.yMibi;
                var newXSpeedInMibipixelsPerSecond = this.xSpeedInMibipixelsPerSecond;
                var newYSpeedInMibipixelsPerSecond = this.ySpeedInMibipixelsPerSecond;

                var newOrbitersRadiusInMibipixels = this.orbitersRadiusInMibipixels;

                var isOnGround = tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(x, ((((y - 24) | 0) - 1) | 0));

                if (isOnGround) {
                    newYSpeedInMibipixelsPerSecond = this.jumpSpeed;
                } else {
                    newYSpeedInMibipixelsPerSecond = (newYSpeedInMibipixelsPerSecond - (Bridge.Int.mul(elapsedMicrosPerFrame, 3))) | 0;
                }

                if (newYSpeedInMibipixelsPerSecond < -2000000) {
                    newYSpeedInMibipixelsPerSecond = -2000000;
                }

                var proposedNewYMibi = System.Int64.clip32(System.Int64(newYMibi).add(System.Int64(newYSpeedInMibipixelsPerSecond).mul(System.Int64(elapsedMicrosPerFrame)).div(System.Int64(1000)).div(System.Int64(1000))));
                if (newYSpeedInMibipixelsPerSecond < 0) {
                    while (true) {
                        if (tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(newXMibi >> 10, (((proposedNewYMibi >> 10) - 24) | 0))) {
                            newYSpeedInMibipixelsPerSecond = 0;
                            proposedNewYMibi = (proposedNewYMibi + 1024) | 0;
                            if (proposedNewYMibi >= newYMibi) {
                                proposedNewYMibi = newYMibi;
                                break;
                            }
                        } else {
                            break;
                        }
                    }
                }

                newYMibi = proposedNewYMibi;

                var proposedNewXMibi = System.Int64.clip32(System.Int64(newXMibi).add(System.Int64(newXSpeedInMibipixelsPerSecond).mul(System.Int64(elapsedMicrosPerFrame)).div(System.Int64(1000)).div(System.Int64(1000))));
                if (newXSpeedInMibipixelsPerSecond > 0) {
                    while (true) {
                        if (tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround((((proposedNewXMibi >> 10) + 24) | 0), newYMibi >> 10)) {
                            proposedNewXMibi = (proposedNewXMibi - 1024) | 0;
                            if (proposedNewXMibi <= newXMibi) {
                                proposedNewXMibi = newXMibi;
                                break;
                            }
                        } else {
                            break;
                        }
                    }
                }
                if (newXSpeedInMibipixelsPerSecond < 0) {
                    while (true) {
                        if (tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround((((proposedNewXMibi >> 10) - 24) | 0), newYMibi >> 10)) {
                            proposedNewXMibi = (proposedNewXMibi + 1024) | 0;
                            if (proposedNewXMibi >= newXMibi) {
                                proposedNewXMibi = newXMibi;
                                break;
                            }
                        } else {
                            break;
                        }
                    }
                }

                newXMibi = proposedNewXMibi;

                if (newXSpeedInMibipixelsPerSecond > 0) {
                    if (newXMibi <= ((this.xMibi + 1024) | 0)) {
                        newXSpeedInMibipixelsPerSecond = (-newXSpeedInMibipixelsPerSecond) | 0;
                    }
                } else {
                    if (newXMibi >= ((this.xMibi - 1024) | 0)) {
                        newXSpeedInMibipixelsPerSecond = (-newXSpeedInMibipixelsPerSecond) | 0;
                    }
                }

                var newElapsedMicros = (this.elapsedMicros + elapsedMicrosPerFrame) | 0;
                if (newElapsedMicros > 2000000000) {
                    newElapsedMicros = 1;
                }

                var newOrbitersAngleScaled;

                if (this.isOrbitingClockwise) {
                    newOrbitersAngleScaled = (this.orbitersAngleScaled - ((Bridge.Int.div(Bridge.Int.mul(23, elapsedMicrosPerFrame), 1000)) | 0)) | 0;
                } else {
                    newOrbitersAngleScaled = (this.orbitersAngleScaled + ((Bridge.Int.div(Bridge.Int.mul(23, elapsedMicrosPerFrame), 1000)) | 0)) | 0;
                }

                newOrbitersAngleScaled = DTLibrary.DTMath.NormalizeDegreesScaled(newOrbitersAngleScaled);

                if (newOrbitersRadiusInMibipixels < 153600) {
                    newOrbitersRadiusInMibipixels = (newOrbitersRadiusInMibipixels + ((Bridge.Int.div(Bridge.Int.mul(10, elapsedMicrosPerFrame), 100)) | 0)) | 0;
                }

                list.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteOrange_YetiVersion(newXMibi, newYMibi, newXSpeedInMibipixelsPerSecond, newYSpeedInMibipixelsPerSecond, this.jumpSpeed, newOrbitersAngleScaled, newOrbitersRadiusInMibipixels, this.isOrbitingClockwise, TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteOrange_YetiVersion.ComputeOrbitersXAndYMibi(newXMibi, newYMibi, newOrbitersAngleScaled, newOrbitersRadiusInMibipixels), newElapsedMicros, this.EnemyId));

                return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(list, null, null);
            },
            Render: function (displayOutput) {
                var isFacingRight = this.xSpeedInMibipixelsPerSecond > 0;

                var image = isFacingRight ? TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Orange : TuxPlanetSpeedrunAnyPercentLibrary.GameImage.OrangeMirrored;

                var spriteNum = (((Bridge.Int.div(this.elapsedMicros, (100000))) | 0)) % 8;

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(image, Bridge.Int.mul(spriteNum, 16), 0, 16, 16, (((this.xMibi >> 10) - 24) | 0), (((this.yMibi >> 10) - 24) | 0), 0, 384);

                for (var i = 0; i < this.orbitersXAndYMibi.Count; i = (i + 1) | 0) {
                    var orbiterXAndYMibi = this.orbitersXAndYMibi.getItem(i);

                    displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Spikes, 0, 0, 16, 16, (((orbiterXAndYMibi.Item1 >> 10) - 24) | 0), (((orbiterXAndYMibi.Item2 >> 10) - 24) | 0), 0, 384);
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemyFlyamanita", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.IEnemy],
        statics: {
            methods: {
                GetEnemyFlyamanita: function (xMibi, yMibi, enemyId) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyFlyamanita(xMibi, yMibi, false, 0, yMibi, 0, null, enemyId);
                }
            }
        },
        fields: {
            xMibi: 0,
            yMibi: 0,
            isFacingRight: false,
            elapsedMicros: 0,
            initialYMibi: 0,
            yAngleScaled: 0,
            deadAngularSpeedInAnglesScaledPerSecond: null,
            EnemyId: null
        },
        alias: [
            "EnemyId", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId",
            "GetHitboxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetHitboxes",
            "GetDamageBoxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDamageBoxes",
            "GetDeadEnemy", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDeadEnemy",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$Render"
        ],
        ctors: {
            ctor: function (xMibi, yMibi, isFacingRight, elapsedMicros, initialYMibi, yAngleScaled, deadAngularSpeedInAnglesScaledPerSecond, enemyId) {
                this.$initialize();
                this.xMibi = xMibi;
                this.yMibi = yMibi;
                this.isFacingRight = isFacingRight;
                this.elapsedMicros = elapsedMicros;
                this.initialYMibi = initialYMibi;
                this.yAngleScaled = yAngleScaled;
                this.deadAngularSpeedInAnglesScaledPerSecond = deadAngularSpeedInAnglesScaledPerSecond;
                this.EnemyId = enemyId;
            }
        },
        methods: {
            GetHitboxes: function () {
                return Bridge.fn.bind(this, function (_o1) {
                        _o1.add(new TuxPlanetSpeedrunAnyPercentLibrary.Hitbox((((this.xMibi >> 10) - 27) | 0), (((this.yMibi >> 10) - 27) | 0), 54, 54));
                        return _o1;
                    })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Hitbox)).ctor());
            },
            GetDamageBoxes: function () {
                return Bridge.fn.bind(this, function (_o1) {
                        _o1.add(new TuxPlanetSpeedrunAnyPercentLibrary.Hitbox((((this.xMibi >> 10) - 30) | 0), (((this.yMibi >> 10) - 30) | 0), 60, 60));
                        return _o1;
                    })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Hitbox)).ctor());
            },
            GetDeadEnemy: function () {
                var angularSpeedInAnglesScaledPerSecond = 46080;

                if (System.Nullable.hasValue(this.deadAngularSpeedInAnglesScaledPerSecond)) {
                    angularSpeedInAnglesScaledPerSecond = System.Nullable.getValue(this.deadAngularSpeedInAnglesScaledPerSecond);
                }

                return TuxPlanetSpeedrunAnyPercentLibrary.EnemyFlyamanitaDead.SpawnEnemyFlyamanitaDead(this.xMibi, this.yMibi, angularSpeedInAnglesScaledPerSecond, (this.EnemyId || "") + "_dead");
            },
            ProcessFrame: function (cameraX, cameraY, windowWidth, windowHeight, elapsedMicrosPerFrame, tuxState, random, tilemap, levelFlags, soundOutput) {
                var list = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor();

                var newYMibi = (this.initialYMibi + Bridge.Int.mul(100, DTLibrary.DTMath.SineScaled(this.yAngleScaled))) | 0;
                var newIsFacingRight;

                if (tuxState.TeleportStartingLocation != null) {
                    newIsFacingRight = tuxState.TeleportStartingLocation.Item1 > this.xMibi;
                } else {
                    newIsFacingRight = tuxState.XMibi > this.xMibi;
                }

                var newElapsedMicros = (this.elapsedMicros + elapsedMicrosPerFrame) | 0;
                if (newElapsedMicros > 2000000000) {
                    newElapsedMicros = 1;
                }

                var isOutOfBounds = (((this.xMibi >> 10) + 30) | 0) < ((((cameraX - (windowWidth >> 1)) | 0) - TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0) || (((this.xMibi >> 10) - 30) | 0) > ((((cameraX + (windowWidth >> 1)) | 0) + TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0) || (((newYMibi >> 10) + 30) | 0) < ((((cameraY - (windowHeight >> 1)) | 0) - TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0) || (((newYMibi >> 10) - 30) | 0) > ((((cameraY + (windowHeight >> 1)) | 0) + TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0);

                var newYAngleScaled = (this.yAngleScaled + (elapsedMicrosPerFrame >> 7)) | 0;
                while (newYAngleScaled >= 46080) {
                    newYAngleScaled = (newYAngleScaled - (46080)) | 0;
                }

                if (!isOutOfBounds) {
                    list.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemyFlyamanita(this.xMibi, newYMibi, newIsFacingRight, newElapsedMicros, this.initialYMibi, newYAngleScaled, System.Nullable.hasValue(this.deadAngularSpeedInAnglesScaledPerSecond) ? System.Nullable.getValue(this.deadAngularSpeedInAnglesScaledPerSecond) : Bridge.Int.mul((((random.DTLibrary$IDTRandom$NextInt(51200) + 15360) | 0)), (random.DTLibrary$IDTRandom$NextBool() ? 1 : -1)), this.EnemyId));
                }

                return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(list, null, null);
            },
            Render: function (displayOutput) {
                var image = this.isFacingRight ? TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Flyamanita : TuxPlanetSpeedrunAnyPercentLibrary.GameImage.FlyamanitaMirrored;

                var spriteNum = (((Bridge.Int.div(this.elapsedMicros, (100000))) | 0)) % 4;

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(image, Bridge.Int.mul(spriteNum, 20), 0, 20, 20, (((this.xMibi >> 10) - 30) | 0), (((this.yMibi >> 10) - 30) | 0), 0, 384);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemyFlyamanitaDead", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.IEnemy],
        statics: {
            methods: {
                SpawnEnemyFlyamanitaDead: function (xMibi, yMibi, angularSpeedInAnglesScaledPerSecond, enemyId) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyFlyamanitaDead(xMibi, yMibi, 0, angularSpeedInAnglesScaledPerSecond, 0, enemyId);
                }
            }
        },
        fields: {
            xMibi: 0,
            yMibi: 0,
            ySpeedInMibipixelsPerSecond: 0,
            angularSpeedInAnglesScaledPerSecond: 0,
            angleScaled: 0,
            EnemyId: null
        },
        alias: [
            "EnemyId", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId",
            "GetHitboxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetHitboxes",
            "GetDamageBoxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDamageBoxes",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$Render",
            "GetDeadEnemy", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDeadEnemy"
        ],
        ctors: {
            ctor: function (xMibi, yMibi, ySpeedInMibipixelsPerSecond, angularSpeedInAnglesScaledPerSecond, angleScaled, enemyId) {
                this.$initialize();
                this.xMibi = xMibi;
                this.yMibi = yMibi;
                this.ySpeedInMibipixelsPerSecond = ySpeedInMibipixelsPerSecond;
                this.angularSpeedInAnglesScaledPerSecond = angularSpeedInAnglesScaledPerSecond;
                this.angleScaled = angleScaled;
                this.EnemyId = enemyId;
            }
        },
        methods: {
            GetHitboxes: function () {
                return null;
            },
            GetDamageBoxes: function () {
                return null;
            },
            ProcessFrame: function (cameraX, cameraY, windowWidth, windowHeight, elapsedMicrosPerFrame, tuxState, random, tilemap, levelFlags, soundOutput) {
                var isOutOfBounds = (((this.xMibi >> 10) + 30) | 0) < ((((cameraX - (windowWidth >> 1)) | 0) - TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0) || (((this.xMibi >> 10) - 30) | 0) > ((((cameraX + (windowWidth >> 1)) | 0) + TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0) || (((this.yMibi >> 10) + 30) | 0) < ((((cameraY - (windowHeight >> 1)) | 0) - TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0) || (((this.yMibi >> 10) - 30) | 0) > ((((cameraY + (windowHeight >> 1)) | 0) + TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0);

                if (isOutOfBounds) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(null, null, null);
                }

                var newYSpeedInMibipixelsPerSecond = this.ySpeedInMibipixelsPerSecond;
                if (newYSpeedInMibipixelsPerSecond >= -5000000) {
                    newYSpeedInMibipixelsPerSecond = (newYSpeedInMibipixelsPerSecond - (Bridge.Int.mul(elapsedMicrosPerFrame, 3))) | 0;
                }

                var newAngleScaled = this.angleScaled;
                newAngleScaled = (newAngleScaled + (((Bridge.Int.div(Bridge.Int.mul(((Bridge.Int.div(this.angularSpeedInAnglesScaledPerSecond, 1000)) | 0), elapsedMicrosPerFrame), 1000)) | 0))) | 0;
                while (newAngleScaled >= 46080) {
                    newAngleScaled = (newAngleScaled - (46080)) | 0;
                }
                while (newAngleScaled < 0) {
                    newAngleScaled = (newAngleScaled + (46080)) | 0;
                }

                var newYMibi = System.Int64.clip32(System.Int64(this.yMibi).add(System.Int64(newYSpeedInMibipixelsPerSecond).mul(System.Int64(elapsedMicrosPerFrame)).div(System.Int64(1000)).div(System.Int64(1000))));

                return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(Bridge.fn.bind(this, function (_o1) {
                        _o1.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemyFlyamanitaDead(this.xMibi, newYMibi, newYSpeedInMibipixelsPerSecond, this.angularSpeedInAnglesScaledPerSecond, newAngleScaled, this.EnemyId));
                        return _o1;
                    })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor()), null, null);
            },
            Render: function (displayOutput) {
                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Flyamanita, 0, 0, 20, 20, (((this.xMibi >> 10) - 30) | 0), (((this.yMibi >> 10) - 30) | 0), this.angleScaled, 384);
            },
            GetDeadEnemy: function () {
                return null;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemyFlyamanitaDeadLevel7", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.IEnemy],
        statics: {
            fields: {
                NUM_PIXELS_OFFSCREEN_BEFORE_ENEMY_RESPAWNS: 0
            },
            ctors: {
                init: function () {
                    this.NUM_PIXELS_OFFSCREEN_BEFORE_ENEMY_RESPAWNS = 400;
                }
            },
            methods: {
                SpawnEnemyFlyamanitaDeadLevel7: function (originalXMibi, originalYMibi, xMibi, yMibi, angularSpeedInAnglesScaledPerSecond, enemyIdPrefix, enemyIdCounter) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyFlyamanitaDeadLevel7(originalXMibi, originalYMibi, xMibi, yMibi, 0, angularSpeedInAnglesScaledPerSecond, 0, false, enemyIdPrefix, ((enemyIdCounter + 1) | 0), (enemyIdPrefix || "") + "_" + (DTLibrary.StringUtil.ToStringCultureInvariant(enemyIdCounter) || ""));
                }
            }
        },
        fields: {
            originalXMibi: 0,
            originalYMibi: 0,
            xMibi: 0,
            yMibi: 0,
            ySpeedInMibipixelsPerSecond: 0,
            angularSpeedInAnglesScaledPerSecond: 0,
            angleScaled: 0,
            hasLeftScreen: false,
            enemyIdPrefix: null,
            enemyIdCounter: 0,
            EnemyId: null
        },
        alias: [
            "EnemyId", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId",
            "GetHitboxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetHitboxes",
            "GetDamageBoxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDamageBoxes",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$Render",
            "GetDeadEnemy", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDeadEnemy"
        ],
        ctors: {
            ctor: function (originalXMibi, originalYMibi, xMibi, yMibi, ySpeedInMibipixelsPerSecond, angularSpeedInAnglesScaledPerSecond, angleScaled, hasLeftScreen, enemyIdPrefix, enemyIdCounter, enemyId) {
                this.$initialize();
                this.originalXMibi = originalXMibi;
                this.originalYMibi = originalYMibi;
                this.xMibi = xMibi;
                this.yMibi = yMibi;
                this.ySpeedInMibipixelsPerSecond = ySpeedInMibipixelsPerSecond;
                this.angularSpeedInAnglesScaledPerSecond = angularSpeedInAnglesScaledPerSecond;
                this.angleScaled = angleScaled;
                this.hasLeftScreen = hasLeftScreen;
                this.enemyIdPrefix = enemyIdPrefix;
                this.enemyIdCounter = enemyIdCounter;
                this.EnemyId = enemyId;
            }
        },
        methods: {
            GetHitboxes: function () {
                return null;
            },
            GetDamageBoxes: function () {
                return null;
            },
            ProcessFrame: function (cameraX, cameraY, windowWidth, windowHeight, elapsedMicrosPerFrame, tuxState, random, tilemap, levelFlags, soundOutput) {
                if (this.hasLeftScreen) {
                    var shouldRespawn = (((this.originalXMibi >> 10) + 30) | 0) < ((((cameraX - (windowWidth >> 1)) | 0) - TuxPlanetSpeedrunAnyPercentLibrary.EnemyFlyamanitaDeadLevel7.NUM_PIXELS_OFFSCREEN_BEFORE_ENEMY_RESPAWNS) | 0) || (((this.originalXMibi >> 10) - 30) | 0) > ((((cameraX + (windowWidth >> 1)) | 0) + TuxPlanetSpeedrunAnyPercentLibrary.EnemyFlyamanitaDeadLevel7.NUM_PIXELS_OFFSCREEN_BEFORE_ENEMY_RESPAWNS) | 0) || (((this.originalYMibi >> 10) + 30) | 0) < ((((cameraY - (windowHeight >> 1)) | 0) - TuxPlanetSpeedrunAnyPercentLibrary.EnemyFlyamanitaDeadLevel7.NUM_PIXELS_OFFSCREEN_BEFORE_ENEMY_RESPAWNS) | 0) || (((this.originalYMibi >> 10) - 30) | 0) > ((((cameraY + (windowHeight >> 1)) | 0) + TuxPlanetSpeedrunAnyPercentLibrary.EnemyFlyamanitaDeadLevel7.NUM_PIXELS_OFFSCREEN_BEFORE_ENEMY_RESPAWNS) | 0);

                    var list = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor();

                    if (shouldRespawn) {
                        list.add(TuxPlanetSpeedrunAnyPercentLibrary.EnemyFlyamanitaLevel7.GetEnemyFlyamanitaLevel7(this.originalXMibi, this.originalYMibi, this.enemyIdPrefix, this.enemyIdCounter));
                    } else {
                        list.add(this);
                    }

                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(list, null, null);
                } else {
                    var isOutOfBounds = (((this.xMibi >> 10) + 30) | 0) < ((((cameraX - (windowWidth >> 1)) | 0) - TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0) || (((this.xMibi >> 10) - 30) | 0) > ((((cameraX + (windowWidth >> 1)) | 0) + TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0) || (((this.yMibi >> 10) + 30) | 0) < ((((cameraY - (windowHeight >> 1)) | 0) - TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0) || (((this.yMibi >> 10) - 30) | 0) > ((((cameraY + (windowHeight >> 1)) | 0) + TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0);

                    var newHasLeftScreen = isOutOfBounds;

                    var newYSpeedInMibipixelsPerSecond = this.ySpeedInMibipixelsPerSecond;
                    if (newYSpeedInMibipixelsPerSecond >= -5000000) {
                        newYSpeedInMibipixelsPerSecond = (newYSpeedInMibipixelsPerSecond - (Bridge.Int.mul(elapsedMicrosPerFrame, 3))) | 0;
                    }

                    var newAngleScaled = this.angleScaled;
                    newAngleScaled = (newAngleScaled + (((Bridge.Int.div(Bridge.Int.mul(((Bridge.Int.div(this.angularSpeedInAnglesScaledPerSecond, 1000)) | 0), elapsedMicrosPerFrame), 1000)) | 0))) | 0;
                    while (newAngleScaled >= 46080) {
                        newAngleScaled = (newAngleScaled - (46080)) | 0;
                    }
                    while (newAngleScaled < 0) {
                        newAngleScaled = (newAngleScaled + (46080)) | 0;
                    }

                    var newYMibi = System.Int64.clip32(System.Int64(this.yMibi).add(System.Int64(newYSpeedInMibipixelsPerSecond).mul(System.Int64(elapsedMicrosPerFrame)).div(System.Int64(1000)).div(System.Int64(1000))));

                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(Bridge.fn.bind(this, function (_o1) {
                            _o1.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemyFlyamanitaDeadLevel7(this.originalXMibi, this.originalYMibi, this.xMibi, newYMibi, newYSpeedInMibipixelsPerSecond, this.angularSpeedInAnglesScaledPerSecond, newAngleScaled, newHasLeftScreen, this.enemyIdPrefix, this.enemyIdCounter, this.EnemyId));
                            return _o1;
                        })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor()), null, null);
                }
            },
            Render: function (displayOutput) {
                if (!this.hasLeftScreen) {
                    displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Flyamanita, 0, 0, 20, 20, (((this.xMibi >> 10) - 30) | 0), (((this.yMibi >> 10) - 30) | 0), this.angleScaled, 384);
                }
            },
            GetDeadEnemy: function () {
                return null;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemyFlyamanitaLevel7", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.IEnemy],
        statics: {
            methods: {
                GetEnemyFlyamanitaLevel7: function (xMibi, yMibi, enemyIdPrefix, enemyIdCounter) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyFlyamanitaLevel7(xMibi, yMibi, xMibi, yMibi, false, 0, yMibi, 0, null, enemyIdPrefix, ((enemyIdCounter + 1) | 0), (enemyIdPrefix || "") + "_" + (DTLibrary.StringUtil.ToStringCultureInvariant(enemyIdCounter) || ""));
                }
            }
        },
        fields: {
            originalXMibi: 0,
            originalYMibi: 0,
            xMibi: 0,
            yMibi: 0,
            isFacingRight: false,
            elapsedMicros: 0,
            initialYMibi: 0,
            yAngleScaled: 0,
            deadAngularSpeedInAnglesScaledPerSecond: null,
            enemyIdPrefix: null,
            enemyIdCounter: 0,
            EnemyId: null
        },
        alias: [
            "EnemyId", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId",
            "GetHitboxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetHitboxes",
            "GetDamageBoxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDamageBoxes",
            "GetDeadEnemy", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDeadEnemy",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$Render"
        ],
        ctors: {
            ctor: function (originalXMibi, originalYMibi, xMibi, yMibi, isFacingRight, elapsedMicros, initialYMibi, yAngleScaled, deadAngularSpeedInAnglesScaledPerSecond, enemyIdPrefix, enemyIdCounter, enemyId) {
                this.$initialize();
                this.originalXMibi = originalXMibi;
                this.originalYMibi = originalYMibi;
                this.xMibi = xMibi;
                this.yMibi = yMibi;
                this.isFacingRight = isFacingRight;
                this.elapsedMicros = elapsedMicros;
                this.initialYMibi = initialYMibi;
                this.yAngleScaled = yAngleScaled;
                this.deadAngularSpeedInAnglesScaledPerSecond = deadAngularSpeedInAnglesScaledPerSecond;
                this.enemyIdPrefix = enemyIdPrefix;
                this.enemyIdCounter = enemyIdCounter;
                this.EnemyId = enemyId;
            }
        },
        methods: {
            GetHitboxes: function () {
                return Bridge.fn.bind(this, function (_o1) {
                        _o1.add(new TuxPlanetSpeedrunAnyPercentLibrary.Hitbox((((this.xMibi >> 10) - 27) | 0), (((this.yMibi >> 10) - 27) | 0), 54, 54));
                        return _o1;
                    })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Hitbox)).ctor());
            },
            GetDamageBoxes: function () {
                return Bridge.fn.bind(this, function (_o1) {
                        _o1.add(new TuxPlanetSpeedrunAnyPercentLibrary.Hitbox((((this.xMibi >> 10) - 30) | 0), (((this.yMibi >> 10) - 30) | 0), 60, 60));
                        return _o1;
                    })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Hitbox)).ctor());
            },
            GetDeadEnemy: function () {
                var angularSpeedInAnglesScaledPerSecond = 46080;

                if (System.Nullable.hasValue(this.deadAngularSpeedInAnglesScaledPerSecond)) {
                    angularSpeedInAnglesScaledPerSecond = System.Nullable.getValue(this.deadAngularSpeedInAnglesScaledPerSecond);
                }

                return TuxPlanetSpeedrunAnyPercentLibrary.EnemyFlyamanitaDeadLevel7.SpawnEnemyFlyamanitaDeadLevel7(this.originalXMibi, this.originalYMibi, this.xMibi, this.yMibi, angularSpeedInAnglesScaledPerSecond, this.enemyIdPrefix, this.enemyIdCounter);
            },
            ProcessFrame: function (cameraX, cameraY, windowWidth, windowHeight, elapsedMicrosPerFrame, tuxState, random, tilemap, levelFlags, soundOutput) {
                var list = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor();

                var newYMibi = (this.initialYMibi + Bridge.Int.mul(100, DTLibrary.DTMath.SineScaled(this.yAngleScaled))) | 0;
                var newIsFacingRight;

                if (tuxState.TeleportStartingLocation != null) {
                    newIsFacingRight = tuxState.TeleportStartingLocation.Item1 > this.xMibi;
                } else {
                    newIsFacingRight = tuxState.XMibi > this.xMibi;
                }

                var newElapsedMicros = (this.elapsedMicros + elapsedMicrosPerFrame) | 0;
                if (newElapsedMicros > 2000000000) {
                    newElapsedMicros = 1;
                }

                var newYAngleScaled = (this.yAngleScaled + (elapsedMicrosPerFrame >> 7)) | 0;
                while (newYAngleScaled >= 46080) {
                    newYAngleScaled = (newYAngleScaled - (46080)) | 0;
                }

                list.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemyFlyamanitaLevel7(this.originalXMibi, this.originalYMibi, this.xMibi, newYMibi, newIsFacingRight, newElapsedMicros, this.initialYMibi, newYAngleScaled, System.Nullable.hasValue(this.deadAngularSpeedInAnglesScaledPerSecond) ? System.Nullable.getValue(this.deadAngularSpeedInAnglesScaledPerSecond) : Bridge.Int.mul((((random.DTLibrary$IDTRandom$NextInt(51200) + 15360) | 0)), (random.DTLibrary$IDTRandom$NextBool() ? 1 : -1)), this.enemyIdPrefix, this.enemyIdCounter, this.EnemyId));

                return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(list, null, null);
            },
            Render: function (displayOutput) {
                var image = this.isFacingRight ? TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Flyamanita : TuxPlanetSpeedrunAnyPercentLibrary.GameImage.FlyamanitaMirrored;

                var spriteNum = (((Bridge.Int.div(this.elapsedMicros, (100000))) | 0)) % 4;

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(image, Bridge.Int.mul(spriteNum, 20), 0, 20, 20, (((this.xMibi >> 10) - 30) | 0), (((this.yMibi >> 10) - 30) | 0), 0, 384);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiBoss", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.IEnemy],
        statics: {
            fields: {
                INVULNERABILITY_DURATION: 0
            },
            ctors: {
                init: function () {
                    this.INVULNERABILITY_DURATION = 1000000;
                }
            },
            methods: {
                GetEnemyKonqiBoss: function (xMibi, yMibi, enemyId, rngSeed) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiBoss(xMibi, yMibi, 0, 0, null, 1000000, 0, false, 0, rngSeed, new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Hitbox)).ctor(), yMibi, enemyId);
                }
            }
        },
        fields: {
            xMibi: 0,
            yMibi: 0,
            elapsedMicros: 0,
            numTimesHit: 0,
            invulnerabilityElapsedMicros: null,
            currentAttackCooldown: 0,
            blueFlameCooldown: 0,
            wasLastBlueFlameAttackClockwise: false,
            enemyIdCounter: 0,
            rngSeed: null,
            emptyHitboxList: null,
            startingYMibi: 0,
            EnemyId: null
        },
        alias: [
            "EnemyId", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId",
            "GetHitboxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetHitboxes",
            "GetDamageBoxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDamageBoxes",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$Render",
            "GetDeadEnemy", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDeadEnemy"
        ],
        ctors: {
            ctor: function (xMibi, yMibi, elapsedMicros, numTimesHit, invulnerabilityElapsedMicros, currentAttackCooldown, blueFlameCooldown, wasLastBlueFlameAttackClockwise, enemyIdCounter, rngSeed, emptyHitboxList, startingYMibi, enemyId) {
                this.$initialize();
                this.xMibi = xMibi;
                this.yMibi = yMibi;
                this.elapsedMicros = elapsedMicros;
                this.numTimesHit = numTimesHit;
                this.invulnerabilityElapsedMicros = invulnerabilityElapsedMicros;
                this.currentAttackCooldown = currentAttackCooldown;
                this.blueFlameCooldown = blueFlameCooldown;
                this.wasLastBlueFlameAttackClockwise = wasLastBlueFlameAttackClockwise;
                this.enemyIdCounter = enemyIdCounter;
                this.rngSeed = rngSeed;
                this.emptyHitboxList = emptyHitboxList;
                this.startingYMibi = startingYMibi;
                this.EnemyId = enemyId;
            }
        },
        methods: {
            GetHitboxes: function () {
                return Bridge.fn.bind(this, function (_o1) {
                        _o1.add(new TuxPlanetSpeedrunAnyPercentLibrary.Hitbox((((this.xMibi >> 10) - 24) | 0), (((this.yMibi >> 10) - 24) | 0), 48, 78));
                        return _o1;
                    })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Hitbox)).ctor());
            },
            GetDamageBoxes: function () {
                return Bridge.fn.bind(this, function (_o1) {
                        _o1.add(new TuxPlanetSpeedrunAnyPercentLibrary.Hitbox((((this.xMibi >> 10) - 24) | 0), (((this.yMibi >> 10) - 24) | 0), 48, 78));
                        return _o1;
                    })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Hitbox)).ctor());
            },
            IsFacingRight: function () {
                return this.numTimesHit % 2 === 1;
            },
            ProcessFrame: function (cameraX, cameraY, windowWidth, windowHeight, elapsedMicrosPerFrame, tuxState, random, tilemap, levelFlags, soundOutput) {
                if (System.Linq.Enumerable.from(levelFlags).contains(TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.SPAWN_KONQI_BOSS_DEFEAT)) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(Bridge.fn.bind(this, function (_o1) {
                            _o1.add(TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiBossDefeat.GetEnemyKonqiBossDefeat(this.xMibi, this.yMibi, this.elapsedMicros, (this.EnemyId || "") + "_EnemyKonqiBossDefeat"));
                            return _o1;
                        })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor()), null, null);
                }

                var newXMibi = this.xMibi;
                var newYMibi = this.yMibi;
                var newInvulnerabilityElapsedMicros = this.invulnerabilityElapsedMicros;
                var newRngSeed = this.rngSeed;
                var newCurrentAttackCooldown = this.currentAttackCooldown;
                var newBlueFlameCooldown = this.blueFlameCooldown;
                var newWasLastBlueFlameAttackClockwise = this.wasLastBlueFlameAttackClockwise;
                var newEnemyIdCounter = this.enemyIdCounter;

                var newEnemies = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor();

                var newElapsedMicros = (this.elapsedMicros + elapsedMicrosPerFrame) | 0;

                if (newElapsedMicros > 2000000000) {
                    newElapsedMicros = 1;
                }

                if (System.Nullable.hasValue(newInvulnerabilityElapsedMicros) && System.Nullable.getValue(newInvulnerabilityElapsedMicros) === 0) {
                    newEnemies.add(TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiDisappear.GetEnemyKonqiDisappear(newXMibi, newYMibi, (this.EnemyId || "") + "_konqiDisappear" + (DTLibrary.StringUtil.ToStringCultureInvariant(newEnemyIdCounter) || "")));
                    newEnemyIdCounter = (newEnemyIdCounter + 1) | 0;

                    if (this.numTimesHit % 2 === 0) {
                        newXMibi = (newXMibi + (737280)) | 0;
                    } else {
                        newXMibi = (newXMibi - (737280)) | 0;
                    }

                    newYMibi = this.startingYMibi;

                    newEnemies.add(TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiDisappear.GetEnemyKonqiDisappear(newXMibi, newYMibi, (this.EnemyId || "") + "_konqiDisappear" + (DTLibrary.StringUtil.ToStringCultureInvariant(newEnemyIdCounter) || "")));
                    newEnemyIdCounter = (newEnemyIdCounter + 1) | 0;
                }

                newCurrentAttackCooldown = (newCurrentAttackCooldown - elapsedMicrosPerFrame) | 0;
                if (newCurrentAttackCooldown <= 0) {
                    var rng = new DTLibrary.DTDeterministicRandom.ctor();
                    rng.DeserializeFromString(newRngSeed);
                    newCurrentAttackCooldown = (300000 + rng.NextInt(500000)) | 0;
                    var fireballYSpeed1 = (300000 + rng.NextInt(1500000)) | 0;
                    var fireballYSpeed2 = (300000 + rng.NextInt(1500000)) | 0;
                    newRngSeed = rng.SerializeToString();

                    if (this.numTimesHit < 6) {
                        newEnemies.add(TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiFireball.GetEnemyKonqiFireball(((newXMibi + (this.IsFacingRight() ? 5120 : -5120)) | 0), ((newYMibi + 24576) | 0), this.IsFacingRight() ? 700000 : -700000, fireballYSpeed1, (this.EnemyId || "") + "_fireball" + (DTLibrary.StringUtil.ToStringCultureInvariant(newEnemyIdCounter) || "")));
                        newEnemyIdCounter = (newEnemyIdCounter + 1) | 0;

                        if (this.numTimesHit === 2 || this.numTimesHit === 3) {
                            newEnemies.add(TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiFireball.GetEnemyKonqiFireball(((newXMibi + (this.IsFacingRight() ? 5120 : -5120)) | 0), ((newYMibi + 24576) | 0), this.IsFacingRight() ? 700000 : -700000, fireballYSpeed2, (this.EnemyId || "") + "_fireball" + (DTLibrary.StringUtil.ToStringCultureInvariant(newEnemyIdCounter) || "")));
                            newEnemyIdCounter = (newEnemyIdCounter + 1) | 0;
                        }
                    }
                }

                if (this.numTimesHit === 4 || this.numTimesHit === 5) {
                    newBlueFlameCooldown = (newBlueFlameCooldown - elapsedMicrosPerFrame) | 0;
                    if (newBlueFlameCooldown <= 0) {
                        newBlueFlameCooldown = (newBlueFlameCooldown + (1000000)) | 0;

                        var rng1 = new DTLibrary.DTDeterministicRandom.ctor();
                        rng1.DeserializeFromString(newRngSeed);
                        var baseAngleScaled = rng1.NextInt(46080);
                        newRngSeed = rng1.SerializeToString();

                        for (var i = 0; i < 6; i = (i + 1) | 0) {
                            newEnemies.add(TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiFireballBlue.GetEnemyKonqiFireballBlue(((newXMibi + (this.IsFacingRight() ? 5120 : -5120)) | 0), ((newYMibi + 24576) | 0), ((baseAngleScaled + Bridge.Int.mul(i, (7680))) | 0), !newWasLastBlueFlameAttackClockwise, (this.EnemyId || "") + "_fireballBlue1_" + (DTLibrary.StringUtil.ToStringCultureInvariant(newEnemyIdCounter) || "")));
                            newEnemyIdCounter = (newEnemyIdCounter + 1) | 0;
                        }

                        newWasLastBlueFlameAttackClockwise = !newWasLastBlueFlameAttackClockwise;
                    }
                }

                if (newInvulnerabilityElapsedMicros != null) {
                    newInvulnerabilityElapsedMicros = Bridge.Int.clip32(System.Nullable.getValue(newInvulnerabilityElapsedMicros) + elapsedMicrosPerFrame);
                    if (System.Nullable.getValue(newInvulnerabilityElapsedMicros) >= TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiBoss.INVULNERABILITY_DURATION) {
                        newInvulnerabilityElapsedMicros = null;
                    }
                }

                newEnemies.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiBoss(newXMibi, newYMibi, newElapsedMicros, this.numTimesHit, newInvulnerabilityElapsedMicros, newCurrentAttackCooldown, newBlueFlameCooldown, newWasLastBlueFlameAttackClockwise, newEnemyIdCounter, newRngSeed, this.emptyHitboxList, this.startingYMibi, this.EnemyId));

                var newlyAddedLevelFlags;

                if (this.numTimesHit === 6) {
                    newlyAddedLevelFlags = function (_o2) {
                            _o2.add(TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.BEGIN_KONQI_DEFEATED_CUTSCENE);
                            _o2.add(TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiFireball.LEVEL_FLAG_DESPAWN_KONQI_FIREBALLS);
                            _o2.add(TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiFireballBlue.LEVEL_FLAG_DESPAWN_KONQI_FIREBALLS_BLUE);
                            return _o2;
                        }(new (System.Collections.Generic.List$1(System.String)).ctor());
                } else {
                    newlyAddedLevelFlags = null;
                }

                return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(newEnemies, null, newlyAddedLevelFlags);
            },
            Render: function (displayOutput) {
                if (this.invulnerabilityElapsedMicros != null) {
                    if ((((Bridge.Int.div(System.Nullable.getValue(this.invulnerabilityElapsedMicros), (100000))) | 0)) % 2 === 0) {
                        return;
                    }
                }

                var spriteNum = (Bridge.Int.div((this.elapsedMicros % 1000000), 250000)) | 0;

                var image = this.IsFacingRight() ? TuxPlanetSpeedrunAnyPercentLibrary.GameImage.KonqiFire : TuxPlanetSpeedrunAnyPercentLibrary.GameImage.KonqiFireMirrored;

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(image, Bridge.Int.mul(spriteNum, 32), 0, 32, 32, (((this.xMibi >> 10) - 48) | 0), (((this.yMibi >> 10) - 24) | 0), 0, 384);
            },
            GetDeadEnemy: function () {
                return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiBoss(this.xMibi, this.yMibi, this.elapsedMicros, ((this.numTimesHit + 1) | 0), 0, this.currentAttackCooldown, this.blueFlameCooldown, this.wasLastBlueFlameAttackClockwise, this.enemyIdCounter, this.rngSeed, this.emptyHitboxList, this.startingYMibi, (this.EnemyId || "") + "_hit");
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiBossDefeat", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.IEnemy],
        statics: {
            fields: {
                JUMP_Y_SPEED: 0,
                TELEPORT_DURATION: 0
            },
            ctors: {
                init: function () {
                    this.JUMP_Y_SPEED = 1100000;
                    this.TELEPORT_DURATION = 150000;
                }
            },
            methods: {
                GetEnemyKonqiBossDefeat: function (xMibi, yMibi, elapsedMicros, enemyId) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiBossDefeat(TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiBossDefeat.Status.A_Start, xMibi, yMibi, elapsedMicros, 0, 0, null, null, enemyId);
                },
                RenderKonqiBlock: function (blockNumber, konqiXMibi, konqiYMibi, displayOutput) {
                    var blockX = (11904 + Bridge.Int.mul(blockNumber, 48)) | 0;
                    var blockY = 720;

                    var isKonqiInRange;

                    if (konqiXMibi == null || konqiYMibi == null) {
                        isKonqiInRange = false;
                    } else {
                        var deltaX = ((System.Nullable.getValue(konqiXMibi) >> 10) - (((blockX + 24) | 0))) | 0;
                        var deltaY = ((System.Nullable.getValue(konqiYMibi) >> 10) - (((blockY + 24) | 0))) | 0;

                        isKonqiInRange = ((Bridge.Int.mul(deltaX, deltaX) + Bridge.Int.mul(deltaY, deltaY)) | 0) <= 16900;
                    }

                    if (!isKonqiInRange) {
                        displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Lock, 0, 0, 16, 16, blockX, blockY, 0, 384);
                    }
                }
            }
        },
        fields: {
            status: 0,
            xMibi: 0,
            yMibi: 0,
            elapsedMicros: 0,
            xSpeedInMibipixelsPerSecond: 0,
            ySpeedInMibipixelsPerSecond: 0,
            teleportStartingLocation: null,
            teleportInProgressElapsedMicros: null,
            EnemyId: null
        },
        alias: [
            "EnemyId", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId",
            "GetHitboxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetHitboxes",
            "GetDamageBoxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDamageBoxes",
            "GetDeadEnemy", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDeadEnemy",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$Render"
        ],
        ctors: {
            ctor: function (status, xMibi, yMibi, elapsedMicros, xSpeedInMibipixelsPerSecond, ySpeedInMibipixelsPerSecond, teleportStartingLocation, teleportInProgressElapsedMicros, enemyId) {
                this.$initialize();
                this.status = status;
                this.xMibi = xMibi;
                this.yMibi = yMibi;
                this.elapsedMicros = elapsedMicros;
                this.xSpeedInMibipixelsPerSecond = xSpeedInMibipixelsPerSecond;
                this.ySpeedInMibipixelsPerSecond = ySpeedInMibipixelsPerSecond;
                this.teleportStartingLocation = teleportStartingLocation;
                this.teleportInProgressElapsedMicros = teleportInProgressElapsedMicros;
                this.EnemyId = enemyId;
            }
        },
        methods: {
            GetHitboxes: function () {
                return null;
            },
            GetDamageBoxes: function () {
                return null;
            },
            GetDeadEnemy: function () {
                return null;
            },
            ProcessFrame: function (cameraX, cameraY, windowWidth, windowHeight, elapsedMicrosPerFrame, tuxState, random, tilemap, levelFlags, soundOutput) {
                var newElapsedMicros = (this.elapsedMicros + elapsedMicrosPerFrame) | 0;

                if (newElapsedMicros > 2000000000) {
                    newElapsedMicros = 1;
                }

                var newStatus = new TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiBossDefeat.Status();
                var newYMibi;
                var newYSpeedInMibipixelsPerSecond;
                var newTeleportStartingLocation;
                var newTeleportInProgressElapsedMicros;

                var newlyAddedLevelFlags = new (System.Collections.Generic.List$1(System.String)).ctor();

                switch (this.status) {
                    case TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiBossDefeat.Status.A_Start: 
                        newStatus = TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiBossDefeat.Status.B_Jumping;
                        newYMibi = this.yMibi;
                        newYSpeedInMibipixelsPerSecond = TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiBossDefeat.JUMP_Y_SPEED;
                        newTeleportStartingLocation = null;
                        newTeleportInProgressElapsedMicros = null;
                        break;
                    case TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiBossDefeat.Status.B_Jumping: 
                        newYMibi = System.Int64.clip32(System.Int64(this.yMibi).add(System.Int64(this.ySpeedInMibipixelsPerSecond).mul(System.Int64(elapsedMicrosPerFrame)).div(System.Int64(1000)).div(System.Int64(1000))));
                        newYSpeedInMibipixelsPerSecond = (this.ySpeedInMibipixelsPerSecond - Bridge.Int.mul(elapsedMicrosPerFrame, 3)) | 0;
                        if (this.ySpeedInMibipixelsPerSecond <= 0) {
                            newTeleportStartingLocation = { Item1: this.xMibi, Item2: this.yMibi };
                            newYMibi = (newYMibi + 288768) | 0;
                            newYSpeedInMibipixelsPerSecond = 1482752;
                            newTeleportInProgressElapsedMicros = 0;
                            soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$PlaySound(TuxPlanetSpeedrunAnyPercentLibrary.GameSound.Teleport);
                            newStatus = TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiBossDefeat.Status.C_Teleporting;
                        } else {
                            newStatus = TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiBossDefeat.Status.B_Jumping;
                            newTeleportStartingLocation = null;
                            newTeleportInProgressElapsedMicros = null;
                        }
                        break;
                    case TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiBossDefeat.Status.C_Teleporting: 
                        newYMibi = this.yMibi;
                        newYSpeedInMibipixelsPerSecond = this.ySpeedInMibipixelsPerSecond;
                        if (System.Nullable.getValue(this.teleportInProgressElapsedMicros) >= TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiBossDefeat.TELEPORT_DURATION) {
                            newStatus = TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiBossDefeat.Status.D_Finish;
                            newTeleportStartingLocation = null;
                            newTeleportInProgressElapsedMicros = null;
                        } else {
                            newStatus = TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiBossDefeat.Status.C_Teleporting;
                            newTeleportStartingLocation = this.teleportStartingLocation;
                            newTeleportInProgressElapsedMicros = Bridge.Int.clip32(System.Nullable.getValue(this.teleportInProgressElapsedMicros) + elapsedMicrosPerFrame);
                        }
                        break;
                    case TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiBossDefeat.Status.D_Finish: 
                        newYMibi = System.Int64.clip32(System.Int64(this.yMibi).add(System.Int64(this.ySpeedInMibipixelsPerSecond).mul(System.Int64(elapsedMicrosPerFrame)).div(System.Int64(1000)).div(System.Int64(1000))));
                        newYSpeedInMibipixelsPerSecond = (this.ySpeedInMibipixelsPerSecond - Bridge.Int.mul(elapsedMicrosPerFrame, 3)) | 0;
                        newTeleportStartingLocation = null;
                        newTeleportInProgressElapsedMicros = null;
                        if (newYSpeedInMibipixelsPerSecond <= 0) {
                            newStatus = TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiBossDefeat.Status.E_Disappear;
                            newlyAddedLevelFlags.add(TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.CONTINUOUSLY_RENDER_KONQI_BLOCKS);
                        } else {
                            newStatus = TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiBossDefeat.Status.D_Finish;
                        }
                        break;
                    case TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiBossDefeat.Status.E_Disappear: 
                        newStatus = TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiBossDefeat.Status.E_Disappear;
                        newYMibi = this.yMibi;
                        newYSpeedInMibipixelsPerSecond = this.ySpeedInMibipixelsPerSecond;
                        newTeleportStartingLocation = null;
                        newTeleportInProgressElapsedMicros = null;
                        break;
                    default: 
                        throw new System.Exception();
                }

                return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(Bridge.fn.bind(this, function (_o1) {
                        _o1.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiBossDefeat(newStatus, this.xMibi, newYMibi, newElapsedMicros, this.xSpeedInMibipixelsPerSecond, newYSpeedInMibipixelsPerSecond, newTeleportStartingLocation, newTeleportInProgressElapsedMicros, this.EnemyId));
                        return _o1;
                    })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor()), null, newlyAddedLevelFlags);
            },
            Render: function (displayOutput) {
                for (var i = 0; i < 14; i = (i + 1) | 0) {
                    var konqiXMibi = this.xMibi;
                    var konqiYMibi = this.yMibi;

                    if (this.teleportInProgressElapsedMicros != null) {
                        var konqiDeltaY = System.Int64(this.yMibi - this.teleportStartingLocation.Item2);

                        konqiYMibi = System.Int64.clip32(System.Int64(this.teleportStartingLocation.Item2).add(konqiDeltaY.mul(System.Int64(System.Nullable.getValue(this.teleportInProgressElapsedMicros))).div(System.Int64(TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiBossDefeat.TELEPORT_DURATION))));
                    }

                    TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiBossDefeat.RenderKonqiBlock(i, konqiXMibi, konqiYMibi, displayOutput);
                }

                switch (this.status) {
                    case TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiBossDefeat.Status.A_Start: 
                        var spriteNum = (Bridge.Int.div((this.elapsedMicros % 1000000), 250000)) | 0;
                        displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(TuxPlanetSpeedrunAnyPercentLibrary.GameImage.KonqiFireMirrored, Bridge.Int.mul(spriteNum, 32), 0, 32, 32, (((this.xMibi >> 10) - 48) | 0), (((this.yMibi >> 10) - 24) | 0), 0, 384);
                        break;
                    case TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiBossDefeat.Status.B_Jumping: 
                        displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(TuxPlanetSpeedrunAnyPercentLibrary.GameImage.KonqiFireMirrored, 32, 128, 32, 32, (((this.xMibi >> 10) - 48) | 0), (((this.yMibi >> 10) - 24) | 0), 0, 384);
                        break;
                    case TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiBossDefeat.Status.C_Teleporting: 
                        var deltaX = System.Int64(this.xMibi - this.teleportStartingLocation.Item1);
                        var deltaY = System.Int64(this.yMibi - this.teleportStartingLocation.Item2);
                        for (var i1 = Math.max(0, ((System.Nullable.getValue(this.teleportInProgressElapsedMicros) - 50000) | 0)); i1 < System.Nullable.getValue(this.teleportInProgressElapsedMicros); i1 = (i1 + (5000)) | 0) {
                            var renderXMibi = System.Int64.clip32(System.Int64(this.teleportStartingLocation.Item1).add(deltaX.mul(System.Int64(i1)).div(System.Int64(TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiBossDefeat.TELEPORT_DURATION))));
                            var renderYMibi = System.Int64.clip32(System.Int64(this.teleportStartingLocation.Item2).add(deltaY.mul(System.Int64(i1)).div(System.Int64(TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiBossDefeat.TELEPORT_DURATION))));

                            var alpha = (Bridge.Int.div(Bridge.Int.mul((((i1 - (((System.Nullable.getValue(this.teleportInProgressElapsedMicros) - 50000) | 0))) | 0)), 170), 50000)) | 0;

                            if (alpha > 0 && alpha <= 255) {
                                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle((((renderXMibi >> 10) - 20) | 0), (((renderYMibi >> 10) - 20) | 0), 40, 40, new DTLibrary.DTColor.$ctor1(255, 255, 255, alpha), true);
                            }
                        }
                        break;
                    case TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiBossDefeat.Status.D_Finish: 
                        displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(TuxPlanetSpeedrunAnyPercentLibrary.GameImage.KonqiFireMirrored, 32, 128, 32, 32, (((this.xMibi >> 10) - 48) | 0), (((this.yMibi >> 10) - 24) | 0), 0, 384);
                        break;
                    case TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiBossDefeat.Status.E_Disappear: 
                        break;
                    default: 
                        throw new System.Exception();
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiCutscene", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.IEnemy],
        statics: {
            fields: {
                SHOULD_TELEPORT_OUT_DEFAULT_LEVEL_FLAG: null
            },
            ctors: {
                init: function () {
                    this.SHOULD_TELEPORT_OUT_DEFAULT_LEVEL_FLAG = "EnemyKonqiCutscene_shouldTeleportOut_default";
                }
            },
            methods: {
                GetEnemyKonqiCutscene: function (xMibi, yMibi, isFireKonqi, shouldTeleportOutLevelFlag, enemyId) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiCutscene(xMibi >> 10, yMibi >> 10, 0, isFireKonqi, shouldTeleportOutLevelFlag, enemyId);
                }
            }
        },
        fields: {
            x: 0,
            y: 0,
            elapsedMicros: 0,
            isFireKonqi: false,
            shouldTeleportOutLevelFlag: null,
            EnemyId: null
        },
        alias: [
            "EnemyId", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId",
            "GetHitboxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetHitboxes",
            "GetDamageBoxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDamageBoxes",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$Render",
            "GetDeadEnemy", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDeadEnemy"
        ],
        ctors: {
            ctor: function (x, y, elapsedMicros, isFireKonqi, shouldTeleportOutLevelFlag, enemyId) {
                this.$initialize();
                this.x = x;
                this.y = y;
                this.elapsedMicros = elapsedMicros;
                this.isFireKonqi = isFireKonqi;
                this.shouldTeleportOutLevelFlag = shouldTeleportOutLevelFlag;
                this.EnemyId = enemyId;
            }
        },
        methods: {
            GetHitboxes: function () {
                return null;
            },
            GetDamageBoxes: function () {
                return null;
            },
            ProcessFrame: function (cameraX, cameraY, windowWidth, windowHeight, elapsedMicrosPerFrame, tuxState, random, tilemap, levelFlags, soundOutput) {
                var newElapsedMicros = (this.elapsedMicros + elapsedMicrosPerFrame) | 0;

                if (newElapsedMicros > 2000000000) {
                    newElapsedMicros = 1;
                }

                if (this.shouldTeleportOutLevelFlag != null && System.Linq.Enumerable.from(levelFlags).contains(this.shouldTeleportOutLevelFlag)) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(Bridge.fn.bind(this, function (_o1) {
                            _o1.add(TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiDisappear.GetEnemyKonqiDisappear(this.x << 10, this.y << 10, (this.EnemyId || "") + "_konqiDisappear"));
                            return _o1;
                        })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor()), Bridge.fn.bind(this, function (_o2) {
                            _o2.add(this.EnemyId);
                            return _o2;
                        })(new (System.Collections.Generic.List$1(System.String)).ctor()), null);
                }

                return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(Bridge.fn.bind(this, function (_o3) {
                        _o3.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiCutscene(this.x, this.y, newElapsedMicros, this.isFireKonqi, this.shouldTeleportOutLevelFlag, this.EnemyId));
                        return _o3;
                    })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor()), null, null);
            },
            Render: function (displayOutput) {
                var spriteNum = (Bridge.Int.div((this.elapsedMicros % 1000000), 250000)) | 0;

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(this.isFireKonqi ? TuxPlanetSpeedrunAnyPercentLibrary.GameImage.KonqiFireMirrored : TuxPlanetSpeedrunAnyPercentLibrary.GameImage.KonqiMirrored, Bridge.Int.mul(spriteNum, 32), 0, 32, 32, ((this.x - 48) | 0), ((this.y - 24) | 0), 0, 384);
            },
            GetDeadEnemy: function () {
                return null;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiDisappear", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.IEnemy],
        statics: {
            fields: {
                ANIMATION_DURATION: 0
            },
            ctors: {
                init: function () {
                    this.ANIMATION_DURATION = 600000;
                }
            },
            methods: {
                GetEnemyKonqiDisappear: function (xMibi, yMibi, enemyId) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiDisappear(xMibi, yMibi, 0, enemyId);
                }
            }
        },
        fields: {
            xMibi: 0,
            yMibi: 0,
            elapsedMicros: 0,
            EnemyId: null
        },
        alias: [
            "EnemyId", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId",
            "GetHitboxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetHitboxes",
            "GetDamageBoxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDamageBoxes",
            "GetDeadEnemy", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDeadEnemy",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$Render"
        ],
        ctors: {
            ctor: function (xMibi, yMibi, elapsedMicros, enemyId) {
                this.$initialize();
                this.xMibi = xMibi;
                this.yMibi = yMibi;
                this.elapsedMicros = elapsedMicros;
                this.EnemyId = enemyId;
            }
        },
        methods: {
            GetHitboxes: function () {
                return null;
            },
            GetDamageBoxes: function () {
                return null;
            },
            GetDeadEnemy: function () {
                return null;
            },
            ProcessFrame: function (cameraX, cameraY, windowWidth, windowHeight, elapsedMicrosPerFrame, tuxState, random, tilemap, levelFlags, soundOutput) {
                if (this.elapsedMicros > TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiDisappear.ANIMATION_DURATION) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(null, null, null);
                }

                return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(Bridge.fn.bind(this, function (_o1) {
                        _o1.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiDisappear(this.xMibi, this.yMibi, ((this.elapsedMicros + elapsedMicrosPerFrame) | 0), this.EnemyId));
                        return _o1;
                    })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor()), null, null);
            },
            Render: function (displayOutput) {
                var spriteNum = (Bridge.Int.div(this.elapsedMicros, (150000))) | 0;

                if (spriteNum > 3) {
                    spriteNum = 3;
                }

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Flash, Bridge.Int.mul(32, spriteNum), 0, 32, 40, (((this.xMibi >> 10) - 48) | 0), (((this.yMibi >> 10) - 60) | 0), 0, 384);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiFireball", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.IEnemy],
        statics: {
            fields: {
                LEVEL_FLAG_DESPAWN_KONQI_FIREBALLS: null
            },
            ctors: {
                init: function () {
                    this.LEVEL_FLAG_DESPAWN_KONQI_FIREBALLS = "despawnKonqiFireballs";
                }
            },
            methods: {
                GetEnemyKonqiFireball: function (xMibi, yMibi, xSpeedInMibipixelsPerSecond, ySpeedInMibipixelsPerSecond, enemyId) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiFireball(xMibi, yMibi, 0, xSpeedInMibipixelsPerSecond, ySpeedInMibipixelsPerSecond, enemyId);
                }
            }
        },
        fields: {
            xMibi: 0,
            yMibi: 0,
            elapsedMicros: 0,
            xSpeedInMibipixelsPerSecond: 0,
            ySpeedInMibipixelsPerSecond: 0,
            EnemyId: null
        },
        alias: [
            "EnemyId", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId",
            "GetHitboxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetHitboxes",
            "GetDamageBoxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDamageBoxes",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$Render",
            "GetDeadEnemy", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDeadEnemy"
        ],
        ctors: {
            ctor: function (xMibi, yMibi, elapsedMicros, xSpeedInMibipixelsPerSecond, ySpeedInMibipixelsPerSecond, enemyId) {
                this.$initialize();
                this.xMibi = xMibi;
                this.yMibi = yMibi;
                this.elapsedMicros = elapsedMicros;
                this.xSpeedInMibipixelsPerSecond = xSpeedInMibipixelsPerSecond;
                this.ySpeedInMibipixelsPerSecond = ySpeedInMibipixelsPerSecond;
                this.EnemyId = enemyId;
            }
        },
        methods: {
            GetHitboxes: function () {
                return Bridge.fn.bind(this, function (_o1) {
                        _o1.add(new TuxPlanetSpeedrunAnyPercentLibrary.Hitbox((((this.xMibi >> 10) - 18) | 0), (((this.yMibi >> 10) - 18) | 0), 36, 36));
                        return _o1;
                    })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Hitbox)).ctor());
            },
            GetDamageBoxes: function () {
                return null;
            },
            ProcessFrame: function (cameraX, cameraY, windowWidth, windowHeight, elapsedMicrosPerFrame, tuxState, random, tilemap, levelFlags, soundOutput) {
                var shouldDespawn = false;
                for (var i = 0; i < System.Array.getCount(levelFlags, System.String); i = (i + 1) | 0) {
                    if (Bridge.referenceEquals(System.Array.getItem(levelFlags, i, System.String), TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiFireball.LEVEL_FLAG_DESPAWN_KONQI_FIREBALLS)) {
                        shouldDespawn = true;
                        break;
                    }
                }
                if (shouldDespawn) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(Bridge.fn.bind(this, function (_o1) {
                            _o1.add(TuxPlanetSpeedrunAnyPercentLibrary.EnemyDeadPoof.SpawnEnemyDeadPoof(this.xMibi, this.yMibi, (this.EnemyId || "") + "_poof"));
                            return _o1;
                        })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor()), null, null);
                }

                var newXMibi = this.xMibi;
                var newYMibi = this.yMibi;
                var newYSpeedInMibipixelsPerSecond = this.ySpeedInMibipixelsPerSecond;

                newXMibi = (newXMibi + ((Bridge.Int.div(Bridge.Int.mul(((Bridge.Int.div(this.xSpeedInMibipixelsPerSecond, 10000)) | 0), elapsedMicrosPerFrame), 100)) | 0)) | 0;
                newYMibi = (newYMibi + ((Bridge.Int.div(Bridge.Int.mul(((Bridge.Int.div(newYSpeedInMibipixelsPerSecond, 10000)) | 0), elapsedMicrosPerFrame), 100)) | 0)) | 0;

                newYSpeedInMibipixelsPerSecond = (newYSpeedInMibipixelsPerSecond - (Bridge.Int.mul(elapsedMicrosPerFrame, 3))) | 0;

                var newEnemies = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor();

                if (tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(newXMibi >> 10, newYMibi >> 10)) {
                    soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$PlaySound(TuxPlanetSpeedrunAnyPercentLibrary.GameSound.Explosion02);
                    newEnemies.add(TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiFireballExplosion.GetEnemyKonqiFireballExplosion(newXMibi, newYMibi, (this.EnemyId || "") + "_explosion"));
                } else {
                    newEnemies.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiFireball(newXMibi, newYMibi, ((this.elapsedMicros + elapsedMicrosPerFrame) | 0), this.xSpeedInMibipixelsPerSecond, newYSpeedInMibipixelsPerSecond, this.EnemyId));
                }

                return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(newEnemies, null, null);
            },
            Render: function (displayOutput) {
                var spriteNum = (((Bridge.Int.div(this.elapsedMicros, (100000))) | 0)) % 5;

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Flame, Bridge.Int.mul(spriteNum, 14), 0, 14, 20, (((this.xMibi >> 10) - 21) | 0), (((this.yMibi >> 10) - 30) | 0), ((((-DTLibrary.DTMath.ArcTangentScaled(this.xSpeedInMibipixelsPerSecond, this.ySpeedInMibipixelsPerSecond)) | 0) - 11520) | 0), 384);
            },
            GetDeadEnemy: function () {
                return null;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiFireballBlue", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.IEnemy],
        statics: {
            fields: {
                ANGULAR_SPEED_IN_ANGLE_SCALED_PER_SECOND: 0,
                RADIUS_INCREASE_IN_MIBIPIXELS_PER_SECOND: 0,
                LEVEL_FLAG_DESPAWN_KONQI_FIREBALLS_BLUE: null
            },
            ctors: {
                init: function () {
                    this.ANGULAR_SPEED_IN_ANGLE_SCALED_PER_SECOND = 15360;
                    this.RADIUS_INCREASE_IN_MIBIPIXELS_PER_SECOND = 307200;
                    this.LEVEL_FLAG_DESPAWN_KONQI_FIREBALLS_BLUE = "despawnKonqiFireballsBlue";
                }
            },
            methods: {
                GetEnemyKonqiFireballBlue: function (xMibi, yMibi, angleScaled, isRotatingClockwise, enemyId) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiFireballBlue(xMibi, yMibi, xMibi, yMibi, 0, 0, DTLibrary.DTMath.NormalizeDegreesScaled(angleScaled), isRotatingClockwise, enemyId);
                }
            }
        },
        fields: {
            xMibi: 0,
            yMibi: 0,
            centerXMibi: 0,
            centerYMibi: 0,
            elapsedMicros: 0,
            radiusInMibipixels: 0,
            angleScaled: 0,
            isRotatingClockwise: false,
            EnemyId: null
        },
        alias: [
            "EnemyId", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId",
            "GetHitboxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetHitboxes",
            "GetDamageBoxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDamageBoxes",
            "GetDeadEnemy", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDeadEnemy",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$Render"
        ],
        ctors: {
            ctor: function (xMibi, yMibi, centerXMibi, centerYMibi, elapsedMicros, radiusInMibipixels, angleScaled, isRotatingClockwise, enemyId) {
                this.$initialize();
                this.xMibi = xMibi;
                this.yMibi = yMibi;
                this.centerXMibi = centerXMibi;
                this.centerYMibi = centerYMibi;
                this.elapsedMicros = elapsedMicros;
                this.radiusInMibipixels = radiusInMibipixels;
                this.angleScaled = angleScaled;
                this.isRotatingClockwise = isRotatingClockwise;
                this.EnemyId = enemyId;
            }
        },
        methods: {
            GetHitboxes: function () {
                return Bridge.fn.bind(this, function (_o1) {
                        _o1.add(new TuxPlanetSpeedrunAnyPercentLibrary.Hitbox((((this.xMibi >> 10) - 18) | 0), (((this.yMibi >> 10) - 18) | 0), 36, 36));
                        return _o1;
                    })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Hitbox)).ctor());
            },
            GetDamageBoxes: function () {
                return null;
            },
            GetDeadEnemy: function () {
                return null;
            },
            ProcessFrame: function (cameraX, cameraY, windowWidth, windowHeight, elapsedMicrosPerFrame, tuxState, random, tilemap, levelFlags, soundOutput) {
                var shouldDespawn = false;
                for (var i = 0; i < System.Array.getCount(levelFlags, System.String); i = (i + 1) | 0) {
                    if (Bridge.referenceEquals(System.Array.getItem(levelFlags, i, System.String), TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiFireballBlue.LEVEL_FLAG_DESPAWN_KONQI_FIREBALLS_BLUE)) {
                        shouldDespawn = true;
                        break;
                    }
                }
                if (shouldDespawn) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(Bridge.fn.bind(this, function (_o1) {
                            _o1.add(TuxPlanetSpeedrunAnyPercentLibrary.EnemyDeadPoof.SpawnEnemyDeadPoof(this.xMibi, this.yMibi, (this.EnemyId || "") + "_poof"));
                            return _o1;
                        })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor()), null, null);
                }

                var newEnemies = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor();

                var newAngleScaled;
                if (this.isRotatingClockwise) {
                    newAngleScaled = (this.angleScaled - ((Bridge.Int.div(Bridge.Int.mul(15, elapsedMicrosPerFrame), 1000)) | 0)) | 0;
                } else {
                    newAngleScaled = (this.angleScaled + ((Bridge.Int.div(Bridge.Int.mul(15, elapsedMicrosPerFrame), 1000)) | 0)) | 0;
                }
                newAngleScaled = DTLibrary.DTMath.NormalizeDegreesScaled(newAngleScaled);

                var newRadiusInMibipixels = (this.radiusInMibipixels + ((Bridge.Int.div(Bridge.Int.mul(30, elapsedMicrosPerFrame), 100)) | 0)) | 0;

                var newXMibi = (this.centerXMibi + Bridge.Int.mul((newRadiusInMibipixels >> 10), DTLibrary.DTMath.CosineScaled(newAngleScaled))) | 0;
                var newYMibi = (this.centerYMibi + Bridge.Int.mul((newRadiusInMibipixels >> 10), DTLibrary.DTMath.SineScaled(newAngleScaled))) | 0;

                if (newRadiusInMibipixels > 1280000) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(null, null, null);
                }

                newEnemies.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiFireballBlue(newXMibi, newYMibi, this.centerXMibi, this.centerYMibi, ((this.elapsedMicros + elapsedMicrosPerFrame) | 0), newRadiusInMibipixels, newAngleScaled, this.isRotatingClockwise, this.EnemyId));

                return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(newEnemies, null, null);
            },
            Render: function (displayOutput) {
                var spriteNum = (((Bridge.Int.div(this.elapsedMicros, (100000))) | 0)) % 5;

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(TuxPlanetSpeedrunAnyPercentLibrary.GameImage.FlameBlue, Bridge.Int.mul(spriteNum, 14), 0, 14, 20, (((this.xMibi >> 10) - 21) | 0), (((this.yMibi >> 10) - 30) | 0), this.isRotatingClockwise ? ((-this.angleScaled) | 0) : (((((-this.angleScaled) | 0) + 23040) | 0)), 384);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiFireballExplosion", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.IEnemy],
        statics: {
            fields: {
                EXPLOSION_ANIMATION_DURATION: 0
            },
            ctors: {
                init: function () {
                    this.EXPLOSION_ANIMATION_DURATION = 500000;
                }
            },
            methods: {
                GetEnemyKonqiFireballExplosion: function (xMibi, yMibi, enemyId) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiFireballExplosion(xMibi, yMibi, 0, enemyId);
                }
            }
        },
        fields: {
            xMibi: 0,
            yMibi: 0,
            elapsedMicros: 0,
            EnemyId: null
        },
        alias: [
            "EnemyId", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId",
            "GetHitboxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetHitboxes",
            "GetDamageBoxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDamageBoxes",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$Render",
            "GetDeadEnemy", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDeadEnemy"
        ],
        ctors: {
            ctor: function (xMibi, yMibi, elapsedMicros, enemyId) {
                this.$initialize();
                this.xMibi = xMibi;
                this.yMibi = yMibi;
                this.elapsedMicros = elapsedMicros;
                this.EnemyId = enemyId;
            }
        },
        methods: {
            GetHitboxes: function () {
                return Bridge.fn.bind(this, function (_o1) {
                        _o1.add(new TuxPlanetSpeedrunAnyPercentLibrary.Hitbox((((this.xMibi >> 10) - 24) | 0), (((this.yMibi >> 10) - 24) | 0), 48, 48));
                        return _o1;
                    })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Hitbox)).ctor());
            },
            GetDamageBoxes: function () {
                return null;
            },
            ProcessFrame: function (cameraX, cameraY, windowWidth, windowHeight, elapsedMicrosPerFrame, tuxState, random, tilemap, levelFlags, soundOutput) {
                var newElapsedMicros = (this.elapsedMicros + elapsedMicrosPerFrame) | 0;

                if (newElapsedMicros > TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiFireballExplosion.EXPLOSION_ANIMATION_DURATION) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(null, null, null);
                }

                var newEnemies = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor();

                newEnemies.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiFireballExplosion(this.xMibi, this.yMibi, newElapsedMicros, this.EnemyId));

                return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(newEnemies, null, null);
            },
            Render: function (displayOutput) {
                var spriteNum = (Bridge.Int.div(this.elapsedMicros, (100000))) | 0;

                if (spriteNum > 4) {
                    spriteNum = 4;
                }

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(TuxPlanetSpeedrunAnyPercentLibrary.GameImage.ExplodeF, Bridge.Int.mul(spriteNum, 24), 0, 24, 24, (((this.xMibi >> 10) - 36) | 0), (((this.yMibi >> 10) - 36) | 0), 0, 384);
            },
            GetDeadEnemy: function () {
                return null;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemyLevel10Coordinator", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.IEnemy],
        fields: {
            bossRoomXOffsetStart: 0,
            bossRoomXOffsetEnd: 0
        },
        props: {
            EnemyId: {
                get: function () {
                    return "EnemyLevel10Coordinator";
                }
            }
        },
        alias: [
            "EnemyId", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId",
            "GetHitboxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetHitboxes",
            "GetDamageBoxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDamageBoxes",
            "GetDeadEnemy", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDeadEnemy",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$Render"
        ],
        ctors: {
            ctor: function (bossRoomXOffsetStart, bossRoomXOffsetEnd) {
                this.$initialize();
                this.bossRoomXOffsetStart = bossRoomXOffsetStart;
                this.bossRoomXOffsetEnd = bossRoomXOffsetEnd;
            }
        },
        methods: {
            GetHitboxes: function () {
                return null;
            },
            GetDamageBoxes: function () {
                return null;
            },
            GetDeadEnemy: function () {
                return null;
            },
            ProcessFrame: function (cameraX, cameraY, windowWidth, windowHeight, elapsedMicrosPerFrame, tuxState, random, tilemap, levelFlags, soundOutput) {
                var newEnemies = Bridge.fn.bind(this, function (_o1) {
                        _o1.add(this);
                        return _o1;
                    })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor());

                var newlyAddedLevelFlags = new (System.Collections.Generic.List$1(System.String)).ctor();

                if (tuxState.XMibi >= 5996544) {
                    newlyAddedLevelFlags.add(TuxPlanetSpeedrunAnyPercentLibrary.EnemyLevel10EliteSnailPassive.CAN_BECOME_ACTIVE_LEVEL_FLAG);
                }

                if ((tuxState.XMibi >> 10) >= this.bossRoomXOffsetStart) {
                    if ((tuxState.YMibi >> 10) > 915) {
                        newlyAddedLevelFlags.add(TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.BEGIN_YETI_INTRO_CUTSCENE);
                        newlyAddedLevelFlags.add(TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.MARK_YETI_FLOOR_AS_GROUND);
                    }
                }

                return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(newEnemies, null, newlyAddedLevelFlags);
            },
            Render: function (displayOutput) { }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemyLevel10EliteSnailActive", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.IEnemy],
        statics: {
            fields: {
                JUMP_Y_SPEED: 0,
                TELEPORT_DURATION: 0,
                TELEPORT_COOLDOWN: 0
            },
            ctors: {
                init: function () {
                    this.JUMP_Y_SPEED = 1100000;
                    this.TELEPORT_DURATION = 150000;
                    this.TELEPORT_COOLDOWN = 500000;
                }
            },
            methods: {
                GetEnemyLevel10EliteSnailActive: function (xMibi, yMibi, isFacingRight, shouldInitiallyTeleportUpward, elapsedMicros, maxXMibi, enemyId) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyLevel10EliteSnailActive(xMibi, yMibi, isFacingRight, shouldInitiallyTeleportUpward, Bridge.Int.mul(20000, (isFacingRight ? 1 : -1)), 0, 0, null, null, null, false, elapsedMicros, maxXMibi, enemyId);
                },
                IsTeleportable: function (tilemap, x, y, maxXMibi) {
                    return !tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(x, y) && !tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsSpikes(x, y) && !tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsKillZone(x, y) && (x << 10) <= maxXMibi;
                }
            }
        },
        fields: {
            xMibi: 0,
            yMibi: 0,
            isFacingRight: false,
            shouldInitiallyTeleportUpward: null,
            xSpeedInMibipixelsPerSecond: 0,
            ySpeedInMibipixelsPerSecond: 0,
            jumpCooldown: 0,
            teleportStartingLocation: null,
            teleportInProgressElapsedMicros: null,
            teleportCooldown: null,
            hasAlreadyUsedTeleport: false,
            elapsedMicros: 0,
            maxXMibi: 0,
            EnemyId: null
        },
        alias: [
            "EnemyId", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId",
            "GetHitboxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetHitboxes",
            "GetDamageBoxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDamageBoxes",
            "GetDeadEnemy", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDeadEnemy",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$Render"
        ],
        ctors: {
            ctor: function (xMibi, yMibi, isFacingRight, shouldInitiallyTeleportUpward, xSpeedInMibipixelsPerSecond, ySpeedInMibipixelsPerSecond, jumpCooldown, teleportStartingLocation, teleportInProgressElapsedMicros, teleportCooldown, hasAlreadyUsedTeleport, elapsedMicros, maxXMibi, enemyId) {
                this.$initialize();
                this.xMibi = xMibi;
                this.yMibi = yMibi;
                this.isFacingRight = isFacingRight;
                this.shouldInitiallyTeleportUpward = shouldInitiallyTeleportUpward;
                this.xSpeedInMibipixelsPerSecond = xSpeedInMibipixelsPerSecond;
                this.ySpeedInMibipixelsPerSecond = ySpeedInMibipixelsPerSecond;
                this.jumpCooldown = jumpCooldown;
                this.teleportStartingLocation = teleportStartingLocation;
                this.teleportInProgressElapsedMicros = teleportInProgressElapsedMicros;
                this.teleportCooldown = teleportCooldown;
                this.hasAlreadyUsedTeleport = hasAlreadyUsedTeleport;
                this.elapsedMicros = elapsedMicros;
                this.maxXMibi = maxXMibi;
                this.EnemyId = enemyId;
            }
        },
        methods: {
            GetHitboxes: function () {
                if (System.Nullable.hasValue(this.teleportInProgressElapsedMicros)) {
                    return null;
                }

                var list = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Hitbox)).ctor();
                list.add(new TuxPlanetSpeedrunAnyPercentLibrary.Hitbox((((this.xMibi >> 10) - 24) | 0), (((this.yMibi >> 10) - 24) | 0), 48, 42));

                return list;
            },
            GetDamageBoxes: function () {
                if (System.Nullable.hasValue(this.teleportInProgressElapsedMicros)) {
                    return null;
                }

                var list = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Hitbox)).ctor();
                list.add(new TuxPlanetSpeedrunAnyPercentLibrary.Hitbox((((this.xMibi >> 10) - 24) | 0), (((this.yMibi >> 10) - 6) | 0), 48, 24));

                return list;
            },
            GetDeadEnemy: function () {
                var enemyId = this.EnemyId;

                return TuxPlanetSpeedrunAnyPercentLibrary.EnemyDeadPoof.SpawnEnemyDeadPoof(this.xMibi, this.yMibi, (enemyId || "") + "_enemyDeadPoof");
            },
            ProcessFrame_Teleport: function (elapsedMicrosPerFrame) {
                var newTeleportInProgressElapsedMicros = Bridge.Int.clip32(System.Nullable.getValue(this.teleportInProgressElapsedMicros) + elapsedMicrosPerFrame);
                var hasFinishedTeleporting;

                if (System.Nullable.getValue(newTeleportInProgressElapsedMicros) >= TuxPlanetSpeedrunAnyPercentLibrary.EnemyLevel10EliteSnailActive.TELEPORT_DURATION) {
                    hasFinishedTeleporting = true;
                } else {
                    hasFinishedTeleporting = false;
                }

                var list = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor();

                list.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemyLevel10EliteSnailActive(this.xMibi, this.yMibi, this.isFacingRight, this.shouldInitiallyTeleportUpward, this.xSpeedInMibipixelsPerSecond, this.ySpeedInMibipixelsPerSecond, this.jumpCooldown, hasFinishedTeleporting ? null : this.teleportStartingLocation, hasFinishedTeleporting ? null : newTeleportInProgressElapsedMicros, hasFinishedTeleporting ? TuxPlanetSpeedrunAnyPercentLibrary.EnemyLevel10EliteSnailActive.TELEPORT_COOLDOWN : null, hasFinishedTeleporting ? true : false, ((this.elapsedMicros + elapsedMicrosPerFrame) | 0), this.maxXMibi, this.EnemyId));

                return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(list, null, null);
            },
            ProcessFrame: function (cameraX, cameraY, windowWidth, windowHeight, elapsedMicrosPerFrame, tuxState, random, tilemap, levelFlags, soundOutput) {
                if (System.Nullable.hasValue(this.teleportInProgressElapsedMicros)) {
                    return this.ProcessFrame_Teleport(elapsedMicrosPerFrame);
                }

                var list = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor();

                var newElapsedMicros = (this.elapsedMicros + elapsedMicrosPerFrame) | 0;

                if (newElapsedMicros > 2000000000) {
                    newElapsedMicros = 0;
                }

                var tuxXMibi = tuxState.XMibi;
                var tuxYMibi = tuxState.YMibi;

                var newXMibi = this.xMibi;
                var newYMibi = this.yMibi;

                var isMovingRight;
                var isMovingLeft;

                var newJumpCooldown = (this.jumpCooldown - elapsedMicrosPerFrame) | 0;
                if (newJumpCooldown < 0) {
                    newJumpCooldown = 0;
                }

                if (newXMibi > ((tuxXMibi + 30720) | 0)) {
                    isMovingLeft = true;
                    isMovingRight = false;
                } else if (newXMibi < ((tuxXMibi - 30720) | 0)) {
                    isMovingLeft = false;
                    isMovingRight = true;
                } else {
                    isMovingLeft = false;
                    isMovingRight = false;
                }

                var isOnGround = tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(newXMibi >> 10, (((((newYMibi >> 10) - 24) | 0) - 1) | 0)) && !tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(newXMibi >> 10, (((((newYMibi >> 10) - 24) | 0) + 1) | 0)) || tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround((((newXMibi >> 10) - 12) | 0), (((((newYMibi >> 10) - 24) | 0) - 1) | 0)) && !tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround((((newXMibi >> 10) - 12) | 0), (((((newYMibi >> 10) - 24) | 0) + 1) | 0)) || tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround((((newXMibi >> 10) + 12) | 0), (((((newYMibi >> 10) - 24) | 0) - 1) | 0)) && !tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround((((newXMibi >> 10) + 12) | 0), (((((newYMibi >> 10) - 24) | 0) + 1) | 0));

                var newXSpeedInMibipixelsPerSecond = this.xSpeedInMibipixelsPerSecond;
                var newYSpeedInMibipixelsPerSecond = this.ySpeedInMibipixelsPerSecond;

                if (isMovingRight) {
                    newXSpeedInMibipixelsPerSecond = (newXSpeedInMibipixelsPerSecond + (Bridge.Int.mul(elapsedMicrosPerFrame, 3))) | 0;
                }

                if (isMovingLeft) {
                    newXSpeedInMibipixelsPerSecond = (newXSpeedInMibipixelsPerSecond - (Bridge.Int.mul(elapsedMicrosPerFrame, 3))) | 0;
                }

                if (!isMovingRight && !isMovingLeft) {
                    if (newXSpeedInMibipixelsPerSecond > 0) {
                        newXSpeedInMibipixelsPerSecond = (newXSpeedInMibipixelsPerSecond - (Bridge.Int.mul(elapsedMicrosPerFrame, 3))) | 0;
                        if (newXSpeedInMibipixelsPerSecond < 0) {
                            newXSpeedInMibipixelsPerSecond = 0;
                        }
                    }
                    if (newXSpeedInMibipixelsPerSecond < 0) {
                        newXSpeedInMibipixelsPerSecond = (newXSpeedInMibipixelsPerSecond + (Bridge.Int.mul(elapsedMicrosPerFrame, 3))) | 0;
                        if (newXSpeedInMibipixelsPerSecond > 0) {
                            newXSpeedInMibipixelsPerSecond = 0;
                        }
                    }
                }

                if (newXSpeedInMibipixelsPerSecond > 1000000) {
                    newXSpeedInMibipixelsPerSecond = 1000000;
                }

                if (newXSpeedInMibipixelsPerSecond < -1000000) {
                    newXSpeedInMibipixelsPerSecond = -1000000;
                }

                if (newJumpCooldown <= 0 && isOnGround && newYSpeedInMibipixelsPerSecond <= 0) {
                    newYSpeedInMibipixelsPerSecond = TuxPlanetSpeedrunAnyPercentLibrary.EnemyLevel10EliteSnailActive.JUMP_Y_SPEED;
                    newJumpCooldown = 1000000;
                    isOnGround = false;
                }

                if (!isOnGround && newYSpeedInMibipixelsPerSecond >= -3000000) {
                    newYSpeedInMibipixelsPerSecond = (newYSpeedInMibipixelsPerSecond - (Bridge.Int.mul(elapsedMicrosPerFrame, 3))) | 0;
                }

                var proposedNewYMibi = System.Int64.clip32(System.Int64(newYMibi).add(System.Int64(newYSpeedInMibipixelsPerSecond).mul(System.Int64(elapsedMicrosPerFrame)).div(System.Int64(1024)).div(System.Int64(1024))));
                if (newYSpeedInMibipixelsPerSecond > 0) {
                    while (true) {
                        if (tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(((Bridge.Int.div(newXMibi, 1024)) | 0), ((((Bridge.Int.div(proposedNewYMibi, 1024)) | 0) + 24) | 0)) || tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(((((Bridge.Int.div(newXMibi, 1024)) | 0) - 24) | 0), ((((Bridge.Int.div(proposedNewYMibi, 1024)) | 0) + 24) | 0)) || tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(((((Bridge.Int.div(newXMibi, 1024)) | 0) + 24) | 0), ((((Bridge.Int.div(proposedNewYMibi, 1024)) | 0) + 24) | 0))) {
                            newYSpeedInMibipixelsPerSecond = 0;
                            proposedNewYMibi = (proposedNewYMibi - 1024) | 0;
                            if (proposedNewYMibi <= newYMibi) {
                                proposedNewYMibi = newYMibi;
                                break;
                            }
                        } else {
                            break;
                        }
                    }
                }
                if (newYSpeedInMibipixelsPerSecond < 0) {
                    while (true) {
                        if (tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(((Bridge.Int.div(newXMibi, 1024)) | 0), ((((Bridge.Int.div(proposedNewYMibi, 1024)) | 0) - 24) | 0)) || tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(((((Bridge.Int.div(newXMibi, 1024)) | 0) - 24) | 0), ((((Bridge.Int.div(proposedNewYMibi, 1024)) | 0) - 24) | 0)) || tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(((((Bridge.Int.div(newXMibi, 1024)) | 0) + 24) | 0), ((((Bridge.Int.div(proposedNewYMibi, 1024)) | 0) - 24) | 0))) {
                            newYSpeedInMibipixelsPerSecond = 0;
                            proposedNewYMibi = (proposedNewYMibi + 1024) | 0;
                            if (proposedNewYMibi >= newYMibi) {
                                proposedNewYMibi = newYMibi;
                                break;
                            }
                        } else {
                            break;
                        }
                    }
                }

                newYMibi = proposedNewYMibi;

                var proposedNewXMibi = System.Int64.clip32(System.Int64(newXMibi).add(System.Int64(newXSpeedInMibipixelsPerSecond).mul(System.Int64(elapsedMicrosPerFrame)).div(System.Int64(1024)).div(System.Int64(1024))));
                if (newXSpeedInMibipixelsPerSecond > 0) {
                    while (true) {
                        if (tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(((((Bridge.Int.div(proposedNewXMibi, 1024)) | 0) + 24) | 0), ((((Bridge.Int.div(newYMibi, 1024)) | 0) - 24) | 0)) || tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(((((Bridge.Int.div(proposedNewXMibi, 1024)) | 0) + 24) | 0), ((Bridge.Int.div(newYMibi, 1024)) | 0)) || tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(((((Bridge.Int.div(proposedNewXMibi, 1024)) | 0) + 24) | 0), ((((Bridge.Int.div(newYMibi, 1024)) | 0) + 24) | 0))) {
                            newXSpeedInMibipixelsPerSecond = 0;
                            proposedNewXMibi = (proposedNewXMibi - 1024) | 0;
                            if (proposedNewXMibi <= newXMibi) {
                                proposedNewXMibi = newXMibi;
                                break;
                            }
                        } else {
                            break;
                        }
                    }
                }
                if (newXSpeedInMibipixelsPerSecond < 0) {
                    while (true) {
                        if (tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(((((Bridge.Int.div(proposedNewXMibi, 1024)) | 0) - 24) | 0), ((((Bridge.Int.div(newYMibi, 1024)) | 0) - 24) | 0)) || tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(((((Bridge.Int.div(proposedNewXMibi, 1024)) | 0) - 24) | 0), ((Bridge.Int.div(newYMibi, 1024)) | 0)) || tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(((((Bridge.Int.div(proposedNewXMibi, 1024)) | 0) - 24) | 0), ((((Bridge.Int.div(newYMibi, 1024)) | 0) + 24) | 0))) {
                            newXSpeedInMibipixelsPerSecond = 0;
                            proposedNewXMibi = (proposedNewXMibi + 1024) | 0;
                            if (proposedNewXMibi >= newXMibi) {
                                proposedNewXMibi = newXMibi;
                                break;
                            }
                        } else {
                            break;
                        }
                    }
                }

                newXMibi = proposedNewXMibi;

                var newTeleportCooldown = this.teleportCooldown;
                if (newTeleportCooldown != null) {
                    newTeleportCooldown = Bridge.Int.clip32(System.Nullable.getValue(newTeleportCooldown) - elapsedMicrosPerFrame);
                    if (System.Nullable.getValue(newTeleportCooldown) <= 0) {
                        newTeleportCooldown = null;
                    }
                }

                var newShouldInitiallyTeleportUpward = this.shouldInitiallyTeleportUpward;

                var newTeleportStartingLocation = null;
                var newTeleportInProgressElapsedMicros = this.teleportInProgressElapsedMicros;
                if (newTeleportCooldown == null && !this.hasAlreadyUsedTeleport) {
                    newTeleportStartingLocation = { Item1: this.xMibi, Item2: this.yMibi };
                    newTeleportInProgressElapsedMicros = 0;

                    var distanceToTuxX = (tuxXMibi - this.xMibi) | 0;
                    var distanceToTuxY = (tuxYMibi - this.yMibi) | 0;

                    var deltaX;
                    var deltaY;

                    if (System.Nullable.hasValue(newShouldInitiallyTeleportUpward)) {
                        deltaX = random.DTLibrary$IDTRandom$NextInt(3) === 0 ? 0 : (random.DTLibrary$IDTRandom$NextBool() ? -1 : 1);
                        deltaY = System.Nullable.getValue(newShouldInitiallyTeleportUpward) ? 1 : -1;
                        newShouldInitiallyTeleportUpward = null;
                    } else if (distanceToTuxX > 0 && distanceToTuxY > 0 && distanceToTuxX > distanceToTuxY) {
                        deltaX = 1;
                        deltaY = random.DTLibrary$IDTRandom$NextBool() ? 1 : 0;
                    } else if (distanceToTuxX > 0 && distanceToTuxY > 0) {
                        deltaX = random.DTLibrary$IDTRandom$NextBool() ? 1 : 0;
                        deltaY = 1;
                    } else if (distanceToTuxX < 0 && distanceToTuxY > 0 && ((-distanceToTuxX) | 0) > distanceToTuxY) {
                        deltaX = -1;
                        deltaY = random.DTLibrary$IDTRandom$NextBool() ? 1 : 0;
                    } else if (distanceToTuxX < 0 && distanceToTuxY > 0) {
                        deltaX = random.DTLibrary$IDTRandom$NextBool() ? -1 : 0;
                        deltaY = 1;
                    } else if (distanceToTuxX > 0 && distanceToTuxY < 0 && distanceToTuxX > ((-distanceToTuxY) | 0)) {
                        deltaX = 1;
                        deltaY = random.DTLibrary$IDTRandom$NextBool() ? -1 : 0;
                    } else if (distanceToTuxX > 0 && distanceToTuxY < 0) {
                        deltaX = random.DTLibrary$IDTRandom$NextBool() ? 1 : 0;
                        deltaY = -1;
                    } else if (distanceToTuxX < 0 && distanceToTuxY < 0 && ((-distanceToTuxX) | 0) > ((-distanceToTuxY) | 0)) {
                        deltaX = -1;
                        deltaY = random.DTLibrary$IDTRandom$NextBool() ? -1 : 0;
                    } else {
                        deltaX = random.DTLibrary$IDTRandom$NextBool() ? -1 : 0;
                        deltaY = -1;
                    }

                    var interval = 100;

                    if (deltaX === 0 || deltaY === 0) {
                        interval = 141;
                    }

                    while (true) {
                        if (interval === 0) {
                            newTeleportStartingLocation = null;
                            newTeleportInProgressElapsedMicros = null;
                            newTeleportCooldown = TuxPlanetSpeedrunAnyPercentLibrary.EnemyLevel10EliteSnailActive.TELEPORT_COOLDOWN;
                            break;
                        }

                        proposedNewXMibi = (newXMibi + Bridge.Int.mul(Bridge.Int.mul(Bridge.Int.mul(deltaX, 1024), interval), 2)) | 0;
                        proposedNewYMibi = (newYMibi + Bridge.Int.mul(Bridge.Int.mul(Bridge.Int.mul(deltaY, 1024), interval), 2)) | 0;
                        interval = (interval - 1) | 0;

                        if (TuxPlanetSpeedrunAnyPercentLibrary.EnemyLevel10EliteSnailActive.IsTeleportable(tilemap, ((((Bridge.Int.div(proposedNewXMibi, 1024)) | 0) - 24) | 0), ((((Bridge.Int.div(proposedNewYMibi, 1024)) | 0) - 24) | 0), this.maxXMibi) && TuxPlanetSpeedrunAnyPercentLibrary.EnemyLevel10EliteSnailActive.IsTeleportable(tilemap, ((((Bridge.Int.div(proposedNewXMibi, 1024)) | 0) - 24) | 0), ((Bridge.Int.div(proposedNewYMibi, 1024)) | 0), this.maxXMibi) && TuxPlanetSpeedrunAnyPercentLibrary.EnemyLevel10EliteSnailActive.IsTeleportable(tilemap, ((((Bridge.Int.div(proposedNewXMibi, 1024)) | 0) - 24) | 0), ((((Bridge.Int.div(proposedNewYMibi, 1024)) | 0) + 24) | 0), this.maxXMibi) && TuxPlanetSpeedrunAnyPercentLibrary.EnemyLevel10EliteSnailActive.IsTeleportable(tilemap, ((((Bridge.Int.div(proposedNewXMibi, 1024)) | 0) + 24) | 0), ((((Bridge.Int.div(proposedNewYMibi, 1024)) | 0) - 24) | 0), this.maxXMibi) && TuxPlanetSpeedrunAnyPercentLibrary.EnemyLevel10EliteSnailActive.IsTeleportable(tilemap, ((((Bridge.Int.div(proposedNewXMibi, 1024)) | 0) + 24) | 0), ((Bridge.Int.div(proposedNewYMibi, 1024)) | 0), this.maxXMibi) && TuxPlanetSpeedrunAnyPercentLibrary.EnemyLevel10EliteSnailActive.IsTeleportable(tilemap, ((((Bridge.Int.div(proposedNewXMibi, 1024)) | 0) + 24) | 0), ((((Bridge.Int.div(proposedNewYMibi, 1024)) | 0) + 24) | 0), this.maxXMibi)) {
                            newXMibi = proposedNewXMibi;
                            newYMibi = proposedNewYMibi;
                            newXSpeedInMibipixelsPerSecond = Bridge.Int.mul(Bridge.Int.mul(deltaX, 1024), (deltaX === 0 || deltaY === 0 ? 1448 : 1024));
                            newYSpeedInMibipixelsPerSecond = Bridge.Int.mul(Bridge.Int.mul(deltaY, 1024), (deltaX === 0 || deltaY === 0 ? 1448 : 1024));
                            isOnGround = false;
                            soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$PlaySound(TuxPlanetSpeedrunAnyPercentLibrary.GameSound.Teleport);
                            break;
                        }
                    }
                }

                var isOutOfBounds = (((newXMibi >> 10) + 24) | 0) < ((((cameraX - ((Bridge.Int.div(windowWidth, 2)) | 0)) | 0) - TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0) || (((newXMibi >> 10) - 24) | 0) > ((((cameraX + ((Bridge.Int.div(windowWidth, 2)) | 0)) | 0) + TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0) || (((newYMibi >> 10) + 24) | 0) < ((((cameraY - ((Bridge.Int.div(windowHeight, 2)) | 0)) | 0) - TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0) || (((newYMibi >> 10) - 24) | 0) > ((((cameraY + ((Bridge.Int.div(windowHeight, 2)) | 0)) | 0) + TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0);

                if (!isOutOfBounds) {
                    list.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemyLevel10EliteSnailActive(newXMibi, newYMibi, isMovingRight ? true : (isMovingLeft ? false : this.isFacingRight), newShouldInitiallyTeleportUpward, newXSpeedInMibipixelsPerSecond, newYSpeedInMibipixelsPerSecond, newJumpCooldown, newTeleportStartingLocation, newTeleportInProgressElapsedMicros, newTeleportCooldown, this.hasAlreadyUsedTeleport ? !isOnGround : false, newElapsedMicros, this.maxXMibi, this.EnemyId));
                }

                return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(list, null, null);
            },
            Render: function (displayOutput) {
                if (System.Nullable.hasValue(this.teleportInProgressElapsedMicros)) {
                    var deltaX = (this.xMibi - this.teleportStartingLocation.Item1) | 0;
                    var deltaY = (this.yMibi - this.teleportStartingLocation.Item2) | 0;

                    for (var i = Math.max(0, ((System.Nullable.getValue(this.teleportInProgressElapsedMicros) - 50000) | 0)); i < System.Nullable.getValue(this.teleportInProgressElapsedMicros); i = (i + (5000)) | 0) {
                        var renderXMibi = (this.teleportStartingLocation.Item1 + ((Bridge.Int.div(Bridge.Int.mul(deltaX, (i >> 10)), (146))) | 0)) | 0;
                        var renderYMibi = (this.teleportStartingLocation.Item2 + ((Bridge.Int.div(Bridge.Int.mul(deltaY, (i >> 10)), (146))) | 0)) | 0;

                        var alpha = (Bridge.Int.div(Bridge.Int.mul((((i - (((System.Nullable.getValue(this.teleportInProgressElapsedMicros) - 50000) | 0))) | 0)), 170), 50000)) | 0;

                        if (alpha > 0 && alpha <= 255) {
                            displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle((((renderXMibi >> 10) - 20) | 0), (((renderYMibi >> 10) - 20) | 0), 40, 40, new DTLibrary.DTColor.$ctor1(255, 255, 255, alpha), true);
                        }
                    }
                } else {
                    var image = this.isFacingRight ? TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Snail : TuxPlanetSpeedrunAnyPercentLibrary.GameImage.SnailMirrored;

                    var spriteNum = (((Bridge.Int.div(this.elapsedMicros, 250000)) | 0)) % 2;

                    displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(image, Bridge.Int.mul(spriteNum, 16), 0, 16, 16, (((this.xMibi >> 10) - 24) | 0), (((this.yMibi >> 10) - 24) | 0), 0, 384);
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemyLevel10EliteSnailPassive", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.IEnemy],
        statics: {
            fields: {
                CAN_BECOME_ACTIVE_LEVEL_FLAG: null
            },
            ctors: {
                init: function () {
                    this.CAN_BECOME_ACTIVE_LEVEL_FLAG = "EnemyLevel10EliteSnailPassive_canBecomeActive_levelFlag";
                }
            },
            methods: {
                GetEnemyLevel10EliteSnailPassive: function (xMibi, yMibi, isFacingRight, shouldInitiallyTeleportUpward, activationRadiusInPixels, activationDelayInMicroseconds, maxXMibi, enemyId) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyLevel10EliteSnailPassive(xMibi, yMibi, isFacingRight, shouldInitiallyTeleportUpward, 0, false, activationRadiusInPixels, activationDelayInMicroseconds, null, maxXMibi, enemyId);
                },
                IsGroundOrSpike: function (tilemap, x, y) {
                    return tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(x, y) || tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsSpikes(x, y);
                }
            }
        },
        fields: {
            xMibi: 0,
            yMibi: 0,
            isFacingRight: false,
            shouldInitiallyTeleportUpward: false,
            elapsedMicros: 0,
            isActive: false,
            activationRadiusInPixels: 0,
            activationDelayInMicroseconds: 0,
            accumulatedActivationDelay: null,
            maxXMibi: 0,
            EnemyId: null
        },
        alias: [
            "EnemyId", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId",
            "GetHitboxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetHitboxes",
            "GetDamageBoxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDamageBoxes",
            "GetDeadEnemy", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDeadEnemy",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$Render"
        ],
        ctors: {
            ctor: function (xMibi, yMibi, isFacingRight, shouldInitiallyTeleportUpward, elapsedMicros, isActive, activationRadiusInPixels, activationDelayInMicroseconds, accumulatedActivationDelay, maxXMibi, enemyId) {
                this.$initialize();
                this.xMibi = xMibi;
                this.yMibi = yMibi;
                this.isFacingRight = isFacingRight;
                this.shouldInitiallyTeleportUpward = shouldInitiallyTeleportUpward;
                this.elapsedMicros = elapsedMicros;
                this.isActive = isActive;
                this.activationRadiusInPixels = activationRadiusInPixels;
                this.activationDelayInMicroseconds = activationDelayInMicroseconds;
                this.accumulatedActivationDelay = accumulatedActivationDelay;
                this.maxXMibi = maxXMibi;
                this.EnemyId = enemyId;
            }
        },
        methods: {
            GetHitboxes: function () {
                var list = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Hitbox)).ctor();
                list.add(new TuxPlanetSpeedrunAnyPercentLibrary.Hitbox((((this.xMibi >> 10) - 24) | 0), (((this.yMibi >> 10) - 24) | 0), 48, 42));
                return list;
            },
            GetDamageBoxes: function () {
                var list = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Hitbox)).ctor();
                list.add(new TuxPlanetSpeedrunAnyPercentLibrary.Hitbox((((this.xMibi >> 10) - 24) | 0), (((this.yMibi >> 10) - 24) | 0), 48, 42));

                return list;
            },
            GetDeadEnemy: function () {
                var enemyId = this.EnemyId;

                return TuxPlanetSpeedrunAnyPercentLibrary.EnemyDeadPoof.SpawnEnemyDeadPoof(this.xMibi, this.yMibi, (enemyId || "") + "_enemyDeadPoof");
            },
            ProcessFrame: function (cameraX, cameraY, windowWidth, windowHeight, elapsedMicrosPerFrame, tuxState, random, tilemap, levelFlags, soundOutput) {
                var isOutOfBounds = (((this.xMibi >> 10) + 24) | 0) < ((((cameraX - (windowWidth >> 1)) | 0) - TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0) || (((this.xMibi >> 10) - 24) | 0) > ((((cameraX + (windowWidth >> 1)) | 0) + TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0) || (((this.yMibi >> 10) + 24) | 0) < ((((cameraY - (windowHeight >> 1)) | 0) - TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0) || (((this.yMibi >> 10) - 24) | 0) > ((((cameraY + (windowHeight >> 1)) | 0) + TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0);

                if (isOutOfBounds) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(null, null, null);
                }

                var newIsActive = this.isActive;

                var newAccumulatedActivationDelay = this.accumulatedActivationDelay;

                if (!newIsActive) {
                    for (var i = 0; i < System.Array.getCount(levelFlags, System.String); i = (i + 1) | 0) {
                        if (Bridge.referenceEquals(System.Array.getItem(levelFlags, i, System.String), TuxPlanetSpeedrunAnyPercentLibrary.EnemyLevel10EliteSnailPassive.CAN_BECOME_ACTIVE_LEVEL_FLAG)) {
                            newIsActive = true;
                            break;
                        }
                    }
                }

                if (newIsActive && !System.Nullable.hasValue(newAccumulatedActivationDelay)) {
                    var deltaX = ((this.xMibi >> 10) - (tuxState.XMibi >> 10)) | 0;
                    var deltaY = ((this.yMibi >> 10) - (tuxState.YMibi >> 10)) | 0;

                    if (((Bridge.Int.mul(deltaX, deltaX) + Bridge.Int.mul(deltaY, deltaY)) | 0) <= Bridge.Int.mul(this.activationRadiusInPixels, this.activationRadiusInPixels)) {
                        newAccumulatedActivationDelay = 0;
                    }
                }

                if (System.Nullable.hasValue(newAccumulatedActivationDelay)) {
                    newAccumulatedActivationDelay = Bridge.Int.clip32(System.Nullable.getValue(newAccumulatedActivationDelay) + elapsedMicrosPerFrame);
                }

                if (System.Nullable.hasValue(newAccumulatedActivationDelay) && System.Nullable.getValue(newAccumulatedActivationDelay) >= this.activationDelayInMicroseconds) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(Bridge.fn.bind(this, function (_o1) {
                            _o1.add(TuxPlanetSpeedrunAnyPercentLibrary.EnemyLevel10EliteSnailActive.GetEnemyLevel10EliteSnailActive(this.xMibi, this.yMibi, this.isFacingRight, this.shouldInitiallyTeleportUpward, this.elapsedMicros, this.maxXMibi, (this.EnemyId || "") + "_active"));
                            return _o1;
                        })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor()), Bridge.fn.bind(this, function (_o2) {
                            _o2.add(this.EnemyId);
                            return _o2;
                        })(new (System.Collections.Generic.List$1(System.String)).ctor()), null);
                }

                var list = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor();

                var newElapsedMicros = (this.elapsedMicros + elapsedMicrosPerFrame) | 0;

                if (newElapsedMicros > 2000000000) {
                    newElapsedMicros = 0;
                }

                var newXMibi = this.xMibi;
                var newYMibi = this.yMibi;
                var newIsFacingRight = this.isFacingRight;

                if (this.isFacingRight) {
                    newXMibi = (newXMibi + (((Bridge.Int.div(Bridge.Int.mul(elapsedMicrosPerFrame, 20), 1000)) | 0))) | 0;
                } else {
                    newXMibi = (newXMibi - (((Bridge.Int.div(Bridge.Int.mul(elapsedMicrosPerFrame, 20), 1000)) | 0))) | 0;
                }

                if (newIsFacingRight) {
                    if (TuxPlanetSpeedrunAnyPercentLibrary.EnemyLevel10EliteSnailPassive.IsGroundOrSpike(tilemap, (((newXMibi >> 10) + 24) | 0), newYMibi >> 10)) {
                        newIsFacingRight = false;
                    }
                    if (!TuxPlanetSpeedrunAnyPercentLibrary.EnemyLevel10EliteSnailPassive.IsGroundOrSpike(tilemap, (((newXMibi >> 10) + 12) | 0), (((newYMibi >> 10) - 33) | 0))) {
                        newIsFacingRight = false;
                    }
                } else {
                    if (TuxPlanetSpeedrunAnyPercentLibrary.EnemyLevel10EliteSnailPassive.IsGroundOrSpike(tilemap, (((newXMibi >> 10) - 24) | 0), newYMibi >> 10)) {
                        newIsFacingRight = true;
                    }
                    if (!TuxPlanetSpeedrunAnyPercentLibrary.EnemyLevel10EliteSnailPassive.IsGroundOrSpike(tilemap, (((newXMibi >> 10) - 12) | 0), (((newYMibi >> 10) - 33) | 0))) {
                        newIsFacingRight = true;
                    }
                }

                list.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemyLevel10EliteSnailPassive(newXMibi, newYMibi, newIsFacingRight, this.shouldInitiallyTeleportUpward, newElapsedMicros, newIsActive, this.activationRadiusInPixels, this.activationDelayInMicroseconds, newAccumulatedActivationDelay, this.maxXMibi, this.EnemyId));

                return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(list, null, null);
            },
            Render: function (displayOutput) {
                var image = this.isFacingRight ? TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Snail : TuxPlanetSpeedrunAnyPercentLibrary.GameImage.SnailMirrored;

                var spriteNum = (((Bridge.Int.div(this.elapsedMicros, 250000)) | 0)) % 2;

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(image, Bridge.Int.mul(spriteNum, 16), 0, 16, 16, (((this.xMibi >> 10) - 24) | 0), (((this.yMibi >> 10) - 24) | 0), 0, 384);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemyLevel10EliteSnailPassive.EnemyLevel10EliteSnailSpawn", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.Tilemap.IExtraEnemyToSpawn],
        $kind: "nested class",
        fields: {
            xMibi: 0,
            yMibi: 0,
            activationRadiusInPixels: 0,
            activationDelayInMicroseconds: 0,
            shouldInitiallyTeleportUpward: false,
            maxXMibi: 0,
            enemyId: null
        },
        alias: ["GetEnemy", "TuxPlanetSpeedrunAnyPercentLibrary$Tilemap$IExtraEnemyToSpawn$GetEnemy"],
        ctors: {
            ctor: function (xMibi, yMibi, activationRadiusInPixels, activationDelayInMicroseconds, shouldInitiallyTeleportUpward, maxXMibi, enemyId) {
                this.$initialize();
                this.xMibi = xMibi;
                this.yMibi = yMibi;
                this.activationRadiusInPixels = activationRadiusInPixels;
                this.activationDelayInMicroseconds = activationDelayInMicroseconds;
                this.shouldInitiallyTeleportUpward = shouldInitiallyTeleportUpward;
                this.maxXMibi = maxXMibi;
                this.enemyId = enemyId;
            }
        },
        methods: {
            GetEnemy: function (xOffset, yOffset) {
                return new TuxPlanetSpeedrunAnyPercentLibrary.EnemySpawnHelper(TuxPlanetSpeedrunAnyPercentLibrary.EnemyLevel10EliteSnailPassive.GetEnemyLevel10EliteSnailPassive(((this.xMibi + (xOffset << 10)) | 0), ((this.yMibi + (yOffset << 10)) | 0), false, this.shouldInitiallyTeleportUpward, this.activationRadiusInPixels, this.activationDelayInMicroseconds, this.maxXMibi, this.enemyId), ((this.xMibi + (xOffset << 10)) | 0), ((this.yMibi + (yOffset << 10)) | 0), 48, 48);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemyLevel5Spikes", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.IEnemy],
        statics: {
            fields: {
                NUM_PIXELS_BETWEEN_SPIKES: 0
            },
            ctors: {
                init: function () {
                    this.NUM_PIXELS_BETWEEN_SPIKES = 4000;
                }
            },
            methods: {
                GetEnemyLevel5Spikes: function (xMibi, startingXMibi, endingXMibi, yMibiBottom, heightInTiles, enemyIdPrefix, enemyId) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyLevel5Spikes(xMibi, yMibiBottom, heightInTiles, startingXMibi, endingXMibi, false, null, enemyIdPrefix, 1, enemyId);
                }
            }
        },
        fields: {
            xMibi: 0,
            yMibiBottom: 0,
            heightInTiles: 0,
            startingXMibi: 0,
            endingXMibi: 0,
            hasSpawnedNextEnemy: false,
            isVisible: null,
            enemyIdPrefix: null,
            enemyGeneratorCounter: 0,
            EnemyId: null
        },
        alias: [
            "EnemyId", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId",
            "GetDeadEnemy", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDeadEnemy",
            "GetHitboxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetHitboxes",
            "GetDamageBoxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDamageBoxes",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$Render"
        ],
        ctors: {
            ctor: function (xMibi, yMibiBottom, heightInTiles, startingXMibi, endingXMibi, hasSpawnedNextEnemy, isVisible, enemyIdPrefix, enemyGeneratorCounter, enemyId) {
                this.$initialize();
                this.xMibi = xMibi;
                this.yMibiBottom = yMibiBottom;
                this.heightInTiles = heightInTiles;
                this.startingXMibi = startingXMibi;
                this.endingXMibi = endingXMibi;
                this.hasSpawnedNextEnemy = hasSpawnedNextEnemy;
                this.isVisible = isVisible;
                this.enemyIdPrefix = enemyIdPrefix;
                this.enemyGeneratorCounter = enemyGeneratorCounter;
                this.EnemyId = enemyId;
            }
        },
        methods: {
            GetDeadEnemy: function () {
                return null;
            },
            GetHitboxes: function () {
                if (!System.Nullable.hasValue(this.isVisible) || System.Nullable.getValue(this.isVisible) === false) {
                    return null;
                }

                return Bridge.fn.bind(this, function (_o1) {
                        _o1.add(new TuxPlanetSpeedrunAnyPercentLibrary.Hitbox((((this.xMibi >> 10) - 24) | 0), this.yMibiBottom >> 10, 48, Bridge.Int.mul(48, this.heightInTiles)));
                        return _o1;
                    })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Hitbox)).ctor());
            },
            GetDamageBoxes: function () {
                return null;
            },
            ProcessFrame: function (cameraX, cameraY, windowWidth, windowHeight, elapsedMicrosPerFrame, tuxState, random, tilemap, levelFlags, soundOutput) {
                var list = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor();

                var newXMibi = (this.xMibi - ((Bridge.Int.div(Bridge.Int.mul(elapsedMicrosPerFrame, 400), 1000)) | 0)) | 0;

                var hasExitedLevel = newXMibi < this.endingXMibi;

                var newIsVisible;

                if (System.Nullable.hasValue(this.isVisible)) {
                    newIsVisible = System.Nullable.getValue(this.isVisible);
                } else {
                    newIsVisible = ((cameraX + (windowWidth >> 1)) | 0) < (((this.xMibi >> 10) - 24) | 0);
                }

                var newHasSpawnedNextEnemy = this.hasSpawnedNextEnemy;

                if (!newHasSpawnedNextEnemy) {
                    if (((this.startingXMibi - this.xMibi) | 0) > (4096000)) {
                        newHasSpawnedNextEnemy = true;
                        list.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemyLevel5Spikes(((this.xMibi + (4096000)) | 0), this.yMibiBottom, this.heightInTiles, this.startingXMibi, this.endingXMibi, false, null, this.enemyIdPrefix, ((this.enemyGeneratorCounter + 1) | 0), (this.enemyIdPrefix || "") + (DTLibrary.StringUtil.ToStringCultureInvariant(this.enemyGeneratorCounter) || "")));
                    }
                }

                if (!hasExitedLevel) {
                    list.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemyLevel5Spikes(newXMibi, this.yMibiBottom, this.heightInTiles, this.startingXMibi, this.endingXMibi, newHasSpawnedNextEnemy, newIsVisible, this.enemyIdPrefix, this.enemyGeneratorCounter, this.EnemyId));
                }

                return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(list, null, null);
            },
            Render: function (displayOutput) {
                if (!System.Nullable.hasValue(this.isVisible) || System.Nullable.getValue(this.isVisible) === false) {
                    return;
                }

                var y = this.yMibiBottom >> 10;
                var x = ((this.xMibi >> 10) - 24) | 0;

                for (var i = 0; i < this.heightInTiles; i = (i + 1) | 0) {
                    displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Spikes, 0, 0, 16, 16, x, y, 0, 384);

                    y = (y + (48)) | 0;
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemyLevel5SpikesInitialSpawn", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.IEnemy],
        statics: {
            methods: {
                GetEnemyLevel5SpikesInitialSpawn: function (xMibi, startingXMibi, endingXMibi, yMibiBottom, heightInTiles, enemyIdPrefix, enemyId) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyLevel5SpikesInitialSpawn(TuxPlanetSpeedrunAnyPercentLibrary.EnemyLevel5Spikes.GetEnemyLevel5Spikes(xMibi, startingXMibi, endingXMibi, yMibiBottom, heightInTiles, enemyIdPrefix, (enemyId || "") + "spikes"), false, (enemyId || "") + "initialSpawn");
                }
            }
        },
        fields: {
            enemyLevel5Spikes: null,
            hasSpawnedSpikes: false,
            EnemyId: null
        },
        alias: [
            "EnemyId", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId",
            "GetDeadEnemy", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDeadEnemy",
            "GetHitboxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetHitboxes",
            "GetDamageBoxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDamageBoxes",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$Render"
        ],
        ctors: {
            ctor: function (enemyLevel5Spikes, hasSpawnedSpikes, enemyId) {
                this.$initialize();
                this.enemyLevel5Spikes = enemyLevel5Spikes;
                this.hasSpawnedSpikes = hasSpawnedSpikes;
                this.EnemyId = enemyId;
            }
        },
        methods: {
            GetDeadEnemy: function () {
                return null;
            },
            GetHitboxes: function () {
                return null;
            },
            GetDamageBoxes: function () {
                return null;
            },
            ProcessFrame: function (cameraX, cameraY, windowWidth, windowHeight, elapsedMicrosPerFrame, tuxState, random, tilemap, levelFlags, soundOutput) {
                if (this.hasSpawnedSpikes) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(Bridge.fn.bind(this, function (_o1) {
                            _o1.add(this);
                            return _o1;
                        })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor()), null, null);
                }

                return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(Bridge.fn.bind(this, function (_o2) {
                        _o2.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemyLevel5SpikesInitialSpawn(this.enemyLevel5Spikes, true, this.EnemyId));
                        _o2.add(this.enemyLevel5Spikes);
                        return _o2;
                    })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor()), null, null);
            },
            Render: function (displayOutput) { }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemyLevel8Fish", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.IEnemy],
        statics: {
            methods: {
                SpawnLevel8Fish: function (x, y, isFacingRight, fishImage, fishImageMirrored, enemyId) {
                    var xSpeed = 102400;

                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyLevel8Fish(x << 10, y << 10, isFacingRight ? xSpeed : ((-xSpeed) | 0), 0, 0, 0, fishImage, fishImageMirrored, enemyId);
                }
            }
        },
        fields: {
            xMibi: 0,
            yMibi: 0,
            xSpeedInMibipixelsPerSecond: 0,
            ySpeedInMibipixelsPerSecond: 0,
            elapsedMicros: 0,
            changeYSpeedCooldown: 0,
            fishImage: 0,
            fishImageMirrored: 0,
            EnemyId: null
        },
        alias: [
            "EnemyId", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId",
            "GetHitboxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetHitboxes",
            "GetDamageBoxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDamageBoxes",
            "GetDeadEnemy", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDeadEnemy",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$Render"
        ],
        ctors: {
            ctor: function (xMibi, yMibi, xSpeedInMibipixelsPerSecond, ySpeedInMibipixelsPerSecond, elapsedMicros, changeYSpeedCooldown, fishImage, fishImageMirrored, enemyId) {
                this.$initialize();
                this.xMibi = xMibi;
                this.yMibi = yMibi;
                this.xSpeedInMibipixelsPerSecond = xSpeedInMibipixelsPerSecond;
                this.ySpeedInMibipixelsPerSecond = ySpeedInMibipixelsPerSecond;
                this.elapsedMicros = elapsedMicros;
                this.changeYSpeedCooldown = changeYSpeedCooldown;
                this.fishImage = fishImage;
                this.fishImageMirrored = fishImageMirrored;
                this.EnemyId = enemyId;
            }
        },
        methods: {
            GetHitboxes: function () {
                return null;
            },
            GetDamageBoxes: function () {
                return null;
            },
            GetDeadEnemy: function () {
                return null;
            },
            ProcessFrame: function (cameraX, cameraY, windowWidth, windowHeight, elapsedMicrosPerFrame, tuxState, random, tilemap, levelFlags, soundOutput) {
                var newElapsedMicros = (this.elapsedMicros + elapsedMicrosPerFrame) | 0;
                if (newElapsedMicros > 2000000000) {
                    newElapsedMicros = 1;
                }

                var newXMibi = this.xMibi;
                var newYMibi = this.yMibi;
                var newXSpeedInMibipixelsPerSecond = this.xSpeedInMibipixelsPerSecond;
                var newYSpeedInMibipixelsPerSecond = this.ySpeedInMibipixelsPerSecond;

                var newChangeYSpeedCooldown = (this.changeYSpeedCooldown - elapsedMicrosPerFrame) | 0;

                if (newChangeYSpeedCooldown < 0) {
                    newYSpeedInMibipixelsPerSecond = (((newYSpeedInMibipixelsPerSecond + random.DTLibrary$IDTRandom$NextInt(40960)) | 0) - 20480) | 0;
                    newChangeYSpeedCooldown = (100000 + random.DTLibrary$IDTRandom$NextInt(1000000)) | 0;

                    if (newYSpeedInMibipixelsPerSecond > 51200) {
                        newYSpeedInMibipixelsPerSecond = 51200;
                    }
                    if (newYSpeedInMibipixelsPerSecond < -51200) {
                        newYSpeedInMibipixelsPerSecond = -51200;
                    }
                }

                newXMibi = System.Int64.clip32(System.Int64(newXMibi).add(System.Int64(this.xSpeedInMibipixelsPerSecond).mul(System.Int64(elapsedMicrosPerFrame)).div(System.Int64(1000)).div(System.Int64(1000))));
                newYMibi = System.Int64.clip32(System.Int64(newYMibi).add(System.Int64(this.ySpeedInMibipixelsPerSecond).mul(System.Int64(elapsedMicrosPerFrame)).div(System.Int64(1000)).div(System.Int64(1000))));

                if (newXMibi > 3932160) {
                    newXMibi = -147456;
                }
                if (newXMibi < -245760) {
                    newXMibi = 3833856;
                }

                if (newYMibi > 344064) {
                    newYSpeedInMibipixelsPerSecond = (newYSpeedInMibipixelsPerSecond - 20480) | 0;
                    newYMibi = 344064;
                }

                if (newYMibi < -49152) {
                    newYSpeedInMibipixelsPerSecond = (newYSpeedInMibipixelsPerSecond + 20480) | 0;
                    newYMibi = -49152;
                }

                return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(Bridge.fn.bind(this, function (_o1) {
                        _o1.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemyLevel8Fish(newXMibi, newYMibi, newXSpeedInMibipixelsPerSecond, newYSpeedInMibipixelsPerSecond, newElapsedMicros, newChangeYSpeedCooldown, this.fishImage, this.fishImageMirrored, this.EnemyId));
                        return _o1;
                    })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor()), null, null);
            },
            Render: function (displayOutput) {
                var spriteNum = (((Bridge.Int.div(this.elapsedMicros, (100000))) | 0)) % 4;

                var isFacingRight = this.xSpeedInMibipixelsPerSecond > 0;

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(isFacingRight ? this.fishImage : this.fishImageMirrored, Bridge.Int.mul(spriteNum, 28), 0, 28, 20, (((this.xMibi >> 10) - 42) | 0), (((this.yMibi >> 10) - 30) | 0), 0, 384);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemyLevel8WaterAnimation", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.IEnemy],
        fields: {
            elapsedMicros: 0,
            EnemyId: null
        },
        alias: [
            "EnemyId", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId",
            "GetHitboxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetHitboxes",
            "GetDamageBoxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDamageBoxes",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$Render",
            "GetDeadEnemy", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDeadEnemy"
        ],
        ctors: {
            ctor: function (elapsedMicros, enemyId) {
                this.$initialize();
                this.elapsedMicros = elapsedMicros;
                this.EnemyId = enemyId;
            }
        },
        methods: {
            GetHitboxes: function () {
                return null;
            },
            GetDamageBoxes: function () {
                return null;
            },
            ProcessFrame: function (cameraX, cameraY, windowWidth, windowHeight, elapsedMicrosPerFrame, tuxState, random, tilemap, levelFlags, soundOutput) {
                var newElapsedMicros = (this.elapsedMicros + elapsedMicrosPerFrame) | 0;

                if (newElapsedMicros > 2000000000) {
                    newElapsedMicros = 1;
                }

                return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(Bridge.fn.bind(this, function (_o1) {
                        _o1.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemyLevel8WaterAnimation(newElapsedMicros, this.EnemyId));
                        return _o1;
                    })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor()), null, null);
            },
            Render: function (displayOutput) {
                var spriteNum = (((Bridge.Int.div(this.elapsedMicros, (100000))) | 0)) % 4;

                for (var i = 0; i < 75; i = (i + 1) | 0) {
                    spriteNum = (((spriteNum + 1) | 0)) % 4;

                    displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(TuxPlanetSpeedrunAnyPercentLibrary.GameImage.WaterSurface, Bridge.Int.mul(spriteNum, 16), 0, 16, 4, Bridge.Int.mul(i, 48), 384, 0, 384);
                }

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle(0, 0, 3600, 384, new DTLibrary.DTColor.$ctor1(96, 152, 248, 128), true);
            },
            GetDeadEnemy: function () {
                return null;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemyOrange", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.IEnemy],
        statics: {
            methods: {
                GetEnemyOrange: function (xMibi, yMibi, isFacingRight, enemyId) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyOrange(xMibi, yMibi, Bridge.Int.mul(150000, (isFacingRight ? 1 : -1)), 0, 0, enemyId);
                },
                IsGroundOrSpike: function (tilemap, x, y) {
                    return tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(x, y) || tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsSpikes(x, y);
                }
            }
        },
        fields: {
            xMibi: 0,
            yMibi: 0,
            xSpeedInMibipixelsPerSecond: 0,
            ySpeedInMibipixelsPerSecond: 0,
            elapsedMicros: 0,
            EnemyId: null
        },
        alias: [
            "EnemyId", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId",
            "GetHitboxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetHitboxes",
            "GetDamageBoxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDamageBoxes",
            "GetDeadEnemy", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDeadEnemy",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$Render"
        ],
        ctors: {
            ctor: function (xMibi, yMibi, xSpeedInMibipixelsPerSecond, ySpeedInMibipixelsPerSecond, elapsedMicros, enemyId) {
                this.$initialize();
                this.xMibi = xMibi;
                this.yMibi = yMibi;
                this.xSpeedInMibipixelsPerSecond = xSpeedInMibipixelsPerSecond;
                this.ySpeedInMibipixelsPerSecond = ySpeedInMibipixelsPerSecond;
                this.elapsedMicros = elapsedMicros;
                this.EnemyId = enemyId;
            }
        },
        methods: {
            GetHitboxes: function () {
                return Bridge.fn.bind(this, function (_o1) {
                        _o1.add(new TuxPlanetSpeedrunAnyPercentLibrary.Hitbox((((this.xMibi >> 10) - 18) | 0), (((this.yMibi >> 10) - 18) | 0), 36, 36));
                        return _o1;
                    })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Hitbox)).ctor());
            },
            GetDamageBoxes: function () {
                return Bridge.fn.bind(this, function (_o1) {
                        _o1.add(new TuxPlanetSpeedrunAnyPercentLibrary.Hitbox((((this.xMibi >> 10) - 21) | 0), (((this.yMibi >> 10) - 21) | 0), 42, 42));
                        return _o1;
                    })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Hitbox)).ctor());
            },
            GetDeadEnemy: function () {
                return TuxPlanetSpeedrunAnyPercentLibrary.EnemyDeadPoof.SpawnEnemyDeadPoof(this.xMibi, this.yMibi, (this.EnemyId || "") + "_enemyDeadPoof");
            },
            ProcessFrame: function (cameraX, cameraY, windowWidth, windowHeight, elapsedMicrosPerFrame, tuxState, random, tilemap, levelFlags, soundOutput) {
                var list = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor();

                var x = this.xMibi >> 10;
                var y = this.yMibi >> 10;

                var newXMibi = this.xMibi;
                var newYMibi = this.yMibi;
                var newXSpeedInMibipixelsPerSecond = this.xSpeedInMibipixelsPerSecond;
                var newYSpeedInMibipixelsPerSecond = this.ySpeedInMibipixelsPerSecond;

                var isOnGround = TuxPlanetSpeedrunAnyPercentLibrary.EnemyOrange.IsGroundOrSpike(tilemap, x, ((((y - 24) | 0) - 1) | 0)) && !TuxPlanetSpeedrunAnyPercentLibrary.EnemyOrange.IsGroundOrSpike(tilemap, x, ((y - 24) | 0)) || TuxPlanetSpeedrunAnyPercentLibrary.EnemyOrange.IsGroundOrSpike(tilemap, ((x - 18) | 0), ((((y - 24) | 0) - 1) | 0)) && !TuxPlanetSpeedrunAnyPercentLibrary.EnemyOrange.IsGroundOrSpike(tilemap, ((x - 18) | 0), ((y - 24) | 0)) || TuxPlanetSpeedrunAnyPercentLibrary.EnemyOrange.IsGroundOrSpike(tilemap, ((x + 18) | 0), ((((y - 24) | 0) - 1) | 0)) && !TuxPlanetSpeedrunAnyPercentLibrary.EnemyOrange.IsGroundOrSpike(tilemap, ((x + 18) | 0), ((y - 24) | 0));

                if (isOnGround) {
                    newYSpeedInMibipixelsPerSecond = 1050000;
                } else {
                    newYSpeedInMibipixelsPerSecond = (newYSpeedInMibipixelsPerSecond - (Bridge.Int.mul(elapsedMicrosPerFrame, 3))) | 0;
                }

                if (newYSpeedInMibipixelsPerSecond < -2000000) {
                    newYSpeedInMibipixelsPerSecond = -2000000;
                }

                var proposedNewYMibi = System.Int64.clip32(System.Int64(newYMibi).add(System.Int64(newYSpeedInMibipixelsPerSecond).mul(System.Int64(elapsedMicrosPerFrame)).div(System.Int64(1000)).div(System.Int64(1000))));
                if (newYSpeedInMibipixelsPerSecond > 0) {
                    while (true) {
                        if (TuxPlanetSpeedrunAnyPercentLibrary.EnemyOrange.IsGroundOrSpike(tilemap, ((Bridge.Int.div(newXMibi, 1024)) | 0), ((((Bridge.Int.div(proposedNewYMibi, 1024)) | 0) + 24) | 0)) || TuxPlanetSpeedrunAnyPercentLibrary.EnemyOrange.IsGroundOrSpike(tilemap, ((((Bridge.Int.div(newXMibi, 1024)) | 0) - 24) | 0), ((((Bridge.Int.div(proposedNewYMibi, 1024)) | 0) + 24) | 0)) || TuxPlanetSpeedrunAnyPercentLibrary.EnemyOrange.IsGroundOrSpike(tilemap, ((((Bridge.Int.div(newXMibi, 1024)) | 0) + 24) | 0), ((((Bridge.Int.div(proposedNewYMibi, 1024)) | 0) + 24) | 0))) {
                            newYSpeedInMibipixelsPerSecond = 0;
                            proposedNewYMibi = (proposedNewYMibi - 1024) | 0;
                            if (proposedNewYMibi <= newYMibi) {
                                proposedNewYMibi = newYMibi;
                                break;
                            }
                        } else {
                            break;
                        }
                    }
                }
                if (newYSpeedInMibipixelsPerSecond < 0) {
                    while (true) {
                        if (TuxPlanetSpeedrunAnyPercentLibrary.EnemyOrange.IsGroundOrSpike(tilemap, ((Bridge.Int.div(newXMibi, 1024)) | 0), ((((Bridge.Int.div(proposedNewYMibi, 1024)) | 0) - 24) | 0)) || TuxPlanetSpeedrunAnyPercentLibrary.EnemyOrange.IsGroundOrSpike(tilemap, ((((Bridge.Int.div(newXMibi, 1024)) | 0) - 24) | 0), ((((Bridge.Int.div(proposedNewYMibi, 1024)) | 0) - 24) | 0)) || TuxPlanetSpeedrunAnyPercentLibrary.EnemyOrange.IsGroundOrSpike(tilemap, ((((Bridge.Int.div(newXMibi, 1024)) | 0) + 24) | 0), ((((Bridge.Int.div(proposedNewYMibi, 1024)) | 0) - 24) | 0))) {
                            newYSpeedInMibipixelsPerSecond = 0;
                            proposedNewYMibi = (proposedNewYMibi + 1024) | 0;
                            if (proposedNewYMibi >= newYMibi) {
                                proposedNewYMibi = newYMibi;
                                break;
                            }
                        } else {
                            break;
                        }
                    }
                }

                newYMibi = proposedNewYMibi;

                var proposedNewXMibi = System.Int64.clip32(System.Int64(newXMibi).add(System.Int64(newXSpeedInMibipixelsPerSecond).mul(System.Int64(elapsedMicrosPerFrame)).div(System.Int64(1000)).div(System.Int64(1000))));
                if (newXSpeedInMibipixelsPerSecond > 0) {
                    while (true) {
                        if (TuxPlanetSpeedrunAnyPercentLibrary.EnemyOrange.IsGroundOrSpike(tilemap, ((((Bridge.Int.div(proposedNewXMibi, 1024)) | 0) + 24) | 0), ((((Bridge.Int.div(newYMibi, 1024)) | 0) - 24) | 0)) || TuxPlanetSpeedrunAnyPercentLibrary.EnemyOrange.IsGroundOrSpike(tilemap, ((((Bridge.Int.div(proposedNewXMibi, 1024)) | 0) + 24) | 0), ((Bridge.Int.div(newYMibi, 1024)) | 0)) || TuxPlanetSpeedrunAnyPercentLibrary.EnemyOrange.IsGroundOrSpike(tilemap, ((((Bridge.Int.div(proposedNewXMibi, 1024)) | 0) + 24) | 0), ((((Bridge.Int.div(newYMibi, 1024)) | 0) + 24) | 0))) {
                            proposedNewXMibi = (proposedNewXMibi - 1024) | 0;
                            if (proposedNewXMibi <= newXMibi) {
                                proposedNewXMibi = newXMibi;
                                break;
                            }
                        } else {
                            break;
                        }
                    }
                }
                if (newXSpeedInMibipixelsPerSecond < 0) {
                    while (true) {
                        if (TuxPlanetSpeedrunAnyPercentLibrary.EnemyOrange.IsGroundOrSpike(tilemap, ((((Bridge.Int.div(proposedNewXMibi, 1024)) | 0) - 24) | 0), ((((Bridge.Int.div(newYMibi, 1024)) | 0) - 24) | 0)) || TuxPlanetSpeedrunAnyPercentLibrary.EnemyOrange.IsGroundOrSpike(tilemap, ((((Bridge.Int.div(proposedNewXMibi, 1024)) | 0) - 24) | 0), ((Bridge.Int.div(newYMibi, 1024)) | 0)) || TuxPlanetSpeedrunAnyPercentLibrary.EnemyOrange.IsGroundOrSpike(tilemap, ((((Bridge.Int.div(proposedNewXMibi, 1024)) | 0) - 24) | 0), ((((Bridge.Int.div(newYMibi, 1024)) | 0) + 24) | 0))) {
                            proposedNewXMibi = (proposedNewXMibi + 1024) | 0;
                            if (proposedNewXMibi >= newXMibi) {
                                proposedNewXMibi = newXMibi;
                                break;
                            }
                        } else {
                            break;
                        }
                    }
                }

                newXMibi = proposedNewXMibi;

                if (newXSpeedInMibipixelsPerSecond > 0) {
                    if (newXMibi <= this.xMibi) {
                        newXSpeedInMibipixelsPerSecond = (-newXSpeedInMibipixelsPerSecond) | 0;
                    }
                } else {
                    if (newXMibi >= this.xMibi) {
                        newXSpeedInMibipixelsPerSecond = (-newXSpeedInMibipixelsPerSecond) | 0;
                    }
                }

                var newElapsedMicros = (this.elapsedMicros + elapsedMicrosPerFrame) | 0;
                if (newElapsedMicros > 2000000000) {
                    newElapsedMicros = 1;
                }

                var isOutOfBounds = (((this.xMibi >> 10) + 24) | 0) < ((((cameraX - (windowWidth >> 1)) | 0) - TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0) || (((this.xMibi >> 10) - 24) | 0) > ((((cameraX + (windowWidth >> 1)) | 0) + TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0) || (((this.yMibi >> 10) + 24) | 0) < ((((cameraY - (windowHeight >> 1)) | 0) - TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0) || (((this.yMibi >> 10) - 24) | 0) > ((((cameraY + (windowHeight >> 1)) | 0) + TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0);

                if (!isOutOfBounds) {
                    list.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemyOrange(newXMibi, newYMibi, newXSpeedInMibipixelsPerSecond, newYSpeedInMibipixelsPerSecond, newElapsedMicros, this.EnemyId));
                }

                return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(list, null, null);
            },
            Render: function (displayOutput) {
                var isFacingRight = this.xSpeedInMibipixelsPerSecond > 0;

                var image = isFacingRight ? TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Orange : TuxPlanetSpeedrunAnyPercentLibrary.GameImage.OrangeMirrored;

                var spriteNum = (((Bridge.Int.div(this.elapsedMicros, (100000))) | 0)) % 8;

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(image, Bridge.Int.mul(spriteNum, 16), 0, 16, 16, (((this.xMibi >> 10) - 24) | 0), (((this.yMibi >> 10) - 24) | 0), 0, 384);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemyOrange_YetiVersion", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.IEnemy],
        statics: {
            fields: {
                LEVEL_FLAG_DESPAWN_ENEMY_ORANGE_YETI_VERSION: null
            },
            ctors: {
                init: function () {
                    this.LEVEL_FLAG_DESPAWN_ENEMY_ORANGE_YETI_VERSION = "despawnEnemyOrangeYetiVersion";
                }
            },
            methods: {
                GetEnemyOrange_YetiVersion: function (xMibi, yMibi, xSpeedInMibipixelsPerSecond, jumpSpeed, enemyId) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyOrange_YetiVersion(xMibi, yMibi, xSpeedInMibipixelsPerSecond, 0, jumpSpeed, 0, enemyId);
                }
            }
        },
        fields: {
            xMibi: 0,
            yMibi: 0,
            xSpeedInMibipixelsPerSecond: 0,
            ySpeedInMibipixelsPerSecond: 0,
            jumpSpeed: 0,
            elapsedMicros: 0,
            EnemyId: null
        },
        alias: [
            "EnemyId", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId",
            "GetHitboxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetHitboxes",
            "GetDamageBoxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDamageBoxes",
            "GetDeadEnemy", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDeadEnemy",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$Render"
        ],
        ctors: {
            ctor: function (xMibi, yMibi, xSpeedInMibipixelsPerSecond, ySpeedInMibipixelsPerSecond, jumpSpeed, elapsedMicros, enemyId) {
                this.$initialize();
                this.xMibi = xMibi;
                this.yMibi = yMibi;
                this.xSpeedInMibipixelsPerSecond = xSpeedInMibipixelsPerSecond;
                this.ySpeedInMibipixelsPerSecond = ySpeedInMibipixelsPerSecond;
                this.jumpSpeed = jumpSpeed;
                this.elapsedMicros = elapsedMicros;
                this.EnemyId = enemyId;
            }
        },
        methods: {
            GetHitboxes: function () {
                return Bridge.fn.bind(this, function (_o1) {
                        _o1.add(new TuxPlanetSpeedrunAnyPercentLibrary.Hitbox((((this.xMibi >> 10) - 18) | 0), (((this.yMibi >> 10) - 18) | 0), 36, 36));
                        return _o1;
                    })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Hitbox)).ctor());
            },
            GetDamageBoxes: function () {
                return Bridge.fn.bind(this, function (_o1) {
                        _o1.add(new TuxPlanetSpeedrunAnyPercentLibrary.Hitbox((((this.xMibi >> 10) - 21) | 0), (((this.yMibi >> 10) - 21) | 0), 42, 42));
                        return _o1;
                    })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Hitbox)).ctor());
            },
            GetDeadEnemy: function () {
                return TuxPlanetSpeedrunAnyPercentLibrary.EnemyDeadPoof.SpawnEnemyDeadPoof(this.xMibi, this.yMibi, (this.EnemyId || "") + "_enemyDeadPoof");
            },
            ProcessFrame: function (cameraX, cameraY, windowWidth, windowHeight, elapsedMicrosPerFrame, tuxState, random, tilemap, levelFlags, soundOutput) {
                if (System.Linq.Enumerable.from(levelFlags).contains(TuxPlanetSpeedrunAnyPercentLibrary.EnemyOrange_YetiVersion.LEVEL_FLAG_DESPAWN_ENEMY_ORANGE_YETI_VERSION)) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(Bridge.fn.bind(this, function (_o1) {
                            _o1.add(TuxPlanetSpeedrunAnyPercentLibrary.EnemyDeadPoof.SpawnEnemyDeadPoof(this.xMibi, this.yMibi, (this.EnemyId || "") + "_despawned"));
                            return _o1;
                        })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor()), null, null);
                }

                var list = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor();

                var x = this.xMibi >> 10;
                var y = this.yMibi >> 10;

                var newXMibi = this.xMibi;
                var newYMibi = this.yMibi;
                var newXSpeedInMibipixelsPerSecond = this.xSpeedInMibipixelsPerSecond;
                var newYSpeedInMibipixelsPerSecond = this.ySpeedInMibipixelsPerSecond;

                var isOnGround = tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(x, ((((y - 24) | 0) - 1) | 0));

                if (isOnGround) {
                    newYSpeedInMibipixelsPerSecond = this.jumpSpeed;
                } else {
                    newYSpeedInMibipixelsPerSecond = (newYSpeedInMibipixelsPerSecond - (Bridge.Int.mul(elapsedMicrosPerFrame, 3))) | 0;
                }

                if (newYSpeedInMibipixelsPerSecond < -2000000) {
                    newYSpeedInMibipixelsPerSecond = -2000000;
                }

                var proposedNewYMibi = System.Int64.clip32(System.Int64(newYMibi).add(System.Int64(newYSpeedInMibipixelsPerSecond).mul(System.Int64(elapsedMicrosPerFrame)).div(System.Int64(1000)).div(System.Int64(1000))));
                if (newYSpeedInMibipixelsPerSecond < 0) {
                    while (true) {
                        if (tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(newXMibi >> 10, (((proposedNewYMibi >> 10) - 24) | 0))) {
                            newYSpeedInMibipixelsPerSecond = 0;
                            proposedNewYMibi = (proposedNewYMibi + 1024) | 0;
                            if (proposedNewYMibi >= newYMibi) {
                                proposedNewYMibi = newYMibi;
                                break;
                            }
                        } else {
                            break;
                        }
                    }
                }

                newYMibi = proposedNewYMibi;

                var proposedNewXMibi = System.Int64.clip32(System.Int64(newXMibi).add(System.Int64(newXSpeedInMibipixelsPerSecond).mul(System.Int64(elapsedMicrosPerFrame)).div(System.Int64(1000)).div(System.Int64(1000))));
                if (newXSpeedInMibipixelsPerSecond > 0) {
                    while (true) {
                        if (tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround((((proposedNewXMibi >> 10) + 24) | 0), newYMibi >> 10)) {
                            proposedNewXMibi = (proposedNewXMibi - 1024) | 0;
                            if (proposedNewXMibi <= newXMibi) {
                                proposedNewXMibi = newXMibi;
                                break;
                            }
                        } else {
                            break;
                        }
                    }
                }
                if (newXSpeedInMibipixelsPerSecond < 0) {
                    while (true) {
                        if (tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround((((proposedNewXMibi >> 10) - 24) | 0), newYMibi >> 10)) {
                            proposedNewXMibi = (proposedNewXMibi + 1024) | 0;
                            if (proposedNewXMibi >= newXMibi) {
                                proposedNewXMibi = newXMibi;
                                break;
                            }
                        } else {
                            break;
                        }
                    }
                }

                newXMibi = proposedNewXMibi;

                if (newXSpeedInMibipixelsPerSecond > 0) {
                    if (newXMibi <= ((this.xMibi + 1024) | 0)) {
                        newXSpeedInMibipixelsPerSecond = (-newXSpeedInMibipixelsPerSecond) | 0;
                    }
                } else {
                    if (newXMibi >= ((this.xMibi - 1024) | 0)) {
                        newXSpeedInMibipixelsPerSecond = (-newXSpeedInMibipixelsPerSecond) | 0;
                    }
                }

                var newElapsedMicros = (this.elapsedMicros + elapsedMicrosPerFrame) | 0;
                if (newElapsedMicros > 2000000000) {
                    newElapsedMicros = 1;
                }

                list.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemyOrange_YetiVersion(newXMibi, newYMibi, newXSpeedInMibipixelsPerSecond, newYSpeedInMibipixelsPerSecond, this.jumpSpeed, newElapsedMicros, this.EnemyId));

                return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(list, null, null);
            },
            Render: function (displayOutput) {
                var isFacingRight = this.xSpeedInMibipixelsPerSecond > 0;

                var image = isFacingRight ? TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Orange : TuxPlanetSpeedrunAnyPercentLibrary.GameImage.OrangeMirrored;

                var spriteNum = (((Bridge.Int.div(this.elapsedMicros, (100000))) | 0)) % 8;

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(image, Bridge.Int.mul(spriteNum, 16), 0, 16, 16, (((this.xMibi >> 10) - 24) | 0), (((this.yMibi >> 10) - 24) | 0), 0, 384);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemySmartcap", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.IEnemy],
        statics: {
            methods: {
                GetEnemySmartcap: function (xMibi, yMibi, isFacingRight, enemyId) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemySmartcap(xMibi, yMibi, isFacingRight, 0, enemyId);
                },
                IsGroundOrSpike: function (tilemap, x, y) {
                    return tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(x, y) || tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsSpikes(x, y);
                }
            }
        },
        fields: {
            xMibi: 0,
            yMibi: 0,
            isFacingRight: false,
            elapsedMicros: 0,
            EnemyId: null
        },
        alias: [
            "EnemyId", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId",
            "GetHitboxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetHitboxes",
            "GetDamageBoxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDamageBoxes",
            "GetDeadEnemy", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDeadEnemy",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$Render"
        ],
        ctors: {
            ctor: function (xMibi, yMibi, isFacingRight, elapsedMicros, enemyId) {
                this.$initialize();
                this.xMibi = xMibi;
                this.yMibi = yMibi;
                this.isFacingRight = isFacingRight;
                this.elapsedMicros = elapsedMicros;
                this.EnemyId = enemyId;
            }
        },
        methods: {
            GetHitboxes: function () {
                return Bridge.fn.bind(this, function (_o1) {
                        _o1.add(new TuxPlanetSpeedrunAnyPercentLibrary.Hitbox((((this.xMibi >> 10) - 24) | 0), (((this.yMibi >> 10) - 27) | 0), 48, 45));
                        return _o1;
                    })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Hitbox)).ctor());
            },
            GetDamageBoxes: function () {
                return Bridge.fn.bind(this, function (_o1) {
                        _o1.add(new TuxPlanetSpeedrunAnyPercentLibrary.Hitbox((((this.xMibi >> 10) - 24) | 0), (((this.yMibi >> 10) - 27) | 0), 48, 45));
                        return _o1;
                    })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Hitbox)).ctor());
            },
            GetDeadEnemy: function () {
                var enemyId = this.EnemyId;

                return TuxPlanetSpeedrunAnyPercentLibrary.EnemySmartcapDead.SpawnEnemySmartcapDead(this.xMibi, this.yMibi, this.isFacingRight, (enemyId || "") + "enemySmartcapDead");
            },
            ProcessFrame: function (cameraX, cameraY, windowWidth, windowHeight, elapsedMicrosPerFrame, tuxState, random, tilemap, levelFlags, soundOutput) {
                var list = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor();

                var newElapsedMicros = (this.elapsedMicros + elapsedMicrosPerFrame) | 0;

                if (newElapsedMicros > 2000000000) {
                    newElapsedMicros = 0;
                }

                var newXMibi = this.xMibi;
                var newYMibi = this.yMibi;
                var newIsFacingRight = this.isFacingRight;

                if (this.isFacingRight) {
                    newXMibi = (newXMibi + (((Bridge.Int.div(Bridge.Int.mul(elapsedMicrosPerFrame, 90), 1000)) | 0))) | 0;
                } else {
                    newXMibi = (newXMibi - (((Bridge.Int.div(Bridge.Int.mul(elapsedMicrosPerFrame, 90), 1000)) | 0))) | 0;
                }

                if (newIsFacingRight) {
                    if (TuxPlanetSpeedrunAnyPercentLibrary.EnemySmartcap.IsGroundOrSpike(tilemap, (((newXMibi >> 10) + 24) | 0), newYMibi >> 10)) {
                        newIsFacingRight = false;
                    }
                    if (!TuxPlanetSpeedrunAnyPercentLibrary.EnemySmartcap.IsGroundOrSpike(tilemap, (((newXMibi >> 10) + 12) | 0), (((newYMibi >> 10) - 33) | 0))) {
                        newIsFacingRight = false;
                    }
                } else {
                    if (TuxPlanetSpeedrunAnyPercentLibrary.EnemySmartcap.IsGroundOrSpike(tilemap, (((newXMibi >> 10) - 24) | 0), newYMibi >> 10)) {
                        newIsFacingRight = true;
                    }
                    if (!TuxPlanetSpeedrunAnyPercentLibrary.EnemySmartcap.IsGroundOrSpike(tilemap, (((newXMibi >> 10) - 12) | 0), (((newYMibi >> 10) - 33) | 0))) {
                        newIsFacingRight = true;
                    }
                }

                var isOutOfBounds = (((newXMibi >> 10) + 24) | 0) < ((((cameraX - ((Bridge.Int.div(windowWidth, 2)) | 0)) | 0) - TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0) || (((newXMibi >> 10) - 24) | 0) > ((((cameraX + ((Bridge.Int.div(windowWidth, 2)) | 0)) | 0) + TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0) || (((newYMibi >> 10) + 27) | 0) < ((((cameraY - ((Bridge.Int.div(windowHeight, 2)) | 0)) | 0) - TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0) || (((newYMibi >> 10) - 27) | 0) > ((((cameraY + ((Bridge.Int.div(windowHeight, 2)) | 0)) | 0) + TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0);

                if (!isOutOfBounds) {
                    list.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemySmartcap(newXMibi, newYMibi, newIsFacingRight, newElapsedMicros, this.EnemyId));
                }

                return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(list, null, null);
            },
            Render: function (displayOutput) {
                var image = this.isFacingRight ? TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Smartcap : TuxPlanetSpeedrunAnyPercentLibrary.GameImage.SmartcapMirrored;

                var spriteNum = (Bridge.Int.div((this.elapsedMicros % 1000000), 250000)) | 0;

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(image, Bridge.Int.mul(spriteNum, 16), 0, 16, 18, (((this.xMibi >> 10) - 24) | 0), (((this.yMibi >> 10) - 27) | 0), 0, 384);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemySmartcapDead", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.IEnemy],
        statics: {
            fields: {
                DEAD_ANIMATION_DURATION: 0
            },
            ctors: {
                init: function () {
                    this.DEAD_ANIMATION_DURATION = 1000000;
                }
            },
            methods: {
                SpawnEnemySmartcapDead: function (xMibi, yMibi, isFacingRight, enemyId) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemySmartcapDead((((xMibi >> 10) - 24) | 0), (((yMibi >> 10) - 27) | 0), isFacingRight, 0, enemyId);
                }
            }
        },
        fields: {
            x: 0,
            y: 0,
            isFacingRight: false,
            elapsedMicros: 0,
            EnemyId: null
        },
        alias: [
            "EnemyId", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId",
            "GetHitboxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetHitboxes",
            "GetDamageBoxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDamageBoxes",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$Render",
            "GetDeadEnemy", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDeadEnemy"
        ],
        ctors: {
            ctor: function (x, y, isFacingRight, elapsedMicros, enemyId) {
                this.$initialize();
                this.x = x;
                this.y = y;
                this.isFacingRight = isFacingRight;
                this.elapsedMicros = elapsedMicros;
                this.EnemyId = enemyId;
            }
        },
        methods: {
            GetHitboxes: function () {
                return null;
            },
            GetDamageBoxes: function () {
                return null;
            },
            ProcessFrame: function (cameraX, cameraY, windowWidth, windowHeight, elapsedMicrosPerFrame, tuxState, random, tilemap, levelFlags, soundOutput) {
                if (this.elapsedMicros > TuxPlanetSpeedrunAnyPercentLibrary.EnemySmartcapDead.DEAD_ANIMATION_DURATION) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(null, null, null);
                }

                return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(Bridge.fn.bind(this, function (_o1) {
                        _o1.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemySmartcapDead(this.x, this.y, this.isFacingRight, ((this.elapsedMicros + elapsedMicrosPerFrame) | 0), this.EnemyId));
                        return _o1;
                    })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor()), null, null);
            },
            Render: function (displayOutput) {
                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(this.isFacingRight ? TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Smartcap : TuxPlanetSpeedrunAnyPercentLibrary.GameImage.SmartcapMirrored, 64, 0, 16, 18, this.x, this.y, 0, 384);
            },
            GetDeadEnemy: function () {
                return null;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemySnail", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.IEnemy],
        statics: {
            methods: {
                GetEnemySnail: function (xMibi, yMibi, isFacingRight, enemyId) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemySnail(xMibi, yMibi, isFacingRight, 0, enemyId);
                },
                IsGroundOrSpike: function (tilemap, x, y) {
                    return tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(x, y) || tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsSpikes(x, y);
                }
            }
        },
        fields: {
            xMibi: 0,
            yMibi: 0,
            isFacingRight: false,
            elapsedMicros: 0,
            EnemyId: null
        },
        alias: [
            "EnemyId", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId",
            "GetHitboxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetHitboxes",
            "GetDamageBoxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDamageBoxes",
            "GetDeadEnemy", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDeadEnemy",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$Render"
        ],
        ctors: {
            ctor: function (xMibi, yMibi, isFacingRight, elapsedMicros, enemyId) {
                this.$initialize();
                this.xMibi = xMibi;
                this.yMibi = yMibi;
                this.isFacingRight = isFacingRight;
                this.elapsedMicros = elapsedMicros;
                this.EnemyId = enemyId;
            }
        },
        methods: {
            GetHitboxes: function () {
                var list = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Hitbox)).ctor();
                list.add(new TuxPlanetSpeedrunAnyPercentLibrary.Hitbox((((this.xMibi >> 10) - 24) | 0), (((this.yMibi >> 10) - 24) | 0), 48, 42));
                return list;
            },
            GetDamageBoxes: function () {
                var list = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Hitbox)).ctor();
                list.add(new TuxPlanetSpeedrunAnyPercentLibrary.Hitbox((((this.xMibi >> 10) - 24) | 0), (((this.yMibi >> 10) - 24) | 0), 48, 42));
                return list;
            },
            GetDeadEnemy: function () {
                var enemyId = this.EnemyId;

                return TuxPlanetSpeedrunAnyPercentLibrary.EnemyDeadPoof.SpawnEnemyDeadPoof(this.xMibi, this.yMibi, (enemyId || "") + "_enemyDeadPoof");
            },
            ProcessFrame: function (cameraX, cameraY, windowWidth, windowHeight, elapsedMicrosPerFrame, tuxState, random, tilemap, levelFlags, soundOutput) {
                var list = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor();

                var newElapsedMicros = (this.elapsedMicros + elapsedMicrosPerFrame) | 0;

                if (newElapsedMicros > 2000000000) {
                    newElapsedMicros = 0;
                }

                var newXMibi = this.xMibi;
                var newYMibi = this.yMibi;
                var newIsFacingRight = this.isFacingRight;

                if (this.isFacingRight) {
                    newXMibi = (newXMibi + (((Bridge.Int.div(Bridge.Int.mul(elapsedMicrosPerFrame, 20), 1000)) | 0))) | 0;
                } else {
                    newXMibi = (newXMibi - (((Bridge.Int.div(Bridge.Int.mul(elapsedMicrosPerFrame, 20), 1000)) | 0))) | 0;
                }

                if (newIsFacingRight) {
                    if (TuxPlanetSpeedrunAnyPercentLibrary.EnemySnail.IsGroundOrSpike(tilemap, (((newXMibi >> 10) + 24) | 0), newYMibi >> 10)) {
                        newIsFacingRight = false;
                    }
                    if (!TuxPlanetSpeedrunAnyPercentLibrary.EnemySnail.IsGroundOrSpike(tilemap, (((newXMibi >> 10) + 12) | 0), (((newYMibi >> 10) - 33) | 0))) {
                        newIsFacingRight = false;
                    }
                } else {
                    if (TuxPlanetSpeedrunAnyPercentLibrary.EnemySnail.IsGroundOrSpike(tilemap, (((newXMibi >> 10) - 24) | 0), newYMibi >> 10)) {
                        newIsFacingRight = true;
                    }
                    if (!TuxPlanetSpeedrunAnyPercentLibrary.EnemySnail.IsGroundOrSpike(tilemap, (((newXMibi >> 10) - 12) | 0), (((newYMibi >> 10) - 33) | 0))) {
                        newIsFacingRight = true;
                    }
                }

                var isOutOfBounds = (((newXMibi >> 10) + 24) | 0) < ((((cameraX - ((Bridge.Int.div(windowWidth, 2)) | 0)) | 0) - TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0) || (((newXMibi >> 10) - 24) | 0) > ((((cameraX + ((Bridge.Int.div(windowWidth, 2)) | 0)) | 0) + TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0) || (((newYMibi >> 10) + 24) | 0) < ((((cameraY - ((Bridge.Int.div(windowHeight, 2)) | 0)) | 0) - TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0) || (((newYMibi >> 10) - 24) | 0) > ((((cameraY + ((Bridge.Int.div(windowHeight, 2)) | 0)) | 0) + TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0);

                if (!isOutOfBounds) {
                    list.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemySnail(newXMibi, newYMibi, newIsFacingRight, newElapsedMicros, this.EnemyId));
                }

                return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(list, null, null);
            },
            Render: function (displayOutput) {
                var image = this.isFacingRight ? TuxPlanetSpeedrunAnyPercentLibrary.GameImage.SnailBlue : TuxPlanetSpeedrunAnyPercentLibrary.GameImage.SnailBlueMirrored;

                var spriteNum = (((Bridge.Int.div(this.elapsedMicros, 250000)) | 0)) % 2;

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(image, Bridge.Int.mul(spriteNum, 16), 0, 16, 16, (((this.xMibi >> 10) - 24) | 0), (((this.yMibi >> 10) - 24) | 0), 0, 384);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemySnail.EnemySnailSpawn", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.Tilemap.IExtraEnemyToSpawn],
        $kind: "nested class",
        fields: {
            xMibi: 0,
            yMibi: 0,
            isFacingRight: false,
            enemyId: null
        },
        alias: ["GetEnemy", "TuxPlanetSpeedrunAnyPercentLibrary$Tilemap$IExtraEnemyToSpawn$GetEnemy"],
        ctors: {
            ctor: function (xMibi, yMibi, isFacingRight, enemyId) {
                this.$initialize();
                this.xMibi = xMibi;
                this.yMibi = yMibi;
                this.isFacingRight = isFacingRight;
                this.enemyId = enemyId;
            }
        },
        methods: {
            GetEnemy: function (xOffset, yOffset) {
                return new TuxPlanetSpeedrunAnyPercentLibrary.EnemySpawnHelper(TuxPlanetSpeedrunAnyPercentLibrary.EnemySnail.GetEnemySnail(((this.xMibi + (xOffset << 10)) | 0), ((this.yMibi + (yOffset << 10)) | 0), this.isFacingRight, this.enemyId), ((this.xMibi + (xOffset << 10)) | 0), ((this.yMibi + (yOffset << 10)) | 0), 48, 48);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemySpawnHelper", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.IEnemy],
        fields: {
            enemyToSpawn: null,
            xMibi: 0,
            yMibi: 0,
            enemyWidth: 0,
            enemyHeight: 0,
            EnemyId: null
        },
        alias: [
            "EnemyId", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId",
            "GetHitboxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetHitboxes",
            "GetDamageBoxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDamageBoxes",
            "GetDeadEnemy", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDeadEnemy",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$Render"
        ],
        ctors: {
            ctor: function (enemyToSpawn, xMibi, yMibi, enemyWidth, enemyHeight) {
                this.$initialize();
                this.enemyToSpawn = enemyToSpawn;
                this.xMibi = xMibi;
                this.yMibi = yMibi;
                this.enemyWidth = enemyWidth;
                this.enemyHeight = enemyHeight;
                this.EnemyId = (enemyToSpawn.TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId || "") + "_enemySpawnHelper";
            }
        },
        methods: {
            GetHitboxes: function () {
                return null;
            },
            GetDamageBoxes: function () {
                return null;
            },
            GetDeadEnemy: function () {
                return null;
            },
            ProcessFrame: function (cameraX, cameraY, windowWidth, windowHeight, elapsedMicrosPerFrame, tuxState, random, tilemap, levelFlags, soundOutput) {
                var halfWindowWidth = windowWidth >> 1;
                var halfWindowHeight = windowHeight >> 1;

                var halfEnemyWidth = this.enemyWidth >> 1;
                var halfEnemyHeight = this.enemyHeight >> 1;

                var isOutOfCameraViewX = (((this.xMibi >> 10) - halfEnemyWidth) | 0) > ((cameraX + halfWindowWidth) | 0) || (((this.xMibi >> 10) + halfEnemyWidth) | 0) < ((cameraX - halfWindowWidth) | 0);
                var isOutOfCameraViewY = (((this.yMibi >> 10) - halfEnemyHeight) | 0) > ((cameraY + halfWindowHeight) | 0) || (((this.yMibi >> 10) + halfEnemyHeight) | 0) < ((cameraY - halfWindowHeight) | 0);

                if (isOutOfCameraViewX || isOutOfCameraViewY) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(Bridge.fn.bind(this, function (_o1) {
                            _o1.add(this.enemyToSpawn);
                            return _o1;
                        })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor()), null, null);
                }

                return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(null, null, null);

            },
            Render: function (displayOutput) { }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemyYetiBoss_Charge", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.IEnemy],
        statics: {
            fields: {
                COOLDOWN: 0
            },
            ctors: {
                init: function () {
                    this.COOLDOWN = 300000;
                }
            },
            methods: {
                GetEnemyYetiBoss_Charge: function (xMibi, yMibi, elapsedMicros, isFacingRight, enemyIdCounter, numTimesHit, rngSeed, enemyId) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyYetiBoss_Charge(xMibi, yMibi, elapsedMicros, isFacingRight, TuxPlanetSpeedrunAnyPercentLibrary.EnemyYetiBoss_Charge.COOLDOWN, enemyIdCounter, numTimesHit, rngSeed, enemyId);
                }
            }
        },
        fields: {
            xMibi: 0,
            yMibi: 0,
            elapsedMicros: 0,
            isFacingRight: false,
            cooldown: 0,
            enemyIdCounter: 0,
            numTimesHit: 0,
            rngSeed: null,
            EnemyId: null
        },
        alias: [
            "EnemyId", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId",
            "GetHitboxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetHitboxes",
            "GetDamageBoxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDamageBoxes",
            "GetDeadEnemy", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDeadEnemy",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$Render"
        ],
        ctors: {
            ctor: function (xMibi, yMibi, elapsedMicros, isFacingRight, cooldown, enemyIdCounter, numTimesHit, rngSeed, enemyId) {
                this.$initialize();
                this.xMibi = xMibi;
                this.yMibi = yMibi;
                this.elapsedMicros = elapsedMicros;
                this.isFacingRight = isFacingRight;
                this.cooldown = cooldown;
                this.enemyIdCounter = enemyIdCounter;
                this.numTimesHit = numTimesHit;
                this.rngSeed = rngSeed;
                this.EnemyId = enemyId;
            }
        },
        methods: {
            GetHitboxes: function () {
                return Bridge.fn.bind(this, function (_o1) {
                        _o1.add(new TuxPlanetSpeedrunAnyPercentLibrary.Hitbox((((this.xMibi >> 10) - 48) | 0), (((this.yMibi >> 10) - 48) | 0), 96, 96));
                        return _o1;
                    })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Hitbox)).ctor());
            },
            GetDamageBoxes: function () {
                return null;
            },
            GetDeadEnemy: function () {
                return null;
            },
            ProcessFrame: function (cameraX, cameraY, windowWidth, windowHeight, elapsedMicrosPerFrame, tuxState, random, tilemap, levelFlags, soundOutput) {
                var newElapsedMicros = (this.elapsedMicros + elapsedMicrosPerFrame) | 0;

                if (newElapsedMicros > 2000000000) {
                    newElapsedMicros = 1;
                }

                var newEnemies = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor();

                var newCooldown = this.cooldown;

                newCooldown = (newCooldown - elapsedMicrosPerFrame) | 0;

                if (newCooldown <= 0) {
                    newCooldown = 0;
                }

                var newXMibi = this.xMibi;

                var hasHitWall;

                if (newCooldown <= 0) {
                    if (this.isFacingRight) {
                        newXMibi = (newXMibi + (Bridge.Int.mul(2, elapsedMicrosPerFrame))) | 0;
                        hasHitWall = tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround((((newXMibi >> 10) + 96) | 0), this.yMibi >> 10);
                    } else {
                        newXMibi = (newXMibi - (Bridge.Int.mul(2, elapsedMicrosPerFrame))) | 0;
                        hasHitWall = tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround((((newXMibi >> 10) - 96) | 0), this.yMibi >> 10);
                    }
                } else {
                    hasHitWall = false;
                }

                if (hasHitWall) {
                    soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$PlaySound(TuxPlanetSpeedrunAnyPercentLibrary.GameSound.Explosion00Modified);
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(Bridge.fn.bind(this, function (_o1) {
                            _o1.add(TuxPlanetSpeedrunAnyPercentLibrary.EnemyYetiBoss_Recoil.GetEnemyYetiBoss_Recoil(this.xMibi, this.yMibi, 0, this.isFacingRight, this.enemyIdCounter, this.numTimesHit, this.rngSeed, this.EnemyId));
                            return _o1;
                        })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor()), null, null);
                }

                newEnemies.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemyYetiBoss_Charge(newXMibi, this.yMibi, newElapsedMicros, this.isFacingRight, newCooldown, this.enemyIdCounter, this.numTimesHit, this.rngSeed, this.EnemyId));

                return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(newEnemies, null, null);
            },
            Render: function (displayOutput) {
                var spriteNum = (((Bridge.Int.div(this.elapsedMicros, (25000))) | 0)) % 8;

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(this.isFacingRight ? TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Yeti : TuxPlanetSpeedrunAnyPercentLibrary.GameImage.YetiMirrored, Bridge.Int.mul(spriteNum, 64), 128, 64, 64, (((this.xMibi >> 10) - 96) | 0), (((this.yMibi >> 10) - 96) | 0), 0, 384);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemyYetiBoss_Defeated", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.IEnemy],
        statics: {
            methods: {
                GetEnemyYetiBoss_Defeated: function (xMibi, yMibi, elapsedMicros, isFacingRight, enemyId) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyYetiBoss_Defeated(xMibi, yMibi, elapsedMicros, isFacingRight, enemyId);
                }
            }
        },
        fields: {
            xMibi: 0,
            yMibi: 0,
            elapsedMicros: 0,
            isFacingRight: false,
            EnemyId: null
        },
        alias: [
            "EnemyId", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId",
            "GetHitboxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetHitboxes",
            "GetDamageBoxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDamageBoxes",
            "GetDeadEnemy", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDeadEnemy",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$Render"
        ],
        ctors: {
            ctor: function (xMibi, yMibi, elapsedMicros, isFacingRight, enemyId) {
                this.$initialize();
                this.xMibi = xMibi;
                this.yMibi = yMibi;
                this.elapsedMicros = elapsedMicros;
                this.isFacingRight = isFacingRight;
                this.EnemyId = enemyId;
            }
        },
        methods: {
            GetHitboxes: function () {
                return null;
            },
            GetDamageBoxes: function () {
                return null;
            },
            GetDeadEnemy: function () {
                return null;
            },
            ProcessFrame: function (cameraX, cameraY, windowWidth, windowHeight, elapsedMicrosPerFrame, tuxState, random, tilemap, levelFlags, soundOutput) {
                var newElapsedMicros = (this.elapsedMicros + elapsedMicrosPerFrame) | 0;

                if (newElapsedMicros > 2000000000) {
                    newElapsedMicros = 1;
                }

                var newEnemies = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor();

                newEnemies.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemyYetiBoss_Defeated(this.xMibi, this.yMibi, newElapsedMicros, this.isFacingRight, this.EnemyId));

                return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(newEnemies, null, null);
            },
            Render: function (displayOutput) {
                var spriteNum = (((Bridge.Int.div(this.elapsedMicros, (100000))) | 0)) % 2;

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(this.isFacingRight ? TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Yeti : TuxPlanetSpeedrunAnyPercentLibrary.GameImage.YetiMirrored, ((128 + Bridge.Int.mul(spriteNum, 64)) | 0), 256, 64, 64, (((this.xMibi >> 10) - 96) | 0), (((this.yMibi >> 10) - 96) | 0), 0, 384);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemyYetiBoss_Hit", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.IEnemy],
        statics: {
            methods: {
                GetEnemyYetiBoss_Hit: function (xMibi, yMibi, elapsedMicros, isFacingRight, enemyIdCounter, numTimesHit, rngSeed, enemyId) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyYetiBoss_Hit(xMibi, yMibi, elapsedMicros, false, Bridge.Int.mul(400000, (isFacingRight ? -1 : 1)), 700000, isFacingRight, enemyIdCounter, numTimesHit, rngSeed, enemyId);
                }
            }
        },
        fields: {
            xMibi: 0,
            yMibi: 0,
            elapsedMicros: 0,
            hasTriedSpawningSpikes: false,
            xSpeedInMibipixelsPerSecond: 0,
            ySpeedInMibipixelsPerSecond: 0,
            isFacingRight: false,
            enemyIdCounter: 0,
            numTimesHit: 0,
            rngSeed: null,
            EnemyId: null
        },
        alias: [
            "EnemyId", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId",
            "GetHitboxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetHitboxes",
            "GetDamageBoxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDamageBoxes",
            "GetDeadEnemy", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDeadEnemy",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$Render"
        ],
        ctors: {
            ctor: function (xMibi, yMibi, elapsedMicros, hasTriedSpawningSpikes, xSpeedInMibipixelsPerSecond, ySpeedInMibipixelsPerSecond, isFacingRight, enemyIdCounter, numTimesHit, rngSeed, enemyId) {
                this.$initialize();
                this.xMibi = xMibi;
                this.yMibi = yMibi;
                this.elapsedMicros = elapsedMicros;
                this.hasTriedSpawningSpikes = hasTriedSpawningSpikes;
                this.xSpeedInMibipixelsPerSecond = xSpeedInMibipixelsPerSecond;
                this.ySpeedInMibipixelsPerSecond = ySpeedInMibipixelsPerSecond;
                this.isFacingRight = isFacingRight;
                this.enemyIdCounter = enemyIdCounter;
                this.numTimesHit = numTimesHit;
                this.rngSeed = rngSeed;
                this.EnemyId = enemyId;
            }
        },
        methods: {
            GetHitboxes: function () {
                return null;
            },
            GetDamageBoxes: function () {
                return null;
            },
            GetDeadEnemy: function () {
                return null;
            },
            ProcessFrame: function (cameraX, cameraY, windowWidth, windowHeight, elapsedMicrosPerFrame, tuxState, random, tilemap, levelFlags, soundOutput) {
                var newElapsedMicros = (this.elapsedMicros + elapsedMicrosPerFrame) | 0;

                if (newElapsedMicros > 2000000000) {
                    newElapsedMicros = 1;
                }

                var newEnemies = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor();

                var newXMibi = this.xMibi;
                var newYMibi = this.yMibi;

                var newXSpeedInMibipixelsPerSecond = this.xSpeedInMibipixelsPerSecond;
                var newYSpeedInMibipixelsPerSecond = this.ySpeedInMibipixelsPerSecond;

                var newlyAddedLevelFlags = new (System.Collections.Generic.List$1(System.String)).ctor();

                var isOnGround = tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(newXMibi >> 10, (((((newYMibi >> 10) - 96) | 0) - 1) | 0)) && this.ySpeedInMibipixelsPerSecond === 0;

                if (this.numTimesHit === 4) {
                    newlyAddedLevelFlags.add(TuxPlanetSpeedrunAnyPercentLibrary.EnemyYetiBossSpike.LEVEL_FLAG_DESPAWN_YETI_BOSS_ROOM_SPIKES);
                    newlyAddedLevelFlags.add(TuxPlanetSpeedrunAnyPercentLibrary.EnemyOrange_YetiVersion.LEVEL_FLAG_DESPAWN_ENEMY_ORANGE_YETI_VERSION);
                    newlyAddedLevelFlags.add(TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteOrange_YetiVersion.LEVEL_FLAG_DESPAWN_ENEMY_ELITE_ORANGE_YETI_VERSION);
                }

                if (!this.hasTriedSpawningSpikes) {
                    if (this.numTimesHit === 2) {
                        for (var i = 0; i < 19; i = (i + 1) | 0) {
                            newEnemies.add(TuxPlanetSpeedrunAnyPercentLibrary.EnemyYetiBossSpike.GetEnemyYetiBossSpike((((((11664 + Bridge.Int.mul(i, 48)) | 0) + 24) | 0)) << 10, 864256, Bridge.Int.mul(Bridge.Int.mul(i, 100), 1000), (this.EnemyId || "") + "_EnemyYetiBossSpike_" + (DTLibrary.StringUtil.ToStringCultureInvariant(i) || "")));
                        }
                    }
                }

                if (isOnGround) {
                    if (this.numTimesHit === 4) {
                        newlyAddedLevelFlags.add(TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.BEGIN_YETI_DEFEATED_CUTSCENE);

                        if (this.isFacingRight) {
                            newlyAddedLevelFlags.add(TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_YetiBossDefeated.LEVEL_FLAG_YETI_IS_FACING_RIGHT);
                        }

                        return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(Bridge.fn.bind(this, function (_o1) {
                                _o1.add(TuxPlanetSpeedrunAnyPercentLibrary.EnemyYetiBoss_Defeated.GetEnemyYetiBoss_Defeated(this.xMibi, this.yMibi, 0, this.isFacingRight, this.EnemyId));
                                return _o1;
                            })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor()), null, newlyAddedLevelFlags);
                    }

                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(Bridge.fn.bind(this, function (_o2) {
                            _o2.add(TuxPlanetSpeedrunAnyPercentLibrary.EnemyYetiBoss_Jump.GetEnemyYetiBoss_Jump(this.xMibi, this.yMibi, 0, this.isFacingRight, this.enemyIdCounter, this.numTimesHit, this.rngSeed, this.EnemyId));
                            return _o2;
                        })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor()), null, newlyAddedLevelFlags);
                }

                newYSpeedInMibipixelsPerSecond = (newYSpeedInMibipixelsPerSecond - (Bridge.Int.mul(elapsedMicrosPerFrame, 3))) | 0;

                var proposedNewYMibi = System.Int64.clip32(System.Int64(newYMibi).add(System.Int64(newYSpeedInMibipixelsPerSecond).mul(System.Int64(elapsedMicrosPerFrame)).div(System.Int64(1000)).div(System.Int64(1000))));
                if (newYSpeedInMibipixelsPerSecond < 0) {
                    while (true) {
                        if (tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(newXMibi >> 10, (((proposedNewYMibi >> 10) - 96) | 0))) {
                            newYSpeedInMibipixelsPerSecond = 0;
                            proposedNewYMibi = (proposedNewYMibi + 1024) | 0;
                            if (proposedNewYMibi >= newYMibi) {
                                proposedNewYMibi = newYMibi;
                                break;
                            }
                        } else {
                            break;
                        }
                    }
                }

                newYMibi = proposedNewYMibi;

                newXMibi = System.Int64.clip32(System.Int64(newXMibi).add(System.Int64(newXSpeedInMibipixelsPerSecond).mul(System.Int64(elapsedMicrosPerFrame)).div(System.Int64(1000)).div(System.Int64(1000))));

                newEnemies.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemyYetiBoss_Hit(newXMibi, newYMibi, newElapsedMicros, true, newXSpeedInMibipixelsPerSecond, newYSpeedInMibipixelsPerSecond, this.isFacingRight, this.enemyIdCounter, this.numTimesHit, this.rngSeed, this.EnemyId));

                return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(newEnemies, null, newlyAddedLevelFlags);
            },
            Render: function (displayOutput) {
                var spriteNum = (((Bridge.Int.div(this.elapsedMicros, (100000))) | 0)) % 2;

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(this.isFacingRight ? TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Yeti : TuxPlanetSpeedrunAnyPercentLibrary.GameImage.YetiMirrored, Bridge.Int.mul(spriteNum, 64), 256, 64, 64, (((this.xMibi >> 10) - 96) | 0), (((this.yMibi >> 10) - 96) | 0), 0, 384);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemyYetiBoss_Jump", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.IEnemy],
        statics: {
            fields: {
                FIRST_JUMP_COOLDOWN: 0,
                SUBSEQUENT_JUMP_COOLDOWN: 0
            },
            ctors: {
                init: function () {
                    this.FIRST_JUMP_COOLDOWN = 1000000;
                    this.SUBSEQUENT_JUMP_COOLDOWN = 500000;
                }
            },
            methods: {
                GetEnemyYetiBoss_Jump: function (xMibi, yMibi, elapsedMicros, isFacingRight, enemyIdCounter, numTimesHit, rngSeed, enemyId) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyYetiBoss_Jump(xMibi, yMibi, elapsedMicros, 0, 0, isFacingRight, 0, TuxPlanetSpeedrunAnyPercentLibrary.EnemyYetiBoss_Jump.FIRST_JUMP_COOLDOWN, enemyIdCounter, numTimesHit, rngSeed, enemyId);
                }
            }
        },
        fields: {
            xMibi: 0,
            yMibi: 0,
            elapsedMicros: 0,
            xSpeedInMibipixelsPerSecond: 0,
            ySpeedInMibipixelsPerSecond: 0,
            isFacingRight: false,
            numJumps: 0,
            jumpCooldown: null,
            enemyIdCounter: 0,
            numTimesHit: 0,
            rngSeed: null,
            EnemyId: null
        },
        alias: [
            "EnemyId", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId",
            "GetHitboxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetHitboxes",
            "GetDamageBoxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDamageBoxes",
            "GetDeadEnemy", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDeadEnemy",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$Render"
        ],
        ctors: {
            ctor: function (xMibi, yMibi, elapsedMicros, xSpeedInMibipixelsPerSecond, ySpeedInMibipixelsPerSecond, isFacingRight, numJumps, jumpCooldown, enemyIdCounter, numTimesHit, rngSeed, enemyId) {
                this.$initialize();
                this.xMibi = xMibi;
                this.yMibi = yMibi;
                this.elapsedMicros = elapsedMicros;
                this.xSpeedInMibipixelsPerSecond = xSpeedInMibipixelsPerSecond;
                this.ySpeedInMibipixelsPerSecond = ySpeedInMibipixelsPerSecond;
                this.isFacingRight = isFacingRight;
                this.numJumps = numJumps;
                this.jumpCooldown = jumpCooldown;
                this.enemyIdCounter = enemyIdCounter;
                this.numTimesHit = numTimesHit;
                this.rngSeed = rngSeed;
                this.EnemyId = enemyId;
            }
        },
        methods: {
            GetHitboxes: function () {
                return Bridge.fn.bind(this, function (_o1) {
                        _o1.add(new TuxPlanetSpeedrunAnyPercentLibrary.Hitbox((((this.xMibi >> 10) - 48) | 0), (((this.yMibi >> 10) - 48) | 0), 96, 96));
                        return _o1;
                    })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Hitbox)).ctor());
            },
            GetDamageBoxes: function () {
                return null;
            },
            GetDeadEnemy: function () {
                return null;
            },
            ProcessFrame: function (cameraX, cameraY, windowWidth, windowHeight, elapsedMicrosPerFrame, tuxState, random, tilemap, levelFlags, soundOutput) {
                var newElapsedMicros = (this.elapsedMicros + elapsedMicrosPerFrame) | 0;

                if (newElapsedMicros > 2000000000) {
                    newElapsedMicros = 1;
                }

                var newXMibi = this.xMibi;
                var newYMibi = this.yMibi;

                var newXSpeedInMibipixelsPerSecond = this.xSpeedInMibipixelsPerSecond;
                var newYSpeedInMibipixelsPerSecond = this.ySpeedInMibipixelsPerSecond;

                var newNumJumps = this.numJumps;

                var isOnGround = tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(newXMibi >> 10, (((((newYMibi >> 10) - 96) | 0) - 1) | 0));

                var newEnemies = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor();

                var newIsFacingRight = this.isFacingRight;

                var newJumpCooldown = this.jumpCooldown;

                if (isOnGround && newYSpeedInMibipixelsPerSecond <= 0) {
                    newXSpeedInMibipixelsPerSecond = 0;
                    newIsFacingRight = newXMibi < tuxState.XMibi;

                    if (newJumpCooldown == null) {
                        newJumpCooldown = TuxPlanetSpeedrunAnyPercentLibrary.EnemyYetiBoss_Jump.SUBSEQUENT_JUMP_COOLDOWN;
                        soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$PlaySound(TuxPlanetSpeedrunAnyPercentLibrary.GameSound.Explosion00Modified);
                        newElapsedMicros = 0;
                    }
                    newJumpCooldown = Bridge.Int.clip32(System.Nullable.getValue(newJumpCooldown) - elapsedMicrosPerFrame);

                    if (System.Nullable.getValue(newJumpCooldown) <= 0) {
                        newJumpCooldown = null;
                        if (newNumJumps === 3) {
                            return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(Bridge.fn.bind(this, function (_o1) {
                                    _o1.add(TuxPlanetSpeedrunAnyPercentLibrary.EnemyYetiBoss_Throw.GetEnemyYetiBoss_Throw(newXMibi, newYMibi, 0, newIsFacingRight, this.enemyIdCounter, this.numTimesHit, this.rngSeed, this.EnemyId));
                                    return _o1;
                                })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor()), null, null);
                        }

                        newYSpeedInMibipixelsPerSecond = 1700000;
                        newElapsedMicros = 0;

                        var deltaX = (tuxState.XMibi - newXMibi) | 0;

                        newXSpeedInMibipixelsPerSecond = (Bridge.Int.div(Bridge.Int.mul(deltaX, 9), 10)) | 0;

                        newNumJumps = (newNumJumps + 1) | 0;
                    }
                }

                if (!isOnGround) {
                    newYSpeedInMibipixelsPerSecond = (newYSpeedInMibipixelsPerSecond - (Bridge.Int.mul(elapsedMicrosPerFrame, 3))) | 0;
                }

                var proposedNewYMibi = System.Int64.clip32(System.Int64(newYMibi).add(System.Int64(newYSpeedInMibipixelsPerSecond).mul(System.Int64(elapsedMicrosPerFrame)).div(System.Int64(1000)).div(System.Int64(1000))));
                if (newYSpeedInMibipixelsPerSecond < 0) {
                    while (true) {
                        if (tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(newXMibi >> 10, (((proposedNewYMibi >> 10) - 96) | 0))) {
                            newYSpeedInMibipixelsPerSecond = 0;
                            proposedNewYMibi = (proposedNewYMibi + 1024) | 0;
                            if (proposedNewYMibi >= newYMibi) {
                                proposedNewYMibi = newYMibi;
                                break;
                            }
                        } else {
                            break;
                        }
                    }
                }

                newYMibi = proposedNewYMibi;

                var proposedNewXMibi = System.Int64.clip32(System.Int64(newXMibi).add(System.Int64(newXSpeedInMibipixelsPerSecond).mul(System.Int64(elapsedMicrosPerFrame)).div(System.Int64(1000)).div(System.Int64(1000))));
                if (newXSpeedInMibipixelsPerSecond > 0) {
                    while (true) {
                        if (tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround((((proposedNewXMibi >> 10) + 96) | 0), newYMibi >> 10)) {
                            newXSpeedInMibipixelsPerSecond = 0;
                            proposedNewXMibi = (proposedNewXMibi - 1024) | 0;
                            if (proposedNewXMibi <= newXMibi) {
                                proposedNewXMibi = newXMibi;
                                break;
                            }
                        } else {
                            break;
                        }
                    }
                }
                if (newXSpeedInMibipixelsPerSecond < 0) {
                    while (true) {
                        if (tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround((((proposedNewXMibi >> 10) - 96) | 0), newYMibi >> 10)) {
                            newXSpeedInMibipixelsPerSecond = 0;
                            proposedNewXMibi = (proposedNewXMibi + 1024) | 0;
                            if (proposedNewXMibi >= newXMibi) {
                                proposedNewXMibi = newXMibi;
                                break;
                            }
                        } else {
                            break;
                        }
                    }
                }

                newXMibi = proposedNewXMibi;

                newEnemies.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemyYetiBoss_Jump(newXMibi, newYMibi, newElapsedMicros, newXSpeedInMibipixelsPerSecond, newYSpeedInMibipixelsPerSecond, newIsFacingRight, newNumJumps, newJumpCooldown, this.enemyIdCounter, this.numTimesHit, this.rngSeed, this.EnemyId));

                return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(newEnemies, null, null);
            },
            Render: function (displayOutput) {
                var imageX;

                if (System.Nullable.hasValue(this.jumpCooldown)) {
                    imageX = System.Nullable.lte(this.jumpCooldown, (250000)) ? 1 : 0;
                } else {
                    if (this.ySpeedInMibipixelsPerSecond > 0) {
                        imageX = this.elapsedMicros < 300000 ? 2 : 3;
                    } else {
                        imageX = 4;
                    }
                }

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(this.isFacingRight ? TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Yeti : TuxPlanetSpeedrunAnyPercentLibrary.GameImage.YetiMirrored, Bridge.Int.mul(imageX, 64), 192, 64, 64, (((this.xMibi >> 10) - 96) | 0), (((this.yMibi >> 10) - 96) | 0), 0, 384);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemyYetiBoss_Recoil", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.IEnemy],
        statics: {
            methods: {
                GetEnemyYetiBoss_Recoil: function (xMibi, yMibi, elapsedMicros, isFacingRight, enemyIdCounter, numTimesHit, rngSeed, enemyId) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyYetiBoss_Recoil(xMibi, yMibi, elapsedMicros, Bridge.Int.mul(400000, (isFacingRight ? -1 : 1)), 700000, isFacingRight, enemyIdCounter, numTimesHit, rngSeed, enemyId);
                }
            }
        },
        fields: {
            xMibi: 0,
            yMibi: 0,
            elapsedMicros: 0,
            xSpeedInMibipixelsPerSecond: 0,
            ySpeedInMibipixelsPerSecond: 0,
            isFacingRight: false,
            enemyIdCounter: 0,
            numTimesHit: 0,
            rngSeed: null,
            EnemyId: null
        },
        alias: [
            "EnemyId", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId",
            "GetHitboxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetHitboxes",
            "GetDamageBoxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDamageBoxes",
            "GetDeadEnemy", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDeadEnemy",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$Render"
        ],
        ctors: {
            ctor: function (xMibi, yMibi, elapsedMicros, xSpeedInMibipixelsPerSecond, ySpeedInMibipixelsPerSecond, isFacingRight, enemyIdCounter, numTimesHit, rngSeed, enemyId) {
                this.$initialize();
                this.xMibi = xMibi;
                this.yMibi = yMibi;
                this.elapsedMicros = elapsedMicros;
                this.xSpeedInMibipixelsPerSecond = xSpeedInMibipixelsPerSecond;
                this.ySpeedInMibipixelsPerSecond = ySpeedInMibipixelsPerSecond;
                this.isFacingRight = isFacingRight;
                this.enemyIdCounter = enemyIdCounter;
                this.numTimesHit = numTimesHit;
                this.rngSeed = rngSeed;
                this.EnemyId = enemyId;
            }
        },
        methods: {
            GetHitboxes: function () {
                return null;
            },
            GetDamageBoxes: function () {
                return Bridge.fn.bind(this, function (_o1) {
                        _o1.add(new TuxPlanetSpeedrunAnyPercentLibrary.Hitbox((((this.xMibi >> 10) - 48) | 0), (((this.yMibi >> 10) - 48) | 0), 96, 96));
                        return _o1;
                    })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Hitbox)).ctor());
            },
            GetDeadEnemy: function () {
                return TuxPlanetSpeedrunAnyPercentLibrary.EnemyYetiBoss_Hit.GetEnemyYetiBoss_Hit(this.xMibi, this.yMibi, 0, this.isFacingRight, this.enemyIdCounter, ((this.numTimesHit + 1) | 0), this.rngSeed, (this.EnemyId || "") + "_hit");
            },
            ProcessFrame: function (cameraX, cameraY, windowWidth, windowHeight, elapsedMicrosPerFrame, tuxState, random, tilemap, levelFlags, soundOutput) {
                var newElapsedMicros = (this.elapsedMicros + elapsedMicrosPerFrame) | 0;

                if (newElapsedMicros > 2000000000) {
                    newElapsedMicros = 1;
                }

                var newEnemies = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor();

                var newXMibi = this.xMibi;
                var newYMibi = this.yMibi;

                var newXSpeedInMibipixelsPerSecond = this.xSpeedInMibipixelsPerSecond;
                var newYSpeedInMibipixelsPerSecond = this.ySpeedInMibipixelsPerSecond;

                var isOnGround = tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(newXMibi >> 10, (((((newYMibi >> 10) - 96) | 0) - 1) | 0)) && this.ySpeedInMibipixelsPerSecond === 0;

                if (isOnGround) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(Bridge.fn.bind(this, function (_o1) {
                            _o1.add(TuxPlanetSpeedrunAnyPercentLibrary.EnemyYetiBoss_Stunned.GetEnemyYetiBoss_Stunned(this.xMibi, this.yMibi, 0, this.isFacingRight, this.enemyIdCounter, this.numTimesHit, this.rngSeed, this.EnemyId));
                            return _o1;
                        })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor()), null, null);
                }

                newYSpeedInMibipixelsPerSecond = (newYSpeedInMibipixelsPerSecond - (Bridge.Int.mul(elapsedMicrosPerFrame, 3))) | 0;

                var proposedNewYMibi = System.Int64.clip32(System.Int64(newYMibi).add(System.Int64(newYSpeedInMibipixelsPerSecond).mul(System.Int64(elapsedMicrosPerFrame)).div(System.Int64(1000)).div(System.Int64(1000))));
                if (newYSpeedInMibipixelsPerSecond < 0) {
                    while (true) {
                        if (tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(newXMibi >> 10, (((proposedNewYMibi >> 10) - 96) | 0))) {
                            newYSpeedInMibipixelsPerSecond = 0;
                            proposedNewYMibi = (proposedNewYMibi + 1024) | 0;
                            if (proposedNewYMibi >= newYMibi) {
                                proposedNewYMibi = newYMibi;
                                break;
                            }
                        } else {
                            break;
                        }
                    }
                }

                newYMibi = proposedNewYMibi;

                newXMibi = System.Int64.clip32(System.Int64(newXMibi).add(System.Int64(newXSpeedInMibipixelsPerSecond).mul(System.Int64(elapsedMicrosPerFrame)).div(System.Int64(1000)).div(System.Int64(1000))));

                newEnemies.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemyYetiBoss_Recoil(newXMibi, newYMibi, newElapsedMicros, newXSpeedInMibipixelsPerSecond, newYSpeedInMibipixelsPerSecond, this.isFacingRight, this.enemyIdCounter, this.numTimesHit, this.rngSeed, this.EnemyId));

                return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(newEnemies, null, null);
            },
            Render: function (displayOutput) {
                var spriteNum = (((Bridge.Int.div(this.elapsedMicros, (100000))) | 0)) % 2;

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(this.isFacingRight ? TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Yeti : TuxPlanetSpeedrunAnyPercentLibrary.GameImage.YetiMirrored, Bridge.Int.mul(spriteNum, 64), 256, 64, 64, (((this.xMibi >> 10) - 96) | 0), (((this.yMibi >> 10) - 96) | 0), 0, 384);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemyYetiBoss_Stunned", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.IEnemy],
        statics: {
            methods: {
                GetEnemyYetiBoss_Stunned: function (xMibi, yMibi, elapsedMicros, isFacingRight, enemyIdCounter, numTimesHit, rngSeed, enemyId) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyYetiBoss_Stunned(xMibi, yMibi, elapsedMicros, isFacingRight, enemyIdCounter, numTimesHit, rngSeed, enemyId);
                }
            }
        },
        fields: {
            xMibi: 0,
            yMibi: 0,
            elapsedMicros: 0,
            isFacingRight: false,
            enemyIdCounter: 0,
            numTimesHit: 0,
            rngSeed: null,
            EnemyId: null
        },
        alias: [
            "EnemyId", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId",
            "GetHitboxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetHitboxes",
            "GetDamageBoxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDamageBoxes",
            "GetDeadEnemy", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDeadEnemy",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$Render"
        ],
        ctors: {
            ctor: function (xMibi, yMibi, elapsedMicros, isFacingRight, enemyIdCounter, numTimesHit, rngSeed, enemyId) {
                this.$initialize();
                this.xMibi = xMibi;
                this.yMibi = yMibi;
                this.elapsedMicros = elapsedMicros;
                this.isFacingRight = isFacingRight;
                this.enemyIdCounter = enemyIdCounter;
                this.numTimesHit = numTimesHit;
                this.rngSeed = rngSeed;
                this.EnemyId = enemyId;
            }
        },
        methods: {
            GetHitboxes: function () {
                return null;
            },
            GetDamageBoxes: function () {
                return Bridge.fn.bind(this, function (_o1) {
                        _o1.add(new TuxPlanetSpeedrunAnyPercentLibrary.Hitbox((((this.xMibi >> 10) - 48) | 0), (((this.yMibi >> 10) - 48) | 0), 96, 96));
                        return _o1;
                    })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Hitbox)).ctor());
            },
            GetDeadEnemy: function () {
                return TuxPlanetSpeedrunAnyPercentLibrary.EnemyYetiBoss_Hit.GetEnemyYetiBoss_Hit(this.xMibi, this.yMibi, 0, this.isFacingRight, this.enemyIdCounter, ((this.numTimesHit + 1) | 0), this.rngSeed, (this.EnemyId || "") + "_hit");
            },
            ProcessFrame: function (cameraX, cameraY, windowWidth, windowHeight, elapsedMicrosPerFrame, tuxState, random, tilemap, levelFlags, soundOutput) {
                var newElapsedMicros = (this.elapsedMicros + elapsedMicrosPerFrame) | 0;

                if (newElapsedMicros > 2000000000) {
                    newElapsedMicros = 1;
                }

                var newEnemies = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor();

                newEnemies.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemyYetiBoss_Stunned(this.xMibi, this.yMibi, newElapsedMicros, this.isFacingRight, this.enemyIdCounter, this.numTimesHit, this.rngSeed, this.EnemyId));

                return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(newEnemies, null, null);
            },
            Render: function (displayOutput) {
                var spriteNum = (((Bridge.Int.div(this.elapsedMicros, (100000))) | 0)) % 2;

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(this.isFacingRight ? TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Yeti : TuxPlanetSpeedrunAnyPercentLibrary.GameImage.YetiMirrored, ((128 + Bridge.Int.mul(spriteNum, 64)) | 0), 256, 64, 64, (((this.xMibi >> 10) - 96) | 0), (((this.yMibi >> 10) - 96) | 0), 0, 384);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemyYetiBoss_Throw", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.IEnemy],
        statics: {
            fields: {
                THROW_COOLDOWN: 0,
                POST_THROW_COOLDOWN: 0
            },
            ctors: {
                init: function () {
                    this.THROW_COOLDOWN = 200000;
                    this.POST_THROW_COOLDOWN = 100000;
                }
            },
            methods: {
                GetEnemyYetiBoss_Throw: function (xMibi, yMibi, elapsedMicros, isFacingRight, enemyIdCounter, numTimesHit, rngSeed, enemyId) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyYetiBoss_Throw(xMibi, yMibi, elapsedMicros, isFacingRight, 0, TuxPlanetSpeedrunAnyPercentLibrary.EnemyYetiBoss_Throw.THROW_COOLDOWN, null, enemyIdCounter, numTimesHit, rngSeed, enemyId);
                }
            }
        },
        fields: {
            xMibi: 0,
            yMibi: 0,
            elapsedMicros: 0,
            isFacingRight: false,
            numThrows: 0,
            throwCooldown: null,
            postThrowCooldown: null,
            enemyIdCounter: 0,
            numTimesHit: 0,
            rngSeed: null,
            EnemyId: null
        },
        alias: [
            "EnemyId", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId",
            "GetHitboxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetHitboxes",
            "GetDamageBoxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDamageBoxes",
            "GetDeadEnemy", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDeadEnemy",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$Render"
        ],
        ctors: {
            ctor: function (xMibi, yMibi, elapsedMicros, isFacingRight, numThrows, throwCooldown, postThrowCooldown, enemyIdCounter, numTimesHit, rngSeed, enemyId) {
                this.$initialize();
                this.xMibi = xMibi;
                this.yMibi = yMibi;
                this.elapsedMicros = elapsedMicros;
                this.isFacingRight = isFacingRight;
                this.numThrows = numThrows;
                this.throwCooldown = throwCooldown;
                this.postThrowCooldown = postThrowCooldown;
                this.enemyIdCounter = enemyIdCounter;
                this.numTimesHit = numTimesHit;
                this.rngSeed = rngSeed;
                this.EnemyId = enemyId;
            }
        },
        methods: {
            GetHitboxes: function () {
                return Bridge.fn.bind(this, function (_o1) {
                        _o1.add(new TuxPlanetSpeedrunAnyPercentLibrary.Hitbox((((this.xMibi >> 10) - 48) | 0), (((this.yMibi >> 10) - 48) | 0), 96, 96));
                        return _o1;
                    })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Hitbox)).ctor());
            },
            GetDamageBoxes: function () {
                return null;
            },
            GetDeadEnemy: function () {
                return null;
            },
            ProcessFrame: function (cameraX, cameraY, windowWidth, windowHeight, elapsedMicrosPerFrame, tuxState, random, tilemap, levelFlags, soundOutput) {
                var newElapsedMicros = (this.elapsedMicros + elapsedMicrosPerFrame) | 0;

                if (newElapsedMicros > 2000000000) {
                    newElapsedMicros = 1;
                }

                var newEnemies = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor();

                var newNumThrows = this.numThrows;
                var newThrowCooldown = this.throwCooldown;
                var newPostThrowCooldown = this.postThrowCooldown;

                var newEnemyIdCounter = this.enemyIdCounter;

                var newRngSeed = this.rngSeed;

                if (newThrowCooldown != null) {
                    newThrowCooldown = Bridge.Int.clip32(System.Nullable.getValue(newThrowCooldown) - elapsedMicrosPerFrame);

                    if (System.Nullable.getValue(newThrowCooldown) <= 0) {
                        var yetiRandom = new DTLibrary.DTDeterministicRandom.ctor();
                        yetiRandom.DeserializeFromString(newRngSeed);
                        var xSpeedInMibipixelsPerSecond = (((450000 + yetiRandom.NextInt(300000)) | 0) - 150000) | 0;
                        var jumpSpeed = (650000 + yetiRandom.NextInt(250000)) | 0;
                        var orbitersAngleScaled = yetiRandom.NextInt(46080);
                        var isOrbitingClockwise = yetiRandom.NextBool();
                        newRngSeed = yetiRandom.SerializeToString();

                        newThrowCooldown = null;
                        newPostThrowCooldown = TuxPlanetSpeedrunAnyPercentLibrary.EnemyYetiBoss_Throw.POST_THROW_COOLDOWN;
                        if (newNumThrows === 7 && this.numTimesHit >= 2) {
                            newEnemies.add(TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteOrange_YetiVersion.GetEnemyEliteOrange_YetiVersion(((this.xMibi + Bridge.Int.mul(30720, (this.isFacingRight ? 1 : -1))) | 0), this.yMibi, Bridge.Int.mul(xSpeedInMibipixelsPerSecond, (this.isFacingRight ? 1 : -1)), jumpSpeed, orbitersAngleScaled, isOrbitingClockwise, (this.EnemyId || "") + "_" + (DTLibrary.StringUtil.ToStringCultureInvariant(newEnemyIdCounter) || "")));
                        } else {
                            newEnemies.add(TuxPlanetSpeedrunAnyPercentLibrary.EnemyOrange_YetiVersion.GetEnemyOrange_YetiVersion(((this.xMibi + Bridge.Int.mul(30720, (this.isFacingRight ? 1 : -1))) | 0), this.yMibi, Bridge.Int.mul(xSpeedInMibipixelsPerSecond, (this.isFacingRight ? 1 : -1)), jumpSpeed, (this.EnemyId || "") + "_" + (DTLibrary.StringUtil.ToStringCultureInvariant(newEnemyIdCounter) || "")));
                        }
                        newEnemyIdCounter = (newEnemyIdCounter + 1) | 0;
                    }
                }

                if (newPostThrowCooldown != null) {
                    newPostThrowCooldown = Bridge.Int.clip32(System.Nullable.getValue(newPostThrowCooldown) - elapsedMicrosPerFrame);

                    if (System.Nullable.getValue(newPostThrowCooldown) <= 0) {
                        newPostThrowCooldown = null;
                        newNumThrows = (newNumThrows + 1) | 0;
                        newThrowCooldown = TuxPlanetSpeedrunAnyPercentLibrary.EnemyYetiBoss_Throw.THROW_COOLDOWN;

                        if (this.numTimesHit === 0 && newNumThrows === 3 || newNumThrows === 8) {
                            return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(Bridge.fn.bind(this, function (_o1) {
                                    _o1.add(TuxPlanetSpeedrunAnyPercentLibrary.EnemyYetiBoss_Charge.GetEnemyYetiBoss_Charge(this.xMibi, this.yMibi, 0, tuxState.XMibi > this.xMibi, newEnemyIdCounter, this.numTimesHit, newRngSeed, this.EnemyId));
                                    return _o1;
                                })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor()), null, null);
                        }
                    }
                }

                newEnemies.insert(0, new TuxPlanetSpeedrunAnyPercentLibrary.EnemyYetiBoss_Throw(this.xMibi, this.yMibi, newElapsedMicros, this.isFacingRight, newNumThrows, newThrowCooldown, newPostThrowCooldown, newEnemyIdCounter, this.numTimesHit, newRngSeed, this.EnemyId));

                return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(newEnemies, null, null);
            },
            Render: function (displayOutput) {
                var imageX;

                if (System.Nullable.hasValue(this.throwCooldown)) {
                    imageX = 0;
                } else {
                    if (System.Nullable.getValue(this.postThrowCooldown) > 67000) {
                        imageX = 1;
                    } else {
                        if (System.Nullable.getValue(this.postThrowCooldown) > 33000) {
                            imageX = 2;
                        } else {
                            imageX = 3;
                        }
                    }
                }

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(this.isFacingRight ? TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Yeti : TuxPlanetSpeedrunAnyPercentLibrary.GameImage.YetiMirrored, Bridge.Int.mul(imageX, 64), 320, 64, 64, (((this.xMibi >> 10) - 96) | 0), (((this.yMibi >> 10) - 96) | 0), 0, 384);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemyYetiBossSpike", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.IEnemy],
        statics: {
            fields: {
                LEVEL_FLAG_DESPAWN_YETI_BOSS_ROOM_SPIKES: null
            },
            ctors: {
                init: function () {
                    this.LEVEL_FLAG_DESPAWN_YETI_BOSS_ROOM_SPIKES = "despawnYetiBossRoomSpikes";
                }
            },
            methods: {
                GetEnemyYetiBossSpike: function (xMibi, yMibi, cooldownUntilActive, enemyId) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyYetiBossSpike(xMibi, yMibi, false, cooldownUntilActive, enemyId);
                }
            }
        },
        fields: {
            xMibi: 0,
            yMibi: 0,
            isActive: false,
            cooldownUntilActive: 0,
            EnemyId: null
        },
        alias: [
            "EnemyId", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId",
            "GetHitboxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetHitboxes",
            "GetDamageBoxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDamageBoxes",
            "GetDeadEnemy", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDeadEnemy",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$Render"
        ],
        ctors: {
            ctor: function (xMibi, yMibi, isActive, cooldownUntilActive, enemyId) {
                this.$initialize();
                this.xMibi = xMibi;
                this.yMibi = yMibi;
                this.isActive = isActive;
                this.cooldownUntilActive = cooldownUntilActive;
                this.EnemyId = enemyId;
            }
        },
        methods: {
            GetHitboxes: function () {
                if (!this.isActive) {
                    return null;
                }

                return Bridge.fn.bind(this, function (_o1) {
                        _o1.add(new TuxPlanetSpeedrunAnyPercentLibrary.Hitbox((((this.xMibi >> 10) - 24) | 0), (((this.yMibi >> 10) - 24) | 0), 48, 48));
                        return _o1;
                    })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Hitbox)).ctor());
            },
            GetDamageBoxes: function () {
                return null;
            },
            GetDeadEnemy: function () {
                return null;
            },
            ProcessFrame: function (cameraX, cameraY, windowWidth, windowHeight, elapsedMicrosPerFrame, tuxState, random, tilemap, levelFlags, soundOutput) {
                if (System.Linq.Enumerable.from(levelFlags).contains(TuxPlanetSpeedrunAnyPercentLibrary.EnemyYetiBossSpike.LEVEL_FLAG_DESPAWN_YETI_BOSS_ROOM_SPIKES)) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(Bridge.fn.bind(this, function (_o1) {
                            _o1.add(TuxPlanetSpeedrunAnyPercentLibrary.EnemyDeadPoof.SpawnEnemyDeadPoof(this.xMibi, this.yMibi, (this.EnemyId || "") + "_disappearPoof"));
                            return _o1;
                        })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor()), null, null);
                }

                var list = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor();

                var newCooldownUntilActive;
                var newIsActive;
                var shouldSpawnEnemyDeadPoof;

                if (this.isActive) {
                    newCooldownUntilActive = 0;
                    newIsActive = true;
                    shouldSpawnEnemyDeadPoof = false;
                } else {
                    newCooldownUntilActive = (this.cooldownUntilActive - elapsedMicrosPerFrame) | 0;
                    if (newCooldownUntilActive <= 0) {
                        newCooldownUntilActive = 0;
                        newIsActive = true;
                        shouldSpawnEnemyDeadPoof = true;
                    } else {
                        newIsActive = false;
                        shouldSpawnEnemyDeadPoof = false;
                    }
                }

                list.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemyYetiBossSpike(this.xMibi, this.yMibi, newIsActive, newCooldownUntilActive, this.EnemyId));

                if (shouldSpawnEnemyDeadPoof) {
                    list.add(TuxPlanetSpeedrunAnyPercentLibrary.EnemyDeadPoof.SpawnEnemyDeadPoof(this.xMibi, this.yMibi, (this.EnemyId || "") + "_spawnPoof"));
                }

                return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(list, null, null);
            },
            Render: function (displayOutput) {
                if (this.isActive) {
                    displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Spikes, 16, 16, 16, 16, (((this.xMibi >> 10) - 24) | 0), (((this.yMibi >> 10) - 24) | 0), 0, 384);
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemyYetiCutscene", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.IEnemy],
        statics: {
            fields: {
                LEVEL_FLAG_SWITCH_DIRECTIONS: null,
                LEVEL_FLAG_DESPAWN_YETI_CUTSCENE_AND_SPAWN_YETI_BOSS: null
            },
            ctors: {
                init: function () {
                    this.LEVEL_FLAG_SWITCH_DIRECTIONS = "enemyYetiCutscene_switchDirections";
                    this.LEVEL_FLAG_DESPAWN_YETI_CUTSCENE_AND_SPAWN_YETI_BOSS = "enemyYetiCutscene_despawnYetiCutsceneAndSpawnYetiBoss";
                }
            },
            methods: {
                GetEnemyYetiCutscene: function (xMibi, yMibi, rngSeed, enemyId) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyYetiCutscene(xMibi >> 10, yMibi >> 10, 0, true, rngSeed, enemyId);
                }
            }
        },
        fields: {
            x: 0,
            y: 0,
            elapsedMicros: 0,
            isFacingRight: false,
            rngSeed: null,
            EnemyId: null
        },
        alias: [
            "EnemyId", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId",
            "GetHitboxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetHitboxes",
            "GetDamageBoxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDamageBoxes",
            "GetDeadEnemy", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDeadEnemy",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$Render"
        ],
        ctors: {
            ctor: function (x, y, elapsedMicros, isFacingRight, rngSeed, enemyId) {
                this.$initialize();
                this.x = x;
                this.y = y;
                this.elapsedMicros = elapsedMicros;
                this.isFacingRight = isFacingRight;
                this.rngSeed = rngSeed;
                this.EnemyId = enemyId;
            }
        },
        methods: {
            GetHitboxes: function () {
                return null;
            },
            GetDamageBoxes: function () {
                return null;
            },
            GetDeadEnemy: function () {
                return null;
            },
            ProcessFrame: function (cameraX, cameraY, windowWidth, windowHeight, elapsedMicrosPerFrame, tuxState, random, tilemap, levelFlags, soundOutput) {
                var newElapsedMicros = (this.elapsedMicros + elapsedMicrosPerFrame) | 0;

                if (newElapsedMicros > 2000000000) {
                    newElapsedMicros = 1;
                }

                var newIsFacingRight = this.isFacingRight;

                if (newIsFacingRight && System.Linq.Enumerable.from(levelFlags).contains(TuxPlanetSpeedrunAnyPercentLibrary.EnemyYetiCutscene.LEVEL_FLAG_SWITCH_DIRECTIONS)) {
                    newIsFacingRight = false;
                }

                if (System.Linq.Enumerable.from(levelFlags).contains(TuxPlanetSpeedrunAnyPercentLibrary.EnemyYetiCutscene.LEVEL_FLAG_DESPAWN_YETI_CUTSCENE_AND_SPAWN_YETI_BOSS)) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(Bridge.fn.bind(this, function (_o1) {
                            _o1.add(TuxPlanetSpeedrunAnyPercentLibrary.EnemyYetiBoss_Jump.GetEnemyYetiBoss_Jump(this.x << 10, this.y << 10, 0, false, 1, 0, this.rngSeed, "EnemyYetiBoss"));
                            return _o1;
                        })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor()), null, null);
                }

                return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(Bridge.fn.bind(this, function (_o2) {
                        _o2.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemyYetiCutscene(this.x, this.y, newElapsedMicros, newIsFacingRight, this.rngSeed, this.EnemyId));
                        return _o2;
                    })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor()), null, null);
            },
            Render: function (displayOutput) {
                var spriteNum = (((Bridge.Int.div(this.elapsedMicros, 250000)) | 0)) % 8;

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(this.isFacingRight ? TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Yeti : TuxPlanetSpeedrunAnyPercentLibrary.GameImage.YetiMirrored, Bridge.Int.mul(spriteNum, 64), 0, 64, 64, ((this.x - 96) | 0), ((this.y - 96) | 0), 0, 384);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.Level10CoordinatorTilemap", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.ITilemap],
        fields: {
            mapTilemap: null,
            bossRoomXOffsetStart: 0,
            bossRoomXOffsetEnd: 0,
            markYetiFloorAsGround: false,
            markLeftAndRightWallsOfBossRoomAsGround: false,
            stopMarkingLeftAndRightWallsOfBossRoomAsGround: false,
            beginKonqiDefeatedCutscene: false,
            beginYetiIntroCutscene: false,
            beginYetiDefeatedCutscene: false,
            createCheckpointAfterDefeatingKonqi: false,
            spawnMythrilKey: false,
            startPlayingKonqiBossMusic: false,
            stopPlayingKonqiBossMusic: false,
            startPlayingYetiBossMusic: false,
            stopPlayingYetiBossMusic: false,
            continuouslyRenderKonqiBlocks: false
        },
        alias: [
            "IsGround", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround",
            "IsKillZone", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsKillZone",
            "IsSpikes", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsSpikes",
            "IsEndOfLevel", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsEndOfLevel",
            "GetCutscene", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetCutscene",
            "GetCheckpoint", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetCheckpoint",
            "GetWidth", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetWidth",
            "GetHeight", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetHeight",
            "GetTuxLocation", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetTuxLocation",
            "GetMapKeyLocation", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetMapKeyLocation",
            "GetEnemies", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetEnemies",
            "PlayMusic", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$PlayMusic",
            "RenderBackgroundTiles", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$RenderBackgroundTiles",
            "RenderForegroundTiles", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$RenderForegroundTiles"
        ],
        ctors: {
            ctor: function (mapTilemap, levelFlags, bossRoomXOffsetStart, bossRoomXOffsetEnd) {
                this.$initialize();
                this.mapTilemap = mapTilemap;
                this.bossRoomXOffsetStart = bossRoomXOffsetStart;
                this.bossRoomXOffsetEnd = bossRoomXOffsetEnd;

                this.markYetiFloorAsGround = false;
                this.markLeftAndRightWallsOfBossRoomAsGround = false;
                this.stopMarkingLeftAndRightWallsOfBossRoomAsGround = false;
                this.beginKonqiDefeatedCutscene = false;
                this.beginYetiIntroCutscene = false;
                this.beginYetiDefeatedCutscene = false;
                this.createCheckpointAfterDefeatingKonqi = false;
                this.spawnMythrilKey = false;
                this.startPlayingKonqiBossMusic = false;
                this.stopPlayingKonqiBossMusic = false;
                this.startPlayingYetiBossMusic = false;
                this.stopPlayingYetiBossMusic = false;
                this.continuouslyRenderKonqiBlocks = false;

                for (var i = 0; i < System.Array.getCount(levelFlags, System.String); i = (i + 1) | 0) {
                    var levelFlag = System.Array.getItem(levelFlags, i, System.String);

                    if (Bridge.referenceEquals(levelFlag, TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.MARK_YETI_FLOOR_AS_GROUND)) {
                        this.markYetiFloorAsGround = true;
                    } else {
                        if (Bridge.referenceEquals(levelFlag, TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.MARK_LEFT_AND_RIGHT_WALLS_OF_BOSS_ROOM_AS_GROUND)) {
                            this.markLeftAndRightWallsOfBossRoomAsGround = true;
                        } else {
                            if (Bridge.referenceEquals(levelFlag, TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.STOP_MARKING_LEFT_AND_RIGHT_WALLS_OF_BOSS_ROOM_AS_GROUND)) {
                                this.stopMarkingLeftAndRightWallsOfBossRoomAsGround = true;
                            } else {
                                if (Bridge.referenceEquals(levelFlag, TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.BEGIN_KONQI_DEFEATED_CUTSCENE)) {
                                    this.beginKonqiDefeatedCutscene = true;
                                } else {
                                    if (Bridge.referenceEquals(levelFlag, TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.BEGIN_YETI_INTRO_CUTSCENE)) {
                                        this.beginYetiIntroCutscene = true;
                                    } else {
                                        if (Bridge.referenceEquals(levelFlag, TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.BEGIN_YETI_DEFEATED_CUTSCENE)) {
                                            this.beginYetiDefeatedCutscene = true;
                                        } else {
                                            if (Bridge.referenceEquals(levelFlag, TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.CREATE_CHECKPOINT_AFTER_DEFEATING_KONQI)) {
                                                this.createCheckpointAfterDefeatingKonqi = true;
                                            } else {
                                                if (Bridge.referenceEquals(levelFlag, TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.SPAWN_MYTHRIL_KEY)) {
                                                    this.spawnMythrilKey = true;
                                                } else {
                                                    if (Bridge.referenceEquals(levelFlag, TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.START_PLAYING_KONQI_BOSS_MUSIC)) {
                                                        this.startPlayingKonqiBossMusic = true;
                                                    } else {
                                                        if (Bridge.referenceEquals(levelFlag, TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.STOP_PLAYING_KONQI_BOSS_MUSIC)) {
                                                            this.stopPlayingKonqiBossMusic = true;
                                                        } else {
                                                            if (Bridge.referenceEquals(levelFlag, TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.START_PLAYING_YETI_BOSS_MUSIC)) {
                                                                this.startPlayingYetiBossMusic = true;
                                                            } else {
                                                                if (Bridge.referenceEquals(levelFlag, TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.STOP_PLAYING_YETI_BOSS_MUSIC)) {
                                                                    this.stopPlayingYetiBossMusic = true;
                                                                } else {
                                                                    if (Bridge.referenceEquals(levelFlag, TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.CONTINUOUSLY_RENDER_KONQI_BLOCKS)) {
                                                                        this.continuouslyRenderKonqiBlocks = true;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        methods: {
            IsGround: function (x, y) {
                if (this.markYetiFloorAsGround) {
                    if (y < 864) {
                        return true;
                    }
                }

                if (this.markLeftAndRightWallsOfBossRoomAsGround && !this.stopMarkingLeftAndRightWallsOfBossRoomAsGround) {
                    if (x < this.bossRoomXOffsetStart) {
                        return true;
                    }

                    if (x >= this.bossRoomXOffsetEnd) {
                        return true;
                    }
                }

                return this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(x, y);
            },
            IsKillZone: function (x, y) {
                return this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsKillZone(x, y);
            },
            IsSpikes: function (x, y) {
                return this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsSpikes(x, y);
            },
            IsEndOfLevel: function (x, y) {
                return this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsEndOfLevel(x, y);
            },
            GetCutscene: function (x, y) {
                if (this.beginYetiDefeatedCutscene) {
                    return TuxPlanetSpeedrunAnyPercentLibrary.CutsceneProcessing.YETI_BOSS_DEFEATED_CUTSCENE;
                }

                if (this.beginYetiIntroCutscene) {
                    return TuxPlanetSpeedrunAnyPercentLibrary.CutsceneProcessing.YETI_BOSS_INTRO_CUTSCENE;
                }

                if (this.beginKonqiDefeatedCutscene) {
                    return TuxPlanetSpeedrunAnyPercentLibrary.CutsceneProcessing.KONQI_BOSS_DEFEATED_CUTSCENE;
                }

                return this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetCutscene(x, y);
            },
            GetCheckpoint: function (x, y) {
                if (this.createCheckpointAfterDefeatingKonqi) {
                    if (y < 672 && x > ((this.bossRoomXOffsetStart + 432) | 0)) {
                        return { Item1: ((this.bossRoomXOffsetStart + 144) | 0), Item2: 240 };
                    }
                }

                return this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetCheckpoint(x, y);
            },
            GetWidth: function () {
                return this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetWidth();
            },
            GetHeight: function () {
                return this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetHeight();
            },
            GetTuxLocation: function (xOffset, yOffset) {
                return this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetTuxLocation(xOffset, yOffset);
            },
            GetMapKeyLocation: function (mapKey, xOffset, yOffset) {
                if (mapKey === TuxPlanetSpeedrunAnyPercentLibrary.MapKey.Mythril) {
                    if (this.spawnMythrilKey) {
                        return { Item1: ((((this.bossRoomXOffsetStart + 768) | 0) + xOffset) | 0), Item2: ((216 + yOffset) | 0) };
                    }
                }

                return this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetMapKeyLocation(mapKey, xOffset, yOffset);
            },
            GetEnemies: function (xOffset, yOffset) {
                var enemies = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor();
                enemies.AddRange(this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetEnemies(xOffset, yOffset));
                enemies.add(TuxPlanetSpeedrunAnyPercentLibrary.EnemyBossDoor.GetEnemyBossDoor((((this.bossRoomXOffsetStart - 48) | 0)) << 10, 147456, false, "konqiBoss_bossDoor1"));
                enemies.add(TuxPlanetSpeedrunAnyPercentLibrary.EnemyBossDoor.GetEnemyBossDoor((((this.bossRoomXOffsetStart - 48) | 0)) << 10, 245760, true, "konqiBoss_bossDoor2"));
                enemies.add(TuxPlanetSpeedrunAnyPercentLibrary.EnemyBossDoor.GetEnemyBossDoor(this.bossRoomXOffsetEnd << 10, 147456, false, "konqiBoss_bossDoor3"));
                enemies.add(TuxPlanetSpeedrunAnyPercentLibrary.EnemyBossDoor.GetEnemyBossDoor(this.bossRoomXOffsetEnd << 10, 245760, true, "konqiBoss_bossDoor4"));
                enemies.add(TuxPlanetSpeedrunAnyPercentLibrary.EnemyBossDoor.GetEnemyBossDoor(this.bossRoomXOffsetEnd << 10, 884736, false, "yetiBoss_bossDoor1"));
                enemies.add(TuxPlanetSpeedrunAnyPercentLibrary.EnemyBossDoor.GetEnemyBossDoor(this.bossRoomXOffsetEnd << 10, 983040, true, "yetiBoss_bossDoor2"));

                return enemies;
            },
            PlayMusic: function () {
                if (this.startPlayingKonqiBossMusic && !this.stopPlayingKonqiBossMusic) {
                    return TuxPlanetSpeedrunAnyPercentLibrary.GameMusic.KonqiBossTheme;
                }

                if (this.startPlayingYetiBossMusic && !this.stopPlayingYetiBossMusic) {
                    return TuxPlanetSpeedrunAnyPercentLibrary.GameMusic.YetiBossTheme;
                }

                return this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$PlayMusic();
            },
            RenderBackgroundTiles: function (displayOutput, cameraX, cameraY, windowWidth, windowHeight) {
                this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$RenderBackgroundTiles(displayOutput, cameraX, cameraY, windowWidth, windowHeight);
            },
            RenderForegroundTiles: function (displayOutput, cameraX, cameraY, windowWidth, windowHeight) {
                if (this.continuouslyRenderKonqiBlocks) {
                    for (var i = 0; i < 14; i = (i + 1) | 0) {
                        TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiBossDefeat.RenderKonqiBlock(i, null, null, displayOutput);
                    }
                }

                this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$RenderForegroundTiles(displayOutput, cameraX, cameraY, windowWidth, windowHeight);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.Level5Tilemap", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.ITilemap],
        fields: {
            mapTilemap: null,
            startingXMibiOfFirstSpike: 0,
            startingXMibi: 0,
            endingXMibi: 0
        },
        alias: [
            "IsGround", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround",
            "IsKillZone", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsKillZone",
            "IsSpikes", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsSpikes",
            "IsEndOfLevel", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsEndOfLevel",
            "GetCutscene", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetCutscene",
            "GetCheckpoint", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetCheckpoint",
            "GetWidth", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetWidth",
            "GetHeight", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetHeight",
            "GetTuxLocation", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetTuxLocation",
            "GetMapKeyLocation", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetMapKeyLocation",
            "GetEnemies", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetEnemies",
            "PlayMusic", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$PlayMusic",
            "RenderBackgroundTiles", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$RenderBackgroundTiles",
            "RenderForegroundTiles", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$RenderForegroundTiles"
        ],
        ctors: {
            ctor: function (mapTilemap, startingXMibiOfFirstSpike, startingXMibi, endingXMibi) {
                this.$initialize();
                this.mapTilemap = mapTilemap;
                this.startingXMibiOfFirstSpike = startingXMibiOfFirstSpike;
                this.startingXMibi = startingXMibi;
                this.endingXMibi = endingXMibi;
            }
        },
        methods: {
            IsGround: function (x, y) {
                return this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(x, y);
            },
            IsKillZone: function (x, y) {
                return this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsKillZone(x, y);
            },
            IsSpikes: function (x, y) {
                return this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsSpikes(x, y);
            },
            IsEndOfLevel: function (x, y) {
                return this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsEndOfLevel(x, y);
            },
            GetCutscene: function (x, y) {
                return this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetCutscene(x, y);
            },
            GetCheckpoint: function (x, y) {
                return this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetCheckpoint(x, y);
            },
            GetWidth: function () {
                return this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetWidth();
            },
            GetHeight: function () {
                return this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetHeight();
            },
            GetTuxLocation: function (xOffset, yOffset) {
                return this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetTuxLocation(xOffset, yOffset);
            },
            GetMapKeyLocation: function (mapKey, xOffset, yOffset) {
                return this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetMapKeyLocation(mapKey, xOffset, yOffset);
            },
            GetEnemies: function (xOffset, yOffset) {
                var enemies = Bridge.fn.bind(this, function (_o1) {
                        _o1.add(TuxPlanetSpeedrunAnyPercentLibrary.EnemyLevel5SpikesInitialSpawn.GetEnemyLevel5SpikesInitialSpawn(((this.startingXMibiOfFirstSpike + (xOffset << 10)) | 0), ((this.startingXMibi + (xOffset << 10)) | 0), ((this.endingXMibi + (xOffset << 10)) | 0), yOffset << 10, 50, "level5Spikes_Prefix", "level5Spikes_GetEnemyLevel5SpikesInitialSpawn"));
                        return _o1;
                    })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor());

                var mapTilemapEnemies = this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetEnemies(xOffset, yOffset);

                enemies.AddRange(mapTilemapEnemies);

                return enemies;
            },
            PlayMusic: function () {
                return this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$PlayMusic();
            },
            RenderBackgroundTiles: function (displayOutput, cameraX, cameraY, windowWidth, windowHeight) {
                this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$RenderBackgroundTiles(displayOutput, cameraX, cameraY, windowWidth, windowHeight);
            },
            RenderForegroundTiles: function (displayOutput, cameraX, cameraY, windowWidth, windowHeight) {
                this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$RenderForegroundTiles(displayOutput, cameraX, cameraY, windowWidth, windowHeight);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level1", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.ILevelConfiguration],
        statics: {
            fields: {
                LEVEL_SUBFOLDER: null
            },
            ctors: {
                init: function () {
                    this.LEVEL_SUBFOLDER = "Level1";
                }
            },
            methods: {
                ConstructUnnormalizedTilemaps: function (mapInfo, random) {
                    var gameMusic = TuxPlanetSpeedrunAnyPercentLibrary.GameMusic.Chipdisko;

                    var enemyIdGenerator = new TuxPlanetSpeedrunAnyPercentLibrary.EnemyIdGenerator();

                    var list = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset)).ctor();

                    var level1TilemapWithOffset = new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level1/Level1"), enemyIdGenerator, null, 384, gameMusic), 0, 0, false);

                    list.add(level1TilemapWithOffset);

                    return list;
                }
            }
        },
        fields: {
            normalizedTilemaps: null,
            background: null
        },
        alias: [
            "GetCustomLevelInfo", "TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetCustomLevelInfo",
            "GetBackground", "TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetBackground",
            "GetTilemap", "TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetTilemap",
            "GetCameraState", "TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetCameraState"
        ],
        ctors: {
            ctor: function (mapInfo, random) {
                this.$initialize();
                var unnormalizedTilemaps = TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level1.ConstructUnnormalizedTilemaps(mapInfo, random);

                this.normalizedTilemaps = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset)).$ctor1(TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.NormalizeTilemaps(unnormalizedTilemaps));

                this.background = TuxPlanetSpeedrunAnyPercentLibrary.BackgroundUtil.GetRandomBackground(random);
            }
        },
        methods: {
            GetCustomLevelInfo: function () {
                return new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
            },
            GetBackground: function () {
                return this.background;
            },
            GetTilemap: function (tuxX, tuxY, cameraX, cameraY, windowWidth, windowHeight, levelFlags, mapKeyState) {
                return TuxPlanetSpeedrunAnyPercentLibrary.LevelConfigurationHelper.GetTilemap(this.normalizedTilemaps, tuxX, tuxY, cameraX, cameraY, mapKeyState, windowWidth, windowHeight);
            },
            GetCameraState: function (tuxXMibi, tuxYMibi, tuxTeleportStartingLocation, tuxTeleportInProgressElapsedMicros, tilemap, windowWidth, windowHeight, levelFlags) {
                var cameraState = TuxPlanetSpeedrunAnyPercentLibrary.CameraStateProcessing.ComputeCameraState(tuxXMibi, tuxYMibi, tuxTeleportStartingLocation, tuxTeleportInProgressElapsedMicros, tilemap, windowWidth, windowHeight);

                return TuxPlanetSpeedrunAnyPercentLibrary.CameraState.GetCameraState(cameraState.X, windowHeight >> 1);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.ILevelConfiguration],
        statics: {
            fields: {
                LEVEL_SUBFOLDER: null,
                BOSS_ROOM_X_OFFSET_START: null,
                BOSS_ROOM_X_OFFSET_END: null,
                KONQI_BOSS_RNG_SEED: null,
                YETI_BOSS_RNG_SEED: null,
                BEGIN_KONQI_DEFEATED_CUTSCENE: null,
                SPAWN_KONQI_BOSS_DEFEAT: null,
                SPAWN_MYTHRIL_KEY: null,
                LOCK_CAMERA_ON_KONQI_BOSS_ROOM: null,
                STOP_LOCKING_CAMERA_ON_KONQI_BOSS_ROOM: null,
                LOCK_CAMERA_ON_KONQI_DEFEATED_BOSS_ROOM: null,
                STOP_LOCKING_CAMERA_ON_KONQI_DEFEATED_BOSS_ROOM: null,
                LOCK_CAMERA_ON_YETI_BOSS_ROOM: null,
                STOP_LOCKING_CAMERA_ON_YETI_BOSS_ROOM: null,
                SET_CAMERA_TO_YETI_DEFEATED_LOGIC: null,
                MARK_LEFT_AND_RIGHT_WALLS_OF_BOSS_ROOM_AS_GROUND: null,
                STOP_MARKING_LEFT_AND_RIGHT_WALLS_OF_BOSS_ROOM_AS_GROUND: null,
                START_PLAYING_KONQI_BOSS_MUSIC: null,
                STOP_PLAYING_KONQI_BOSS_MUSIC: null,
                START_PLAYING_YETI_BOSS_MUSIC: null,
                STOP_PLAYING_YETI_BOSS_MUSIC: null,
                BEGIN_YETI_INTRO_CUTSCENE: null,
                MARK_YETI_FLOOR_AS_GROUND: null,
                CREATE_CHECKPOINT_AFTER_DEFEATING_KONQI: null,
                BEGIN_YETI_DEFEATED_CUTSCENE: null,
                CONTINUOUSLY_RENDER_KONQI_BLOCKS: null
            },
            ctors: {
                init: function () {
                    this.LEVEL_SUBFOLDER = "Level10/";
                    this.BOSS_ROOM_X_OFFSET_START = "level10_bossRoomXOffsetStart";
                    this.BOSS_ROOM_X_OFFSET_END = "level10_bossRoomXOffsetEnd";
                    this.KONQI_BOSS_RNG_SEED = "level10_konqiBossRngSeed";
                    this.YETI_BOSS_RNG_SEED = "level10_yetiBossRngSeed";
                    this.BEGIN_KONQI_DEFEATED_CUTSCENE = "level10_beginKonqiDefeatedCutscene";
                    this.SPAWN_KONQI_BOSS_DEFEAT = "level10_spawnKonqiBossDefeat";
                    this.SPAWN_MYTHRIL_KEY = "level10_spawnMythrilKey";
                    this.LOCK_CAMERA_ON_KONQI_BOSS_ROOM = "level10_lockCameraOnKonqiBossRoom";
                    this.STOP_LOCKING_CAMERA_ON_KONQI_BOSS_ROOM = "level10_stopLockingCameraOnKonqiBossRoom";
                    this.LOCK_CAMERA_ON_KONQI_DEFEATED_BOSS_ROOM = "level10_lockCameraOnKonqiDefeatedBossRoom";
                    this.STOP_LOCKING_CAMERA_ON_KONQI_DEFEATED_BOSS_ROOM = "level10_stopLockingCameraOnKonqiDefeatedBossRoom";
                    this.LOCK_CAMERA_ON_YETI_BOSS_ROOM = "level10_lockCameraOnYetiBossRoom";
                    this.STOP_LOCKING_CAMERA_ON_YETI_BOSS_ROOM = "level10_stopLockingCameraOnYetiBossRoom";
                    this.SET_CAMERA_TO_YETI_DEFEATED_LOGIC = "level10_setCameraToYetiDefeatedLogic";
                    this.MARK_LEFT_AND_RIGHT_WALLS_OF_BOSS_ROOM_AS_GROUND = "level10_markLeftAndRightWallsOfBossRoomAsGround";
                    this.STOP_MARKING_LEFT_AND_RIGHT_WALLS_OF_BOSS_ROOM_AS_GROUND = "level10_stopMarkingLeftAndRightWallsOfBossRoomAsGround";
                    this.START_PLAYING_KONQI_BOSS_MUSIC = "level10_startPlayingKonqiBossMusic";
                    this.STOP_PLAYING_KONQI_BOSS_MUSIC = "level10_stopPlayingKonqiBossMusic";
                    this.START_PLAYING_YETI_BOSS_MUSIC = "level10_startPlayingYetiBossMusic";
                    this.STOP_PLAYING_YETI_BOSS_MUSIC = "level10_stopPlayingYetiBossMusic";
                    this.BEGIN_YETI_INTRO_CUTSCENE = "level10_beginYetiIntroCutscene";
                    this.MARK_YETI_FLOOR_AS_GROUND = "level10_markYetiFloorAsGround";
                    this.CREATE_CHECKPOINT_AFTER_DEFEATING_KONQI = "level10_createCheckpointAfterDefeatingKonqi";
                    this.BEGIN_YETI_DEFEATED_CUTSCENE = "level10_beginYetiDefeatedCutscene";
                    this.CONTINUOUSLY_RENDER_KONQI_BLOCKS = "level10_continuouslyRenderKonqiBlocks";
                }
            },
            methods: {
                GetKonqiBossRoomCameraState: function (customLevelInfo, tilemap, windowWidth, windowHeight) {
                    var bossRoomXOffset = DTLibrary.StringUtil.ParseInt(customLevelInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$System$String$getItem(TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.BOSS_ROOM_X_OFFSET_START));

                    return TuxPlanetSpeedrunAnyPercentLibrary.CameraState.GetCameraState(((((bossRoomXOffset - 48) | 0) + (windowWidth >> 1)) | 0), windowHeight >> 1);
                },
                GetKonqiDefeatedCameraState: function (customLevelInfo, tilemap, windowWidth, windowHeight) {
                    var konqiBossRoomCameraState = TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.GetKonqiBossRoomCameraState(customLevelInfo, tilemap, windowWidth, windowHeight);

                    return TuxPlanetSpeedrunAnyPercentLibrary.CameraState.GetCameraState(konqiBossRoomCameraState.X, ((konqiBossRoomCameraState.Y + 96) | 0));
                },
                GetYetiBossRoomCameraState: function (customLevelInfo, tilemap, windowWidth, windowHeight) {
                    var konqiBossRoomCameraState = TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.GetKonqiBossRoomCameraState(customLevelInfo, tilemap, windowWidth, windowHeight);

                    return TuxPlanetSpeedrunAnyPercentLibrary.CameraState.GetCameraState(konqiBossRoomCameraState.X, ((konqiBossRoomCameraState.Y + 816) | 0));
                },
                GetYetiBossDefeatedCameraState: function (customLevelInfo, tilemap, effectiveTuxXMibi, effectiveTuxYMibi, windowWidth, windowHeight) {
                    var cameraState = TuxPlanetSpeedrunAnyPercentLibrary.CameraStateProcessing.ComputeCameraState(effectiveTuxXMibi, effectiveTuxYMibi, null, null, tilemap, windowWidth, windowHeight);

                    var yetiBossRoomCameraState = TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.GetYetiBossRoomCameraState(customLevelInfo, tilemap, windowWidth, windowHeight);

                    var x = cameraState.X;
                    var y = yetiBossRoomCameraState.Y;

                    if (cameraState.X < yetiBossRoomCameraState.X) {
                        x = yetiBossRoomCameraState.X;
                    }

                    var maximumCameraX = (((tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetWidth() - (windowWidth >> 1)) | 0) - 96) | 0;

                    if (x > maximumCameraX) {
                        x = maximumCameraX;
                    }

                    return TuxPlanetSpeedrunAnyPercentLibrary.CameraState.GetCameraState(x, y);
                },
                ConstructUnnormalizedTilemaps: function (mapInfo, random) {
                    var gameMusic = TuxPlanetSpeedrunAnyPercentLibrary.GameMusic.Jewels;

                    var customLevelInfo = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();

                    var enemyIdGenerator = new TuxPlanetSpeedrunAnyPercentLibrary.EnemyIdGenerator();

                    var list = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset)).ctor();

                    var startTilemap = TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level10/A_Start"), enemyIdGenerator, null, 384, gameMusic);

                    var startTilemapExtraEnemies = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Tilemap.IExtraEnemyToSpawn)).ctor();

                    for (var i = 0; i < 7; i = (i + 1) | 0) {
                        startTilemapExtraEnemies.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemySnail.EnemySnailSpawn(Bridge.Int.mul(Bridge.Int.mul((((20 + Bridge.Int.mul(10, i)) | 0)), 48), 1024), 1843200, false, "startTilemap_snail[" + (DTLibrary.StringUtil.ToStringCultureInvariant(i) || "") + "]"));
                    }

                    for (var i1 = 0; i1 < 7; i1 = (i1 + 1) | 0) {
                        startTilemapExtraEnemies.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemySnail.EnemySnailSpawn(Bridge.Int.mul(Bridge.Int.mul((((51 + Bridge.Int.mul(5, i1)) | 0)), 48), 1024), 1744896, false, "startTilemap_snailBottom[" + (DTLibrary.StringUtil.ToStringCultureInvariant(i1) || "") + "]"));
                        startTilemapExtraEnemies.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemySnail.EnemySnailSpawn(Bridge.Int.mul(Bridge.Int.mul((((51 + Bridge.Int.mul(5, i1)) | 0)), 48), 1024), 2236416, false, "startTilemap_snailTop[" + (DTLibrary.StringUtil.ToStringCultureInvariant(i1) || "") + "]"));
                    }

                    for (var i2 = 0; i2 < 24; i2 = (i2 + 1) | 0) {
                        startTilemapExtraEnemies.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemyLevel10EliteSnailPassive.EnemyLevel10EliteSnailSpawn(Bridge.Int.mul(Bridge.Int.mul((((86 + Bridge.Int.mul(5, i2)) | 0)), 48), 1024), 1744896, ((300 + random.DTLibrary$IDTRandom$NextInt(250)) | 0), random.DTLibrary$IDTRandom$NextInt(200000), true, startTilemap.GetWidth() << 10, "startTilemap_eliteSnailBottom[" + (DTLibrary.StringUtil.ToStringCultureInvariant(i2) || "") + "]"));
                        startTilemapExtraEnemies.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemyLevel10EliteSnailPassive.EnemyLevel10EliteSnailSpawn(Bridge.Int.mul(Bridge.Int.mul((((86 + Bridge.Int.mul(5, i2)) | 0)), 48), 1024), 2236416, ((400 + random.DTLibrary$IDTRandom$NextInt(150)) | 0), random.DTLibrary$IDTRandom$NextInt(200000), false, startTilemap.GetWidth() << 10, "startTilemap_eliteSnailTop[" + (DTLibrary.StringUtil.ToStringCultureInvariant(i2) || "") + "]"));
                    }

                    startTilemap = TuxPlanetSpeedrunAnyPercentLibrary.Tilemap.GetTilemapWithExtraEnemiesToSpawn(startTilemap, startTilemapExtraEnemies);

                    var startTilemapWithOffset = new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(startTilemap, 0, 0, false);

                    list.add(startTilemapWithOffset);

                    var checkpointTilemap = TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level10/B_Checkpoint"), enemyIdGenerator, TuxPlanetSpeedrunAnyPercentLibrary.CutsceneProcessing.KONQI_BOSS_INTRO_CUTSCENE, 384, gameMusic);

                    var checkpointTilemapWithOffset = new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(checkpointTilemap, ((startTilemapWithOffset.XOffset + startTilemap.GetWidth()) | 0), startTilemapWithOffset.YOffset, false);

                    list.add(checkpointTilemapWithOffset);

                    customLevelInfo.set(TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.BOSS_ROOM_X_OFFSET_START, DTLibrary.StringUtil.ToStringCultureInvariant((((checkpointTilemapWithOffset.XOffset + checkpointTilemap.GetWidth()) | 0))));

                    var bossTilemap = new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level10/C_Boss"), enemyIdGenerator, null, 384, gameMusic), ((checkpointTilemapWithOffset.XOffset + checkpointTilemap.GetWidth()) | 0), checkpointTilemapWithOffset.YOffset, false);

                    list.add(bossTilemap);

                    customLevelInfo.set(TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.BOSS_ROOM_X_OFFSET_END, DTLibrary.StringUtil.ToStringCultureInvariant((((bossTilemap.XOffset + bossTilemap.Tilemap.GetWidth()) | 0))));

                    var finishTilemap = new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level10/D_Finish"), enemyIdGenerator, null, 384, gameMusic), ((bossTilemap.XOffset + bossTilemap.Tilemap.GetWidth()) | 0), bossTilemap.YOffset, false);

                    list.add(finishTilemap);

                    var konqiRandom = new DTLibrary.DTDeterministicRandom.$ctor1(0);
                    for (var i3 = 0; i3 < 40; i3 = (i3 + 1) | 0) {
                        var jEnd = (random.DTLibrary$IDTRandom$NextInt(3) + 1) | 0;
                        for (var j = 0; j < jEnd; j = (j + 1) | 0) {
                            konqiRandom.AddSeed(random.DTLibrary$IDTRandom$NextInt(100));
                        }
                    }
                    customLevelInfo.set(TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.KONQI_BOSS_RNG_SEED, konqiRandom.SerializeToString());

                    random.DTLibrary$IDTRandom$AddSeed(17);
                    random.DTLibrary$IDTRandom$NextBool();
                    customLevelInfo.set(TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.YETI_BOSS_RNG_SEED, random.DTLibrary$IDTDeterministicRandom$SerializeToString());
                    random.DTLibrary$IDTRandom$AddSeed(17);
                    random.DTLibrary$IDTRandom$NextBool();

                    return { Item1: list, Item2: customLevelInfo };
                }
            }
        },
        fields: {
            normalizedTilemaps: null,
            customLevelInfo: null,
            bossRoomXOffsetStart: 0,
            bossRoomXOffsetEnd: 0,
            background: null
        },
        alias: [
            "GetCustomLevelInfo", "TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetCustomLevelInfo",
            "GetBackground", "TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetBackground",
            "GetTilemap", "TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetTilemap",
            "GetCameraState", "TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetCameraState"
        ],
        ctors: {
            ctor: function (mapInfo, random) {
                this.$initialize();
                var result = TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.ConstructUnnormalizedTilemaps(mapInfo, random);

                var unnormalizedTilemaps = result.Item1;

                this.normalizedTilemaps = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset)).$ctor1(TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.NormalizeTilemaps(unnormalizedTilemaps));

                this.customLevelInfo = new (System.Collections.Generic.Dictionary$2(System.String,System.String))(result.Item2);
                this.bossRoomXOffsetStart = DTLibrary.StringUtil.ParseAsIntCultureInvariant(this.customLevelInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$System$String$getItem(TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.BOSS_ROOM_X_OFFSET_START));
                this.bossRoomXOffsetEnd = DTLibrary.StringUtil.ParseAsIntCultureInvariant(this.customLevelInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$System$String$getItem(TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.BOSS_ROOM_X_OFFSET_END));

                this.background = TuxPlanetSpeedrunAnyPercentLibrary.BackgroundUtil.GetRandomBackground(random);
            }
        },
        methods: {
            GetCustomLevelInfo: function () {
                return this.customLevelInfo;
            },
            GetBackground: function () {
                return this.background;
            },
            GetTilemap: function (tuxX, tuxY, cameraX, cameraY, windowWidth, windowHeight, levelFlags, mapKeyState) {
                var tilemap = TuxPlanetSpeedrunAnyPercentLibrary.LevelConfigurationHelper.GetTilemap(this.normalizedTilemaps, tuxX, tuxY, cameraX, cameraY, mapKeyState, windowWidth, windowHeight);

                tilemap = new TuxPlanetSpeedrunAnyPercentLibrary.EnemyCreationTilemap(tilemap, Bridge.fn.bind(this, function (_o1) {
                        _o1.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemyLevel10Coordinator(this.bossRoomXOffsetStart, this.bossRoomXOffsetEnd));
                        return _o1;
                    })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor()));

                tilemap = new TuxPlanetSpeedrunAnyPercentLibrary.Level10CoordinatorTilemap(tilemap, levelFlags, this.bossRoomXOffsetStart, this.bossRoomXOffsetEnd);

                return tilemap;
            },
            GetCameraState: function (tuxXMibi, tuxYMibi, tuxTeleportStartingLocation, tuxTeleportInProgressElapsedMicros, tilemap, windowWidth, windowHeight, levelFlags) {
                if (System.Linq.Enumerable.from(levelFlags).contains(TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.LOCK_CAMERA_ON_KONQI_BOSS_ROOM) && !System.Linq.Enumerable.from(levelFlags).contains(TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.STOP_LOCKING_CAMERA_ON_KONQI_BOSS_ROOM)) {
                    return TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.GetKonqiBossRoomCameraState(this.GetCustomLevelInfo(), tilemap, windowWidth, windowHeight);
                }

                if (System.Linq.Enumerable.from(levelFlags).contains(TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.LOCK_CAMERA_ON_KONQI_DEFEATED_BOSS_ROOM) && !System.Linq.Enumerable.from(levelFlags).contains(TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.STOP_LOCKING_CAMERA_ON_KONQI_DEFEATED_BOSS_ROOM)) {
                    return TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.GetKonqiDefeatedCameraState(this.GetCustomLevelInfo(), tilemap, windowWidth, windowHeight);
                }

                if (System.Linq.Enumerable.from(levelFlags).contains(TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.LOCK_CAMERA_ON_YETI_BOSS_ROOM) && !System.Linq.Enumerable.from(levelFlags).contains(TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.STOP_LOCKING_CAMERA_ON_YETI_BOSS_ROOM)) {
                    return TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.GetYetiBossRoomCameraState(this.GetCustomLevelInfo(), tilemap, windowWidth, windowHeight);
                }

                if (System.Linq.Enumerable.from(levelFlags).contains(TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.SET_CAMERA_TO_YETI_DEFEATED_LOGIC)) {
                    var effectiveTuxXMibi = tuxXMibi;
                    var effectiveTuxYMibi = tuxYMibi;

                    if (tuxTeleportInProgressElapsedMicros != null) {
                        var deltaX = System.Int64(tuxXMibi - tuxTeleportStartingLocation.Item1);
                        var deltaY = System.Int64(tuxYMibi - tuxTeleportStartingLocation.Item2);

                        effectiveTuxXMibi = System.Int64.clip32(System.Int64(tuxTeleportStartingLocation.Item1).add(deltaX.mul(System.Int64(System.Nullable.getValue(tuxTeleportInProgressElapsedMicros))).div(System.Int64(TuxPlanetSpeedrunAnyPercentLibrary.TuxState.TELEPORT_DURATION))));
                        effectiveTuxYMibi = System.Int64.clip32(System.Int64(tuxTeleportStartingLocation.Item2).add(deltaY.mul(System.Int64(System.Nullable.getValue(tuxTeleportInProgressElapsedMicros))).div(System.Int64(TuxPlanetSpeedrunAnyPercentLibrary.TuxState.TELEPORT_DURATION))));
                    }

                    return TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level10.GetYetiBossDefeatedCameraState(this.GetCustomLevelInfo(), tilemap, effectiveTuxXMibi, effectiveTuxYMibi, windowWidth, windowHeight);
                }

                if ((tuxXMibi >> 10) < this.normalizedTilemaps.getItem(0).Tilemap.GetWidth()) {
                    var cameraState = TuxPlanetSpeedrunAnyPercentLibrary.CameraStateProcessing.ComputeCameraState(tuxXMibi, tuxYMibi, tuxTeleportStartingLocation, tuxTeleportInProgressElapsedMicros, tilemap, windowWidth, windowHeight);

                    return TuxPlanetSpeedrunAnyPercentLibrary.CameraState.GetCameraState(cameraState.X, (((windowHeight >> 1) + 1632) | 0));
                }

                if ((tuxXMibi >> 10) < ((this.normalizedTilemaps.getItem(0).Tilemap.GetWidth() + 672) | 0)) {
                    var cameraState1 = TuxPlanetSpeedrunAnyPercentLibrary.CameraStateProcessing.ComputeCameraState(tuxXMibi, tuxYMibi, tuxTeleportStartingLocation, tuxTeleportInProgressElapsedMicros, tilemap, windowWidth, windowHeight);

                    var destinationCameraY = cameraState1.Y;
                    var originalCameraY = ((windowHeight >> 1) + 1632) | 0;

                    var ratioTimes1000;

                    var tuxY = tuxYMibi >> 10;

                    if (tuxY >= 1776) {
                        ratioTimes1000 = 0;
                    } else {
                        if (tuxY <= 1104) {
                            ratioTimes1000 = 1000;
                        } else {
                            ratioTimes1000 = (Bridge.Int.div(Bridge.Int.mul((((1776 - tuxY) | 0)), 1000), (672))) | 0;
                        }
                    }

                    return TuxPlanetSpeedrunAnyPercentLibrary.CameraState.GetCameraState(cameraState1.X, ((((Bridge.Int.div(Bridge.Int.mul(destinationCameraY, ratioTimes1000), 1000)) | 0) + ((Bridge.Int.div(Bridge.Int.mul(originalCameraY, (((1000 - ratioTimes1000) | 0))), 1000)) | 0)) | 0));
                }

                return TuxPlanetSpeedrunAnyPercentLibrary.CameraStateProcessing.ComputeCameraState(tuxXMibi, tuxYMibi, tuxTeleportStartingLocation, tuxTeleportInProgressElapsedMicros, tilemap, windowWidth, windowHeight);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level2", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.ILevelConfiguration],
        statics: {
            fields: {
                LEVEL_SUBFOLDER: null
            },
            ctors: {
                init: function () {
                    this.LEVEL_SUBFOLDER = "Level2";
                }
            },
            methods: {
                ConstructUnnormalizedTilemaps: function (mapInfo, canAlreadyUseSaveStates, random) {
                    var gameMusic = TuxPlanetSpeedrunAnyPercentLibrary.GameMusic.Airship2;

                    var enemyIdGenerator = new TuxPlanetSpeedrunAnyPercentLibrary.EnemyIdGenerator();

                    var list = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset)).ctor();

                    var startTilemapWithOffset = new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level2/1_Start"), enemyIdGenerator, null, 384, gameMusic), 0, 0, false);

                    list.add(startTilemapWithOffset);

                    list.add(new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level2/Sign"), enemyIdGenerator, null, 384, gameMusic), ((1008 + (random.DTLibrary$IDTRandom$NextBool() ? 384 : 0)) | 0), 144, false));

                    var chooseAPath1TilemapA = TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level2/2_Drop1"), enemyIdGenerator, null, 384, gameMusic);

                    var chooseAPath1TilemapB = TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level2/2_Drop2"), enemyIdGenerator, null, 384, gameMusic);

                    var chooseAPath1TilemapWithOffset = new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(random.DTLibrary$IDTRandom$NextBool() ? chooseAPath1TilemapA : chooseAPath1TilemapB, 0, ((-chooseAPath1TilemapA.GetHeight()) | 0), false);

                    list.add(chooseAPath1TilemapWithOffset);

                    var level2bPlatformTilemap = TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level2/2_Platform"), enemyIdGenerator, null, 384, gameMusic);

                    var level2bPlatformTilemapWithOffset = new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(level2bPlatformTilemap, 0, ((chooseAPath1TilemapWithOffset.YOffset - level2bPlatformTilemap.GetHeight()) | 0), false);

                    list.add(level2bPlatformTilemapWithOffset);

                    list.add(new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level2/Sign"), enemyIdGenerator, null, 384, gameMusic), ((((level2bPlatformTilemapWithOffset.XOffset + 1008) | 0) + (random.DTLibrary$IDTRandom$NextBool() ? 384 : 0)) | 0), ((level2bPlatformTilemapWithOffset.YOffset + 144) | 0), false));

                    var chooseAPath2TilemapA = TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level2/2_Drop1"), enemyIdGenerator, null, 384, gameMusic);

                    var chooseAPath2TilemapB = TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level2/2_Drop2"), enemyIdGenerator, null, 384, gameMusic);

                    var chooseAPath2TilemapWithOffset = new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(random.DTLibrary$IDTRandom$NextBool() ? chooseAPath2TilemapA : chooseAPath2TilemapB, 0, ((level2bPlatformTilemapWithOffset.YOffset - chooseAPath2TilemapA.GetHeight()) | 0), false);

                    list.add(chooseAPath2TilemapWithOffset);

                    var level2cLowerFloorTilemap = TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level2/3_LowerFloor"), enemyIdGenerator, null, 384, gameMusic);

                    var level2cLowerFloorTilemapWithOffset = new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(level2cLowerFloorTilemap, chooseAPath2TilemapWithOffset.XOffset, ((chooseAPath2TilemapWithOffset.YOffset - level2cLowerFloorTilemap.GetHeight()) | 0), false);

                    list.add(level2cLowerFloorTilemapWithOffset);

                    var cutsceneTilemap = TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level2/4_Cutscene"), enemyIdGenerator, TuxPlanetSpeedrunAnyPercentLibrary.CutsceneProcessing.SAVESTATE_CUTSCENE, 384, gameMusic);

                    var cutsceneTilemapWithOffset = new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(canAlreadyUseSaveStates ? TuxPlanetSpeedrunAnyPercentLibrary.Tilemap.GetTilemapWithoutCutscene(cutsceneTilemap) : cutsceneTilemap, ((level2cLowerFloorTilemapWithOffset.XOffset + level2cLowerFloorTilemap.GetWidth()) | 0), level2cLowerFloorTilemapWithOffset.YOffset, false);

                    list.add(cutsceneTilemapWithOffset);

                    var level2eTilemap = TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level2/5_Midpoint"), enemyIdGenerator, null, 384, gameMusic);

                    var level2eTilemapWithOffset = new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(level2eTilemap, ((cutsceneTilemapWithOffset.XOffset + cutsceneTilemap.GetWidth()) | 0), ((cutsceneTilemapWithOffset.YOffset + 960) | 0), false);

                    list.add(level2eTilemapWithOffset);

                    var level2fTilemapA = TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level2/6_Drop1"), enemyIdGenerator, null, 384, gameMusic);
                    var level2fTilemapB = TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level2/6_Drop2"), enemyIdGenerator, null, 384, gameMusic);
                    var level2fTilemapC = TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level2/6_Drop3"), enemyIdGenerator, null, 384, gameMusic);
                    var level2fTilemapD = TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level2/6_Drop4"), enemyIdGenerator, null, 384, gameMusic);

                    var level2fTilemapWithOffset = new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(random.DTLibrary$IDTRandom$NextBool() ? (random.DTLibrary$IDTRandom$NextBool() ? level2fTilemapA : level2fTilemapB) : (random.DTLibrary$IDTRandom$NextBool() ? level2fTilemapC : level2fTilemapD), level2eTilemapWithOffset.XOffset, ((level2eTilemapWithOffset.YOffset - level2fTilemapA.GetHeight()) | 0), false);

                    list.add(level2fTilemapWithOffset);

                    var level2fPlatformTilemap = TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level2/6_Platform"), enemyIdGenerator, null, 384, gameMusic);

                    var level2fPlatformTilemapWithOffset = new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(level2fPlatformTilemap, level2fTilemapWithOffset.XOffset, ((level2fTilemapWithOffset.YOffset - level2fPlatformTilemap.GetHeight()) | 0), false);

                    list.add(level2fPlatformTilemapWithOffset);

                    var level2fTilemapA2 = TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level2/6_Drop1"), enemyIdGenerator, null, 384, gameMusic);
                    var level2fTilemapB2 = TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level2/6_Drop2"), enemyIdGenerator, null, 384, gameMusic);
                    var level2fTilemapC2 = TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level2/6_Drop3"), enemyIdGenerator, null, 384, gameMusic);
                    var level2fTilemapD2 = TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level2/6_Drop4"), enemyIdGenerator, null, 384, gameMusic);

                    var level2fTilemapWithOffset2 = new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(random.DTLibrary$IDTRandom$NextBool() ? (random.DTLibrary$IDTRandom$NextBool() ? level2fTilemapA2 : level2fTilemapB2) : (random.DTLibrary$IDTRandom$NextBool() ? level2fTilemapC2 : level2fTilemapD2), level2fPlatformTilemapWithOffset.XOffset, ((level2fPlatformTilemapWithOffset.YOffset - level2fTilemapA2.GetHeight()) | 0), false);

                    list.add(level2fTilemapWithOffset2);

                    var finishTilemap = TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level2/7_Finish"), enemyIdGenerator, null, 384, gameMusic);

                    list.add(new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(finishTilemap, level2fTilemapWithOffset2.XOffset, ((level2fTilemapWithOffset2.YOffset - finishTilemap.GetHeight()) | 0), false));

                    return list;
                }
            }
        },
        fields: {
            normalizedTilemaps: null,
            shouldRemoveKonqi: false,
            background: null
        },
        alias: [
            "GetCustomLevelInfo", "TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetCustomLevelInfo",
            "GetBackground", "TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetBackground",
            "GetTilemap", "TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetTilemap",
            "GetCameraState", "TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetCameraState"
        ],
        ctors: {
            ctor: function (mapInfo, canAlreadyUseSaveStates, random) {
                this.$initialize();
                var unnormalizedTilemaps = TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level2.ConstructUnnormalizedTilemaps(mapInfo, canAlreadyUseSaveStates, random);

                this.shouldRemoveKonqi = canAlreadyUseSaveStates;

                this.normalizedTilemaps = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset)).$ctor1(TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.NormalizeTilemaps(unnormalizedTilemaps));

                this.background = TuxPlanetSpeedrunAnyPercentLibrary.BackgroundUtil.GetRandomBackground(random);
            }
        },
        methods: {
            GetCustomLevelInfo: function () {
                return new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
            },
            GetBackground: function () {
                return this.background;
            },
            GetTilemap: function (tuxX, tuxY, cameraX, cameraY, windowWidth, windowHeight, levelFlags, mapKeyState) {
                var tilemap = TuxPlanetSpeedrunAnyPercentLibrary.LevelConfigurationHelper.GetTilemap(this.normalizedTilemaps, tuxX, tuxY, cameraX, cameraY, mapKeyState, windowWidth, windowHeight);

                if (this.shouldRemoveKonqi) {
                    tilemap = new TuxPlanetSpeedrunAnyPercentLibrary.EnemyCreationTilemap(tilemap, function (_o1) {
                            _o1.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemyAddLevelFlag(TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiCutscene.SHOULD_TELEPORT_OUT_DEFAULT_LEVEL_FLAG, "EnemyAddLevelFlag_shouldTeleportOut"));
                            return _o1;
                        }(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor()));
                }

                return tilemap;
            },
            GetCameraState: function (tuxXMibi, tuxYMibi, tuxTeleportStartingLocation, tuxTeleportInProgressElapsedMicros, tilemap, windowWidth, windowHeight, levelFlags) {
                var cameraState = TuxPlanetSpeedrunAnyPercentLibrary.CameraStateProcessing.ComputeCameraState(tuxXMibi, tuxYMibi, tuxTeleportStartingLocation, tuxTeleportInProgressElapsedMicros, tilemap, windowWidth, windowHeight);

                return TuxPlanetSpeedrunAnyPercentLibrary.CameraState.GetCameraState(cameraState.X, Math.min(cameraState.Y, ((tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetHeight() - 1008) | 0)));
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level3", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.ILevelConfiguration],
        statics: {
            fields: {
                LEVEL_SUBFOLDER: null
            },
            ctors: {
                init: function () {
                    this.LEVEL_SUBFOLDER = "Level3";
                }
            },
            methods: {
                ConstructUnnormalizedTilemaps: function (mapInfo, random) {
                    var gameMusic = TuxPlanetSpeedrunAnyPercentLibrary.GameMusic.Chipdisko;

                    var enemyIdGenerator = new TuxPlanetSpeedrunAnyPercentLibrary.EnemyIdGenerator();

                    var list = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset)).ctor();

                    var startTilemap = new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level3/A_Start"), enemyIdGenerator, null, 384, gameMusic), 0, 0, false);

                    list.add(startTilemap);

                    var B_obstaclesMaps = function (_o1) {
                            _o1.add(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level3/B_Obstacles1"));
                            _o1.add(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level3/B_Obstacles2"));
                            _o1.add(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level3/B_Obstacles3"));
                            return _o1;
                        }(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.MapDataHelper.Map)).ctor());
                    DTLibrary.ListUtil.Shuffle(TuxPlanetSpeedrunAnyPercentLibrary.MapDataHelper.Map, B_obstaclesMaps, random);

                    var B_obstacles1Tilemap = new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(B_obstaclesMaps.getItem(0), enemyIdGenerator, null, 384, gameMusic), ((startTilemap.XOffset + startTilemap.Tilemap.GetWidth()) | 0), 0, false);

                    list.add(B_obstacles1Tilemap);

                    var B_obstacles2Tilemap = new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(B_obstaclesMaps.getItem(1), enemyIdGenerator, null, 384, gameMusic), ((B_obstacles1Tilemap.XOffset + B_obstacles1Tilemap.Tilemap.GetWidth()) | 0), 0, false);

                    list.add(B_obstacles2Tilemap);

                    var B_obstacles3Tilemap = new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(B_obstaclesMaps.getItem(2), enemyIdGenerator, null, 384, gameMusic), ((B_obstacles2Tilemap.XOffset + B_obstacles2Tilemap.Tilemap.GetWidth()) | 0), 0, false);

                    list.add(B_obstacles3Tilemap);

                    var C_obstaclesMaps = function (_o2) {
                            _o2.add(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level3/C_Obstacles1"));
                            _o2.add(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level3/C_Obstacles2"));
                            return _o2;
                        }(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.MapDataHelper.Map)).ctor());
                    DTLibrary.ListUtil.Shuffle(TuxPlanetSpeedrunAnyPercentLibrary.MapDataHelper.Map, C_obstaclesMaps, random);

                    var C_obstacles1Tilemap = new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(C_obstaclesMaps.getItem(0), enemyIdGenerator, null, 384, gameMusic), ((B_obstacles3Tilemap.XOffset + B_obstacles3Tilemap.Tilemap.GetWidth()) | 0), 0, false);

                    list.add(C_obstacles1Tilemap);

                    var C_obstacles2Tilemap = new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(C_obstaclesMaps.getItem(1), enemyIdGenerator, null, 384, gameMusic), ((C_obstacles1Tilemap.XOffset + C_obstacles1Tilemap.Tilemap.GetWidth()) | 0), 0, false);

                    list.add(C_obstacles2Tilemap);

                    var finishTilemap = new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level3/D_Finish"), enemyIdGenerator, null, 384, gameMusic), ((C_obstacles2Tilemap.XOffset + C_obstacles2Tilemap.Tilemap.GetWidth()) | 0), 0, false);

                    list.add(finishTilemap);

                    return list;
                }
            }
        },
        fields: {
            normalizedTilemaps: null,
            background: null
        },
        alias: [
            "GetCustomLevelInfo", "TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetCustomLevelInfo",
            "GetBackground", "TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetBackground",
            "GetTilemap", "TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetTilemap",
            "GetCameraState", "TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetCameraState"
        ],
        ctors: {
            ctor: function (mapInfo, random) {
                this.$initialize();
                var unnormalizedTilemaps = TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level3.ConstructUnnormalizedTilemaps(mapInfo, random);

                this.normalizedTilemaps = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset)).$ctor1(TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.NormalizeTilemaps(unnormalizedTilemaps));

                this.background = new TuxPlanetSpeedrunAnyPercentLibrary.Background_Ocean();
            }
        },
        methods: {
            GetCustomLevelInfo: function () {
                return new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
            },
            GetBackground: function () {
                return this.background;
            },
            GetTilemap: function (tuxX, tuxY, cameraX, cameraY, windowWidth, windowHeight, levelFlags, mapKeyState) {
                return TuxPlanetSpeedrunAnyPercentLibrary.LevelConfigurationHelper.GetTilemap(this.normalizedTilemaps, tuxX, tuxY, cameraX, cameraY, mapKeyState, windowWidth, windowHeight);
            },
            GetCameraState: function (tuxXMibi, tuxYMibi, tuxTeleportStartingLocation, tuxTeleportInProgressElapsedMicros, tilemap, windowWidth, windowHeight, levelFlags) {
                var cameraState = TuxPlanetSpeedrunAnyPercentLibrary.CameraStateProcessing.ComputeCameraState(((tuxXMibi + 204800) | 0), tuxYMibi, tuxTeleportStartingLocation != null ? { Item1: ((tuxTeleportStartingLocation.Item1 + 204800) | 0), Item2: tuxTeleportStartingLocation.Item2 } : null, tuxTeleportInProgressElapsedMicros, tilemap, windowWidth, windowHeight);

                return TuxPlanetSpeedrunAnyPercentLibrary.CameraState.GetCameraState(cameraState.X, windowHeight >> 1);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level4", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.ILevelConfiguration],
        statics: {
            fields: {
                LEVEL_SUBFOLDER: null
            },
            ctors: {
                init: function () {
                    this.LEVEL_SUBFOLDER = "Level4";
                }
            },
            methods: {
                ConstructUnnormalizedTilemaps: function (mapInfo, canAlreadyUseTeleport, random) {
                    var gameMusic = TuxPlanetSpeedrunAnyPercentLibrary.LevelConfigurationHelper.GetRandomGameMusic(random);

                    var enemyIdGenerator = new TuxPlanetSpeedrunAnyPercentLibrary.EnemyIdGenerator();

                    var list = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset)).ctor();

                    var cutsceneTilemap = TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level4/A_Start"), enemyIdGenerator, TuxPlanetSpeedrunAnyPercentLibrary.CutsceneProcessing.TELEPORT_CUTSCENE, 384, gameMusic);

                    var cutsceneTilemapWithOffset = new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(canAlreadyUseTeleport ? TuxPlanetSpeedrunAnyPercentLibrary.Tilemap.GetTilemapWithoutCutscene(cutsceneTilemap) : cutsceneTilemap, 0, 0, false);

                    list.add(cutsceneTilemapWithOffset);

                    var tilemap2 = new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level4/B_Key"), enemyIdGenerator, null, 384, gameMusic), ((cutsceneTilemapWithOffset.XOffset + cutsceneTilemapWithOffset.Tilemap.GetWidth()) | 0), ((cutsceneTilemapWithOffset.YOffset - 768) | 0), false);

                    list.add(tilemap2);

                    var tilemap3 = new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level4/C_Ascent"), enemyIdGenerator, null, 384, gameMusic), ((tilemap2.XOffset + tilemap2.Tilemap.GetWidth()) | 0), ((tilemap2.YOffset + 864) | 0), false);

                    list.add(tilemap3);

                    return list;
                }
            }
        },
        fields: {
            normalizedTilemaps: null,
            shouldRemoveKonqi: false,
            background: null
        },
        alias: [
            "GetCustomLevelInfo", "TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetCustomLevelInfo",
            "GetBackground", "TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetBackground",
            "GetTilemap", "TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetTilemap",
            "GetCameraState", "TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetCameraState"
        ],
        ctors: {
            ctor: function (mapInfo, canAlreadyUseTeleport, random) {
                this.$initialize();
                var unnormalizedTilemaps = TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level4.ConstructUnnormalizedTilemaps(mapInfo, canAlreadyUseTeleport, random);

                this.shouldRemoveKonqi = canAlreadyUseTeleport;

                this.normalizedTilemaps = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset)).$ctor1(TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.NormalizeTilemaps(unnormalizedTilemaps));

                this.background = new TuxPlanetSpeedrunAnyPercentLibrary.Background_Cave();
            }
        },
        methods: {
            GetCustomLevelInfo: function () {
                return new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
            },
            GetBackground: function () {
                return this.background;
            },
            GetTilemap: function (tuxX, tuxY, cameraX, cameraY, windowWidth, windowHeight, levelFlags, mapKeyState) {
                var tilemap = TuxPlanetSpeedrunAnyPercentLibrary.LevelConfigurationHelper.GetTilemap(this.normalizedTilemaps, tuxX, tuxY, cameraX, cameraY, mapKeyState, windowWidth, windowHeight);

                if (this.shouldRemoveKonqi) {
                    tilemap = new TuxPlanetSpeedrunAnyPercentLibrary.EnemyCreationTilemap(tilemap, function (_o1) {
                            _o1.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemyAddLevelFlag(TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiCutscene.SHOULD_TELEPORT_OUT_DEFAULT_LEVEL_FLAG, "EnemyAddLevelFlag_shouldTeleportOut"));
                            return _o1;
                        }(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor()));
                }

                return tilemap;
            },
            GetCameraState: function (tuxXMibi, tuxYMibi, tuxTeleportStartingLocation, tuxTeleportInProgressElapsedMicros, tilemap, windowWidth, windowHeight, levelFlags) {
                return null;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level5", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.ILevelConfiguration],
        statics: {
            fields: {
                LEVEL_SUBFOLDER: null
            },
            ctors: {
                init: function () {
                    this.LEVEL_SUBFOLDER = "Level5/";
                }
            },
            methods: {
                ConstructUnnormalizedTilemaps: function (mapInfo, random) {
                    var gameMusic = TuxPlanetSpeedrunAnyPercentLibrary.LevelConfigurationHelper.GetRandomGameMusic(random);

                    var enemyIdGenerator = new TuxPlanetSpeedrunAnyPercentLibrary.EnemyIdGenerator();

                    var list = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset)).ctor();

                    var startTilemap = new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level5/A_Start"), enemyIdGenerator, null, 384, gameMusic), 0, 0, false);

                    list.add(startTilemap);

                    var xOffset = (startTilemap.Tilemap.GetWidth() + Bridge.Int.mul(Bridge.Int.mul((((3 + random.DTLibrary$IDTRandom$NextInt(5)) | 0)), 16), 3)) | 0;

                    var yOffset = 144;

                    var hasAddedCheckpoint1 = false;
                    var hasAddedCheckpoint2 = false;
                    var hasAddedCheckpoint3 = false;

                    while (true) {
                        if (xOffset >= 21600) {
                            break;
                        }

                        var numberOfFragmentTilemaps = 12;
                        var mapInfoName = "Level5/B_Fragment" + (DTLibrary.StringUtil.ToStringCultureInvariant((((random.DTLibrary$IDTRandom$NextInt(numberOfFragmentTilemaps) + 1) | 0))) || "");

                        var fragmentTilemap;

                        if (xOffset >= 6240 && !hasAddedCheckpoint1) {
                            hasAddedCheckpoint1 = true;
                            fragmentTilemap = TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level5/B_Checkpoint"), enemyIdGenerator, null, 384, gameMusic);
                        } else if (xOffset >= 11280 && !hasAddedCheckpoint2) {
                            hasAddedCheckpoint2 = true;
                            fragmentTilemap = TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level5/B_Checkpoint"), enemyIdGenerator, null, 384, gameMusic);
                        } else if (xOffset >= 16320 && !hasAddedCheckpoint3) {
                            hasAddedCheckpoint3 = true;
                            fragmentTilemap = TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level5/B_Checkpoint"), enemyIdGenerator, null, 384, gameMusic);
                        } else {
                            fragmentTilemap = TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem(mapInfoName), enemyIdGenerator, null, 384, gameMusic);
                        }

                        var fragmentTilemapWithOffset = new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(fragmentTilemap, xOffset, yOffset, false);

                        list.add(fragmentTilemapWithOffset);

                        xOffset = (xOffset + (((fragmentTilemap.GetWidth() + Bridge.Int.mul(Bridge.Int.mul((((3 + random.DTLibrary$IDTRandom$NextInt(5)) | 0)), 16), 3)) | 0))) | 0;

                        if (yOffset === 240) {
                            yOffset = (yOffset + (Bridge.Int.mul(Bridge.Int.mul((((random.DTLibrary$IDTRandom$NextInt(3) - 2) | 0)), 16), 3))) | 0;
                        } else {
                            if (yOffset === 0) {
                                yOffset = (yOffset + (Bridge.Int.mul(Bridge.Int.mul(random.DTLibrary$IDTRandom$NextInt(3), 16), 3))) | 0;
                            } else {
                                yOffset = (yOffset + (Bridge.Int.mul(Bridge.Int.mul((((random.DTLibrary$IDTRandom$NextInt(5) - 2) | 0)), 16), 3))) | 0;
                            }
                        }

                        if (yOffset > 240) {
                            yOffset = 240;
                        }

                        if (yOffset < 0) {
                            yOffset = 0;
                        }
                    }

                    var finishTilemap = new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level5/C_Finish"), enemyIdGenerator, null, 384, gameMusic), xOffset, 0, false);

                    list.add(finishTilemap);

                    var startingXMibi = Bridge.Int.mul(finishTilemap.XOffset, 1024);

                    return { Item1: list, Item2: startingXMibi };
                }
            }
        },
        fields: {
            normalizedTilemaps: null,
            startingXMibi: 0,
            background: null
        },
        alias: [
            "GetCustomLevelInfo", "TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetCustomLevelInfo",
            "GetBackground", "TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetBackground",
            "GetTilemap", "TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetTilemap",
            "GetCameraState", "TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetCameraState"
        ],
        ctors: {
            ctor: function (mapInfo, random) {
                this.$initialize();
                var result = TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level5.ConstructUnnormalizedTilemaps(mapInfo, random);

                var unnormalizedTilemaps = result.Item1;

                this.normalizedTilemaps = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset)).$ctor1(TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.NormalizeTilemaps(unnormalizedTilemaps));

                this.startingXMibi = result.Item2;

                this.background = TuxPlanetSpeedrunAnyPercentLibrary.BackgroundUtil.GetRandomBackground(random);
            }
        },
        methods: {
            GetCustomLevelInfo: function () {
                return new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
            },
            GetBackground: function () {
                return this.background;
            },
            GetTilemap: function (tuxX, tuxY, cameraX, cameraY, windowWidth, windowHeight, levelFlags, mapKeyState) {
                var tilemap = TuxPlanetSpeedrunAnyPercentLibrary.LevelConfigurationHelper.GetTilemap(this.normalizedTilemaps, tuxX, tuxY, cameraX, cameraY, mapKeyState, windowWidth, windowHeight);

                return new TuxPlanetSpeedrunAnyPercentLibrary.Level5Tilemap(tilemap, (Bridge.Int.mul(windowWidth, 3)) << 10, this.startingXMibi, -245760);
            },
            GetCameraState: function (tuxXMibi, tuxYMibi, tuxTeleportStartingLocation, tuxTeleportInProgressElapsedMicros, tilemap, windowWidth, windowHeight, levelFlags) {
                var cameraState = TuxPlanetSpeedrunAnyPercentLibrary.CameraStateProcessing.ComputeCameraState(tuxXMibi, tuxYMibi, tuxTeleportStartingLocation, tuxTeleportInProgressElapsedMicros, tilemap, windowWidth, windowHeight);

                return TuxPlanetSpeedrunAnyPercentLibrary.CameraState.GetCameraState(cameraState.X, windowHeight >> 1);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level6", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.ILevelConfiguration],
        statics: {
            fields: {
                LEVEL_SUBFOLDER: null
            },
            ctors: {
                init: function () {
                    this.LEVEL_SUBFOLDER = "Level6/";
                }
            },
            methods: {
                ConstructUnnormalizedTilemaps: function (mapInfo, canAlreadyUseTimeSlowdown, random) {
                    var gameMusic = TuxPlanetSpeedrunAnyPercentLibrary.LevelConfigurationHelper.GetRandomGameMusic(random);

                    var enemyIdGenerator = new TuxPlanetSpeedrunAnyPercentLibrary.EnemyIdGenerator();

                    var list = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset)).ctor();

                    var tilemapA = new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level6/A_Start"), enemyIdGenerator, null, 384, gameMusic), 0, 0, false);

                    list.add(tilemapA);

                    var tilemapAIndex = (list.Count - 1) | 0;

                    var xOffsetInTiles = 7;
                    var lastChangeWasToTheRight = false;
                    var changeXOffsetCooldown = 4;

                    for (var i = 0; i < 400; i = (i + 1) | 0) {
                        changeXOffsetCooldown = (changeXOffsetCooldown - 1) | 0;
                        if (changeXOffsetCooldown <= 0) {
                            changeXOffsetCooldown = 4;

                            var delta;

                            if (random.DTLibrary$IDTRandom$NextInt(3) === 0) {
                                delta = 0;
                            } else {
                                if (random.DTLibrary$IDTRandom$NextInt(4) !== 0) {
                                    delta = lastChangeWasToTheRight ? 1 : -1;
                                } else {
                                    delta = lastChangeWasToTheRight ? -1 : 1;
                                }
                            }

                            xOffsetInTiles = (xOffsetInTiles + delta) | 0;

                            if (delta === -1) {
                                lastChangeWasToTheRight = false;
                            }
                            if (delta === 1) {
                                lastChangeWasToTheRight = true;
                            }
                        }

                        list.add(new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level6/B_Descent"), enemyIdGenerator, null, 384, gameMusic), ((tilemapA.XOffset + Bridge.Int.mul(xOffsetInTiles, 48)) | 0), ((list.getItem(((list.Count - 1) | 0)).YOffset - 48) | 0), false));
                    }

                    var cutsceneTilemap = TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level6/C_Cutscene"), enemyIdGenerator, TuxPlanetSpeedrunAnyPercentLibrary.CutsceneProcessing.TIME_SLOWDOWN_CUTSCENE, 384, gameMusic);

                    list.add(new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(canAlreadyUseTimeSlowdown ? TuxPlanetSpeedrunAnyPercentLibrary.Tilemap.GetTilemapWithoutCutscene(cutsceneTilemap) : cutsceneTilemap, ((tilemapA.XOffset + Bridge.Int.mul(xOffsetInTiles, 48)) | 0), ((list.getItem(((list.Count - 1) | 0)).YOffset - cutsceneTilemap.GetHeight()) | 0), false));

                    var tilemapCIndex = (list.Count - 1) | 0;

                    var tilemapD = TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level6/D_SecondDrop"), enemyIdGenerator, null, 384, gameMusic);

                    var tilemapDWithOffset = new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(tilemapD, ((list.getItem(((list.Count - 1) | 0)).XOffset + list.getItem(((list.Count - 1) | 0)).Tilemap.GetWidth()) | 0), ((list.getItem(((list.Count - 1) | 0)).YOffset - 48) | 0), false);

                    list.add(tilemapDWithOffset);

                    var tilemapDIndex = (list.Count - 1) | 0;

                    xOffsetInTiles = 0;
                    lastChangeWasToTheRight = false;
                    changeXOffsetCooldown = 4;

                    for (var i1 = 0; i1 < 400; i1 = (i1 + 1) | 0) {
                        changeXOffsetCooldown = (changeXOffsetCooldown - 1) | 0;
                        if (changeXOffsetCooldown <= 0) {
                            changeXOffsetCooldown = 4;

                            var delta1;

                            if (random.DTLibrary$IDTRandom$NextInt(3) === 0) {
                                delta1 = 0;
                            } else {
                                if (random.DTLibrary$IDTRandom$NextInt(4) !== 0) {
                                    delta1 = lastChangeWasToTheRight ? 1 : -1;
                                } else {
                                    delta1 = lastChangeWasToTheRight ? -1 : 1;
                                }
                            }

                            xOffsetInTiles = (xOffsetInTiles + delta1) | 0;

                            if (delta1 === -1) {
                                lastChangeWasToTheRight = false;
                            }
                            if (delta1 === 1) {
                                lastChangeWasToTheRight = true;
                            }
                        }

                        list.add(new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level6/E_Descent"), enemyIdGenerator, null, 384, gameMusic), ((tilemapDWithOffset.XOffset + Bridge.Int.mul(xOffsetInTiles, 48)) | 0), ((list.getItem(((list.Count - 1) | 0)).YOffset - 48) | 0), false));
                    }

                    var tilemapF = TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level6/F_Finish"), enemyIdGenerator, null, 384, gameMusic);

                    list.add(new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(tilemapF, ((tilemapDWithOffset.XOffset + Bridge.Int.mul(xOffsetInTiles, 48)) | 0), ((list.getItem(((list.Count - 1) | 0)).YOffset - tilemapF.GetHeight()) | 0), false));

                    var tilemapFIndex = (list.Count - 1) | 0;

                    return new TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level6.Result(list, tilemapAIndex, tilemapCIndex, tilemapDIndex, tilemapFIndex);
                }
            }
        },
        fields: {
            normalizedTilemaps: null,
            shouldRemoveKonqi: false,
            background: null,
            tilemapA: null,
            tilemapC: null,
            tilemapD: null,
            tilemapF: null
        },
        alias: [
            "GetCustomLevelInfo", "TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetCustomLevelInfo",
            "GetBackground", "TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetBackground",
            "GetTilemap", "TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetTilemap",
            "GetCameraState", "TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetCameraState"
        ],
        ctors: {
            ctor: function (mapInfo, canAlreadyUseTimeSlowdown, random) {
                this.$initialize();
                var result = TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level6.ConstructUnnormalizedTilemaps(mapInfo, canAlreadyUseTimeSlowdown, random);

                this.shouldRemoveKonqi = canAlreadyUseTimeSlowdown;

                this.normalizedTilemaps = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset)).$ctor1(TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.NormalizeTilemaps(result.UnnormalizedTilemaps));

                this.tilemapA = this.normalizedTilemaps.getItem(result.TilemapAIndex);
                this.tilemapC = this.normalizedTilemaps.getItem(result.TilemapCIndex);
                this.tilemapD = this.normalizedTilemaps.getItem(result.TilemapDIndex);
                this.tilemapF = this.normalizedTilemaps.getItem(result.TilemapFIndex);

                this.background = new TuxPlanetSpeedrunAnyPercentLibrary.Background_Cave();
            }
        },
        methods: {
            GetCustomLevelInfo: function () {
                return new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
            },
            GetBackground: function () {
                return this.background;
            },
            GetTilemap: function (tuxX, tuxY, cameraX, cameraY, windowWidth, windowHeight, levelFlags, mapKeyState) {
                var tilemap = TuxPlanetSpeedrunAnyPercentLibrary.LevelConfigurationHelper.GetTilemap(this.normalizedTilemaps, tuxX, tuxY, cameraX, cameraY, mapKeyState, windowWidth, windowHeight);

                if (this.shouldRemoveKonqi) {
                    tilemap = new TuxPlanetSpeedrunAnyPercentLibrary.EnemyCreationTilemap(tilemap, function (_o1) {
                            _o1.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemyAddLevelFlag(TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiCutscene.SHOULD_TELEPORT_OUT_DEFAULT_LEVEL_FLAG, "EnemyAddLevelFlag_shouldTeleportOut"));
                            return _o1;
                        }(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor()));
                }

                return tilemap;
            },
            GetCameraState: function (tuxXMibi, tuxYMibi, tuxTeleportStartingLocation, tuxTeleportInProgressElapsedMicros, tilemap, windowWidth, windowHeight, levelFlags) {
                var cameraState = TuxPlanetSpeedrunAnyPercentLibrary.CameraStateProcessing.ComputeCameraState(tuxXMibi, tuxYMibi, tuxTeleportStartingLocation, tuxTeleportInProgressElapsedMicros, tilemap, windowWidth, windowHeight);

                var effectiveTuxXMibi = tuxXMibi;
                var effectiveTuxYMibi = tuxYMibi;

                if (tuxTeleportInProgressElapsedMicros != null) {
                    var deltaX = System.Int64(tuxXMibi - tuxTeleportStartingLocation.Item1);
                    var deltaY = System.Int64(tuxYMibi - tuxTeleportStartingLocation.Item2);

                    effectiveTuxXMibi = System.Int64.clip32(System.Int64(tuxTeleportStartingLocation.Item1).add(deltaX.mul(System.Int64(System.Nullable.getValue(tuxTeleportInProgressElapsedMicros))).div(System.Int64(TuxPlanetSpeedrunAnyPercentLibrary.TuxState.TELEPORT_DURATION))));
                    effectiveTuxYMibi = System.Int64.clip32(System.Int64(tuxTeleportStartingLocation.Item2).add(deltaY.mul(System.Int64(System.Nullable.getValue(tuxTeleportInProgressElapsedMicros))).div(System.Int64(TuxPlanetSpeedrunAnyPercentLibrary.TuxState.TELEPORT_DURATION))));
                }

                var effectiveTuxX = effectiveTuxXMibi >> 10;
                var effectiveTuxY = effectiveTuxYMibi >> 10;

                if (this.tilemapA.XOffset <= effectiveTuxX && effectiveTuxX <= ((this.tilemapA.XOffset + this.tilemapA.Tilemap.GetWidth()) | 0) && ((this.tilemapA.YOffset + 864) | 0) <= effectiveTuxY && effectiveTuxY <= ((this.tilemapA.YOffset + this.tilemapA.Tilemap.GetHeight()) | 0)) {
                    return TuxPlanetSpeedrunAnyPercentLibrary.CameraState.GetCameraState(Math.max(cameraState.X, ((((this.tilemapA.XOffset + 336) | 0) + (windowWidth >> 1)) | 0)), cameraState.Y);
                }

                if (((this.tilemapA.YOffset - 144) | 0) <= effectiveTuxY && effectiveTuxY <= ((this.tilemapA.YOffset + 816) | 0)) {
                    var distance = ((((this.tilemapA.YOffset + 816) | 0)) - effectiveTuxY) | 0;

                    var ratioTimes10000 = (Bridge.Int.div(Bridge.Int.mul(distance, 10000), (960))) | 0;

                    var cameraYOffset = (Bridge.Int.div(Bridge.Int.mul(ratioTimes10000, (((Bridge.Int.div(((-windowHeight) | 0), 3)) | 0))), 10000)) | 0;

                    return TuxPlanetSpeedrunAnyPercentLibrary.CameraState.GetCameraState(cameraState.X, ((cameraState.Y + cameraYOffset) | 0));
                }

                if (((this.tilemapC.YOffset + 2400) | 0) <= effectiveTuxY && effectiveTuxY <= ((this.tilemapA.YOffset - 144) | 0)) {
                    var cameraYOffset1 = (Bridge.Int.div(((-windowHeight) | 0), 3)) | 0;

                    return TuxPlanetSpeedrunAnyPercentLibrary.CameraState.GetCameraState(cameraState.X, ((cameraState.Y + cameraYOffset1) | 0));
                }

                if (this.tilemapC.YOffset <= effectiveTuxY && effectiveTuxY <= ((this.tilemapC.YOffset + 2400) | 0) && effectiveTuxX <= ((this.tilemapC.XOffset + this.tilemapC.Tilemap.GetWidth()) | 0)) {
                    var ratioTimes100001;

                    if (effectiveTuxX <= ((this.tilemapC.XOffset + 1440) | 0)) {
                        ratioTimes100001 = 10000;
                    } else {
                        if (effectiveTuxX <= ((this.tilemapC.XOffset + 2160) | 0)) {
                            var distance1 = (((this.tilemapC.XOffset + 2160) | 0) - effectiveTuxX) | 0;
                            ratioTimes100001 = (Bridge.Int.div(Bridge.Int.mul(distance1, 10000), (720))) | 0;
                        } else {
                            ratioTimes100001 = 0;
                        }
                    }

                    var cameraYOffset2 = (Bridge.Int.div(Bridge.Int.mul(ratioTimes100001, (((Bridge.Int.div(((-windowHeight) | 0), 3)) | 0))), 10000)) | 0;

                    return TuxPlanetSpeedrunAnyPercentLibrary.CameraState.GetCameraState(cameraState.X, ((cameraState.Y + cameraYOffset2) | 0));
                }

                if (this.tilemapD.XOffset <= effectiveTuxX && effectiveTuxX <= ((this.tilemapD.XOffset + this.tilemapD.Tilemap.GetWidth()) | 0) && this.tilemapD.YOffset <= effectiveTuxY && effectiveTuxY <= ((this.tilemapD.YOffset + 480) | 0)) {
                    var distance2 = ((((this.tilemapD.YOffset + 480) | 0)) - effectiveTuxY) | 0;

                    var ratioTimes100002 = (Bridge.Int.div(Bridge.Int.mul(distance2, 10000), (480))) | 0;

                    var cameraYOffset3 = (Bridge.Int.div(Bridge.Int.mul(ratioTimes100002, (((Bridge.Int.div(((-windowHeight) | 0), 3)) | 0))), 10000)) | 0;

                    return TuxPlanetSpeedrunAnyPercentLibrary.CameraState.GetCameraState(cameraState.X, ((cameraState.Y + cameraYOffset3) | 0));
                }

                if (((this.tilemapF.YOffset + this.tilemapF.Tilemap.GetHeight()) | 0) <= effectiveTuxY && effectiveTuxY <= this.tilemapD.YOffset) {
                    var cameraYOffset4 = (Bridge.Int.div(((-windowHeight) | 0), 3)) | 0;

                    return TuxPlanetSpeedrunAnyPercentLibrary.CameraState.GetCameraState(cameraState.X, ((cameraState.Y + cameraYOffset4) | 0));
                }

                if (this.tilemapF.YOffset <= effectiveTuxY && effectiveTuxY <= ((this.tilemapF.YOffset + this.tilemapF.Tilemap.GetHeight()) | 0) && this.tilemapF.XOffset <= effectiveTuxX && effectiveTuxX <= ((this.tilemapF.XOffset + this.tilemapF.Tilemap.GetWidth()) | 0)) {
                    var ratioTimes100003;

                    if (((this.tilemapF.XOffset + 3360) | 0) <= effectiveTuxX) {
                        ratioTimes100003 = 0;
                    } else {
                        if (((this.tilemapF.YOffset + 1104) | 0) <= effectiveTuxY) {
                            ratioTimes100003 = 10000;
                        } else {
                            if (effectiveTuxX <= ((this.tilemapF.XOffset + 1440) | 0)) {
                                ratioTimes100003 = 10000;
                            } else {
                                if (effectiveTuxX <= ((this.tilemapF.XOffset + 2160) | 0)) {
                                    var distance3 = (((this.tilemapF.XOffset + 2160) | 0) - effectiveTuxX) | 0;
                                    ratioTimes100003 = (Bridge.Int.div(Bridge.Int.mul(distance3, 10000), (720))) | 0;
                                } else {
                                    ratioTimes100003 = 0;
                                }
                            }
                        }
                    }

                    var cameraYOffset5 = (Bridge.Int.div(Bridge.Int.mul(ratioTimes100003, (((Bridge.Int.div(((-windowHeight) | 0), 3)) | 0))), 10000)) | 0;

                    return TuxPlanetSpeedrunAnyPercentLibrary.CameraState.GetCameraState(cameraState.X, ((cameraState.Y + cameraYOffset5) | 0));
                }

                return cameraState;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level7", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.ILevelConfiguration],
        statics: {
            fields: {
                LEVEL_SUBFOLDER: null,
                HAS_OBTAINED_KEY: null
            },
            ctors: {
                init: function () {
                    this.LEVEL_SUBFOLDER = "Level7/";
                    this.HAS_OBTAINED_KEY = "level7_hasObtainedKey";
                }
            },
            methods: {
                ConstructUnnormalizedTilemaps: function (mapInfo, random) {
                    var $t, $t1;
                    var gameMusic = TuxPlanetSpeedrunAnyPercentLibrary.GameMusic.Chipdisko;

                    var enemyIdGenerator = new TuxPlanetSpeedrunAnyPercentLibrary.EnemyIdGenerator();

                    var list = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset)).ctor();

                    var startTilemap = new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level7/A_Start"), enemyIdGenerator, null, 384, gameMusic), 0, 0, false);

                    list.add(startTilemap);

                    var B_fragmentMaps = function (_o1) {
                            _o1.add(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level7/B_Fragment1"));
                            _o1.add(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level7/B_Fragment2"));
                            return _o1;
                        }(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.MapDataHelper.Map)).ctor());
                    DTLibrary.ListUtil.Shuffle(TuxPlanetSpeedrunAnyPercentLibrary.MapDataHelper.Map, B_fragmentMaps, random);

                    $t = Bridge.getEnumerator(B_fragmentMaps);
                    try {
                        while ($t.moveNext()) {
                            var map = $t.Current;
                            list.add(new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(map, enemyIdGenerator, null, 384, gameMusic), list.getItem(((list.Count - 1) | 0)).XOffset, ((list.getItem(((list.Count - 1) | 0)).YOffset + list.getItem(((list.Count - 1) | 0)).Tilemap.GetHeight()) | 0), false));
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    for (var i = 0; i < 4; i = (i + 1) | 0) {
                        var tilemapFlyamanita = TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level7/Flyamanita"), enemyIdGenerator, null, 384, gameMusic);

                        var flyAmanitaXMibi = { v : (((((Bridge.Int.mul(random.DTLibrary$IDTRandom$NextInt(19), 48) + 48) | 0) + 24) | 0)) << 10 };
                        var flyAmanitaYMibi = { v : (tilemapFlyamanita.GetHeight() >> 1) << 10 };

                        tilemapFlyamanita = TuxPlanetSpeedrunAnyPercentLibrary.Tilemap.GetTilemapWithExtraEnemiesToSpawn(tilemapFlyamanita, (function ($me, flyAmanitaXMibi, flyAmanitaYMibi) {
                                return function (_o2) {
                                    _o2.add(new TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level7.EnemyFlyamanitaLevel7Spawn(flyAmanitaXMibi.v, flyAmanitaYMibi.v, "flyAmanitaSpawn[" + (DTLibrary.StringUtil.ToStringCultureInvariant(i) || "") + "]"));
                                    return _o2;
                                };
                            })(this, flyAmanitaXMibi, flyAmanitaYMibi)(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Tilemap.IExtraEnemyToSpawn)).ctor()));

                        list.add(new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(tilemapFlyamanita, list.getItem(((list.Count - 1) | 0)).XOffset, ((list.getItem(((list.Count - 1) | 0)).YOffset + list.getItem(((list.Count - 1) | 0)).Tilemap.GetHeight()) | 0), false));
                    }

                    var C_fragmentMaps = function (_o3) {
                            _o3.add(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level7/C_Fragment1"));
                            _o3.add(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level7/C_Fragment2"));
                            return _o3;
                        }(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.MapDataHelper.Map)).ctor());
                    DTLibrary.ListUtil.Shuffle(TuxPlanetSpeedrunAnyPercentLibrary.MapDataHelper.Map, C_fragmentMaps, random);

                    $t1 = Bridge.getEnumerator(C_fragmentMaps);
                    try {
                        while ($t1.moveNext()) {
                            var map1 = $t1.Current;
                            list.add(new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(map1, enemyIdGenerator, null, 384, gameMusic), list.getItem(((list.Count - 1) | 0)).XOffset, ((list.getItem(((list.Count - 1) | 0)).YOffset + list.getItem(((list.Count - 1) | 0)).Tilemap.GetHeight()) | 0), false));
                        }
                    } finally {
                        if (Bridge.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$Dispose();
                        }
                    }

                    for (var i1 = 0; i1 < 4; i1 = (i1 + 1) | 0) {
                        var tilemapFlyamanita1 = TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level7/Flyamanita"), enemyIdGenerator, null, 384, gameMusic);

                        var flyAmanitaXMibi1 = { v : (((((Bridge.Int.mul(random.DTLibrary$IDTRandom$NextInt(19), 48) + 48) | 0) + 24) | 0)) << 10 };
                        var flyAmanitaYMibi1 = { v : (tilemapFlyamanita1.GetHeight() >> 1) << 10 };

                        tilemapFlyamanita1 = TuxPlanetSpeedrunAnyPercentLibrary.Tilemap.GetTilemapWithExtraEnemiesToSpawn(tilemapFlyamanita1, (function ($me, flyAmanitaXMibi1, flyAmanitaYMibi1) {
                                return function (_o4) {
                                    _o4.add(new TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level7.EnemyFlyamanitaLevel7Spawn(flyAmanitaXMibi1.v, flyAmanitaYMibi1.v, "flyAmanitaSpawn2[" + (DTLibrary.StringUtil.ToStringCultureInvariant(i1) || "") + "]"));
                                    return _o4;
                                };
                            })(this, flyAmanitaXMibi1, flyAmanitaYMibi1)(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Tilemap.IExtraEnemyToSpawn)).ctor()));

                        list.add(new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(tilemapFlyamanita1, list.getItem(((list.Count - 1) | 0)).XOffset, ((list.getItem(((list.Count - 1) | 0)).YOffset + list.getItem(((list.Count - 1) | 0)).Tilemap.GetHeight()) | 0), false));
                    }

                    list.add(new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level7/D_Key"), enemyIdGenerator, null, 384, gameMusic), list.getItem(((list.Count - 1) | 0)).XOffset, ((list.getItem(((list.Count - 1) | 0)).YOffset + list.getItem(((list.Count - 1) | 0)).Tilemap.GetHeight()) | 0), false));

                    var yOffsetOfKeyTilemap = list.getItem(((list.Count - 1) | 0)).YOffset;

                    return { Item1: list, Item2: yOffsetOfKeyTilemap };
                },
                GetMaximumCameraXAscending: function (tuxYMibi, tuxTeleportStartingLocation, tuxTeleportInProgressElapsedMicros, windowWidth, windowHeight) {
                    if (tuxTeleportInProgressElapsedMicros != null) {
                        var deltaY = System.Int64(tuxYMibi - tuxTeleportStartingLocation.Item2);

                        tuxYMibi = System.Int64.clip32(System.Int64(tuxTeleportStartingLocation.Item2).add(deltaY.mul(System.Int64(System.Nullable.getValue(tuxTeleportInProgressElapsedMicros))).div(System.Int64(TuxPlanetSpeedrunAnyPercentLibrary.TuxState.TELEPORT_DURATION))));
                    }

                    var y = tuxYMibi >> 10;

                    var halfWindowWidth = windowWidth >> 1;

                    var yStart = windowHeight;
                    var yEnd = Bridge.Int.mul(windowHeight, 3);

                    if (y <= yStart) {
                        return windowWidth;
                    }

                    if (y >= yEnd) {
                        return halfWindowWidth;
                    }

                    var ratioTimes1000 = (Bridge.Int.div(Bridge.Int.mul((((yEnd - y) | 0)), 1000), (((yEnd - yStart) | 0)))) | 0;

                    return ((halfWindowWidth + ((Bridge.Int.div(Bridge.Int.mul(halfWindowWidth, ratioTimes1000), 1000)) | 0)) | 0);
                },
                GetMaximumCameraXDescending: function (tuxYMibi, tuxTeleportStartingLocation, tuxTeleportInProgressElapsedMicros, windowWidth, windowHeight) {
                    if (tuxTeleportInProgressElapsedMicros != null) {
                        var deltaY = System.Int64(tuxYMibi - tuxTeleportStartingLocation.Item2);

                        tuxYMibi = System.Int64.clip32(System.Int64(tuxTeleportStartingLocation.Item2).add(deltaY.mul(System.Int64(System.Nullable.getValue(tuxTeleportInProgressElapsedMicros))).div(System.Int64(TuxPlanetSpeedrunAnyPercentLibrary.TuxState.TELEPORT_DURATION))));
                    }

                    var y = tuxYMibi >> 10;

                    var halfWindowWidth = windowWidth >> 1;

                    var yStart = windowHeight;
                    var yEnd = Bridge.Int.mul(windowHeight, 3);

                    if (y <= yStart) {
                        return null;
                    }

                    if (y >= yEnd) {
                        return halfWindowWidth;
                    }

                    var ratioTimes1000 = (Bridge.Int.div(Bridge.Int.mul((((yEnd - y) | 0)), 1000), (((yEnd - yStart) | 0)))) | 0;

                    return Bridge.Int.clip32(halfWindowWidth + ((Bridge.Int.div(Bridge.Int.mul(halfWindowWidth, ratioTimes1000), 1000)) | 0));
                },
                GetCameraYOffsetAscending: function (tuxYMibi, tuxTeleportStartingLocation, tuxTeleportInProgressElapsedMicros, yOffsetOfKeyTilemap, windowWidth, windowHeight) {
                    if (tuxTeleportInProgressElapsedMicros != null) {
                        var deltaY = System.Int64(tuxYMibi - tuxTeleportStartingLocation.Item2);

                        tuxYMibi = System.Int64.clip32(System.Int64(tuxTeleportStartingLocation.Item2).add(deltaY.mul(System.Int64(System.Nullable.getValue(tuxTeleportInProgressElapsedMicros))).div(System.Int64(TuxPlanetSpeedrunAnyPercentLibrary.TuxState.TELEPORT_DURATION))));
                    }

                    var y = tuxYMibi >> 10;

                    var maxCameraYOffset = (Bridge.Int.div(windowHeight, 6)) | 0;

                    var yStart = windowHeight;
                    var yEnd = Bridge.Int.mul(windowHeight, 3);

                    if (y <= yStart) {
                        return 0;
                    }

                    var ratioTimes1000;

                    if (y < yEnd) {
                        ratioTimes1000 = (Bridge.Int.div(Bridge.Int.mul((((y - yStart) | 0)), 1000), (((yEnd - yStart) | 0)))) | 0;
                        return ((Bridge.Int.div(Bridge.Int.mul(maxCameraYOffset, ratioTimes1000), 1000)) | 0);
                    }

                    yStart = (yOffsetOfKeyTilemap + 1296) | 0;
                    yEnd = (yOffsetOfKeyTilemap + 1776) | 0;

                    if (y <= yStart) {
                        return maxCameraYOffset;
                    }

                    if (y >= yEnd) {
                        return 0;
                    }

                    ratioTimes1000 = (Bridge.Int.div(Bridge.Int.mul((((yEnd - y) | 0)), 1000), (((yEnd - yStart) | 0)))) | 0;
                    return ((Bridge.Int.div(Bridge.Int.mul(maxCameraYOffset, ratioTimes1000), 1000)) | 0);
                },
                GetCameraYOffsetDescending: function (tuxYMibi, tuxTeleportStartingLocation, tuxTeleportInProgressElapsedMicros, yOffsetOfKeyTilemap, windowWidth, windowHeight) {
                    if (tuxTeleportInProgressElapsedMicros != null) {
                        var deltaY = System.Int64(tuxYMibi - tuxTeleportStartingLocation.Item2);

                        tuxYMibi = System.Int64.clip32(System.Int64(tuxTeleportStartingLocation.Item2).add(deltaY.mul(System.Int64(System.Nullable.getValue(tuxTeleportInProgressElapsedMicros))).div(System.Int64(TuxPlanetSpeedrunAnyPercentLibrary.TuxState.TELEPORT_DURATION))));
                    }

                    var y = tuxYMibi >> 10;

                    var maxCameraYOffset = (Bridge.Int.div(((-windowHeight) | 0), 6)) | 0;

                    var yStart = (yOffsetOfKeyTilemap + 1776) | 0;
                    var yEnd = (yOffsetOfKeyTilemap + 1296) | 0;

                    if (y >= yStart) {
                        return 0;
                    }

                    if (y > yEnd) {
                        var ratioTimes1000 = (Bridge.Int.div(Bridge.Int.mul((((yStart - y) | 0)), 1000), (((yStart - yEnd) | 0)))) | 0;
                        return ((Bridge.Int.div(Bridge.Int.mul(maxCameraYOffset, ratioTimes1000), 1000)) | 0);
                    }

                    return maxCameraYOffset;
                }
            }
        },
        fields: {
            normalizedTilemaps: null,
            background: null,
            yOffsetOfKeyTilemap: 0
        },
        alias: [
            "GetCustomLevelInfo", "TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetCustomLevelInfo",
            "GetBackground", "TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetBackground",
            "GetTilemap", "TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetTilemap",
            "GetCameraState", "TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetCameraState"
        ],
        ctors: {
            ctor: function (mapInfo, random) {
                this.$initialize();
                var result = TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level7.ConstructUnnormalizedTilemaps(mapInfo, random);

                var unnormalizedTilemaps = result.Item1;

                this.normalizedTilemaps = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset)).$ctor1(TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.NormalizeTilemaps(unnormalizedTilemaps));

                this.yOffsetOfKeyTilemap = result.Item2;

                this.background = new TuxPlanetSpeedrunAnyPercentLibrary.Background_Cave();
            }
        },
        methods: {
            GetCustomLevelInfo: function () {
                return new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
            },
            GetBackground: function () {
                return this.background;
            },
            GetTilemap: function (tuxX, tuxY, cameraX, cameraY, windowWidth, windowHeight, levelFlags, mapKeyState) {
                var tilemap = TuxPlanetSpeedrunAnyPercentLibrary.LevelConfigurationHelper.GetTilemap(this.normalizedTilemaps, tuxX, tuxY, cameraX, cameraY, mapKeyState, windowWidth, windowHeight);

                var enemies = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor();

                if (System.Linq.Enumerable.from(mapKeyState.CollectedKeys).contains(TuxPlanetSpeedrunAnyPercentLibrary.MapKey.Gold)) {
                    enemies.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemyAddLevelFlag(TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level7.HAS_OBTAINED_KEY, "level7_addLevelFlagForDescent"));
                }

                return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyCreationTilemap(tilemap, enemies);
            },
            GetCameraState: function (tuxXMibi, tuxYMibi, tuxTeleportStartingLocation, tuxTeleportInProgressElapsedMicros, tilemap, windowWidth, windowHeight, levelFlags) {
                var cameraState = TuxPlanetSpeedrunAnyPercentLibrary.CameraStateProcessing.ComputeCameraState(tuxXMibi, tuxYMibi, tuxTeleportStartingLocation, tuxTeleportInProgressElapsedMicros, tilemap, windowWidth, windowHeight);

                if (System.Linq.Enumerable.from(levelFlags).contains(TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level7.HAS_OBTAINED_KEY)) {
                    var maximumCameraX = TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level7.GetMaximumCameraXDescending(tuxYMibi, tuxTeleportStartingLocation, tuxTeleportInProgressElapsedMicros, windowWidth, windowHeight);

                    var cameraX;

                    if (System.Nullable.hasValue(maximumCameraX)) {
                        cameraX = Math.min(cameraState.X, System.Nullable.getValue(maximumCameraX));
                    } else {
                        cameraX = cameraState.X;
                    }

                    var cameraYOffset = TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level7.GetCameraYOffsetDescending(tuxYMibi, tuxTeleportStartingLocation, tuxTeleportInProgressElapsedMicros, this.yOffsetOfKeyTilemap, windowWidth, windowHeight);

                    var cameraY = (cameraState.Y + cameraYOffset) | 0;

                    if (cameraY < (windowHeight >> 1)) {
                        cameraY = windowHeight >> 1;
                    }

                    return TuxPlanetSpeedrunAnyPercentLibrary.CameraState.GetCameraState(cameraX, cameraY);
                } else {
                    var maximumCameraX1 = TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level7.GetMaximumCameraXAscending(tuxYMibi, tuxTeleportStartingLocation, tuxTeleportInProgressElapsedMicros, windowWidth, windowHeight);

                    var cameraYOffset1 = TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level7.GetCameraYOffsetAscending(tuxYMibi, tuxTeleportStartingLocation, tuxTeleportInProgressElapsedMicros, this.yOffsetOfKeyTilemap, windowWidth, windowHeight);

                    return TuxPlanetSpeedrunAnyPercentLibrary.CameraState.GetCameraState(Math.min(cameraState.X, maximumCameraX1), ((cameraState.Y + cameraYOffset1) | 0));
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level7.EnemyFlyamanitaLevel7Spawn", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.Tilemap.IExtraEnemyToSpawn],
        $kind: "nested class",
        fields: {
            xMibi: 0,
            yMibi: 0,
            enemyIdPrefix: null
        },
        alias: ["GetEnemy", "TuxPlanetSpeedrunAnyPercentLibrary$Tilemap$IExtraEnemyToSpawn$GetEnemy"],
        ctors: {
            ctor: function (xMibi, yMibi, enemyIdPrefix) {
                this.$initialize();
                this.xMibi = xMibi;
                this.yMibi = yMibi;
                this.enemyIdPrefix = enemyIdPrefix;
            }
        },
        methods: {
            GetEnemy: function (xOffset, yOffset) {
                return TuxPlanetSpeedrunAnyPercentLibrary.EnemyFlyamanitaLevel7.GetEnemyFlyamanitaLevel7(((this.xMibi + (xOffset << 10)) | 0), ((this.yMibi + (yOffset << 10)) | 0), this.enemyIdPrefix, 1);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level8", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.ILevelConfiguration],
        statics: {
            fields: {
                LEVEL_SUBFOLDER: null,
                HAS_FINISHED_CUTSCENE: null
            },
            ctors: {
                init: function () {
                    this.LEVEL_SUBFOLDER = "Level8/";
                    this.HAS_FINISHED_CUTSCENE = "level8_hasFinishedCutscene";
                }
            },
            methods: {
                ConstructUnnormalizedTilemaps: function (mapInfo, random) {
                    var gameMusic = TuxPlanetSpeedrunAnyPercentLibrary.LevelConfigurationHelper.GetRandomGameMusic(random);

                    var enemyIdGenerator = new TuxPlanetSpeedrunAnyPercentLibrary.EnemyIdGenerator();

                    var list = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset)).ctor();

                    var tilemap = new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level8/Water"), enemyIdGenerator, TuxPlanetSpeedrunAnyPercentLibrary.CutsceneProcessing.LEVEL_8_CUTSCENE, 384, gameMusic), 0, 0, false);

                    list.add(tilemap);

                    return list;
                }
            }
        },
        fields: {
            normalizedTilemaps: null,
            background: null,
            fishes: null
        },
        alias: [
            "GetCustomLevelInfo", "TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetCustomLevelInfo",
            "GetBackground", "TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetBackground",
            "GetTilemap", "TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetTilemap",
            "GetCameraState", "TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetCameraState"
        ],
        ctors: {
            ctor: function (mapInfo, random) {
                this.$initialize();
                var unnormalizedTilemaps = TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level8.ConstructUnnormalizedTilemaps(mapInfo, random);

                this.normalizedTilemaps = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset)).$ctor1(TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.NormalizeTilemaps(unnormalizedTilemaps));

                this.background = new TuxPlanetSpeedrunAnyPercentLibrary.Background_Ocean();

                this.fishes = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor();

                for (var i = 0; i < 25; i = (i + 1) | 0) {
                    var fishImage = new TuxPlanetSpeedrunAnyPercentLibrary.GameImage();
                    var fishImageMirrored = new TuxPlanetSpeedrunAnyPercentLibrary.GameImage();

                    switch (random.DTLibrary$IDTRandom$NextInt(3)) {
                        case 0: 
                            fishImage = TuxPlanetSpeedrunAnyPercentLibrary.GameImage.FishBlue;
                            fishImageMirrored = TuxPlanetSpeedrunAnyPercentLibrary.GameImage.FishBlueMirrored;
                            break;
                        case 1: 
                            fishImage = TuxPlanetSpeedrunAnyPercentLibrary.GameImage.FishGreen;
                            fishImageMirrored = TuxPlanetSpeedrunAnyPercentLibrary.GameImage.FishGreenMirrored;
                            break;
                        case 2: 
                            fishImage = TuxPlanetSpeedrunAnyPercentLibrary.GameImage.FishRed;
                            fishImageMirrored = TuxPlanetSpeedrunAnyPercentLibrary.GameImage.FishRedMirrored;
                            break;
                        default: 
                            throw new System.Exception();
                    }

                    this.fishes.add(TuxPlanetSpeedrunAnyPercentLibrary.EnemyLevel8Fish.SpawnLevel8Fish(random.DTLibrary$IDTRandom$NextInt(3600), random.DTLibrary$IDTRandom$NextInt(336), random.DTLibrary$IDTRandom$NextBool(), fishImage, fishImageMirrored, "level8Fish_" + (DTLibrary.StringUtil.ToStringCultureInvariant(i) || "")));
                }
            }
        },
        methods: {
            GetCustomLevelInfo: function () {
                return new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
            },
            GetBackground: function () {
                return this.background;
            },
            GetTilemap: function (tuxX, tuxY, cameraX, cameraY, windowWidth, windowHeight, levelFlags, mapKeyState) {
                var tilemap = TuxPlanetSpeedrunAnyPercentLibrary.LevelConfigurationHelper.GetTilemap(this.normalizedTilemaps, tuxX, tuxY, cameraX, cameraY, mapKeyState, windowWidth, windowHeight);

                var enemies = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).$ctor1(this.fishes);
                enemies.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemyLevel8WaterAnimation(0, "level8waterAnimation"));

                tilemap = new TuxPlanetSpeedrunAnyPercentLibrary.EnemyCreationTilemap(tilemap, enemies);

                if (System.Linq.Enumerable.from(levelFlags).contains(TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level8.HAS_FINISHED_CUTSCENE)) {
                    tilemap = new TuxPlanetSpeedrunAnyPercentLibrary.WinLevelTilemap(tilemap);
                }

                return tilemap;
            },
            GetCameraState: function (tuxXMibi, tuxYMibi, tuxTeleportStartingLocation, tuxTeleportInProgressElapsedMicros, tilemap, windowWidth, windowHeight, levelFlags) {
                var cameraState = TuxPlanetSpeedrunAnyPercentLibrary.CameraStateProcessing.ComputeCameraState(tuxXMibi, tuxYMibi, tuxTeleportStartingLocation, tuxTeleportInProgressElapsedMicros, tilemap, windowWidth, windowHeight);

                return TuxPlanetSpeedrunAnyPercentLibrary.CameraState.GetCameraState(cameraState.X, windowHeight >> 1);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level9", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.ILevelConfiguration],
        statics: {
            fields: {
                LEVEL_SUBFOLDER: null
            },
            ctors: {
                init: function () {
                    this.LEVEL_SUBFOLDER = "Level9/";
                }
            },
            methods: {
                ConstructUnnormalizedTilemaps: function (mapInfo, random) {
                    var $t;
                    var gameMusic = TuxPlanetSpeedrunAnyPercentLibrary.LevelConfigurationHelper.GetRandomGameMusic(random);

                    var enemyIdGenerator = new TuxPlanetSpeedrunAnyPercentLibrary.EnemyIdGenerator();

                    var list = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset)).ctor();

                    var tilemapAExtraEnemies = function (_o1) {
                            _o1.add(new TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level9.EnemyEliteOrangeSpawn(1572864, 147456, random.DTLibrary$IDTRandom$NextInt(46080), random.DTLibrary$IDTRandom$NextBool(), "tilemapA_eliteOrangeIntro"));
                            return _o1;
                        }(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Tilemap.IExtraEnemyToSpawn)).ctor());

                    for (var i = 0; i < 3; i = (i + 1) | 0) {
                        tilemapAExtraEnemies.add(new TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level9.EnemyEliteOrangeSpawn((Bridge.Int.mul((((53 + Bridge.Int.mul(10, i)) | 0)), 48)) << 10, 196608, random.DTLibrary$IDTRandom$NextInt(46080), random.DTLibrary$IDTRandom$NextBool(), "tilemapA_eliteOrangeChallenge_" + (DTLibrary.StringUtil.ToStringCultureInvariant(i) || "")));
                    }

                    list.add(new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(TuxPlanetSpeedrunAnyPercentLibrary.Tilemap.GetTilemapWithExtraEnemiesToSpawn(TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level9/A_Start"), enemyIdGenerator, null, 384, gameMusic), tilemapAExtraEnemies), 0, 0, false));

                    var tilemapsB = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Tilemap)).ctor();

                    var tilemapB1ExtraEnemies = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Tilemap.IExtraEnemyToSpawn)).ctor();

                    for (var i1 = 0; i1 < 8; i1 = (i1 + 1) | 0) {
                        tilemapB1ExtraEnemies.add(new TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level9.EnemyEliteOrangeSpawn((Bridge.Int.mul((((15 + Bridge.Int.mul(10, i1)) | 0)), 48)) << 10, 245760, random.DTLibrary$IDTRandom$NextInt(46080), random.DTLibrary$IDTRandom$NextBool(), "tilemapB1_eliteOrange_" + (DTLibrary.StringUtil.ToStringCultureInvariant(i1) || "")));
                    }

                    tilemapsB.add(TuxPlanetSpeedrunAnyPercentLibrary.Tilemap.GetTilemapWithExtraEnemiesToSpawn(TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level9/B_Obstacles1"), enemyIdGenerator, null, 384, gameMusic), tilemapB1ExtraEnemies));

                    tilemapsB.add(TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level9/B_Obstacles2"), enemyIdGenerator, null, 384, gameMusic));
                    DTLibrary.ListUtil.Shuffle(TuxPlanetSpeedrunAnyPercentLibrary.Tilemap, tilemapsB, random);

                    var tilemapB3ExtraEnemies = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Tilemap.IExtraEnemyToSpawn)).ctor();

                    for (var i2 = 0; i2 < 6; i2 = (i2 + 1) | 0) {
                        var eliteFlyamanitaRngSeed = random.DTLibrary$IDTDeterministicRandom$SerializeToString();
                        var x = (random.DTLibrary$IDTRandom$NextInt(3) + 2) | 0;
                        for (var j = 0; j < x; j = (j + 1) | 0) {
                            random.DTLibrary$IDTRandom$NextBool();
                        }

                        tilemapB3ExtraEnemies.add(new TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level9.EnemyEliteFlyamanitaSpawn((Bridge.Int.mul((((14 + Bridge.Int.mul(25, i2)) | 0)), 48)) << 10, 344064, eliteFlyamanitaRngSeed, "tilemapB3_eliteFlyamanita_" + (DTLibrary.StringUtil.ToStringCultureInvariant(i2) || "")));
                    }

                    tilemapsB.add(TuxPlanetSpeedrunAnyPercentLibrary.Tilemap.GetTilemapWithExtraEnemiesToSpawn(TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level9/B_Obstacles3"), enemyIdGenerator, null, 384, gameMusic), tilemapB3ExtraEnemies));

                    $t = Bridge.getEnumerator(tilemapsB);
                    try {
                        while ($t.moveNext()) {
                            var tilemap = $t.Current;
                            list.add(new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(tilemap, ((list.getItem(((list.Count - 1) | 0)).XOffset + list.getItem(((list.Count - 1) | 0)).Tilemap.GetWidth()) | 0), 0, false));
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    list.add(new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level9/C_Finish"), enemyIdGenerator, null, 384, gameMusic), ((list.getItem(((list.Count - 1) | 0)).XOffset + list.getItem(((list.Count - 1) | 0)).Tilemap.GetWidth()) | 0), 0, false));

                    return list;
                }
            }
        },
        fields: {
            normalizedTilemaps: null,
            background: null
        },
        alias: [
            "GetCustomLevelInfo", "TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetCustomLevelInfo",
            "GetBackground", "TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetBackground",
            "GetTilemap", "TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetTilemap",
            "GetCameraState", "TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetCameraState"
        ],
        ctors: {
            ctor: function (mapInfo, random) {
                this.$initialize();
                var unnormalizedTilemaps = TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level9.ConstructUnnormalizedTilemaps(mapInfo, random);

                this.normalizedTilemaps = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset)).$ctor1(TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.NormalizeTilemaps(unnormalizedTilemaps));

                this.background = new TuxPlanetSpeedrunAnyPercentLibrary.Background_Ocean();
            }
        },
        methods: {
            GetCustomLevelInfo: function () {
                return new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
            },
            GetBackground: function () {
                return this.background;
            },
            GetTilemap: function (tuxX, tuxY, cameraX, cameraY, windowWidth, windowHeight, levelFlags, mapKeyState) {
                var tilemap = TuxPlanetSpeedrunAnyPercentLibrary.LevelConfigurationHelper.GetTilemap(this.normalizedTilemaps, tuxX, tuxY, cameraX, cameraY, mapKeyState, windowWidth, windowHeight);

                return tilemap;
            },
            GetCameraState: function (tuxXMibi, tuxYMibi, tuxTeleportStartingLocation, tuxTeleportInProgressElapsedMicros, tilemap, windowWidth, windowHeight, levelFlags) {
                var cameraState = TuxPlanetSpeedrunAnyPercentLibrary.CameraStateProcessing.ComputeCameraState(((tuxXMibi + 204800) | 0), tuxYMibi, tuxTeleportStartingLocation != null ? { Item1: ((tuxTeleportStartingLocation.Item1 + 204800) | 0), Item2: tuxTeleportStartingLocation.Item2 } : null, tuxTeleportInProgressElapsedMicros, tilemap, windowWidth, windowHeight);

                return TuxPlanetSpeedrunAnyPercentLibrary.CameraState.GetCameraState(cameraState.X, windowHeight >> 1);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level9.EnemyEliteFlyamanitaSpawn", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.Tilemap.IExtraEnemyToSpawn],
        $kind: "nested class",
        fields: {
            xMibi: 0,
            yMibi: 0,
            rngSeed: null,
            enemyId: null
        },
        alias: ["GetEnemy", "TuxPlanetSpeedrunAnyPercentLibrary$Tilemap$IExtraEnemyToSpawn$GetEnemy"],
        ctors: {
            ctor: function (xMibi, yMibi, rngSeed, enemyId) {
                this.$initialize();
                this.xMibi = xMibi;
                this.yMibi = yMibi;
                this.rngSeed = rngSeed;
                this.enemyId = enemyId;
            }
        },
        methods: {
            GetEnemy: function (xOffset, yOffset) {
                return new TuxPlanetSpeedrunAnyPercentLibrary.EnemySpawnHelper(TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteFlyamanita.GetEnemyEliteFlyamanita(((this.xMibi + (xOffset << 10)) | 0), ((this.yMibi + (yOffset << 10)) | 0), this.rngSeed, this.enemyId), ((this.xMibi + (xOffset << 10)) | 0), ((this.yMibi + (yOffset << 10)) | 0), 1160, 1160);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level9.EnemyEliteOrangeSpawn", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.Tilemap.IExtraEnemyToSpawn],
        $kind: "nested class",
        fields: {
            xMibi: 0,
            yMibi: 0,
            orbitersAngleScaled: 0,
            isOrbitingClockwise: false,
            enemyId: null
        },
        alias: ["GetEnemy", "TuxPlanetSpeedrunAnyPercentLibrary$Tilemap$IExtraEnemyToSpawn$GetEnemy"],
        ctors: {
            ctor: function (xMibi, yMibi, orbitersAngleScaled, isOrbitingClockwise, enemyId) {
                this.$initialize();
                this.xMibi = xMibi;
                this.yMibi = yMibi;
                this.orbitersAngleScaled = orbitersAngleScaled;
                this.isOrbitingClockwise = isOrbitingClockwise;
                this.enemyId = enemyId;
            }
        },
        methods: {
            GetEnemy: function (xOffset, yOffset) {
                return new TuxPlanetSpeedrunAnyPercentLibrary.EnemySpawnHelper(TuxPlanetSpeedrunAnyPercentLibrary.EnemyEliteOrange.GetEnemyEliteOrange(((this.xMibi + (xOffset << 10)) | 0), ((this.yMibi + (yOffset << 10)) | 0), false, this.orbitersAngleScaled, this.isOrbitingClockwise, this.enemyId), ((this.xMibi + (xOffset << 10)) | 0), ((this.yMibi + (yOffset << 10)) | 0), 348, 348);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_LevelPlaceholder", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.ILevelConfiguration],
        statics: {
            methods: {
                ConstructUnnormalizedTilemaps: function (mapInfo, random) {
                    var gameMusic = TuxPlanetSpeedrunAnyPercentLibrary.LevelConfigurationHelper.GetRandomGameMusic(random);

                    var enemyIdGenerator = new TuxPlanetSpeedrunAnyPercentLibrary.EnemyIdGenerator();

                    var list = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset)).ctor();

                    var placeholderTilemapWithOffset = new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("PlaceholderLevel"), enemyIdGenerator, null, 384, gameMusic), 0, 0, false);

                    list.add(placeholderTilemapWithOffset);

                    return list;
                }
            }
        },
        fields: {
            normalizedTilemaps: null,
            background: null
        },
        alias: [
            "GetCustomLevelInfo", "TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetCustomLevelInfo",
            "GetBackground", "TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetBackground",
            "GetTilemap", "TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetTilemap",
            "GetCameraState", "TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetCameraState"
        ],
        ctors: {
            ctor: function (mapInfo, random) {
                this.$initialize();
                var unnormalizedTilemaps = TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_LevelPlaceholder.ConstructUnnormalizedTilemaps(mapInfo, random);

                this.normalizedTilemaps = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset)).$ctor1(TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.NormalizeTilemaps(unnormalizedTilemaps));

                this.background = TuxPlanetSpeedrunAnyPercentLibrary.BackgroundUtil.GetRandomBackground(random);
            }
        },
        methods: {
            GetCustomLevelInfo: function () {
                return new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
            },
            GetBackground: function () {
                return this.background;
            },
            GetTilemap: function (tuxX, tuxY, cameraX, cameraY, windowWidth, windowHeight, levelFlags, mapKeyState) {
                return TuxPlanetSpeedrunAnyPercentLibrary.LevelConfigurationHelper.GetTilemap(this.normalizedTilemaps, tuxX, tuxY, cameraX, cameraY, mapKeyState, windowWidth, windowHeight);
            },
            GetCameraState: function (tuxXMibi, tuxYMibi, tuxTeleportStartingLocation, tuxTeleportInProgressElapsedMicros, tilemap, windowWidth, windowHeight, levelFlags) {
                var cameraState = TuxPlanetSpeedrunAnyPercentLibrary.CameraStateProcessing.ComputeCameraState(tuxXMibi, tuxYMibi, tuxTeleportStartingLocation, tuxTeleportInProgressElapsedMicros, tilemap, windowWidth, windowHeight);

                return TuxPlanetSpeedrunAnyPercentLibrary.CameraState.GetCameraState(cameraState.X, windowHeight >> 1);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.NoCutsceneWrappedTilemap", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.ITilemap],
        fields: {
            tilemap: null
        },
        alias: [
            "IsGround", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround",
            "IsKillZone", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsKillZone",
            "IsSpikes", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsSpikes",
            "IsEndOfLevel", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsEndOfLevel",
            "GetCutscene", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetCutscene",
            "GetCheckpoint", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetCheckpoint",
            "GetWidth", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetWidth",
            "GetHeight", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetHeight",
            "GetTuxLocation", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetTuxLocation",
            "GetMapKeyLocation", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetMapKeyLocation",
            "GetEnemies", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetEnemies",
            "PlayMusic", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$PlayMusic",
            "RenderBackgroundTiles", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$RenderBackgroundTiles",
            "RenderForegroundTiles", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$RenderForegroundTiles"
        ],
        ctors: {
            ctor: function (tilemap) {
                this.$initialize();
                this.tilemap = tilemap;
            }
        },
        methods: {
            IsGround: function (x, y) {
                return this.tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(x, y);
            },
            IsKillZone: function (x, y) {
                return this.tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsKillZone(x, y);
            },
            IsSpikes: function (x, y) {
                return this.tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsSpikes(x, y);
            },
            IsEndOfLevel: function (x, y) {
                return this.tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsEndOfLevel(x, y);
            },
            GetCutscene: function (x, y) {
                return null;
            },
            GetCheckpoint: function (x, y) {
                return this.tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetCheckpoint(x, y);
            },
            GetWidth: function () {
                return this.tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetWidth();
            },
            GetHeight: function () {
                return this.tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetHeight();
            },
            GetTuxLocation: function (xOffset, yOffset) {
                return this.tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetTuxLocation(xOffset, yOffset);
            },
            GetMapKeyLocation: function (mapKey, xOffset, yOffset) {
                return this.tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetMapKeyLocation(mapKey, xOffset, yOffset);
            },
            GetEnemies: function (xOffset, yOffset) {
                return this.tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetEnemies(xOffset, yOffset);
            },
            PlayMusic: function () {
                return this.tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$PlayMusic();
            },
            RenderBackgroundTiles: function (displayOutput, cameraX, cameraY, windowWidth, windowHeight) {
                this.tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$RenderBackgroundTiles(displayOutput, cameraX, cameraY, windowWidth, windowHeight);
            },
            RenderForegroundTiles: function (displayOutput, cameraX, cameraY, windowWidth, windowHeight) {
                this.tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$RenderForegroundTiles(displayOutput, cameraX, cameraY, windowWidth, windowHeight);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.PerformanceTestFrameKeyboard", {
        inherits: [DTLibrary.IKeyboard],
        statics: {
            fields: {
                _inputArray: null
            },
            ctors: {
                init: function () {
                    this._inputArray = System.Array.init([
                        "0000000", 
                        "0000010", 
                        "0000010", 
                        "0000010", 
                        "0000010", 
                        "0000010", 
                        "0000000", 
                        "0000000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100010", 
                        "0100010", 
                        "0100010", 
                        "0100010", 
                        "0100010", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100010", 
                        "0100010", 
                        "0100010", 
                        "0100010", 
                        "0100010", 
                        "0100010", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100010", 
                        "0100010", 
                        "0100010", 
                        "0100010", 
                        "0100010", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100010", 
                        "0100010", 
                        "0100010", 
                        "0100010", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100010", 
                        "0100010", 
                        "0100010", 
                        "0100010", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100001", 
                        "0100001", 
                        "0100001", 
                        "0100001", 
                        "0100001", 
                        "0100001", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100001", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100001", 
                        "0100001", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100010", 
                        "0100010", 
                        "0100001", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100001", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100010", 
                        "0100010", 
                        "0100001", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100001", 
                        "0100001", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100001", 
                        "0100001", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100010", 
                        "0100010", 
                        "0100000", 
                        "0100001", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100001", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0100001", 
                        "0100000", 
                        "0100000", 
                        "0100000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000", 
                        "0000000"
                    ], System.String);
                }
            }
        },
        fields: {
            frameCounter: 0
        },
        alias: ["IsPressed", "DTLibrary$IKeyboard$IsPressed"],
        ctors: {
            ctor: function (frameCounter) {
                this.$initialize();
                this.frameCounter = frameCounter;
            }
        },
        methods: {
            IsPressed: function (key) {
                switch (key) {
                    case DTLibrary.Key.LeftArrow: 
                    case DTLibrary.Key.RightArrow: 
                    case DTLibrary.Key.UpArrow: 
                    case DTLibrary.Key.DownArrow: 
                    case DTLibrary.Key.Esc: 
                    case DTLibrary.Key.Z: 
                    case DTLibrary.Key.X: 
                        if (TuxPlanetSpeedrunAnyPercentLibrary.PerformanceTestFrameKeyboard._inputArray.length <= this.frameCounter) {
                            return false;
                        }
                        var str = TuxPlanetSpeedrunAnyPercentLibrary.PerformanceTestFrameKeyboard._inputArray[System.Array.index(this.frameCounter, TuxPlanetSpeedrunAnyPercentLibrary.PerformanceTestFrameKeyboard._inputArray)];
                        var index;
                        if (key === DTLibrary.Key.LeftArrow) {
                            index = 0;
                        } else {
                            if (key === DTLibrary.Key.RightArrow) {
                                index = 1;
                            } else {
                                if (key === DTLibrary.Key.UpArrow) {
                                    index = 2;
                                } else {
                                    if (key === DTLibrary.Key.DownArrow) {
                                        index = 3;
                                    } else {
                                        if (key === DTLibrary.Key.Esc) {
                                            index = 4;
                                        } else {
                                            if (key === DTLibrary.Key.Z) {
                                                index = 5;
                                            } else {
                                                if (key === DTLibrary.Key.X) {
                                                    index = 6;
                                                } else {
                                                    throw new System.Exception();
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        var c = str.charCodeAt(index);
                        return c === 49;
                    default: 
                        return false;
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.WinLevelTilemap", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.ITilemap],
        fields: {
            mapTilemap: null
        },
        alias: [
            "IsGround", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround",
            "IsKillZone", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsKillZone",
            "IsSpikes", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsSpikes",
            "IsEndOfLevel", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsEndOfLevel",
            "GetCutscene", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetCutscene",
            "GetCheckpoint", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetCheckpoint",
            "GetWidth", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetWidth",
            "GetHeight", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetHeight",
            "GetTuxLocation", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetTuxLocation",
            "GetMapKeyLocation", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetMapKeyLocation",
            "GetEnemies", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetEnemies",
            "PlayMusic", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$PlayMusic",
            "RenderBackgroundTiles", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$RenderBackgroundTiles",
            "RenderForegroundTiles", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$RenderForegroundTiles"
        ],
        ctors: {
            ctor: function (mapTilemap) {
                this.$initialize();
                this.mapTilemap = mapTilemap;
            }
        },
        methods: {
            IsGround: function (x, y) {
                return this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(x, y);
            },
            IsKillZone: function (x, y) {
                return this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsKillZone(x, y);
            },
            IsSpikes: function (x, y) {
                return this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsSpikes(x, y);
            },
            IsEndOfLevel: function (x, y) {
                return true;
            },
            GetCutscene: function (x, y) {
                return this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetCutscene(x, y);
            },
            GetCheckpoint: function (x, y) {
                return this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetCheckpoint(x, y);
            },
            GetWidth: function () {
                return this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetWidth();
            },
            GetHeight: function () {
                return this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetHeight();
            },
            GetTuxLocation: function (xOffset, yOffset) {
                return this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetTuxLocation(xOffset, yOffset);
            },
            GetMapKeyLocation: function (mapKey, xOffset, yOffset) {
                return this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetMapKeyLocation(mapKey, xOffset, yOffset);
            },
            GetEnemies: function (xOffset, yOffset) {
                return this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetEnemies(xOffset, yOffset);
            },
            PlayMusic: function () {
                return this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$PlayMusic();
            },
            RenderBackgroundTiles: function (displayOutput, cameraX, cameraY, windowWidth, windowHeight) {
                this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$RenderBackgroundTiles(displayOutput, cameraX, cameraY, windowWidth, windowHeight);
            },
            RenderForegroundTiles: function (displayOutput, cameraX, cameraY, windowWidth, windowHeight) {
                this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$RenderForegroundTiles(displayOutput, cameraX, cameraY, windowWidth, windowHeight);
            }
        }
    });

    Bridge.define("DTLibrary.DTDeterministicRandom", {
        inherits: [DTLibrary.IDTDeterministicRandom],
        fields: {
            x: 0
        },
        alias: [
            "SerializeToString", "DTLibrary$IDTDeterministicRandom$SerializeToString",
            "DeserializeFromString", "DTLibrary$IDTDeterministicRandom$DeserializeFromString",
            "AddSeed", "DTLibrary$IDTRandom$AddSeed",
            "Reset", "DTLibrary$IDTDeterministicRandom$Reset",
            "NextInt", "DTLibrary$IDTRandom$NextInt",
            "NextBool", "DTLibrary$IDTRandom$NextBool"
        ],
        ctors: {
            ctor: function () {
                this.$initialize();
                this.x = 0;
            },
            $ctor1: function (seed) {
                this.$initialize();
                this.x = seed;
            }
        },
        methods: {
            SerializeToString: function () {
                return DTLibrary.StringUtil.ToStringCultureInvariant(this.x);
            },
            DeserializeFromString: function (str) {
                this.x = DTLibrary.StringUtil.ParseAsIntCultureInvariant(str);
            },
            AddSeed: function (i) {
                this.x = ((this.x + i) | 0);
            },
            Reset: function () {
                this.x = 0;
            },
            NextInt: function (i) {
                if (i === 1) {
                    return 0;
                }

                var a = ((Bridge.Int.mul(48271, this.x) + 11) | 0);
                var b = ((Bridge.Int.mul(48271, a) + 11) | 0);

                this.x = b;

                var c = ((a >> 16) << 16) | ((b >> 16) & 65535);

                if (c < 0) {
                    c = ((-c) | 0);
                }

                if (c < 0) {
                    c = 0;
                }

                return c % i;
            },
            NextBool: function () {
                return this.NextInt(2) === 1;
            }
        }
    });

    Bridge.define("DTLibrary.EmptyMusic$1", function (MusicEnum) { return {
        inherits: [DTLibrary.IMusic$1(MusicEnum)],
        alias: [
            "DisposeMusic", "DTLibrary$IMusicCleanup$DisposeMusic",
            "LoadMusic", "DTLibrary$IMusicProcessing$LoadMusic",
            "PlayMusic", "DTLibrary$IMusicOutput$1$" + Bridge.getTypeAlias(MusicEnum) + "$PlayMusic",
            "StopMusic", "DTLibrary$IMusicOutput$1$" + Bridge.getTypeAlias(MusicEnum) + "$StopMusic"
        ],
        methods: {
            DisposeMusic: function () { },
            LoadMusic: function () {
                return true;
            },
            PlayMusic: function (music, volume) { },
            StopMusic: function () { }
        }
    }; });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.GameFont", {
        $kind: "enum",
        statics: {
            fields: {
                DTSimpleFont12Pt: 0,
                DTSimpleFont14Pt: 1,
                DTSimpleFont16Pt: 2,
                DTSimpleFont18Pt: 3,
                DTSimpleFont20Pt: 4,
                DTSimpleFont32Pt: 5
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercent.BridgeMusic", {
        inherits: [DTLibrary.IMusic$1(TuxPlanetSpeedrunAnyPercentLibrary.GameMusic)],
        fields: {
            currentGameMusic: null,
            currentVolume: 0
        },
        alias: [
            "LoadMusic", "DTLibrary$IMusicProcessing$LoadMusic",
            "PlayMusic", "DTLibrary$IMusicOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$PlayMusic",
            "StopMusic", "DTLibrary$IMusicOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$StopMusic",
            "DisposeMusic", "DTLibrary$IMusicCleanup$DisposeMusic"
        ],
        ctors: {
            ctor: function () {
                this.$initialize();
                this.currentGameMusic = null;
                this.currentVolume = 0;

                eval("\r\n\t\t\t\twindow.BridgeMusicJavascript = ((function () {\r\n\t\t\t\t\t'use strict';\r\n\t\t\t\t\t\t\r\n\t\t\t\t\tvar musicDictionary = {};\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar numberOfAudioObjectsLoaded = 0;\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar loadMusic = function (musicNames) {\r\n\t\t\t\t\t\tvar musicNamesArray = musicNames.split(',');\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tvar numberOfAudioObjects = musicNamesArray.length;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tfor (var i = 0; i < musicNamesArray.length; i++) {\r\n\t\t\t\t\t\t\tvar musicName = musicNamesArray[i];\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif (musicDictionary[musicName])\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tvar musicPath = 'Data/Music/' + musicName + '?doNotCache=' + Date.now().toString();\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tvar audio = new Audio(musicPath);\r\n\t\t\t\t\t\t\taudio.addEventListener('canplaythrough', function () {\r\n\t\t\t\t\t\t\t\tnumberOfAudioObjectsLoaded++;\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\taudio.loop = true;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tmusicDictionary[musicName] = audio;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\treturn numberOfAudioObjects === numberOfAudioObjectsLoaded;\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar playMusic = function (musicName, volume) {\r\n\t\t\t\t\t\tvar music = musicDictionary[musicName];\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (volume > 1.0)\r\n\t\t\t\t\t\t\tvolume = 1.0;\r\n\t\t\t\t\t\tif (volume < 0.0)\r\n\t\t\t\t\t\t\tvolume = 0.0;\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tfor (var m in musicDictionary) {\r\n\t\t\t\t\t\t\tvar audio = musicDictionary[m];\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif (audio === music) {\r\n\t\t\t\t\t\t\t\taudio.volume = volume;\r\n\t\t\t\t\t\t\t\tvar audioPromise = audio.play();\r\n\t\t\t\t\t\t\t\tif (audioPromise) {\r\n\t\t\t\t\t\t\t\t\taudioPromise.then(function () {}, function () {});\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\taudio.pause();\r\n\t\t\t\t\t\t\t\taudio.currentTime = 0;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar stopMusic = function () {\r\n\t\t\t\t\t\tfor (var musicName in musicDictionary) {\r\n\t\t\t\t\t\t\tvar audio = musicDictionary[musicName];\r\n\t\t\t\t\t\t\taudio.pause();\r\n\t\t\t\t\t\t\taudio.currentTime = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tloadMusic: loadMusic,\r\n\t\t\t\t\t\tplayMusic: playMusic,\r\n\t\t\t\t\t\tstopMusic: stopMusic\r\n\t\t\t\t\t};\r\n\t\t\t\t})());\r\n\t\t\t");
            }
        },
        methods: {
            LoadMusic: function () {
                var $t;
                var musicNames = "";
                var isFirst = true;
                $t = Bridge.getEnumerator(System.Enum.getValues(TuxPlanetSpeedrunAnyPercentLibrary.GameMusic));
                try {
                    while ($t.moveNext()) {
                        var gameMusic = Bridge.cast($t.Current, TuxPlanetSpeedrunAnyPercentLibrary.GameMusic);
                        if (isFirst) {
                            isFirst = false;
                        } else {
                            musicNames = (musicNames || "") + ",";
                        }
                        musicNames = (musicNames || "") + (TuxPlanetSpeedrunAnyPercentLibrary.GameMusicUtil.GetMusicFilename(gameMusic).DefaultFilename || "");
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }

                if (Bridge.referenceEquals(musicNames, "")) {
                    return true;
                }

                var result = eval("window.BridgeMusicJavascript.loadMusic('" + (musicNames || "") + "')");

                return result;
            },
            PlayMusic: function (music, volume) {
                if (System.Nullable.hasValue(this.currentGameMusic) && System.Nullable.getValue(this.currentGameMusic) === music && this.currentVolume === volume && System.Nullable.getValue(this.currentGameMusic) !== TuxPlanetSpeedrunAnyPercentLibrary.GameMusic.Theme) {
                    return;
                }

                this.currentGameMusic = music;
                this.currentVolume = volume;

                var finalVolume = (TuxPlanetSpeedrunAnyPercentLibrary.GameMusicUtil.GetMusicVolume(music) / 100.0) * (volume / 100.0);
                if (finalVolume > 1.0) {
                    finalVolume = 1.0;
                }
                if (finalVolume < 0.0) {
                    finalVolume = 0.0;
                }

                window.BridgeMusicJavascript.playMusic(TuxPlanetSpeedrunAnyPercentLibrary.GameMusicUtil.GetMusicFilename(music).DefaultFilename, finalVolume);
            },
            StopMusic: function () {
                if (this.currentGameMusic == null) {
                    return;
                }

                this.currentGameMusic = null;

                window.BridgeMusicJavascript.stopMusic();
            },
            DisposeMusic: function () { }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercent.BridgeSoundOutput", {
        inherits: [DTLibrary.ISoundOutput$1(TuxPlanetSpeedrunAnyPercentLibrary.GameSound)],
        fields: {
            desiredSoundVolume: 0,
            currentSoundVolume: 0,
            elapsedMicrosPerFrame: 0
        },
        alias: [
            "LoadSounds", "DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$LoadSounds",
            "SetSoundVolume", "DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$SetSoundVolume",
            "GetSoundVolume", "DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$GetSoundVolume",
            "ProcessFrame", "DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$ProcessFrame",
            "PlaySound", "DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$PlaySound",
            "DisposeSounds", "DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$DisposeSounds"
        ],
        ctors: {
            ctor: function (elapsedMicrosPerFrame) {
                this.$initialize();
                this.desiredSoundVolume = TuxPlanetSpeedrunAnyPercentLibrary.GlobalState.DEFAULT_VOLUME;
                this.currentSoundVolume = this.desiredSoundVolume;
                this.elapsedMicrosPerFrame = elapsedMicrosPerFrame;
                eval("\r\n\t\t\t\twindow.BridgeSoundOutputJavascript = ((function () {\r\n\t\t\t\t\t'use strict';\r\n\t\t\t\t\t\t\r\n\t\t\t\t\tvar soundDictionary = {};\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar numberOfAudioObjectsLoaded = 0;\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar loadSounds = function (soundNames) {\r\n\t\t\t\t\t\tvar soundNamesArray = soundNames.split(',');\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tvar numberOfAudioObjects = soundNamesArray.length * 10;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tfor (var i = 0; i < soundNamesArray.length; i++) {\r\n\t\t\t\t\t\t\tvar soundName = soundNamesArray[i];\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif (soundDictionary[soundName])\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tsoundDictionary[soundName] = [];\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tvar soundPath = 'Data/Sound/' + soundName + '?doNotCache=' + Date.now().toString();\r\n\t\t\t\t\t\t\tfor (var j = 0; j < 10; j++) {\r\n\t\t\t\t\t\t\t\tvar audio = new Audio(soundPath);\r\n\t\t\t\t\t\t\t\taudio.addEventListener('canplaythrough', function () {\r\n\t\t\t\t\t\t\t\t\tnumberOfAudioObjectsLoaded++;\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tsoundDictionary[soundName].push(audio);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\treturn numberOfAudioObjects === numberOfAudioObjectsLoaded;\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar playSound = function (soundName, volume) {\r\n\t\t\t\t\t\tvar sound = soundDictionary[soundName];\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (volume > 1.0)\r\n\t\t\t\t\t\t\tvolume = 1.0;\r\n\t\t\t\t\t\tif (volume < 0.0)\r\n\t\t\t\t\t\t\tvolume = 0.0;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tvar audio = sound[0];\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tfor (var i = 0; i < sound.length; i++) {\r\n\t\t\t\t\t\t\tif (i === sound.length - 1)\r\n\t\t\t\t\t\t\t\tsound[i] = audio;\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tsound[i] = sound[i+1];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\taudio.volume = volume;\r\n\t\t\t\t\t\taudio.play();\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tloadSounds: loadSounds,\r\n\t\t\t\t\t\tplaySound: playSound\r\n\t\t\t\t\t};\r\n\t\t\t\t})());\r\n\t\t\t");
            }
        },
        methods: {
            LoadSounds: function () {
                var $t;
                var soundNames = "";
                var isFirst = true;
                $t = Bridge.getEnumerator(System.Enum.getValues(TuxPlanetSpeedrunAnyPercentLibrary.GameSound));
                try {
                    while ($t.moveNext()) {
                        var gameSound = Bridge.cast($t.Current, TuxPlanetSpeedrunAnyPercentLibrary.GameSound);
                        if (isFirst) {
                            isFirst = false;
                        } else {
                            soundNames = (soundNames || "") + ",";
                        }

                        var soundFilename = TuxPlanetSpeedrunAnyPercentLibrary.GameSoundUtil.GetSoundFilename(gameSound).DefaultFilename;
                        soundNames = (soundNames || "") + (soundFilename || "");
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }

                if (Bridge.referenceEquals(soundNames, "")) {
                    return true;
                }

                var result = eval("window.BridgeSoundOutputJavascript.loadSounds('" + (soundNames || "") + "')");

                return result;
            },
            /**
             * Volume ranges from 0 to 100 (both inclusive)
             *
             * @instance
             * @public
             * @this TuxPlanetSpeedrunAnyPercent.BridgeSoundOutput
             * @memberof TuxPlanetSpeedrunAnyPercent.BridgeSoundOutput
             * @param   {number}    volume
             * @return  {void}
             */
            SetSoundVolume: function (volume) {
                if (volume < 0) {
                    throw new System.Exception();
                }

                if (volume > 100) {
                    throw new System.Exception();
                }

                this.desiredSoundVolume = volume;
            },
            GetSoundVolume: function () {
                return this.desiredSoundVolume;
            },
            ProcessFrame: function () {
                this.currentSoundVolume = DTLibrary.VolumeUtil.GetVolumeSmoothed(this.elapsedMicrosPerFrame, this.currentSoundVolume, this.desiredSoundVolume);
            },
            PlaySound: function (sound) {
                var finalVolume = (TuxPlanetSpeedrunAnyPercentLibrary.GameSoundUtil.GetSoundVolume(sound) / 100.0) * (this.currentSoundVolume / 100.0);
                if (finalVolume > 1.0) {
                    finalVolume = 1.0;
                }
                if (finalVolume < 0.0) {
                    finalVolume = 0.0;
                }

                if (finalVolume > 0.0) {
                    var soundFilename = TuxPlanetSpeedrunAnyPercentLibrary.GameSoundUtil.GetSoundFilename(sound).DefaultFilename;
                    window.BridgeSoundOutputJavascript.playSound(soundFilename, finalVolume);
                }
            },
            DisposeSounds: function () { }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercent.BridgeDisplay", {
        inherits: [DTLibrary.DTDisplay$2(TuxPlanetSpeedrunAnyPercentLibrary.GameImage,TuxPlanetSpeedrunAnyPercentLibrary.GameFont)],
        fields: {
            bridgeDisplayRectangle: null,
            bridgeDisplayImages: null,
            bridgeDisplayFont: null
        },
        alias: [
            "DrawInitialLoadingScreen", "DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawInitialLoadingScreen",
            "DrawRectangle", "DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle",
            "LoadImages", "DTLibrary$IDisplayProcessing$1$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$LoadImages",
            "DrawImageRotatedClockwise$1", "DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$1",
            "DrawImageRotatedClockwise", "DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2",
            "GetWidth", "DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$GetWidth",
            "GetWidth", "DTLibrary$IDisplayProcessing$1$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$GetWidth",
            "GetHeight", "DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$GetHeight",
            "GetHeight", "DTLibrary$IDisplayProcessing$1$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$GetHeight",
            "DrawText", "DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText",
            "TryDrawText", "DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TryDrawText",
            "DisposeImages", "DTLibrary$IDisplayCleanup$DisposeImages"
        ],
        ctors: {
            ctor: function (windowHeight) {
                this.$initialize();
                DTLibrary.DTDisplay$2(TuxPlanetSpeedrunAnyPercentLibrary.GameImage,TuxPlanetSpeedrunAnyPercentLibrary.GameFont).ctor.call(this);
                this.bridgeDisplayRectangle = new TuxPlanetSpeedrunAnyPercent.BridgeDisplayRectangle(windowHeight);
                this.bridgeDisplayImages = new TuxPlanetSpeedrunAnyPercent.BridgeDisplayImages(windowHeight);
                this.bridgeDisplayFont = new TuxPlanetSpeedrunAnyPercent.BridgeDisplayFont(windowHeight);
            }
        },
        methods: {
            DrawInitialLoadingScreen: function () { },
            DrawRectangle: function (x, y, width, height, color, fill) {
                this.bridgeDisplayRectangle.DrawRectangle(x, y, width, height, color, fill);
            },
            LoadImages: function () {
                var finishedLoadingImages = this.bridgeDisplayImages.LoadImages();

                if (!finishedLoadingImages) {
                    return false;
                }

                return this.bridgeDisplayFont.LoadFonts();
            },
            DrawImageRotatedClockwise$1: function (image, x, y, degreesScaled, scalingFactorScaled) {
                this.bridgeDisplayImages.DrawImageRotatedClockwise(image, x, y, degreesScaled, scalingFactorScaled);
            },
            DrawImageRotatedClockwise: function (image, imageX, imageY, imageWidth, imageHeight, x, y, degreesScaled, scalingFactorScaled) {
                this.bridgeDisplayImages.DrawImageRotatedClockwise$1(image, imageX, imageY, imageWidth, imageHeight, x, y, degreesScaled, scalingFactorScaled);
            },
            GetWidth: function (image) {
                return this.bridgeDisplayImages.GetWidth(image);
            },
            GetHeight: function (image) {
                return this.bridgeDisplayImages.GetHeight(image);
            },
            DrawText: function (x, y, text, font, color) {
                this.bridgeDisplayFont.DrawText(x, y, text, font, color);
            },
            TryDrawText: function (x, y, text, font, color) {
                this.bridgeDisplayFont.TryDrawText(x, y, text, font, color);
            },
            DisposeImages: function () { }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.ClearDataConfirmationFrame", {
        inherits: [DTLibrary.IFrame$4(TuxPlanetSpeedrunAnyPercentLibrary.GameImage,TuxPlanetSpeedrunAnyPercentLibrary.GameFont,TuxPlanetSpeedrunAnyPercentLibrary.GameSound,TuxPlanetSpeedrunAnyPercentLibrary.GameMusic)],
        statics: {
            fields: {
                PANEL_WIDTH: 0,
                PANEL_HEIGHT: 0
            },
            ctors: {
                init: function () {
                    this.PANEL_WIDTH = 480;
                    this.PANEL_HEIGHT = 150;
                }
            }
        },
        fields: {
            globalState: null,
            sessionState: null,
            underlyingFrame: null,
            confirmButton: null,
            cancelButton: null,
            panelX: 0,
            panelY: 0
        },
        alias: [
            "ProcessExtraTime", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessExtraTime",
            "GetClickUrl", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetClickUrl",
            "GetCompletedAchievements", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetCompletedAchievements",
            "GetScore", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetScore",
            "GetNextFrame", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetNextFrame",
            "ProcessMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessMusic",
            "Render", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$Render",
            "RenderMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$RenderMusic"
        ],
        ctors: {
            ctor: function (globalState, sessionState, underlyingFrame) {
                this.$initialize();
                this.globalState = globalState;
                this.sessionState = sessionState;
                this.underlyingFrame = underlyingFrame;

                this.panelX = (Bridge.Int.div((((globalState.WindowWidth - TuxPlanetSpeedrunAnyPercentLibrary.ClearDataConfirmationFrame.PANEL_WIDTH) | 0)), 2)) | 0;
                this.panelY = (Bridge.Int.div((((globalState.WindowHeight - TuxPlanetSpeedrunAnyPercentLibrary.ClearDataConfirmationFrame.PANEL_HEIGHT) | 0)), 2)) | 0;

                var buttonWidth = 150;
                var buttonHeight = 40;

                this.confirmButton = new TuxPlanetSpeedrunAnyPercentLibrary.Button(((this.panelX + 80) | 0), ((this.panelY + 20) | 0), buttonWidth, buttonHeight, TuxPlanetSpeedrunAnyPercentLibrary.Button.GetStandardSecondaryBackgroundColor(), TuxPlanetSpeedrunAnyPercentLibrary.Button.GetStandardHoverColor(), TuxPlanetSpeedrunAnyPercentLibrary.Button.GetStandardClickColor(), "Yes", 47, 8, TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont20Pt);

                this.cancelButton = new TuxPlanetSpeedrunAnyPercentLibrary.Button(((this.panelX + 250) | 0), ((this.panelY + 20) | 0), buttonWidth, buttonHeight, TuxPlanetSpeedrunAnyPercentLibrary.Button.GetStandardSecondaryBackgroundColor(), TuxPlanetSpeedrunAnyPercentLibrary.Button.GetStandardHoverColor(), TuxPlanetSpeedrunAnyPercentLibrary.Button.GetStandardClickColor(), "No", 55, 8, TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont20Pt);
            }
        },
        methods: {
            ProcessExtraTime: function (milliseconds) { },
            GetClickUrl: function () {
                return null;
            },
            GetCompletedAchievements: function () {
                return new (System.Collections.Generic.HashSet$1(System.String)).ctor();
            },
            GetScore: function () {
                return null;
            },
            GetNextFrame: function (keyboardInput, mouseInput, previousKeyboardInput, previousMouseInput, displayProcessing, soundOutput, musicProcessing) {
                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Esc) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Esc)) {
                    soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$PlaySound(TuxPlanetSpeedrunAnyPercentLibrary.GameSound.Click);
                    return new TuxPlanetSpeedrunAnyPercentLibrary.TitleScreenFrame(this.globalState, this.sessionState);
                }

                var isConfirmClicked = this.confirmButton.ProcessFrame(mouseInput, previousMouseInput);

                var isCancelClicked = this.cancelButton.ProcessFrame(mouseInput, previousMouseInput);

                if (isConfirmClicked) {
                    this.sessionState.ClearData(this.globalState.WindowWidth, this.globalState.WindowHeight);
                    this.globalState.SaveData(this.sessionState, soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$GetSoundVolume());
                    soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$PlaySound(TuxPlanetSpeedrunAnyPercentLibrary.GameSound.Click);
                    return new TuxPlanetSpeedrunAnyPercentLibrary.TitleScreenFrame(this.globalState, this.sessionState);
                }

                if (isCancelClicked) {
                    soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$PlaySound(TuxPlanetSpeedrunAnyPercentLibrary.GameSound.Click);
                    return new TuxPlanetSpeedrunAnyPercentLibrary.TitleScreenFrame(this.globalState, this.sessionState);
                }

                return this;
            },
            ProcessMusic: function () {
                this.underlyingFrame.DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessMusic();
            },
            Render: function (displayOutput) {
                this.underlyingFrame.DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$Render(displayOutput);

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle(0, 0, this.globalState.WindowWidth, this.globalState.WindowHeight, new DTLibrary.DTColor.$ctor1(0, 0, 0, 64), true);

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle(this.panelX, this.panelY, 479, 149, DTLibrary.DTColor.White(), true);

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle(this.panelX, this.panelY, TuxPlanetSpeedrunAnyPercentLibrary.ClearDataConfirmationFrame.PANEL_WIDTH, TuxPlanetSpeedrunAnyPercentLibrary.ClearDataConfirmationFrame.PANEL_HEIGHT, DTLibrary.DTColor.Black(), false);

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText(((this.panelX + 27) | 0), ((this.panelY + 132) | 0), "Are you sure you want to reset\nyour progress?", TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont20Pt, DTLibrary.DTColor.Black());

                this.confirmButton.Render(displayOutput);
                this.cancelButton.Render(displayOutput);
            },
            RenderMusic: function (musicOutput) {
                this.underlyingFrame.DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$RenderMusic(musicOutput);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.CreditsFrame", {
        inherits: [DTLibrary.IFrame$4(TuxPlanetSpeedrunAnyPercentLibrary.GameImage,TuxPlanetSpeedrunAnyPercentLibrary.GameFont,TuxPlanetSpeedrunAnyPercentLibrary.GameSound,TuxPlanetSpeedrunAnyPercentLibrary.GameMusic)],
        fields: {
            globalState: null,
            sessionState: null,
            tabButtons: null,
            selectedTab: 0,
            hoverTab: null,
            clickTab: null,
            backButton: null,
            isHoverOverGitHubUrl: false
        },
        alias: [
            "GetNextFrame", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetNextFrame",
            "ProcessExtraTime", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessExtraTime",
            "GetClickUrl", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetClickUrl",
            "GetCompletedAchievements", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetCompletedAchievements",
            "GetScore", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetScore",
            "ProcessMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessMusic",
            "Render", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$Render",
            "RenderMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$RenderMusic"
        ],
        ctors: {
            ctor: function (globalState, sessionState) {
                this.$initialize();
                this.globalState = globalState;
                this.sessionState = sessionState;

                this.selectedTab = TuxPlanetSpeedrunAnyPercentLibrary.CreditsFrame.Tab.DesignAndCoding;
                this.hoverTab = null;
                this.clickTab = null;

                this.tabButtons = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.CreditsFrame.TabButton)).ctor();
                this.tabButtons.add(new TuxPlanetSpeedrunAnyPercentLibrary.CreditsFrame.TabButton(20, 569, 234, 40, TuxPlanetSpeedrunAnyPercentLibrary.CreditsFrame.Tab.DesignAndCoding, "Design and coding"));
                this.tabButtons.add(new TuxPlanetSpeedrunAnyPercentLibrary.CreditsFrame.TabButton(254, 569, 103, 40, TuxPlanetSpeedrunAnyPercentLibrary.CreditsFrame.Tab.Images, "Images"));
                this.tabButtons.add(new TuxPlanetSpeedrunAnyPercentLibrary.CreditsFrame.TabButton(357, 569, 82, 40, TuxPlanetSpeedrunAnyPercentLibrary.CreditsFrame.Tab.Font, "Font"));
                this.tabButtons.add(new TuxPlanetSpeedrunAnyPercentLibrary.CreditsFrame.TabButton(439, 569, 96, 40, TuxPlanetSpeedrunAnyPercentLibrary.CreditsFrame.Tab.Sound, "Sound"));
                this.tabButtons.add(new TuxPlanetSpeedrunAnyPercentLibrary.CreditsFrame.TabButton(535, 569, 90, 40, TuxPlanetSpeedrunAnyPercentLibrary.CreditsFrame.Tab.Music, "Music"));

                this.backButton = new TuxPlanetSpeedrunAnyPercentLibrary.Button(780, 20, 200, 80, TuxPlanetSpeedrunAnyPercentLibrary.Button.GetStandardPrimaryBackgroundColor(), TuxPlanetSpeedrunAnyPercentLibrary.Button.GetStandardHoverColor(), TuxPlanetSpeedrunAnyPercentLibrary.Button.GetStandardClickColor(), "Back", 67, 28, TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont20Pt);

                this.isHoverOverGitHubUrl = false;
            }
        },
        methods: {
            GetNextFrame: function (keyboardInput, mouseInput, previousKeyboardInput, previousMouseInput, displayProcessing, soundOutput, musicProcessing) {
                var $t;
                var mouseX = mouseInput.DTLibrary$IMouse$GetX();
                var mouseY = mouseInput.DTLibrary$IMouse$GetY();

                this.isHoverOverGitHubUrl = false;

                this.hoverTab = null;
                $t = Bridge.getEnumerator(this.tabButtons);
                try {
                    while ($t.moveNext()) {
                        var tabButton = $t.Current;
                        if (tabButton.X <= mouseX && mouseX <= ((tabButton.X + tabButton.Width) | 0) && tabButton.Y <= mouseY && mouseY <= ((tabButton.Y + tabButton.Height) | 0)) {
                            this.hoverTab = tabButton.Tab;
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }

                if (mouseInput.DTLibrary$IMouse$IsLeftMouseButtonPressed() && !previousMouseInput.DTLibrary$IMouse$IsLeftMouseButtonPressed()) {
                    if (this.hoverTab != null) {
                        this.clickTab = this.hoverTab;
                    }
                }

                if (this.clickTab != null && !mouseInput.DTLibrary$IMouse$IsLeftMouseButtonPressed() && previousMouseInput.DTLibrary$IMouse$IsLeftMouseButtonPressed()) {
                    if (System.Nullable.hasValue(this.hoverTab) && System.Nullable.getValue(this.hoverTab) === System.Nullable.getValue(this.clickTab)) {
                        soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$PlaySound(TuxPlanetSpeedrunAnyPercentLibrary.GameSound.Click);
                        this.selectedTab = System.Nullable.getValue(this.clickTab);
                    }

                    this.clickTab = null;
                }

                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Esc) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Esc)) {
                    soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$PlaySound(TuxPlanetSpeedrunAnyPercentLibrary.GameSound.Click);
                    return new TuxPlanetSpeedrunAnyPercentLibrary.TitleScreenFrame(this.globalState, this.sessionState);
                }

                var clickedBackButton = this.backButton.ProcessFrame(mouseInput, previousMouseInput);
                if (clickedBackButton) {
                    soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$PlaySound(TuxPlanetSpeedrunAnyPercentLibrary.GameSound.Click);
                    return new TuxPlanetSpeedrunAnyPercentLibrary.TitleScreenFrame(this.globalState, this.sessionState);
                }

                if (this.selectedTab === TuxPlanetSpeedrunAnyPercentLibrary.CreditsFrame.Tab.DesignAndCoding) {
                    this.isHoverOverGitHubUrl = TuxPlanetSpeedrunAnyPercentLibrary.Credits_DesignAndCoding.IsHoverOverGitHubUrl(new DTLibrary.TranslatedMouse(mouseInput, -20, -120), this.globalState.IsWebBrowserVersion, 960, 450);
                }

                return this;
            },
            ProcessExtraTime: function (milliseconds) { },
            GetClickUrl: function () {
                if (this.isHoverOverGitHubUrl) {
                    return "https://github.com/dtsudo";
                }

                return null;
            },
            GetCompletedAchievements: function () {
                return null;
            },
            GetScore: function () {
                return null;
            },
            ProcessMusic: function () {
                this.globalState.ProcessMusic();
            },
            Render: function (displayOutput) {
                var $t;
                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle(0, 0, this.globalState.WindowWidth, this.globalState.WindowHeight, new DTLibrary.DTColor.ctor(223, 220, 217), true);

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText(422, 675, "Credits", TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont32Pt, DTLibrary.DTColor.Black());

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle(20, 120, 959, 449, DTLibrary.DTColor.White(), true);

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle(20, 120, 960, 450, DTLibrary.DTColor.Black(), false);

                $t = Bridge.getEnumerator(this.tabButtons);
                try {
                    while ($t.moveNext()) {
                        var tabButton = $t.Current;
                        var backgroundColor;

                        if (tabButton.Tab === this.selectedTab) {
                            backgroundColor = DTLibrary.DTColor.White();
                        } else {
                            if (System.Nullable.hasValue(this.clickTab) && System.Nullable.getValue(this.clickTab) === tabButton.Tab) {
                                backgroundColor = TuxPlanetSpeedrunAnyPercentLibrary.Button.GetStandardClickColor();
                            } else {
                                if (System.Nullable.hasValue(this.hoverTab) && System.Nullable.getValue(this.hoverTab) === tabButton.Tab) {
                                    backgroundColor = TuxPlanetSpeedrunAnyPercentLibrary.Button.GetStandardHoverColor();
                                } else {
                                    backgroundColor = TuxPlanetSpeedrunAnyPercentLibrary.Button.GetStandardSecondaryBackgroundColor();
                                }
                            }
                        }

                        displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle(tabButton.X, tabButton.Y, ((tabButton.Width - 1) | 0), ((tabButton.Height - 1) | 0), backgroundColor, true);

                        displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle(tabButton.X, tabButton.Y, tabButton.Width, tabButton.Height, DTLibrary.DTColor.Black(), false);

                        if (this.selectedTab === tabButton.Tab) {
                            displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle(((tabButton.X + 1) | 0), ((tabButton.Y - 1) | 0), ((tabButton.Width - 2) | 0), 3, DTLibrary.DTColor.White(), true);
                        }

                        displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText(((tabButton.X + 10) | 0), ((((tabButton.Y + tabButton.Height) | 0) - 10) | 0), tabButton.TabName, TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont18Pt, DTLibrary.DTColor.Black());
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }

                var translatedDisplay = new (DTLibrary.TranslatedDisplayOutput$2(TuxPlanetSpeedrunAnyPercentLibrary.GameImage,TuxPlanetSpeedrunAnyPercentLibrary.GameFont))(displayOutput, 20, 120);

                if (this.selectedTab === TuxPlanetSpeedrunAnyPercentLibrary.CreditsFrame.Tab.DesignAndCoding) {
                    TuxPlanetSpeedrunAnyPercentLibrary.Credits_DesignAndCoding.Render(translatedDisplay, this.isHoverOverGitHubUrl, this.globalState.IsWebBrowserVersion, 960, 450);
                }
                if (this.selectedTab === TuxPlanetSpeedrunAnyPercentLibrary.CreditsFrame.Tab.Images) {
                    TuxPlanetSpeedrunAnyPercentLibrary.Credits_Images.Render(translatedDisplay, 960, 450);
                }
                if (this.selectedTab === TuxPlanetSpeedrunAnyPercentLibrary.CreditsFrame.Tab.Font) {
                    TuxPlanetSpeedrunAnyPercentLibrary.Credits_Font.Render(translatedDisplay, 960, 450);
                }
                if (this.selectedTab === TuxPlanetSpeedrunAnyPercentLibrary.CreditsFrame.Tab.Sound) {
                    TuxPlanetSpeedrunAnyPercentLibrary.Credits_Sound.Render(translatedDisplay, 960, 450);
                }
                if (this.selectedTab === TuxPlanetSpeedrunAnyPercentLibrary.CreditsFrame.Tab.Music) {
                    TuxPlanetSpeedrunAnyPercentLibrary.Credits_Music.Render(translatedDisplay, 960, 450);
                }

                this.backButton.Render(displayOutput);
            },
            RenderMusic: function (musicOutput) {
                this.globalState.RenderMusic(musicOutput);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.GameFrame", {
        inherits: [DTLibrary.IFrame$4(TuxPlanetSpeedrunAnyPercentLibrary.GameImage,TuxPlanetSpeedrunAnyPercentLibrary.GameFont,TuxPlanetSpeedrunAnyPercentLibrary.GameSound,TuxPlanetSpeedrunAnyPercentLibrary.GameMusic)],
        statics: {
            methods: {
                GetGameFrame: function (globalState, sessionState, displayProcessing, soundOutput, musicProcessing) {
                    var gameFrame = new TuxPlanetSpeedrunAnyPercentLibrary.GameFrame(globalState, sessionState);
                    gameFrame.GetNextFrame(new DTLibrary.EmptyKeyboard(), new DTLibrary.EmptyMouse(), new DTLibrary.EmptyKeyboard(), new DTLibrary.EmptyMouse(), displayProcessing, soundOutput, musicProcessing);

                    return gameFrame;
                }
            }
        },
        fields: {
            globalState: null,
            sessionState: null,
            gameLogic: null,
            hasStartedLevelTransition: false,
            savedGameLogicState: null,
            extraElapsedMicros: 0,
            numberOfSkippedFrames: 0,
            moveHistory: null,
            lastMoveOfHistory: 0,
            useSavedMoves: false
        },
        alias: [
            "GetNextFrame", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetNextFrame",
            "ProcessExtraTime", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessExtraTime",
            "GetClickUrl", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetClickUrl",
            "GetCompletedAchievements", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetCompletedAchievements",
            "GetScore", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetScore",
            "ProcessMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessMusic",
            "Render", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$Render",
            "RenderMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$RenderMusic"
        ],
        ctors: {
            ctor: function (globalState, sessionState) {
                this.$initialize();
                this.globalState = globalState;
                this.sessionState = sessionState;
                this.gameLogic = sessionState.GameLogic;
                this.hasStartedLevelTransition = false;
                this.savedGameLogicState = null;
                this.extraElapsedMicros = 0;
                this.numberOfSkippedFrames = 0;
                this.moveHistory = new (System.Collections.Generic.Dictionary$2(System.Int32,TuxPlanetSpeedrunAnyPercentLibrary.Move))();
                this.lastMoveOfHistory = 0;
                this.useSavedMoves = false;
            }
        },
        methods: {
            GetNextFrame: function (keyboardInput, mouseInput, previousKeyboardInput, previousMouseInput, displayProcessing, soundOutput, musicProcessing) {
                this.sessionState.AddElapsedMillis(((Bridge.Int.div(this.globalState.ElapsedMicrosPerFrame, 1000)) | 0));

                this.extraElapsedMicros = (this.extraElapsedMicros + (this.globalState.ElapsedMicrosPerFrame % 1000)) | 0;
                if (this.extraElapsedMicros >= 1000) {
                    this.extraElapsedMicros = (this.extraElapsedMicros - 1000) | 0;
                    this.sessionState.AddElapsedMillis(1);
                }

                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Esc) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Esc) && !this.gameLogic.Tux.IsDead) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.PauseMenuFrame(this.globalState, this.sessionState, this, true, true, this.gameLogic.CanUseSaveStates);
                }

                var move = new TuxPlanetSpeedrunAnyPercentLibrary.Move(keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Z), keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.X), keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.LeftArrow), keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.RightArrow), keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.UpArrow), keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.DownArrow), keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Esc));

                if (move.Jumped) {
                    this.sessionState.AddRandomSeed(7);
                }
                if (move.ArrowLeft) {
                    this.sessionState.AddRandomSeed(11);
                }
                if (move.ArrowRight) {
                    this.sessionState.AddRandomSeed(17);
                }

                var shouldExecuteFrame;
                var shouldEndLevel;

                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Shift) && this.gameLogic.CanUseTimeSlowdown) {
                    this.numberOfSkippedFrames = (this.numberOfSkippedFrames + 1) | 0;
                    if (this.numberOfSkippedFrames === 5) {
                        this.numberOfSkippedFrames = 0;
                        shouldExecuteFrame = true;
                    } else {
                        shouldExecuteFrame = false;
                    }
                } else {
                    shouldExecuteFrame = true;
                }

                if (shouldExecuteFrame) {
                    var moveToUse;

                    var didUserPressKey = move.Jumped || move.Teleported || move.ArrowLeft || move.ArrowRight || move.ArrowUp || move.ArrowDown || move.Respawn;

                    if (this.useSavedMoves && !didUserPressKey && this.sessionState.ShouldReplayInputAfterLoadingSaveState && this.lastMoveOfHistory >= this.gameLogic.FrameCounter && this.moveHistory.containsKey(this.gameLogic.FrameCounter)) {
                        moveToUse = this.moveHistory.get(this.gameLogic.FrameCounter);
                    } else {
                        this.moveHistory.set(this.gameLogic.FrameCounter, move);
                        this.lastMoveOfHistory = this.gameLogic.FrameCounter;
                        moveToUse = move;
                        this.useSavedMoves = false;
                    }

                    var result = TuxPlanetSpeedrunAnyPercentLibrary.GameLogicStateProcessing.ProcessFrame(this.gameLogic, moveToUse, this.globalState.DebugMode, this.globalState.Debug_TuxInvulnerable, keyboardInput, previousKeyboardInput, displayProcessing, soundOutput, this.globalState.ElapsedMicrosPerFrame);

                    this.gameLogic = result.NewGameLogicState;

                    if (result.PlayMusic != null) {
                        this.globalState.MusicPlayer.SetMusic(System.Nullable.getValue(result.PlayMusic), 100);
                    }

                    if (result.ShouldStopMusic) {
                        this.globalState.MusicPlayer.StopMusic();
                    }

                    shouldEndLevel = result.EndLevel;
                } else {
                    shouldEndLevel = false;
                }

                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.S) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.S) && this.gameLogic.CanUseSaveStates && !this.gameLogic.Tux.IsDead) {
                    this.savedGameLogicState = this.gameLogic;
                }

                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.A) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.A) && this.gameLogic.CanUseSaveStates) {
                    if (this.savedGameLogicState != null) {
                        this.gameLogic = this.savedGameLogicState;
                        this.useSavedMoves = true;
                    }
                }

                if (this.globalState.DebugMode) {
                    if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.H) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.H)) {
                        this.globalState.Debug_ShowHitBoxes = !this.globalState.Debug_ShowHitBoxes;
                    }

                    if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.I) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.I)) {
                        this.globalState.Debug_TuxInvulnerable = !this.globalState.Debug_TuxInvulnerable;
                    }
                }

                if (!this.hasStartedLevelTransition) {
                    this.sessionState.SetGameLogic(this.gameLogic);
                }

                if (shouldEndLevel && !this.hasStartedLevelTransition) {
                    this.hasStartedLevelTransition = true;

                    var isLastLevel = TuxPlanetSpeedrunAnyPercentLibrary.LevelUtil.IsLastLevel(System.Nullable.getValue(this.sessionState.CurrentLevel));

                    this.sessionState.CompleteLevel(System.Nullable.getValue(this.sessionState.CurrentLevel), this.gameLogic.CanUseSaveStates, this.gameLogic.CanUseTimeSlowdown, this.gameLogic.CanUseTeleport);

                    this.globalState.SaveData(this.sessionState, soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$GetSoundVolume());

                    if (!isLastLevel) {
                        var newFrame = new TuxPlanetSpeedrunAnyPercentLibrary.OverworldFrame(this.globalState, this.sessionState);

                        return new TuxPlanetSpeedrunAnyPercentLibrary.LevelTransitionFrame(this.globalState, this, newFrame);
                    }

                    return new TuxPlanetSpeedrunAnyPercentLibrary.LevelTransitionFrame(this.globalState, this, new TuxPlanetSpeedrunAnyPercentLibrary.VictoryScreenFrame(this.globalState, this.sessionState));
                }

                return this;
            },
            ProcessExtraTime: function (milliseconds) { },
            GetClickUrl: function () {
                return null;
            },
            GetCompletedAchievements: function () {
                return null;
            },
            GetScore: function () {
                return null;
            },
            ProcessMusic: function () {
                this.globalState.ProcessMusic();
            },
            Render: function (displayOutput) {
                TuxPlanetSpeedrunAnyPercentLibrary.GameLogicStateProcessing.Render(this.gameLogic, displayOutput, this.sessionState.ElapsedMillis, this.globalState.Debug_ShowHitBoxes);
            },
            RenderMusic: function (musicOutput) {
                this.globalState.RenderMusic(musicOutput);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.InitialLoadingScreenFrame", {
        inherits: [DTLibrary.IFrame$4(TuxPlanetSpeedrunAnyPercentLibrary.GameImage,TuxPlanetSpeedrunAnyPercentLibrary.GameFont,TuxPlanetSpeedrunAnyPercentLibrary.GameSound,TuxPlanetSpeedrunAnyPercentLibrary.GameMusic)],
        fields: {
            globalState: null,
            isPerformanceTest: false
        },
        alias: [
            "ProcessExtraTime", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessExtraTime",
            "GetClickUrl", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetClickUrl",
            "GetCompletedAchievements", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetCompletedAchievements",
            "GetScore", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetScore",
            "GetNextFrame", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetNextFrame",
            "ProcessMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessMusic",
            "Render", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$Render",
            "RenderMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$RenderMusic"
        ],
        ctors: {
            ctor: function (globalState, isPerformanceTest) {
                this.$initialize();
                this.globalState = globalState;
                this.isPerformanceTest = isPerformanceTest;
            }
        },
        methods: {
            ProcessExtraTime: function (milliseconds) { },
            GetClickUrl: function () {
                return null;
            },
            GetCompletedAchievements: function () {
                return null;
            },
            GetScore: function () {
                return null;
            },
            GetNextFrame: function (keyboardInput, mouseInput, previousKeyboardInput, previousMouseInput, displayProcessing, soundOutput, musicProcessing) {
                var returnValue = this.GetNextFrameHelper(displayProcessing, soundOutput, musicProcessing);

                if (returnValue != null) {
                    return returnValue;
                }

                returnValue = this.GetNextFrameHelper(displayProcessing, soundOutput, musicProcessing);

                if (returnValue != null) {
                    return returnValue;
                }

                return this;
            },
            GetNextFrameHelper: function (displayProcessing, soundOutput, musicProcessing) {
                var isDoneLoadingImages = displayProcessing.DTLibrary$IDisplayProcessing$1$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$LoadImages();

                if (!isDoneLoadingImages) {
                    return null;
                }

                var isDoneLoadingSounds = soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$LoadSounds();

                if (!isDoneLoadingSounds) {
                    return null;
                }

                var isDoneLoadingMusic = musicProcessing.DTLibrary$IMusicProcessing$LoadMusic();

                if (!isDoneLoadingMusic) {
                    return null;
                }

                var sessionState = new TuxPlanetSpeedrunAnyPercentLibrary.SessionState(this.globalState.WindowWidth, this.globalState.WindowHeight);

                this.globalState.LoadSessionState(sessionState);

                var soundVolume = this.globalState.LoadSoundVolume();
                if (System.Nullable.hasValue(soundVolume)) {
                    soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$SetSoundVolume(System.Nullable.getValue(soundVolume));
                }

                this.globalState.LoadMusicVolume();

                if (this.isPerformanceTest) {
                    return TuxPlanetSpeedrunAnyPercentLibrary.PerformanceTestFrame.GetPerformanceTestFrame(this.globalState, displayProcessing, soundOutput, musicProcessing);
                } else {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.TitleScreenFrame(this.globalState, sessionState);
                }
            },
            ProcessMusic: function () { },
            Render: function (displayOutput) {
                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawInitialLoadingScreen();
            },
            RenderMusic: function (musicOutput) { }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.InstructionsFrame", {
        inherits: [DTLibrary.IFrame$4(TuxPlanetSpeedrunAnyPercentLibrary.GameImage,TuxPlanetSpeedrunAnyPercentLibrary.GameFont,TuxPlanetSpeedrunAnyPercentLibrary.GameSound,TuxPlanetSpeedrunAnyPercentLibrary.GameMusic)],
        fields: {
            globalState: null,
            sessionState: null,
            hasStartedGame: false
        },
        alias: [
            "ProcessExtraTime", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessExtraTime",
            "GetClickUrl", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetClickUrl",
            "GetCompletedAchievements", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetCompletedAchievements",
            "GetScore", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetScore",
            "GetNextFrame", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetNextFrame",
            "ProcessMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessMusic",
            "Render", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$Render",
            "RenderMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$RenderMusic"
        ],
        ctors: {
            ctor: function (globalState, sessionState) {
                this.$initialize();
                this.globalState = globalState;
                this.sessionState = sessionState;

                this.hasStartedGame = false;
            }
        },
        methods: {
            ProcessExtraTime: function (milliseconds) { },
            GetClickUrl: function () {
                return null;
            },
            GetCompletedAchievements: function () {
                return null;
            },
            GetScore: function () {
                return null;
            },
            GetNextFrame: function (keyboardInput, mouseInput, previousKeyboardInput, previousMouseInput, displayProcessing, soundOutput, musicProcessing) {
                if ((keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Enter) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Enter) || keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Space) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Space) || keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Z) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Z)) && !this.hasStartedGame) {
                    this.hasStartedGame = true;

                    soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$PlaySound(TuxPlanetSpeedrunAnyPercentLibrary.GameSound.Click);

                    this.globalState.SaveData(this.sessionState, soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$GetSoundVolume());

                    return new TuxPlanetSpeedrunAnyPercentLibrary.OverworldFrame(this.globalState, this.sessionState);
                }

                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Esc) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Esc)) {
                    soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$PlaySound(TuxPlanetSpeedrunAnyPercentLibrary.GameSound.Click);
                    return new TuxPlanetSpeedrunAnyPercentLibrary.PauseMenuFrame(this.globalState, this.sessionState, this, false, false, false);
                }

                return this;
            },
            ProcessMusic: function () {
                this.globalState.ProcessMusic();
            },
            Render: function (displayOutput) {
                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle(0, 0, this.globalState.WindowWidth, this.globalState.WindowHeight, new DTLibrary.DTColor.ctor(223, 220, 217), true);

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText(((((Bridge.Int.div(this.globalState.WindowWidth, 2)) | 0) - 130) | 0), 650, "Instructions", TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont32Pt, DTLibrary.DTColor.Black());

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText(((((Bridge.Int.div(this.globalState.WindowWidth, 2)) | 0) - 442) | 0), 500, "You are an elite speedrunner. Today, you're speedrunning the \nplatforming game Tux Planet. \n\nUnfortunately, the devs are complete morons and the level design \nis terrible. Good luck! \n\nControls: \n    Movement: Arrow keys \n    Jump: Z", TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont20Pt, DTLibrary.DTColor.Black());

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText(((((Bridge.Int.div(this.globalState.WindowWidth, 2)) | 0) - 129) | 0), 160, "Start (press enter)", TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont20Pt, DTLibrary.DTColor.Black());
            },
            RenderMusic: function (musicOutput) {
                this.globalState.RenderMusic(musicOutput);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.LevelTransitionFrame", {
        inherits: [DTLibrary.IFrame$4(TuxPlanetSpeedrunAnyPercentLibrary.GameImage,TuxPlanetSpeedrunAnyPercentLibrary.GameFont,TuxPlanetSpeedrunAnyPercentLibrary.GameSound,TuxPlanetSpeedrunAnyPercentLibrary.GameMusic)],
        statics: {
            fields: {
                DURATION_OF_FADE_OUT: 0,
                DURATION_OF_FADE_IN: 0
            },
            ctors: {
                init: function () {
                    this.DURATION_OF_FADE_OUT = 500000;
                    this.DURATION_OF_FADE_IN = 500000;
                }
            }
        },
        fields: {
            globalState: null,
            previousFrame: null,
            newFrame: null,
            elapsedMicros: 0,
            isFadingIn: false,
            hasAdvancedPreviousFrameAtLeastOnce: false
        },
        alias: [
            "ProcessExtraTime", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessExtraTime",
            "GetClickUrl", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetClickUrl",
            "GetCompletedAchievements", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetCompletedAchievements",
            "GetScore", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetScore",
            "GetNextFrame", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetNextFrame",
            "ProcessMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessMusic",
            "Render", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$Render",
            "RenderMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$RenderMusic"
        ],
        ctors: {
            ctor: function (globalState, previousFrame, newFrame) {
                this.$initialize();
                this.globalState = globalState;
                this.previousFrame = previousFrame;
                this.newFrame = newFrame;
                this.elapsedMicros = 0;

                this.isFadingIn = false;
                this.hasAdvancedPreviousFrameAtLeastOnce = false;
            }
        },
        methods: {
            ProcessExtraTime: function (milliseconds) { },
            GetClickUrl: function () {
                if (this.isFadingIn) {
                    return this.newFrame.DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetClickUrl();
                }

                return null;
            },
            GetCompletedAchievements: function () {
                return null;
            },
            GetScore: function () {
                return null;
            },
            GetNextFrame: function (keyboardInput, mouseInput, previousKeyboardInput, previousMouseInput, displayProcessing, soundOutput, musicProcessing) {
                this.elapsedMicros = (this.elapsedMicros + this.globalState.ElapsedMicrosPerFrame) | 0;

                if (!this.isFadingIn) {
                    if (this.elapsedMicros > TuxPlanetSpeedrunAnyPercentLibrary.LevelTransitionFrame.DURATION_OF_FADE_OUT) {
                        this.isFadingIn = true;
                    }
                }

                if (!this.isFadingIn || !this.hasAdvancedPreviousFrameAtLeastOnce) {
                    this.hasAdvancedPreviousFrameAtLeastOnce = true;
                    this.previousFrame = this.previousFrame.DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetNextFrame(new DTLibrary.EmptyKeyboard(), new DTLibrary.EmptyMouse(), new DTLibrary.EmptyKeyboard(), new DTLibrary.EmptyMouse(), displayProcessing, soundOutput, musicProcessing);

                    if (this.previousFrame == null) {
                        return null;
                    }
                }

                if (this.isFadingIn) {
                    this.newFrame = this.newFrame.DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetNextFrame(keyboardInput, mouseInput, previousKeyboardInput, previousMouseInput, displayProcessing, soundOutput, musicProcessing);

                    if (this.newFrame == null) {
                        return null;
                    }
                }

                if (this.elapsedMicros > 1000000) {
                    return this.newFrame;
                }

                return this;
            },
            ProcessMusic: function () {
                this.globalState.ProcessMusic();
            },
            Render: function (displayOutput) {
                if (!this.isFadingIn) {
                    this.previousFrame.DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$Render(displayOutput);

                    var elapsedMicrosLong = System.Int64(this.elapsedMicros);

                    var alpha = System.Int64.clip32(elapsedMicrosLong.mul(System.Int64(255)).div(System.Int64(TuxPlanetSpeedrunAnyPercentLibrary.LevelTransitionFrame.DURATION_OF_FADE_OUT)));

                    if (alpha > 255) {
                        alpha = 255;
                    }
                    if (alpha < 0) {
                        alpha = 0;
                    }

                    displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle(0, 0, this.globalState.WindowWidth, this.globalState.WindowHeight, new DTLibrary.DTColor.$ctor1(0, 0, 0, alpha), true);
                } else {
                    this.newFrame.DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$Render(displayOutput);

                    var elapsed = System.Int64(this.elapsedMicros - TuxPlanetSpeedrunAnyPercentLibrary.LevelTransitionFrame.DURATION_OF_FADE_OUT);

                    var alpha1 = System.Int64.clip32(System.Int64(255).sub(elapsed.mul(System.Int64(255)).div(System.Int64(TuxPlanetSpeedrunAnyPercentLibrary.LevelTransitionFrame.DURATION_OF_FADE_IN))));

                    if (alpha1 > 255) {
                        alpha1 = 255;
                    }
                    if (alpha1 < 0) {
                        alpha1 = 0;
                    }

                    displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle(0, 0, this.globalState.WindowWidth, this.globalState.WindowHeight, new DTLibrary.DTColor.$ctor1(0, 0, 0, alpha1), true);
                }
            },
            RenderMusic: function (musicOutput) {
                this.globalState.RenderMusic(musicOutput);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.OverworldFrame", {
        inherits: [DTLibrary.IFrame$4(TuxPlanetSpeedrunAnyPercentLibrary.GameImage,TuxPlanetSpeedrunAnyPercentLibrary.GameFont,TuxPlanetSpeedrunAnyPercentLibrary.GameSound,TuxPlanetSpeedrunAnyPercentLibrary.GameMusic)],
        fields: {
            globalState: null,
            sessionState: null,
            extraElapsedMicros: 0,
            overworld: null,
            hasStartedLevelTransition: false
        },
        alias: [
            "ProcessExtraTime", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessExtraTime",
            "GetClickUrl", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetClickUrl",
            "GetCompletedAchievements", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetCompletedAchievements",
            "GetScore", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetScore",
            "GetNextFrame", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetNextFrame",
            "ProcessMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessMusic",
            "Render", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$Render",
            "RenderMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$RenderMusic"
        ],
        ctors: {
            ctor: function (globalState, sessionState) {
                this.$initialize();
                this.globalState = globalState;
                this.sessionState = sessionState;

                this.extraElapsedMicros = 0;

                this.overworld = sessionState.Overworld;

                this.hasStartedLevelTransition = false;
            }
        },
        methods: {
            ProcessExtraTime: function (milliseconds) { },
            GetClickUrl: function () {
                return null;
            },
            GetCompletedAchievements: function () {
                return TuxPlanetSpeedrunAnyPercentLibrary.Achievements.GetCompletedAchievements(this.sessionState.Overworld.GetNumCompletedLevels());
            },
            GetScore: function () {
                return null;
            },
            GetNextFrame: function (keyboardInput, mouseInput, previousKeyboardInput, previousMouseInput, displayProcessing, soundOutput, musicProcessing) {
                this.globalState.MusicPlayer.SetMusic(TuxPlanetSpeedrunAnyPercentLibrary.GameMusic.PeaceAtLast, 100);

                this.sessionState.AddElapsedMillis(((Bridge.Int.div(this.globalState.ElapsedMicrosPerFrame, 1000)) | 0));

                this.extraElapsedMicros = (this.extraElapsedMicros + (this.globalState.ElapsedMicrosPerFrame % 1000)) | 0;
                if (this.extraElapsedMicros >= 1000) {
                    this.extraElapsedMicros = (this.extraElapsedMicros - 1000) | 0;
                    this.sessionState.AddElapsedMillis(1);
                }

                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Esc) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Esc)) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.PauseMenuFrame(this.globalState, this.sessionState, this, false, false, this.sessionState.CanUseSaveStates);
                }

                var result = this.overworld.ProcessFrame(keyboardInput, previousKeyboardInput, this.globalState.WindowWidth, this.globalState.WindowHeight, this.globalState.ElapsedMicrosPerFrame);

                this.overworld = result.Overworld;
                this.sessionState.SetOverworld(this.overworld);

                var level = result.SelectedLevel;

                if (level != null && !this.hasStartedLevelTransition) {
                    this.hasStartedLevelTransition = true;

                    this.sessionState.StartLevel(System.Nullable.getValue(level), this.globalState.WindowWidth, this.globalState.WindowHeight, this.globalState.MapInfo);

                    this.globalState.SaveData(this.sessionState, soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$GetSoundVolume());

                    var newFrame = TuxPlanetSpeedrunAnyPercentLibrary.GameFrame.GetGameFrame(this.globalState, this.sessionState, displayProcessing, soundOutput, musicProcessing);

                    return new TuxPlanetSpeedrunAnyPercentLibrary.LevelTransitionFrame(this.globalState, this, newFrame);
                }

                return this;
            },
            ProcessMusic: function () {
                this.globalState.ProcessMusic();
            },
            Render: function (displayOutput) {
                this.overworld.Render(displayOutput);

                var elapsedTimeString = TuxPlanetSpeedrunAnyPercentLibrary.ElapsedTimeUtil.GetElapsedTimeString(this.sessionState.ElapsedMillis);
                var timerText = "Time: " + (elapsedTimeString || "");

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText(((this.globalState.WindowWidth - 120) | 0), ((this.globalState.WindowHeight - 10) | 0), timerText, TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont14Pt, DTLibrary.DTColor.Black());
            },
            RenderMusic: function (musicOutput) {
                this.globalState.RenderMusic(musicOutput);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.PauseMenuFrame", {
        inherits: [DTLibrary.IFrame$4(TuxPlanetSpeedrunAnyPercentLibrary.GameImage,TuxPlanetSpeedrunAnyPercentLibrary.GameFont,TuxPlanetSpeedrunAnyPercentLibrary.GameSound,TuxPlanetSpeedrunAnyPercentLibrary.GameMusic)],
        fields: {
            globalState: null,
            sessionState: null,
            selectedOption: 0,
            options: null,
            volumePicker: null,
            underlyingFrame: null
        },
        alias: [
            "GetNextFrame", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetNextFrame",
            "ProcessExtraTime", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessExtraTime",
            "GetClickUrl", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetClickUrl",
            "GetCompletedAchievements", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetCompletedAchievements",
            "GetScore", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetScore",
            "ProcessMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessMusic",
            "Render", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$Render",
            "RenderMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$RenderMusic"
        ],
        ctors: {
            ctor: function (globalState, sessionState, underlyingFrame, showRestartLevelOption, showBackToMapOption, showToggleInputReplayFunctionalityOption) {
                this.$initialize();
                this.globalState = globalState;
                this.sessionState = sessionState;
                this.volumePicker = null;
                this.underlyingFrame = underlyingFrame;

                this.selectedOption = 0;

                this.options = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.PauseMenuFrame.Option)).ctor();
                this.options.add(TuxPlanetSpeedrunAnyPercentLibrary.PauseMenuFrame.Option.Continue);
                if (showRestartLevelOption) {
                    this.options.add(TuxPlanetSpeedrunAnyPercentLibrary.PauseMenuFrame.Option.RestartLevel);
                }
                if (showBackToMapOption) {
                    this.options.add(TuxPlanetSpeedrunAnyPercentLibrary.PauseMenuFrame.Option.BackToMapScreen);
                }
                if (showToggleInputReplayFunctionalityOption) {
                    this.options.add(TuxPlanetSpeedrunAnyPercentLibrary.PauseMenuFrame.Option.ToggleInputReplayFunctionality);
                }
                this.options.add(TuxPlanetSpeedrunAnyPercentLibrary.PauseMenuFrame.Option.BackToTitleScreen);
            }
        },
        methods: {
            GetNextFrame: function (keyboardInput, mouseInput, previousKeyboardInput, previousMouseInput, displayProcessing, soundOutput, musicProcessing) {
                if (this.volumePicker == null) {
                    this.volumePicker = new TuxPlanetSpeedrunAnyPercentLibrary.SoundAndMusicVolumePicker(0, 0, soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$GetSoundVolume(), this.globalState.MusicVolume, this.globalState.ElapsedMicrosPerFrame, TuxPlanetSpeedrunAnyPercentLibrary.SoundAndMusicVolumePicker.Color.White);
                }

                this.volumePicker.ProcessFrame(mouseInput, previousMouseInput);
                soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$SetSoundVolume(this.volumePicker.GetCurrentSoundVolume());
                this.globalState.MusicVolume = this.volumePicker.GetCurrentMusicVolume();

                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Esc) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Esc)) {
                    soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$PlaySound(TuxPlanetSpeedrunAnyPercentLibrary.GameSound.Click);
                    this.globalState.SaveData(this.sessionState, soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$GetSoundVolume());
                    return this.underlyingFrame;
                }

                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.UpArrow) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.UpArrow)) {
                    this.selectedOption = (this.selectedOption - 1) | 0;
                    if (this.selectedOption === -1) {
                        this.selectedOption = (this.options.Count - 1) | 0;
                    }
                }

                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.DownArrow) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.DownArrow)) {
                    this.selectedOption = (this.selectedOption + 1) | 0;
                    if (this.selectedOption === this.options.Count) {
                        this.selectedOption = 0;
                    }
                }

                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Enter) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Enter) || keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Space) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Space) || keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Z) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Z)) {
                    soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$PlaySound(TuxPlanetSpeedrunAnyPercentLibrary.GameSound.Click);

                    switch (this.options.getItem(this.selectedOption)) {
                        case TuxPlanetSpeedrunAnyPercentLibrary.PauseMenuFrame.Option.Continue: 
                            this.globalState.SaveData(this.sessionState, soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$GetSoundVolume());
                            return this.underlyingFrame;
                        case TuxPlanetSpeedrunAnyPercentLibrary.PauseMenuFrame.Option.RestartLevel: 
                            this.sessionState.StartLevel(System.Nullable.getValue(this.sessionState.CurrentLevel), this.globalState.WindowWidth, this.globalState.WindowHeight, this.globalState.MapInfo);
                            this.globalState.SaveData(this.sessionState, soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$GetSoundVolume());
                            return TuxPlanetSpeedrunAnyPercentLibrary.GameFrame.GetGameFrame(this.globalState, this.sessionState, displayProcessing, soundOutput, musicProcessing);
                        case TuxPlanetSpeedrunAnyPercentLibrary.PauseMenuFrame.Option.BackToMapScreen: 
                            this.sessionState.SetGameLogic(null);
                            this.globalState.SaveData(this.sessionState, soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$GetSoundVolume());
                            return new TuxPlanetSpeedrunAnyPercentLibrary.OverworldFrame(this.globalState, this.sessionState);
                        case TuxPlanetSpeedrunAnyPercentLibrary.PauseMenuFrame.Option.ToggleInputReplayFunctionality: 
                            this.sessionState.SetShouldReplayInputAfterLoadingSaveState(!this.sessionState.ShouldReplayInputAfterLoadingSaveState);
                            this.globalState.SaveData(this.sessionState, soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$GetSoundVolume());
                            break;
                        case TuxPlanetSpeedrunAnyPercentLibrary.PauseMenuFrame.Option.BackToTitleScreen: 
                            this.globalState.SaveData(this.sessionState, soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$GetSoundVolume());
                            return new TuxPlanetSpeedrunAnyPercentLibrary.TitleScreenFrame(this.globalState, this.sessionState);
                        default: 
                            throw new System.Exception();
                    }
                }

                return this;
            },
            ProcessExtraTime: function (milliseconds) { },
            GetClickUrl: function () {
                return null;
            },
            GetCompletedAchievements: function () {
                return null;
            },
            GetScore: function () {
                return null;
            },
            ProcessMusic: function () {
                this.globalState.ProcessMusic();
            },
            Render: function (displayOutput) {
                this.underlyingFrame.DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$Render(displayOutput);

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle(0, 0, this.globalState.WindowWidth, this.globalState.WindowHeight, new DTLibrary.DTColor.$ctor1(0, 0, 0, 215), true);

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText(((((Bridge.Int.div(this.globalState.WindowWidth, 2)) | 0) - 73) | 0), 650, "Paused", TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont32Pt, DTLibrary.DTColor.White());

                if (this.volumePicker != null) {
                    this.volumePicker.Render(displayOutput);
                }

                var selectedColor = new DTLibrary.DTColor.ctor(200, 255, 255);
                var notSelectedColor = new DTLibrary.DTColor.ctor(200, 200, 200);

                for (var i = 0; i < this.options.Count; i = (i + 1) | 0) {
                    var x = (((Bridge.Int.div(this.globalState.WindowWidth, 2)) | 0) - 185) | 0;
                    var y = (350 - Bridge.Int.mul(50, i)) | 0;
                    var text;

                    switch (this.options.getItem(i)) {
                        case TuxPlanetSpeedrunAnyPercentLibrary.PauseMenuFrame.Option.Continue: 
                            text = "Continue";
                            break;
                        case TuxPlanetSpeedrunAnyPercentLibrary.PauseMenuFrame.Option.RestartLevel: 
                            text = "Restart level";
                            break;
                        case TuxPlanetSpeedrunAnyPercentLibrary.PauseMenuFrame.Option.BackToMapScreen: 
                            text = "Quit level and return to map";
                            break;
                        case TuxPlanetSpeedrunAnyPercentLibrary.PauseMenuFrame.Option.ToggleInputReplayFunctionality: 
                            if (this.sessionState.ShouldReplayInputAfterLoadingSaveState) {
                                text = "Replay previous input after loading a savestate: Yes";
                            } else {
                                text = "Replay previous input after loading a savestate: No";
                            }
                            break;
                        case TuxPlanetSpeedrunAnyPercentLibrary.PauseMenuFrame.Option.BackToTitleScreen: 
                            text = "Back to title screen";
                            break;
                        default: 
                            throw new System.Exception();
                    }

                    displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText(x, y, text, TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont16Pt, i === this.selectedOption ? selectedColor : notSelectedColor);
                }
            },
            RenderMusic: function (musicOutput) {
                this.globalState.RenderMusic(musicOutput);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.PerformanceTestFrame", {
        inherits: [DTLibrary.IFrame$4(TuxPlanetSpeedrunAnyPercentLibrary.GameImage,TuxPlanetSpeedrunAnyPercentLibrary.GameFont,TuxPlanetSpeedrunAnyPercentLibrary.GameSound,TuxPlanetSpeedrunAnyPercentLibrary.GameMusic)],
        statics: {
            methods: {
                GetPerformanceTestFrame: function (globalState, displayProcessing, soundOutput, musicProcessing) {
                    var random = new DTLibrary.DTDeterministicRandom.$ctor1(123);

                    var gameLogic = new TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.$ctor1(TuxPlanetSpeedrunAnyPercentLibrary.Level.Level10, globalState.WindowWidth, globalState.WindowHeight, true, true, true, globalState.MapInfo, random);

                    var frame = new TuxPlanetSpeedrunAnyPercentLibrary.PerformanceTestFrame(globalState, gameLogic);
                    frame.GetNextFrame(new DTLibrary.EmptyKeyboard(), new DTLibrary.EmptyMouse(), new DTLibrary.EmptyKeyboard(), new DTLibrary.EmptyMouse(), displayProcessing, soundOutput, musicProcessing);

                    return frame;
                },
                DisplayTicksInMilliseconds: function (ticks) {
                    var numMillis = (Bridge.Int.div(ticks, 10000)) | 0;

                    var str = DTLibrary.StringUtil.ToStringCultureInvariant(numMillis);

                    str = (str || "") + ".";

                    var remainingTicks = DTLibrary.StringUtil.ToStringCultureInvariant((ticks % 10000));
                    while (remainingTicks.length < 4) {
                        remainingTicks = "0" + (remainingTicks || "");
                    }

                    str = (str || "") + (((remainingTicks || "") + " ms") || "");

                    return str;
                }
            }
        },
        fields: {
            globalState: null,
            gameLogic: null,
            timeSpentProcessing: System.Int64(0),
            timeSpentRendering: System.Int64(0),
            numFramesProcessed: 0,
            numFramesRendered: 0
        },
        alias: [
            "GetNextFrame", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetNextFrame",
            "ProcessExtraTime", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessExtraTime",
            "GetClickUrl", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetClickUrl",
            "GetCompletedAchievements", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetCompletedAchievements",
            "GetScore", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetScore",
            "ProcessMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessMusic",
            "Render", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$Render",
            "RenderMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$RenderMusic"
        ],
        ctors: {
            ctor: function (globalState, gameLogic) {
                this.$initialize();
                this.globalState = globalState;
                this.gameLogic = gameLogic;

                this.timeSpentProcessing = System.Int64(0);
                this.timeSpentRendering = System.Int64(0);
                this.numFramesProcessed = 0;
                this.numFramesRendered = 0;
            }
        },
        methods: {
            GetNextFrame: function (keyboardInput, mouseInput, previousKeyboardInput, previousMouseInput, displayProcessing, soundOutput, musicProcessing) {
                if (this.gameLogic.FrameCounter >= 700) {
                    if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Enter) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Enter) || keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Space) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Space) || keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Esc) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Esc) || keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Z) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Z)) {
                        return TuxPlanetSpeedrunAnyPercentLibrary.PerformanceTestFrame.GetPerformanceTestFrame(this.globalState, displayProcessing, soundOutput, musicProcessing);
                    }

                    return this;
                }

                keyboardInput = new TuxPlanetSpeedrunAnyPercentLibrary.PerformanceTestFrameKeyboard(this.gameLogic.FrameCounter);

                var startTime = System.DateTime.getNow();

                var move = new TuxPlanetSpeedrunAnyPercentLibrary.Move(keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Z), keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.X), keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.LeftArrow), keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.RightArrow), keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.UpArrow), keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.DownArrow), keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Esc));

                var result = TuxPlanetSpeedrunAnyPercentLibrary.GameLogicStateProcessing.ProcessFrame(this.gameLogic, move, false, false, new DTLibrary.EmptyKeyboard(), new DTLibrary.EmptyKeyboard(), displayProcessing, soundOutput, this.globalState.ElapsedMicrosPerFrame);

                this.gameLogic = result.NewGameLogicState;

                var endTime = System.DateTime.getNow();

                var elapsedTicks = System.DateTime.getTicks(endTime).sub(System.DateTime.getTicks(startTime));
                this.timeSpentProcessing = this.timeSpentProcessing.add(elapsedTicks);
                this.numFramesProcessed = (this.numFramesProcessed + 1) | 0;

                return this;
            },
            ProcessExtraTime: function (milliseconds) { },
            GetClickUrl: function () {
                return null;
            },
            GetCompletedAchievements: function () {
                return null;
            },
            GetScore: function () {
                return null;
            },
            ProcessMusic: function () {
                this.globalState.ProcessMusic();
            },
            Render: function (displayOutput) {
                var startTime = System.DateTime.getNow();

                TuxPlanetSpeedrunAnyPercentLibrary.GameLogicStateProcessing.Render(this.gameLogic, displayOutput, 1, false);

                var endTime = System.DateTime.getNow();

                if (this.gameLogic.FrameCounter >= 700 && this.numFramesRendered > 0) {
                    displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle(50, 500, 450, 150, DTLibrary.DTColor.White(), true);

                    var text = "Number of frames processed: " + (DTLibrary.StringUtil.ToStringCultureInvariant(this.numFramesProcessed) || "") + "\n";

                    text = (text || "") + (("Number of frames rendered: " + (DTLibrary.StringUtil.ToStringCultureInvariant(this.numFramesRendered) || "") + "\n") || "");

                    var timeSpentProcessingPerFrame = this.timeSpentProcessing.div(System.Int64(this.numFramesProcessed));

                    text = (text || "") + (("Time spent processing (per frame): " + (TuxPlanetSpeedrunAnyPercentLibrary.PerformanceTestFrame.DisplayTicksInMilliseconds(System.Int64.clip32(timeSpentProcessingPerFrame)) || "") + "\n") || "");

                    var timeSpentRenderingPerFrame = this.timeSpentRendering.div(System.Int64(this.numFramesRendered));

                    text = (text || "") + (("Time spent rendering (per frame): " + (TuxPlanetSpeedrunAnyPercentLibrary.PerformanceTestFrame.DisplayTicksInMilliseconds(System.Int64.clip32(timeSpentRenderingPerFrame)) || "") + "\n") || "");

                    displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText(55, 645, text, TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont14Pt, DTLibrary.DTColor.Black());
                } else {
                    var elapsedTicks = System.DateTime.getTicks(endTime).sub(System.DateTime.getTicks(startTime));
                    this.timeSpentRendering = this.timeSpentRendering.add(elapsedTicks);
                    this.numFramesRendered = (this.numFramesRendered + 1) | 0;
                }
            },
            RenderMusic: function (musicOutput) {
                this.globalState.RenderMusic(musicOutput);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.TestingFontFrame", {
        inherits: [DTLibrary.IFrame$4(TuxPlanetSpeedrunAnyPercentLibrary.GameImage,TuxPlanetSpeedrunAnyPercentLibrary.GameFont,TuxPlanetSpeedrunAnyPercentLibrary.GameSound,TuxPlanetSpeedrunAnyPercentLibrary.GameMusic)],
        fields: {
            globalState: null,
            sessionState: null
        },
        alias: [
            "ProcessExtraTime", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessExtraTime",
            "GetClickUrl", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetClickUrl",
            "GetCompletedAchievements", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetCompletedAchievements",
            "GetScore", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetScore",
            "GetNextFrame", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetNextFrame",
            "ProcessMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessMusic",
            "Render", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$Render",
            "RenderMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$RenderMusic"
        ],
        ctors: {
            ctor: function (globalState, sessionState) {
                this.$initialize();
                this.globalState = globalState;
                this.sessionState = sessionState;
            }
        },
        methods: {
            ProcessExtraTime: function (milliseconds) { },
            GetClickUrl: function () {
                return null;
            },
            GetCompletedAchievements: function () {
                return null;
            },
            GetScore: function () {
                return null;
            },
            GetNextFrame: function (keyboardInput, mouseInput, previousKeyboardInput, previousMouseInput, displayProcessing, soundOutput, musicProcessing) {
                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Esc) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Esc)) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.TestingFrame(this.globalState, this.sessionState);
                }

                return this;
            },
            ProcessMusic: function () {
                this.globalState.ProcessMusic();
            },
            Render: function (displayOutput) {
                var red = new DTLibrary.DTColor.ctor(255, 0, 0);

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle(50, 589, 822, 60, red, false);

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText(50, 650, "Line 1 ABCDEFGHIJKLMNOPQRSTUVWXYZ ABCDEFGHIJKLMNOPQRSTUVWXYZ ABCDEFGHIJKLMNOPQRSTUVWXYZ\nLine 2\nLine 3\nLine 4", TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont12Pt, DTLibrary.DTColor.Black());

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle(51, 481, 637, 68, red, false);

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText(50, 550, "Line 1 abcdefghijklmnopqrstuvwxyz abcdefghijklmnopqrstuvwxyz\nLine 2\nLine 3\nLine 4", TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont14Pt, DTLibrary.DTColor.Black());
            },
            RenderMusic: function (musicOutput) {
                this.globalState.RenderMusic(musicOutput);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.TestingFrame", {
        inherits: [DTLibrary.IFrame$4(TuxPlanetSpeedrunAnyPercentLibrary.GameImage,TuxPlanetSpeedrunAnyPercentLibrary.GameFont,TuxPlanetSpeedrunAnyPercentLibrary.GameSound,TuxPlanetSpeedrunAnyPercentLibrary.GameMusic)],
        fields: {
            globalState: null,
            sessionState: null
        },
        alias: [
            "ProcessExtraTime", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessExtraTime",
            "GetClickUrl", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetClickUrl",
            "GetCompletedAchievements", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetCompletedAchievements",
            "GetScore", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetScore",
            "GetNextFrame", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetNextFrame",
            "ProcessMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessMusic",
            "Render", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$Render",
            "RenderMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$RenderMusic"
        ],
        ctors: {
            ctor: function (globalState, sessionState) {
                this.$initialize();
                this.globalState = globalState;
                this.sessionState = sessionState;
            }
        },
        methods: {
            ProcessExtraTime: function (milliseconds) { },
            GetClickUrl: function () {
                return null;
            },
            GetCompletedAchievements: function () {
                return null;
            },
            GetScore: function () {
                return null;
            },
            GetNextFrame: function (keyboardInput, mouseInput, previousKeyboardInput, previousMouseInput, displayProcessing, soundOutput, musicProcessing) {
                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Esc) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Esc)) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.TitleScreenFrame(this.globalState, this.sessionState);
                }

                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.One) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.One)) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.TestingKeyboardFrame(this.globalState, this.sessionState);
                }

                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Two) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Two)) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.TestingMouseFrame(this.globalState, this.sessionState);
                }

                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Three) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Three)) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.TestingFontFrame(this.globalState, this.sessionState);
                }

                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Four) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Four)) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.TestingSoundFrame(this.globalState, this.sessionState);
                }

                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Five) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Five)) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.TestingMusicFrame(this.globalState, this.sessionState);
                }

                return this;
            },
            ProcessMusic: function () {
                this.globalState.ProcessMusic();
            },
            Render: function (displayOutput) {
                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText(50, ((this.globalState.WindowHeight - 50) | 0), "1) Test keyboard\n2) Test mouse\n3) Test font\n4) Test sound\n5) Test music", TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont14Pt, DTLibrary.DTColor.Black());
            },
            RenderMusic: function (musicOutput) {
                this.globalState.RenderMusic(musicOutput);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.TestingKeyboardFrame", {
        inherits: [DTLibrary.IFrame$4(TuxPlanetSpeedrunAnyPercentLibrary.GameImage,TuxPlanetSpeedrunAnyPercentLibrary.GameFont,TuxPlanetSpeedrunAnyPercentLibrary.GameSound,TuxPlanetSpeedrunAnyPercentLibrary.GameMusic)],
        fields: {
            globalState: null,
            sessionState: null,
            x: 0,
            y: 0
        },
        alias: [
            "ProcessExtraTime", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessExtraTime",
            "GetClickUrl", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetClickUrl",
            "GetCompletedAchievements", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetCompletedAchievements",
            "GetScore", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetScore",
            "GetNextFrame", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetNextFrame",
            "ProcessMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessMusic",
            "Render", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$Render",
            "RenderMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$RenderMusic"
        ],
        ctors: {
            ctor: function (globalState, sessionState) {
                this.$initialize();
                this.globalState = globalState;
                this.sessionState = sessionState;

                this.x = 50;
                this.y = 50;
            }
        },
        methods: {
            ProcessExtraTime: function (milliseconds) { },
            GetClickUrl: function () {
                return null;
            },
            GetCompletedAchievements: function () {
                return null;
            },
            GetScore: function () {
                return null;
            },
            GetNextFrame: function (keyboardInput, mouseInput, previousKeyboardInput, previousMouseInput, displayProcessing, soundOutput, musicProcessing) {
                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Esc) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Esc)) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.TestingFrame(this.globalState, this.sessionState);
                }

                var delta = (Bridge.Int.div(this.globalState.ElapsedMicrosPerFrame, 2000)) | 0;

                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.LeftArrow)) {
                    this.x = (this.x - delta) | 0;
                }
                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.RightArrow)) {
                    this.x = (this.x + delta) | 0;
                }
                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.DownArrow)) {
                    this.y = (this.y - delta) | 0;
                }
                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.UpArrow)) {
                    this.y = (this.y + delta) | 0;
                }

                if (this.x < 0) {
                    this.x = 0;
                }
                if (this.x > this.globalState.WindowWidth) {
                    this.x = this.globalState.WindowWidth;
                }
                if (this.y < 0) {
                    this.y = 0;
                }
                if (this.y > this.globalState.WindowHeight) {
                    this.y = this.globalState.WindowHeight;
                }

                return this;
            },
            ProcessMusic: function () {
                this.globalState.ProcessMusic();
            },
            Render: function (displayOutput) {
                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle(((this.x - 5) | 0), ((this.y - 5) | 0), 11, 11, DTLibrary.DTColor.Black(), true);
            },
            RenderMusic: function (musicOutput) {
                this.globalState.RenderMusic(musicOutput);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.TestingMouseFrame", {
        inherits: [DTLibrary.IFrame$4(TuxPlanetSpeedrunAnyPercentLibrary.GameImage,TuxPlanetSpeedrunAnyPercentLibrary.GameFont,TuxPlanetSpeedrunAnyPercentLibrary.GameSound,TuxPlanetSpeedrunAnyPercentLibrary.GameMusic)],
        fields: {
            globalState: null,
            sessionState: null,
            x: 0,
            y: 0,
            color: 0,
            shouldFill: false
        },
        alias: [
            "ProcessExtraTime", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessExtraTime",
            "GetClickUrl", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetClickUrl",
            "GetCompletedAchievements", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetCompletedAchievements",
            "GetScore", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetScore",
            "GetNextFrame", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetNextFrame",
            "ProcessMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessMusic",
            "Render", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$Render",
            "RenderMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$RenderMusic"
        ],
        ctors: {
            ctor: function (globalState, sessionState) {
                this.$initialize();
                this.globalState = globalState;
                this.sessionState = sessionState;

                this.x = 0;
                this.y = 0;
                this.color = 0;
                this.shouldFill = true;
            }
        },
        methods: {
            ProcessExtraTime: function (milliseconds) { },
            GetClickUrl: function () {
                return null;
            },
            GetCompletedAchievements: function () {
                return null;
            },
            GetScore: function () {
                return null;
            },
            GetNextFrame: function (keyboardInput, mouseInput, previousKeyboardInput, previousMouseInput, displayProcessing, soundOutput, musicProcessing) {
                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Esc) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Esc)) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.TestingFrame(this.globalState, this.sessionState);
                }

                this.x = mouseInput.DTLibrary$IMouse$GetX();
                this.y = mouseInput.DTLibrary$IMouse$GetY();

                if (mouseInput.DTLibrary$IMouse$IsLeftMouseButtonPressed() && !previousMouseInput.DTLibrary$IMouse$IsLeftMouseButtonPressed()) {
                    this.color = (this.color + 1) | 0;
                    if (this.color === 4) {
                        this.color = 0;
                    }
                }

                if (mouseInput.DTLibrary$IMouse$IsRightMouseButtonPressed() && !previousMouseInput.DTLibrary$IMouse$IsRightMouseButtonPressed()) {
                    this.shouldFill = !this.shouldFill;
                }

                return this;
            },
            ProcessMusic: function () {
                this.globalState.ProcessMusic();
            },
            Render: function (displayOutput) {
                var dtColor;

                switch (this.color) {
                    case 0: 
                        dtColor = DTLibrary.DTColor.Black();
                        break;
                    case 1: 
                        dtColor = new DTLibrary.DTColor.ctor(255, 0, 0);
                        break;
                    case 2: 
                        dtColor = new DTLibrary.DTColor.ctor(0, 255, 0);
                        break;
                    case 3: 
                        dtColor = new DTLibrary.DTColor.ctor(0, 0, 255);
                        break;
                    default: 
                        throw new System.Exception();
                }

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle(((this.x - 5) | 0), ((this.y - 5) | 0), 11, 11, dtColor, this.shouldFill);
            },
            RenderMusic: function (musicOutput) {
                this.globalState.RenderMusic(musicOutput);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.TestingMusicFrame", {
        inherits: [DTLibrary.IFrame$4(TuxPlanetSpeedrunAnyPercentLibrary.GameImage,TuxPlanetSpeedrunAnyPercentLibrary.GameFont,TuxPlanetSpeedrunAnyPercentLibrary.GameSound,TuxPlanetSpeedrunAnyPercentLibrary.GameMusic)],
        fields: {
            globalState: null,
            sessionState: null,
            volumePicker: null
        },
        alias: [
            "ProcessExtraTime", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessExtraTime",
            "GetClickUrl", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetClickUrl",
            "GetCompletedAchievements", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetCompletedAchievements",
            "GetScore", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetScore",
            "GetNextFrame", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetNextFrame",
            "ProcessMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessMusic",
            "Render", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$Render",
            "RenderMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$RenderMusic"
        ],
        ctors: {
            ctor: function (globalState, sessionState) {
                this.$initialize();
                this.globalState = globalState;
                this.sessionState = sessionState;

                this.volumePicker = null;
            }
        },
        methods: {
            ProcessExtraTime: function (milliseconds) { },
            GetClickUrl: function () {
                return null;
            },
            GetCompletedAchievements: function () {
                return null;
            },
            GetScore: function () {
                return null;
            },
            GetNextFrame: function (keyboardInput, mouseInput, previousKeyboardInput, previousMouseInput, displayProcessing, soundOutput, musicProcessing) {
                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Esc) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Esc)) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.TestingFrame(this.globalState, this.sessionState);
                }

                if (this.volumePicker == null) {
                    this.volumePicker = new TuxPlanetSpeedrunAnyPercentLibrary.SoundAndMusicVolumePicker(0, 0, soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$GetSoundVolume(), this.globalState.MusicVolume, this.globalState.ElapsedMicrosPerFrame, TuxPlanetSpeedrunAnyPercentLibrary.SoundAndMusicVolumePicker.Color.Black);
                }

                this.volumePicker.ProcessFrame(mouseInput, previousMouseInput);
                soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$SetSoundVolume(this.volumePicker.GetCurrentSoundVolume());
                this.globalState.MusicVolume = this.volumePicker.GetCurrentMusicVolume();

                var music = null;
                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.One) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.One)) {
                    music = TuxPlanetSpeedrunAnyPercentLibrary.GameMusic.Theme;
                }
                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Two) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Two)) {
                    music = TuxPlanetSpeedrunAnyPercentLibrary.GameMusic.Airship2;
                }

                if (music != null) {
                    this.globalState.MusicPlayer.SetMusic(System.Nullable.getValue(music), 100);
                }

                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Three) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Three)) {
                    this.globalState.MusicPlayer.StopMusic();
                }

                return this;
            },
            ProcessMusic: function () {
                this.globalState.ProcessMusic();
            },
            Render: function (displayOutput) {
                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle(0, 0, this.globalState.WindowWidth, this.globalState.WindowHeight, new DTLibrary.DTColor.ctor(128, 128, 128), true);

                if (this.volumePicker != null) {
                    this.volumePicker.Render(displayOutput);
                }

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText(50, ((this.globalState.WindowHeight - 50) | 0), "Press 1/2 to switch music tracks.\nPress 3 to stop music.", TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont14Pt, DTLibrary.DTColor.Black());
            },
            RenderMusic: function (musicOutput) {
                this.globalState.RenderMusic(musicOutput);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.TestingSoundFrame", {
        inherits: [DTLibrary.IFrame$4(TuxPlanetSpeedrunAnyPercentLibrary.GameImage,TuxPlanetSpeedrunAnyPercentLibrary.GameFont,TuxPlanetSpeedrunAnyPercentLibrary.GameSound,TuxPlanetSpeedrunAnyPercentLibrary.GameMusic)],
        fields: {
            globalState: null,
            sessionState: null,
            volumePicker: null,
            cooldownInMicroseconds: 0
        },
        alias: [
            "ProcessExtraTime", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessExtraTime",
            "GetClickUrl", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetClickUrl",
            "GetCompletedAchievements", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetCompletedAchievements",
            "GetScore", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetScore",
            "GetNextFrame", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetNextFrame",
            "ProcessMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessMusic",
            "Render", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$Render",
            "RenderMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$RenderMusic"
        ],
        ctors: {
            ctor: function (globalState, sessionState) {
                this.$initialize();
                this.globalState = globalState;
                this.sessionState = sessionState;

                this.volumePicker = null;

                this.cooldownInMicroseconds = 0;
            }
        },
        methods: {
            ProcessExtraTime: function (milliseconds) { },
            GetClickUrl: function () {
                return null;
            },
            GetCompletedAchievements: function () {
                return null;
            },
            GetScore: function () {
                return null;
            },
            GetNextFrame: function (keyboardInput, mouseInput, previousKeyboardInput, previousMouseInput, displayProcessing, soundOutput, musicProcessing) {
                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Esc) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Esc)) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.TestingFrame(this.globalState, this.sessionState);
                }

                if (this.volumePicker == null) {
                    this.volumePicker = new TuxPlanetSpeedrunAnyPercentLibrary.SoundAndMusicVolumePicker(0, 0, soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$GetSoundVolume(), this.globalState.MusicVolume, this.globalState.ElapsedMicrosPerFrame, TuxPlanetSpeedrunAnyPercentLibrary.SoundAndMusicVolumePicker.Color.Black);
                }

                this.volumePicker.ProcessFrame(mouseInput, previousMouseInput);
                soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$SetSoundVolume(this.volumePicker.GetCurrentSoundVolume());
                this.globalState.MusicVolume = this.volumePicker.GetCurrentMusicVolume();

                this.cooldownInMicroseconds = (this.cooldownInMicroseconds - this.globalState.ElapsedMicrosPerFrame) | 0;

                if (this.cooldownInMicroseconds <= 0) {
                    soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$PlaySound(TuxPlanetSpeedrunAnyPercentLibrary.GameSound.Click);

                    this.cooldownInMicroseconds = (this.cooldownInMicroseconds + (1000000)) | 0;

                    if (this.cooldownInMicroseconds < 0) {
                        this.cooldownInMicroseconds = 0;
                    }
                }

                return this;
            },
            ProcessMusic: function () {
                this.globalState.ProcessMusic();
            },
            Render: function (displayOutput) {
                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle(0, 0, this.globalState.WindowWidth, this.globalState.WindowHeight, new DTLibrary.DTColor.ctor(128, 128, 128), true);

                if (this.volumePicker != null) {
                    this.volumePicker.Render(displayOutput);
                }
            },
            RenderMusic: function (musicOutput) {
                this.globalState.RenderMusic(musicOutput);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.TitleScreenFrame", {
        inherits: [DTLibrary.IFrame$4(TuxPlanetSpeedrunAnyPercentLibrary.GameImage,TuxPlanetSpeedrunAnyPercentLibrary.GameFont,TuxPlanetSpeedrunAnyPercentLibrary.GameSound,TuxPlanetSpeedrunAnyPercentLibrary.GameMusic)],
        statics: {
            methods: {
                CanContinueCurrentGame: function (sessionState) {
                    return sessionState.HasStarted();
                }
            }
        },
        fields: {
            globalState: null,
            sessionState: null,
            volumePicker: null,
            clearDataButton: null,
            creditsButton: null,
            versionString: null,
            selectedOption: 0,
            options: null
        },
        alias: [
            "ProcessExtraTime", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessExtraTime",
            "GetClickUrl", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetClickUrl",
            "GetCompletedAchievements", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetCompletedAchievements",
            "GetScore", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetScore",
            "GetNextFrame", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetNextFrame",
            "ProcessMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessMusic",
            "Render", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$Render",
            "RenderMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$RenderMusic"
        ],
        ctors: {
            ctor: function (globalState, sessionState) {
                this.$initialize();
                this.globalState = globalState;
                this.sessionState = sessionState;
                this.volumePicker = null;

                this.versionString = TuxPlanetSpeedrunAnyPercentLibrary.VersionInfo.GetVersionInfo().Version;

                this.clearDataButton = new TuxPlanetSpeedrunAnyPercentLibrary.Button(160, 10, 200, 31, TuxPlanetSpeedrunAnyPercentLibrary.Button.GetStandardSecondaryBackgroundColor(), TuxPlanetSpeedrunAnyPercentLibrary.Button.GetStandardHoverColor(), TuxPlanetSpeedrunAnyPercentLibrary.Button.GetStandardClickColor(), "Reset data", 40, 6, TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont16Pt);

                this.creditsButton = new TuxPlanetSpeedrunAnyPercentLibrary.Button(((globalState.WindowWidth - 105) | 0), 5, 100, 35, TuxPlanetSpeedrunAnyPercentLibrary.Button.GetStandardSecondaryBackgroundColor(), TuxPlanetSpeedrunAnyPercentLibrary.Button.GetStandardHoverColor(), TuxPlanetSpeedrunAnyPercentLibrary.Button.GetStandardClickColor(), "Credits", 15, 10, TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont14Pt);

                this.selectedOption = 0;

                this.options = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.TitleScreenFrame.Option)).ctor();

                if (TuxPlanetSpeedrunAnyPercentLibrary.TitleScreenFrame.CanContinueCurrentGame(sessionState)) {
                    this.options.add(TuxPlanetSpeedrunAnyPercentLibrary.TitleScreenFrame.Option.ContinueGame);
                } else {
                    this.options.add(TuxPlanetSpeedrunAnyPercentLibrary.TitleScreenFrame.Option.NewGame);
                }

                if (!globalState.IsWebBrowserVersion) {
                    this.options.add(TuxPlanetSpeedrunAnyPercentLibrary.TitleScreenFrame.Option.Quit);
                }
            }
        },
        methods: {
            ProcessExtraTime: function (milliseconds) { },
            GetClickUrl: function () {
                return null;
            },
            GetCompletedAchievements: function () {
                return TuxPlanetSpeedrunAnyPercentLibrary.Achievements.GetCompletedAchievements(this.sessionState.Overworld.GetNumCompletedLevels());
            },
            GetScore: function () {
                return null;
            },
            GetNextFrame: function (keyboardInput, mouseInput, previousKeyboardInput, previousMouseInput, displayProcessing, soundOutput, musicProcessing) {
                this.sessionState.AddRandomSeed(17);

                if (this.volumePicker == null) {
                    this.volumePicker = new TuxPlanetSpeedrunAnyPercentLibrary.SoundAndMusicVolumePicker(0, 0, soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$GetSoundVolume(), this.globalState.MusicVolume, this.globalState.ElapsedMicrosPerFrame, TuxPlanetSpeedrunAnyPercentLibrary.SoundAndMusicVolumePicker.Color.Black);
                }

                this.volumePicker.ProcessFrame(mouseInput, previousMouseInput);
                soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$SetSoundVolume(this.volumePicker.GetCurrentSoundVolume());
                this.globalState.MusicVolume = this.volumePicker.GetCurrentMusicVolume();

                this.globalState.MusicPlayer.SetMusic(TuxPlanetSpeedrunAnyPercentLibrary.GameMusic.Theme, 100);

                if (TuxPlanetSpeedrunAnyPercentLibrary.TitleScreenFrame.CanContinueCurrentGame(this.sessionState)) {
                    var clickedClearDataButton = this.clearDataButton.ProcessFrame(mouseInput, previousMouseInput);
                    if (clickedClearDataButton) {
                        this.globalState.SaveData(this.sessionState, soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$GetSoundVolume());
                        soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$PlaySound(TuxPlanetSpeedrunAnyPercentLibrary.GameSound.Click);
                        return new TuxPlanetSpeedrunAnyPercentLibrary.ClearDataConfirmationFrame(this.globalState, this.sessionState, this);
                    }
                }

                if (this.globalState.DebugMode) {
                    if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.T) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.T)) {
                        this.globalState.SaveData(this.sessionState, soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$GetSoundVolume());
                        return new TuxPlanetSpeedrunAnyPercentLibrary.TestingFrame(this.globalState, this.sessionState);
                    }
                }

                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.UpArrow) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.UpArrow)) {
                    this.selectedOption = (this.selectedOption - 1) | 0;
                    if (this.selectedOption === -1) {
                        this.selectedOption = (this.options.Count - 1) | 0;
                    }
                }

                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.DownArrow) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.DownArrow)) {
                    this.selectedOption = (this.selectedOption + 1) | 0;
                    if (this.selectedOption === this.options.Count) {
                        this.selectedOption = 0;
                    }
                }

                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Enter) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Enter) || keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Space) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Space) || keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Z) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Z)) {
                    soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$PlaySound(TuxPlanetSpeedrunAnyPercentLibrary.GameSound.Click);

                    switch (this.options.getItem(this.selectedOption)) {
                        case TuxPlanetSpeedrunAnyPercentLibrary.TitleScreenFrame.Option.NewGame: 
                            this.sessionState.ClearData(this.globalState.WindowWidth, this.globalState.WindowHeight);
                            this.globalState.SaveData(this.sessionState, soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$GetSoundVolume());
                            return new TuxPlanetSpeedrunAnyPercentLibrary.InstructionsFrame(this.globalState, this.sessionState);
                        case TuxPlanetSpeedrunAnyPercentLibrary.TitleScreenFrame.Option.ContinueGame: 
                            this.globalState.SaveData(this.sessionState, soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$GetSoundVolume());
                            if (this.sessionState.GameLogic != null) {
                                return TuxPlanetSpeedrunAnyPercentLibrary.GameFrame.GetGameFrame(this.globalState, this.sessionState, displayProcessing, soundOutput, musicProcessing);
                            }
                            return new TuxPlanetSpeedrunAnyPercentLibrary.OverworldFrame(this.globalState, this.sessionState);
                        case TuxPlanetSpeedrunAnyPercentLibrary.TitleScreenFrame.Option.Quit: 
                            this.globalState.SaveData(this.sessionState, soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$GetSoundVolume());
                            return null;
                        default: 
                            throw new System.Exception();
                    }
                }

                var clickedCreditsButton = this.creditsButton.ProcessFrame(mouseInput, previousMouseInput);
                if (clickedCreditsButton) {
                    this.globalState.SaveData(this.sessionState, soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$GetSoundVolume());
                    soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$PlaySound(TuxPlanetSpeedrunAnyPercentLibrary.GameSound.Click);
                    return new TuxPlanetSpeedrunAnyPercentLibrary.CreditsFrame(this.globalState, this.sessionState);
                }

                return this;
            },
            ProcessMusic: function () {
                this.globalState.ProcessMusic();
            },
            Render: function (displayOutput) {
                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle(0, 0, this.globalState.WindowWidth, this.globalState.WindowHeight, new DTLibrary.DTColor.ctor(223, 220, 217), true);

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText(((this.globalState.WindowWidth - 42) | 0), 55, "v" + (this.versionString || ""), TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont12Pt, DTLibrary.DTColor.Black());

                this.creditsButton.Render(displayOutput);

                if (this.volumePicker != null) {
                    this.volumePicker.Render(displayOutput);
                }

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText(((((Bridge.Int.div(this.globalState.WindowWidth, 2)) | 0) - 280) | 0), 510, "Tux Planet Speedrun Any%", TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont32Pt, DTLibrary.DTColor.Black());

                for (var i = 0; i < this.options.Count; i = (i + 1) | 0) {
                    var x = (((Bridge.Int.div(this.globalState.WindowWidth, 2)) | 0) - 75) | 0;

                    if (this.options.Count === 1) {
                        x = (((Bridge.Int.div(this.globalState.WindowWidth, 2)) | 0) - 129) | 0;
                    }

                    var y = (350 - Bridge.Int.mul(50, i)) | 0;
                    var text;

                    switch (this.options.getItem(i)) {
                        case TuxPlanetSpeedrunAnyPercentLibrary.TitleScreenFrame.Option.ContinueGame: 
                            text = this.options.Count === 1 ? "Continue (press enter)" : "Continue";
                            break;
                        case TuxPlanetSpeedrunAnyPercentLibrary.TitleScreenFrame.Option.NewGame: 
                            text = this.options.Count === 1 ? "Start (press enter)" : "Start";
                            break;
                        case TuxPlanetSpeedrunAnyPercentLibrary.TitleScreenFrame.Option.Quit: 
                            text = "Quit";
                            break;
                        default: 
                            throw new System.Exception();
                    }

                    displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText(x, ((y + (i === this.selectedOption ? 3 : 0)) | 0), text, i === this.selectedOption ? TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont20Pt : TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont14Pt, i === this.selectedOption ? new DTLibrary.DTColor.ctor(0, 0, 0) : new DTLibrary.DTColor.ctor(64, 64, 64));
                }

                if (TuxPlanetSpeedrunAnyPercentLibrary.TitleScreenFrame.CanContinueCurrentGame(this.sessionState)) {
                    this.clearDataButton.Render(displayOutput);
                }
            },
            RenderMusic: function (musicOutput) {
                this.globalState.RenderMusic(musicOutput);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.TuxPlanetSpeedrunTranslatedDisplayOutput", {
        inherits: [DTLibrary.IDisplayOutput$2(TuxPlanetSpeedrunAnyPercentLibrary.GameImage,TuxPlanetSpeedrunAnyPercentLibrary.GameFont)],
        fields: {
            display: null,
            xOffsetInPixels: 0,
            yOffsetInPixels: 0
        },
        alias: [
            "DrawRectangle", "DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle",
            "DrawText", "DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText",
            "TryDrawText", "DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TryDrawText",
            "DrawInitialLoadingScreen", "DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawInitialLoadingScreen",
            "DrawImage", "DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImage",
            "DrawImageRotatedClockwise$2", "DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise",
            "DrawImageRotatedClockwise$1", "DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$1",
            "DrawImageRotatedClockwise", "DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2",
            "GetWidth", "DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$GetWidth",
            "GetHeight", "DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$GetHeight"
        ],
        ctors: {
            ctor: function (display, xOffsetInPixels, yOffsetInPixels) {
                this.$initialize();
                if (Bridge.is(display, TuxPlanetSpeedrunAnyPercentLibrary.TuxPlanetSpeedrunTranslatedDisplayOutput)) {
                    var underlyingDisplay = Bridge.cast(display, TuxPlanetSpeedrunAnyPercentLibrary.TuxPlanetSpeedrunTranslatedDisplayOutput);
                    this.display = underlyingDisplay.display;
                    this.xOffsetInPixels = (xOffsetInPixels + underlyingDisplay.xOffsetInPixels) | 0;
                    this.yOffsetInPixels = (yOffsetInPixels + underlyingDisplay.yOffsetInPixels) | 0;
                } else {
                    this.display = display;
                    this.xOffsetInPixels = xOffsetInPixels;
                    this.yOffsetInPixels = yOffsetInPixels;
                }
            }
        },
        methods: {
            DrawRectangle: function (x, y, width, height, color, fill) {
                this.display.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle(((x + this.xOffsetInPixels) | 0), ((y + this.yOffsetInPixels) | 0), width, height, color, fill);
            },
            DrawText: function (x, y, text, font, color) {
                this.display.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText(((x + this.xOffsetInPixels) | 0), ((y + this.yOffsetInPixels) | 0), text, font, color);
            },
            TryDrawText: function (x, y, text, font, color) {
                this.display.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TryDrawText(((x + this.xOffsetInPixels) | 0), ((y + this.yOffsetInPixels) | 0), text, font, color);
            },
            DrawInitialLoadingScreen: function () {
                this.display.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawInitialLoadingScreen();
            },
            DrawImage: function (image, x, y) {
                this.DrawImageRotatedClockwise$1(image, x, y, 0, 128);
            },
            DrawImageRotatedClockwise$2: function (image, x, y, degreesScaled) {
                this.DrawImageRotatedClockwise$1(image, x, y, degreesScaled, 128);
            },
            DrawImageRotatedClockwise$1: function (image, x, y, degreesScaled, scalingFactorScaled) {
                this.display.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$1(image, ((x + this.xOffsetInPixels) | 0), ((y + this.yOffsetInPixels) | 0), degreesScaled, scalingFactorScaled);
            },
            DrawImageRotatedClockwise: function (image, imageX, imageY, imageWidth, imageHeight, x, y, degreesScaled, scalingFactorScaled) {
                this.display.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(image, imageX, imageY, imageWidth, imageHeight, ((x + this.xOffsetInPixels) | 0), ((y + this.yOffsetInPixels) | 0), degreesScaled, scalingFactorScaled);
            },
            GetWidth: function (image) {
                return this.display.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$GetWidth(image);
            },
            GetHeight: function (image) {
                return this.display.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$GetHeight(image);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.VictoryScreenFrame", {
        inherits: [DTLibrary.IFrame$4(TuxPlanetSpeedrunAnyPercentLibrary.GameImage,TuxPlanetSpeedrunAnyPercentLibrary.GameFont,TuxPlanetSpeedrunAnyPercentLibrary.GameSound,TuxPlanetSpeedrunAnyPercentLibrary.GameMusic)],
        fields: {
            globalState: null,
            sessionState: null,
            updatedSession: false
        },
        alias: [
            "ProcessExtraTime", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessExtraTime",
            "GetClickUrl", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetClickUrl",
            "GetCompletedAchievements", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetCompletedAchievements",
            "GetScore", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetScore",
            "GetNextFrame", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetNextFrame",
            "ProcessMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessMusic",
            "Render", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$Render",
            "RenderMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$RenderMusic"
        ],
        ctors: {
            ctor: function (globalState, sessionState) {
                this.$initialize();
                this.globalState = globalState;
                this.sessionState = sessionState;

                this.updatedSession = false;
            }
        },
        methods: {
            ProcessExtraTime: function (milliseconds) { },
            GetClickUrl: function () {
                return null;
            },
            GetCompletedAchievements: function () {
                return TuxPlanetSpeedrunAnyPercentLibrary.Achievements.GetCompletedAchievements(this.sessionState.Overworld.GetNumCompletedLevels());
            },
            GetScore: function () {
                var elapsedMillis = this.sessionState.ElapsedMillis;
                return DTLibrary.StringUtil.ToStringCultureInvariant(elapsedMillis);
            },
            GetNextFrame: function (keyboardInput, mouseInput, previousKeyboardInput, previousMouseInput, displayProcessing, soundOutput, musicProcessing) {
                if (!this.updatedSession) {
                    this.updatedSession = true;
                    this.sessionState.WinGame();
                    this.globalState.SaveData(this.sessionState, soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$GetSoundVolume());
                }

                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Z) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Z) || keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Enter) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Enter) || keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Space) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Space) || keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Esc) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Esc)) {
                    soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$PlaySound(TuxPlanetSpeedrunAnyPercentLibrary.GameSound.Click);
                    return new TuxPlanetSpeedrunAnyPercentLibrary.TitleScreenFrame(this.globalState, this.sessionState);
                }

                return this;
            },
            ProcessMusic: function () {
                this.globalState.ProcessMusic();
            },
            Render: function (displayOutput) {
                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle(0, 0, this.globalState.WindowWidth, this.globalState.WindowHeight, new DTLibrary.DTColor.ctor(223, 220, 217), true);

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText(((((Bridge.Int.div(this.globalState.WindowWidth, 2)) | 0) - 78) | 0), 650, "Victory", TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont32Pt, DTLibrary.DTColor.Black());

                var elapsedTimeString = TuxPlanetSpeedrunAnyPercentLibrary.ElapsedTimeUtil.GetElapsedTimeString(this.sessionState.ElapsedMillis);

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText(((((Bridge.Int.div(this.globalState.WindowWidth, 2)) | 0) - 115) | 0), 450, "You win!\nFinal time: " + (elapsedTimeString || ""), TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont20Pt, DTLibrary.DTColor.Black());

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText(((((Bridge.Int.div(this.globalState.WindowWidth, 2)) | 0) - 131) | 0), 225, "Back to title screen", TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont20Pt, DTLibrary.DTColor.Black());
            },
            RenderMusic: function (musicOutput) {
                this.globalState.RenderMusic(musicOutput);
            }
        }
    });
});
