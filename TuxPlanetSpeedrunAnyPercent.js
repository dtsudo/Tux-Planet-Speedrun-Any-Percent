/**
 * @version 1.0.0.0
 * @compiler Bridge.NET 17.6.0
 */
Bridge.assembly("TuxPlanetSpeedrunAnyPercent", function ($asm, globals) {
    "use strict";

    Bridge.define("DTLibrary.ByteList", {
        inherits: function () { return [System.IEquatable$1(DTLibrary.ByteList)]; },
        fields: {
            list: null
        },
        alias: ["equalsT", "System$IEquatable$1$DTLibrary$ByteList$equalsT"],
        ctors: {
            ctor: function (list) {
                var $t;
                this.$initialize();
                this.list = new (System.Collections.Generic.List$1(System.Byte)).ctor();
                $t = Bridge.getEnumerator(list);
                try {
                    while ($t.moveNext()) {
                        var b = $t.Current;
                        this.list.add(b);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            }
        },
        methods: {
            GetByte: function (index) {
                return this.list.getItem(index);
            },
            GetCount: function () {
                return this.list.Count;
            },
            GetIterator: function () {
                return new DTLibrary.ByteList.Iterator(this);
            },
            equals: function (obj) {
                return this.equalsT(Bridge.as(obj, DTLibrary.ByteList));
            },
            equalsT: function (other) {
                if (other == null) {
                    return false;
                }

                if (Bridge.referenceEquals(this, other)) {
                    return true;
                }

                if (other.list.Count !== this.list.Count) {
                    return false;
                }

                for (var i = 0; i < this.list.Count; i = (i + 1) | 0) {
                    var b1 = this.list.getItem(i);
                    var b2 = other.list.getItem(i);
                    if (b1 !== b2) {
                        return false;
                    }
                }

                return true;
            },
            getHashCode: function () {
                var hashCode = 0;
                for (var i = 0; i < this.list.Count; i = (i + 1) | 0) {
                    var b = this.list.getItem(i);
                    var bAsInt = b;

                    hashCode = ((Bridge.Int.mul(hashCode, 17) + bAsInt) | 0);
                }

                return hashCode;
            }
        }
    });

    Bridge.define("DTLibrary.ByteList.Builder", {
        $kind: "nested class",
        fields: {
            list: null
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                this.list = new (System.Collections.Generic.List$1(System.Byte)).ctor();
            }
        },
        methods: {
            ToByteList: function () {
                return new DTLibrary.ByteList(this.list);
            },
            Add: function (b) {
                this.list.add(b);
            },
            AddBool: function (b) {
                if (b) {
                    this.list.add(1);
                } else {
                    this.list.add(0);
                }
            },
            AddNullableBool: function (b) {
                if (b == null) {
                    this.AddBool(false);
                } else {
                    this.AddBool(true);
                    this.AddBool(System.Nullable.getValue(b));
                }
            },
            AddInt: function (i) {
                var b1 = i & 255;
                var b2 = (i >> 8) & 255;
                var b3 = (i >> 16) & 255;
                var b4 = (i >> 24) & 255;

                this.list.add((b1 & 255));
                this.list.add((b2 & 255));
                this.list.add((b3 & 255));
                this.list.add((b4 & 255));
            },
            AddLong: function (l) {
                var b1 = l.and(System.Int64(255));
                var b2 = (l.shr(8)).and(System.Int64(255));
                var b3 = (l.shr(16)).and(System.Int64(255));
                var b4 = (l.shr(24)).and(System.Int64(255));
                var b5 = (l.shr(32)).and(System.Int64(255));
                var b6 = (l.shr(40)).and(System.Int64(255));
                var b7 = (l.shr(48)).and(System.Int64(255));
                var b8 = (l.shr(56)).and(System.Int64(255));

                this.list.add(System.Int64.clipu8(b1));
                this.list.add(System.Int64.clipu8(b2));
                this.list.add(System.Int64.clipu8(b3));
                this.list.add(System.Int64.clipu8(b4));
                this.list.add(System.Int64.clipu8(b5));
                this.list.add(System.Int64.clipu8(b6));
                this.list.add(System.Int64.clipu8(b7));
                this.list.add(System.Int64.clipu8(b8));
            },
            AddNullableInt: function (i) {
                if (i == null) {
                    this.AddBool(false);
                } else {
                    this.AddBool(true);
                    this.AddInt(System.Nullable.getValue(i));
                }
            },
            AddNullableLong: function (l) {
                if (System.Nullable.lifteq("equals", l, System.Int64.lift(null))) {
                    this.AddBool(false);
                } else {
                    this.AddBool(true);
                    this.AddLong(System.Nullable.getValue(l));
                }
            },
            AddIntList: function (list) {
                var $t;
                if (list == null) {
                    this.AddBool(false);
                    return;
                }

                this.AddBool(true);

                this.AddInt(list.Count);

                $t = Bridge.getEnumerator(list);
                try {
                    while ($t.moveNext()) {
                        var i = $t.Current;
                        this.AddInt(i);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            },
            AddIntSet: function (set) {
                if (set == null) {
                    this.AddBool(false);
                    return;
                }

                this.AddBool(true);

                var list = new (System.Collections.Generic.List$1(System.Int32)).$ctor1(set);
                list.Sort();
                this.AddIntList(list);
            },
            AddString: function (str) {
                var $t;
                if (str == null) {
                    this.AddBool(false);
                    return;
                }

                this.AddBool(true);

                this.AddInt(str.length);

                $t = Bridge.getEnumerator(str);
                try {
                    while ($t.moveNext()) {
                        var c = $t.Current;
                        var cAsInt = c;
                        this.AddInt(cAsInt);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            }
        }
    });

    Bridge.define("DTLibrary.ByteList.Iterator", {
        $kind: "nested class",
        fields: {
            byteList: null,
            index: 0
        },
        ctors: {
            ctor: function (byteList) {
                this.$initialize();
                this.byteList = byteList;
                this.index = 0;
            }
        },
        methods: {
            HasNextByte: function () {
                return this.index < this.byteList.GetCount();
            },
            /**
             * Can possibly throw DTDeserializationException
             *
             * @instance
             * @public
             * @this DTLibrary.ByteList.Iterator
             * @memberof DTLibrary.ByteList.Iterator
             * @return  {number}
             */
            TryPop: function () {
                if (this.index >= this.byteList.GetCount()) {
                    throw new DTLibrary.DTDeserializationException();
                }

                var b = this.byteList.GetByte(this.index);

                this.index = (this.index + 1) | 0;

                return b;
            },
            /**
             * Can possibly throw DTDeserializationException
             *
             * @instance
             * @public
             * @this DTLibrary.ByteList.Iterator
             * @memberof DTLibrary.ByteList.Iterator
             * @return  {boolean}
             */
            TryPopBool: function () {
                if (this.index >= this.byteList.GetCount()) {
                    throw new DTLibrary.DTDeserializationException();
                }

                var b = this.byteList.GetByte(this.index);

                this.index = (this.index + 1) | 0;

                if (b === 1) {
                    return true;
                }
                if (b === 0) {
                    return false;
                }

                throw new DTLibrary.DTDeserializationException();
            },
            /**
             * Can possibly throw DTDeserializationException
             *
             * @instance
             * @public
             * @this DTLibrary.ByteList.Iterator
             * @memberof DTLibrary.ByteList.Iterator
             * @return  {?boolean}
             */
            TryPopNullableBool: function () {
                var b = this.TryPopBool();

                if (!b) {
                    return null;
                }

                return this.TryPopBool();
            },
            /**
             * Can possibly throw DTDeserializationException
             *
             * @instance
             * @public
             * @this DTLibrary.ByteList.Iterator
             * @memberof DTLibrary.ByteList.Iterator
             * @return  {number}
             */
            TryPopInt: function () {
                if (((this.index + 3) | 0) >= this.byteList.GetCount()) {
                    throw new DTLibrary.DTDeserializationException();
                }

                var b1 = this.byteList.GetByte(this.index);
                var b2 = this.byteList.GetByte(((this.index + 1) | 0));
                var b3 = this.byteList.GetByte(((this.index + 2) | 0));
                var b4 = this.byteList.GetByte(((this.index + 3) | 0));

                this.index = (this.index + 4) | 0;

                var i1 = b1;
                var i2 = b2 << 8;
                var i3 = b3 << 16;
                var i4 = b4 << 24;

                return i1 | i2 | i3 | i4;
            },
            /**
             * Can possibly throw DTDeserializationException
             *
             * @instance
             * @public
             * @this DTLibrary.ByteList.Iterator
             * @memberof DTLibrary.ByteList.Iterator
             * @return  {System.Int64}
             */
            TryPopLong: function () {
                if (((this.index + 7) | 0) >= this.byteList.GetCount()) {
                    throw new DTLibrary.DTDeserializationException();
                }

                var b1 = System.Int64(this.byteList.GetByte(this.index));
                var b2 = System.Int64(this.byteList.GetByte(((this.index + 1) | 0)));
                var b3 = System.Int64(this.byteList.GetByte(((this.index + 2) | 0)));
                var b4 = System.Int64(this.byteList.GetByte(((this.index + 3) | 0)));
                var b5 = System.Int64(this.byteList.GetByte(((this.index + 4) | 0)));
                var b6 = System.Int64(this.byteList.GetByte(((this.index + 5) | 0)));
                var b7 = System.Int64(this.byteList.GetByte(((this.index + 6) | 0)));
                var b8 = System.Int64(this.byteList.GetByte(((this.index + 7) | 0)));

                this.index = (this.index + 8) | 0;

                var l1 = b1;
                var l2 = b2.shl(8);
                var l3 = b3.shl(16);
                var l4 = b4.shl(24);
                var l5 = b5.shl(32);
                var l6 = b6.shl(40);
                var l7 = b7.shl(48);
                var l8 = b8.shl(56);

                return l1.or(l2).or(l3).or(l4).or(l5).or(l6).or(l7).or(l8);
            },
            /**
             * Can possibly throw DTDeserializationException
             *
             * @instance
             * @public
             * @this DTLibrary.ByteList.Iterator
             * @memberof DTLibrary.ByteList.Iterator
             * @return  {?number}
             */
            TryPopNullableInt: function () {
                var b = this.TryPopBool();

                if (!b) {
                    return null;
                }

                return this.TryPopInt();
            },
            /**
             * Can possibly throw DTDeserializationException
             *
             * @instance
             * @public
             * @this DTLibrary.ByteList.Iterator
             * @memberof DTLibrary.ByteList.Iterator
             * @return  {?System.Int64}
             */
            TryPopNullableLong: function () {
                var b = this.TryPopBool();

                if (!b) {
                    return System.Int64.lift(null);
                }

                return this.TryPopLong();
            },
            /**
             * Can possibly throw DTDeserializationException
             *
             * @instance
             * @public
             * @this DTLibrary.ByteList.Iterator
             * @memberof DTLibrary.ByteList.Iterator
             * @return  {System.Collections.Generic.List$1}
             */
            TryPopIntList: function () {
                var b = this.TryPopBool();

                if (!b) {
                    return null;
                }

                var count = this.TryPopInt();

                var list = new (System.Collections.Generic.List$1(System.Int32)).ctor();

                for (var i = 0; i < count; i = (i + 1) | 0) {
                    list.add(this.TryPopInt());
                }

                return list;
            },
            /**
             * Can possibly throw DTDeserializationException
             *
             * @instance
             * @public
             * @this DTLibrary.ByteList.Iterator
             * @memberof DTLibrary.ByteList.Iterator
             * @return  {System.Collections.Generic.HashSet$1}
             */
            TryPopIntSet: function () {
                var b = this.TryPopBool();

                if (!b) {
                    return null;
                }

                var list = this.TryPopIntList();

                if (list == null) {
                    throw new DTLibrary.DTDeserializationException();
                }

                return new (System.Collections.Generic.HashSet$1(System.Int32)).$ctor1(list);
            },
            /**
             * Can possibly throw DTDeserializationException
             *
             * @instance
             * @public
             * @this DTLibrary.ByteList.Iterator
             * @memberof DTLibrary.ByteList.Iterator
             * @return  {string}
             */
            TryPopString: function () {
                var b = this.TryPopBool();

                if (!b) {
                    return null;
                }

                var count = this.TryPopInt();

                var array = System.Array.init(count, 0, System.Char);

                for (var i = 0; i < count; i = (i + 1) | 0) {
                    var cAsInt = this.TryPopInt();
                    array[System.Array.index(i, array)] = cAsInt & 65535;
                }

                return System.String.fromCharArray(array);
            }
        }
    });

    Bridge.define("DTLibrary.IDTLogger", {
        $kind: "interface"
    });

    Bridge.define("DTLibrary.IKeyboard", {
        $kind: "interface"
    });

    Bridge.define("DTLibrary.IMouse", {
        $kind: "interface"
    });

    Bridge.define("DTLibrary.DisplayExtensions", {
        statics: {
            methods: {
                DrawThickRectangle: function (ImageEnum, FontEnum, displayOutput, x, y, width, height, additionalThickness, color, fill) {
                    displayOutput["DTLibrary$IDisplayOutput$2$" + Bridge.getTypeAlias(ImageEnum) + "$" + Bridge.getTypeAlias(FontEnum) + "$DrawRectangle"](((x - additionalThickness) | 0), ((y - additionalThickness) | 0), ((width + Bridge.Int.mul(additionalThickness, 2)) | 0), ((1 + Bridge.Int.mul(additionalThickness, 2)) | 0), color, true);
                    displayOutput["DTLibrary$IDisplayOutput$2$" + Bridge.getTypeAlias(ImageEnum) + "$" + Bridge.getTypeAlias(FontEnum) + "$DrawRectangle"](((x - additionalThickness) | 0), ((((((height - 1) | 0) + y) | 0) - additionalThickness) | 0), ((width + Bridge.Int.mul(additionalThickness, 2)) | 0), ((1 + Bridge.Int.mul(additionalThickness, 2)) | 0), color, true);
                    displayOutput["DTLibrary$IDisplayOutput$2$" + Bridge.getTypeAlias(ImageEnum) + "$" + Bridge.getTypeAlias(FontEnum) + "$DrawRectangle"](((x - additionalThickness) | 0), ((y - additionalThickness) | 0), ((1 + Bridge.Int.mul(additionalThickness, 2)) | 0), ((height + Bridge.Int.mul(additionalThickness, 2)) | 0), color, true);
                    displayOutput["DTLibrary$IDisplayOutput$2$" + Bridge.getTypeAlias(ImageEnum) + "$" + Bridge.getTypeAlias(FontEnum) + "$DrawRectangle"](((((((width - 1) | 0) + x) | 0) - additionalThickness) | 0), ((y - additionalThickness) | 0), ((1 + Bridge.Int.mul(additionalThickness, 2)) | 0), ((height + Bridge.Int.mul(additionalThickness, 2)) | 0), color, true);

                    if (fill) {
                        displayOutput["DTLibrary$IDisplayOutput$2$" + Bridge.getTypeAlias(ImageEnum) + "$" + Bridge.getTypeAlias(FontEnum) + "$DrawRectangle"](x, y, width, height, color, true);
                    }
                }
            }
        }
    });

    /** @namespace DTLibrary */

    /**
     * Represents a color, containing the standard r, g, b, and alpha values.
     *
     * @public
     * @class DTLibrary.DTColor
     */
    Bridge.define("DTLibrary.DTColor", {
        statics: {
            methods: {
                White: function () {
                    return new DTLibrary.DTColor.ctor(255, 255, 255);
                },
                Black: function () {
                    return new DTLibrary.DTColor.ctor(0, 0, 0);
                }
            }
        },
        fields: {
            r: 0,
            g: 0,
            b: 0,
            alpha: 0
        },
        props: {
            R: {
                get: function () {
                    return this.r;
                }
            },
            G: {
                get: function () {
                    return this.g;
                }
            },
            B: {
                get: function () {
                    return this.b;
                }
            },
            Alpha: {
                get: function () {
                    return this.alpha;
                }
            }
        },
        ctors: {
            ctor: function (r, g, b) {
                this.$initialize();
                this.r = r;
                this.g = g;
                this.b = b;
                this.alpha = 255;
            },
            $ctor1: function (r, g, b, alpha) {
                this.$initialize();
                this.r = r;
                this.g = g;
                this.b = b;
                this.alpha = alpha;
            }
        }
    });

    Bridge.define("DTLibrary.DTDeserializationException", {
        inherits: [System.Exception]
    });

    /**
     * An interface representing a (pseudo) random number generator.
     *
     * @abstract
     * @public
     * @class DTLibrary.IDTRandom
     */
    Bridge.define("DTLibrary.IDTRandom", {
        $kind: "interface"
    });

    Bridge.define("DTLibrary.IDisplayCleanup", {
        $kind: "interface"
    });

    Bridge.definei("DTLibrary.IDisplayOutput$2", function (ImageEnum, FontEnum) { return {
        $kind: "interface"
    }; });

    Bridge.definei("DTLibrary.IDisplayProcessing$1", function (ImageEnum) { return {
        $kind: "interface"
    }; });

    Bridge.define("DTLibrary.DTImmutableList$1", function (T) { return {
        statics: {
            methods: {
                AsImmutableList: function (l) {
                    var immutableList = new (DTLibrary.DTImmutableList$1(T)).ctor();
                    immutableList.list = l;
                    immutableList.count = l.Count;
                    return immutableList;
                },
                EmptyList: function () {
                    return new (DTLibrary.DTImmutableList$1(T)).$ctor2(new (System.Collections.Generic.List$1(T)).ctor());
                }
            }
        },
        fields: {
            list: null,
            count: 0
        },
        props: {
            Count: {
                get: function () {
                    return this.count;
                }
            }
        },
        ctors: {
            ctor: function () {
                this.$initialize();
            },
            $ctor1: function (set) {
                var $t;
                this.$initialize();
                this.list = new (System.Collections.Generic.List$1(T)).$ctor2(set.Count);
                $t = Bridge.getEnumerator(set);
                try {
                    while ($t.moveNext()) {
                        var item = $t.Current;
                        this.list.add(item);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                this.count = set.Count;
            },
            $ctor2: function (list) {
                var $t;
                this.$initialize();
                this.list = new (System.Collections.Generic.List$1(T)).$ctor2(list.Count);
                $t = Bridge.getEnumerator(list);
                try {
                    while ($t.moveNext()) {
                        var item = $t.Current;
                        this.list.add(item);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
                this.count = list.Count;
            }
        },
        methods: {
            getItem: function (index) {
                return this.list.getItem(index);
            }
        }
    }; });

    Bridge.define("DTLibrary.DTMath", {
        statics: {
            fields: {
                _sineArray: null,
                _arctanArray: null
            },
            ctors: {
                init: function () {
                    this._sineArray = System.Array.init([
                        0, 
                        1, 
                        1, 
                        2, 
                        2, 
                        3, 
                        3, 
                        4, 
                        4, 
                        5, 
                        6, 
                        6, 
                        7, 
                        7, 
                        8, 
                        8, 
                        9, 
                        9, 
                        10, 
                        11, 
                        11, 
                        12, 
                        12, 
                        13, 
                        13, 
                        14, 
                        15, 
                        15, 
                        16, 
                        16, 
                        17, 
                        17, 
                        18, 
                        18, 
                        19, 
                        20, 
                        20, 
                        21, 
                        21, 
                        22, 
                        22, 
                        23, 
                        23, 
                        24, 
                        25, 
                        25, 
                        26, 
                        26, 
                        27, 
                        27, 
                        28, 
                        28, 
                        29, 
                        30, 
                        30, 
                        31, 
                        31, 
                        32, 
                        32, 
                        33, 
                        34, 
                        34, 
                        35, 
                        35, 
                        36, 
                        36, 
                        37, 
                        37, 
                        38, 
                        39, 
                        39, 
                        40, 
                        40, 
                        41, 
                        41, 
                        42, 
                        42, 
                        43, 
                        44, 
                        44, 
                        45, 
                        45, 
                        46, 
                        46, 
                        47, 
                        47, 
                        48, 
                        49, 
                        49, 
                        50, 
                        50, 
                        51, 
                        51, 
                        52, 
                        52, 
                        53, 
                        54, 
                        54, 
                        55, 
                        55, 
                        56, 
                        56, 
                        57, 
                        57, 
                        58, 
                        59, 
                        59, 
                        60, 
                        60, 
                        61, 
                        61, 
                        62, 
                        63, 
                        63, 
                        64, 
                        64, 
                        65, 
                        65, 
                        66, 
                        66, 
                        67, 
                        68, 
                        68, 
                        69, 
                        69, 
                        70, 
                        70, 
                        71, 
                        71, 
                        72, 
                        73, 
                        73, 
                        74, 
                        74, 
                        75, 
                        75, 
                        76, 
                        76, 
                        77, 
                        78, 
                        78, 
                        79, 
                        79, 
                        80, 
                        80, 
                        81, 
                        81, 
                        82, 
                        83, 
                        83, 
                        84, 
                        84, 
                        85, 
                        85, 
                        86, 
                        86, 
                        87, 
                        88, 
                        88, 
                        89, 
                        89, 
                        90, 
                        90, 
                        91, 
                        91, 
                        92, 
                        93, 
                        93, 
                        94, 
                        94, 
                        95, 
                        95, 
                        96, 
                        96, 
                        97, 
                        98, 
                        98, 
                        99, 
                        99, 
                        100, 
                        100, 
                        101, 
                        101, 
                        102, 
                        103, 
                        103, 
                        104, 
                        104, 
                        105, 
                        105, 
                        106, 
                        106, 
                        107, 
                        108, 
                        108, 
                        109, 
                        109, 
                        110, 
                        110, 
                        111, 
                        111, 
                        112, 
                        113, 
                        113, 
                        114, 
                        114, 
                        115, 
                        115, 
                        116, 
                        116, 
                        117, 
                        118, 
                        118, 
                        119, 
                        119, 
                        120, 
                        120, 
                        121, 
                        121, 
                        122, 
                        123, 
                        123, 
                        124, 
                        124, 
                        125, 
                        125, 
                        126, 
                        126, 
                        127, 
                        128, 
                        128, 
                        129, 
                        129, 
                        130, 
                        130, 
                        131, 
                        131, 
                        132, 
                        133, 
                        133, 
                        134, 
                        134, 
                        135, 
                        135, 
                        136, 
                        136, 
                        137, 
                        138, 
                        138, 
                        139, 
                        139, 
                        140, 
                        140, 
                        141, 
                        141, 
                        142, 
                        143, 
                        143, 
                        144, 
                        144, 
                        145, 
                        145, 
                        146, 
                        146, 
                        147, 
                        147, 
                        148, 
                        149, 
                        149, 
                        150, 
                        150, 
                        151, 
                        151, 
                        152, 
                        152, 
                        153, 
                        154, 
                        154, 
                        155, 
                        155, 
                        156, 
                        156, 
                        157, 
                        157, 
                        158, 
                        159, 
                        159, 
                        160, 
                        160, 
                        161, 
                        161, 
                        162, 
                        162, 
                        163, 
                        163, 
                        164, 
                        165, 
                        165, 
                        166, 
                        166, 
                        167, 
                        167, 
                        168, 
                        168, 
                        169, 
                        170, 
                        170, 
                        171, 
                        171, 
                        172, 
                        172, 
                        173, 
                        173, 
                        174, 
                        175, 
                        175, 
                        176, 
                        176, 
                        177, 
                        177, 
                        178, 
                        178, 
                        179, 
                        179, 
                        180, 
                        181, 
                        181, 
                        182, 
                        182, 
                        183, 
                        183, 
                        184, 
                        184, 
                        185, 
                        186, 
                        186, 
                        187, 
                        187, 
                        188, 
                        188, 
                        189, 
                        189, 
                        190, 
                        190, 
                        191, 
                        192, 
                        192, 
                        193, 
                        193, 
                        194, 
                        194, 
                        195, 
                        195, 
                        196, 
                        196, 
                        197, 
                        198, 
                        198, 
                        199, 
                        199, 
                        200, 
                        200, 
                        201, 
                        201, 
                        202, 
                        203, 
                        203, 
                        204, 
                        204, 
                        205, 
                        205, 
                        206, 
                        206, 
                        207, 
                        207, 
                        208, 
                        209, 
                        209, 
                        210, 
                        210, 
                        211, 
                        211, 
                        212, 
                        212, 
                        213, 
                        213, 
                        214, 
                        215, 
                        215, 
                        216, 
                        216, 
                        217, 
                        217, 
                        218, 
                        218, 
                        219, 
                        219, 
                        220, 
                        221, 
                        221, 
                        222, 
                        222, 
                        223, 
                        223, 
                        224, 
                        224, 
                        225, 
                        225, 
                        226, 
                        227, 
                        227, 
                        228, 
                        228, 
                        229, 
                        229, 
                        230, 
                        230, 
                        231, 
                        231, 
                        232, 
                        233, 
                        233, 
                        234, 
                        234, 
                        235, 
                        235, 
                        236, 
                        236, 
                        237, 
                        237, 
                        238, 
                        239, 
                        239, 
                        240, 
                        240, 
                        241, 
                        241, 
                        242, 
                        242, 
                        243, 
                        243, 
                        244, 
                        244, 
                        245, 
                        246, 
                        246, 
                        247, 
                        247, 
                        248, 
                        248, 
                        249, 
                        249, 
                        250, 
                        250, 
                        251, 
                        252, 
                        252, 
                        253, 
                        253, 
                        254, 
                        254, 
                        255, 
                        255, 
                        256, 
                        256, 
                        257, 
                        257, 
                        258, 
                        259, 
                        259, 
                        260, 
                        260, 
                        261, 
                        261, 
                        262, 
                        262, 
                        263, 
                        263, 
                        264, 
                        264, 
                        265, 
                        266, 
                        266, 
                        267, 
                        267, 
                        268, 
                        268, 
                        269, 
                        269, 
                        270, 
                        270, 
                        271, 
                        271, 
                        272, 
                        273, 
                        273, 
                        274, 
                        274, 
                        275, 
                        275, 
                        276, 
                        276, 
                        277, 
                        277, 
                        278, 
                        278, 
                        279, 
                        280, 
                        280, 
                        281, 
                        281, 
                        282, 
                        282, 
                        283, 
                        283, 
                        284, 
                        284, 
                        285, 
                        285, 
                        286, 
                        287, 
                        287, 
                        288, 
                        288, 
                        289, 
                        289, 
                        290, 
                        290, 
                        291, 
                        291, 
                        292, 
                        292, 
                        293, 
                        294, 
                        294, 
                        295, 
                        295, 
                        296, 
                        296, 
                        297, 
                        297, 
                        298, 
                        298, 
                        299, 
                        299, 
                        300, 
                        300, 
                        301, 
                        302, 
                        302, 
                        303, 
                        303, 
                        304, 
                        304, 
                        305, 
                        305, 
                        306, 
                        306, 
                        307, 
                        307, 
                        308, 
                        308, 
                        309, 
                        310, 
                        310, 
                        311, 
                        311, 
                        312, 
                        312, 
                        313, 
                        313, 
                        314, 
                        314, 
                        315, 
                        315, 
                        316, 
                        316, 
                        317, 
                        317, 
                        318, 
                        319, 
                        319, 
                        320, 
                        320, 
                        321, 
                        321, 
                        322, 
                        322, 
                        323, 
                        323, 
                        324, 
                        324, 
                        325, 
                        325, 
                        326, 
                        327, 
                        327, 
                        328, 
                        328, 
                        329, 
                        329, 
                        330, 
                        330, 
                        331, 
                        331, 
                        332, 
                        332, 
                        333, 
                        333, 
                        334, 
                        334, 
                        335, 
                        335, 
                        336, 
                        337, 
                        337, 
                        338, 
                        338, 
                        339, 
                        339, 
                        340, 
                        340, 
                        341, 
                        341, 
                        342, 
                        342, 
                        343, 
                        343, 
                        344, 
                        344, 
                        345, 
                        346, 
                        346, 
                        347, 
                        347, 
                        348, 
                        348, 
                        349, 
                        349, 
                        350, 
                        350, 
                        351, 
                        351, 
                        352, 
                        352, 
                        353, 
                        353, 
                        354, 
                        354, 
                        355, 
                        355, 
                        356, 
                        357, 
                        357, 
                        358, 
                        358, 
                        359, 
                        359, 
                        360, 
                        360, 
                        361, 
                        361, 
                        362, 
                        362, 
                        363, 
                        363, 
                        364, 
                        364, 
                        365, 
                        365, 
                        366, 
                        366, 
                        367, 
                        367, 
                        368, 
                        369, 
                        369, 
                        370, 
                        370, 
                        371, 
                        371, 
                        372, 
                        372, 
                        373, 
                        373, 
                        374, 
                        374, 
                        375, 
                        375, 
                        376, 
                        376, 
                        377, 
                        377, 
                        378, 
                        378, 
                        379, 
                        379, 
                        380, 
                        380, 
                        381, 
                        382, 
                        382, 
                        383, 
                        383, 
                        384, 
                        384, 
                        385, 
                        385, 
                        386, 
                        386, 
                        387, 
                        387, 
                        388, 
                        388, 
                        389, 
                        389, 
                        390, 
                        390, 
                        391, 
                        391, 
                        392, 
                        392, 
                        393, 
                        393, 
                        394, 
                        394, 
                        395, 
                        395, 
                        396, 
                        397, 
                        397, 
                        398, 
                        398, 
                        399, 
                        399, 
                        400, 
                        400, 
                        401, 
                        401, 
                        402, 
                        402, 
                        403, 
                        403, 
                        404, 
                        404, 
                        405, 
                        405, 
                        406, 
                        406, 
                        407, 
                        407, 
                        408, 
                        408, 
                        409, 
                        409, 
                        410, 
                        410, 
                        411, 
                        411, 
                        412, 
                        412, 
                        413, 
                        413, 
                        414, 
                        414, 
                        415, 
                        415, 
                        416, 
                        416, 
                        417, 
                        418, 
                        418, 
                        419, 
                        419, 
                        420, 
                        420, 
                        421, 
                        421, 
                        422, 
                        422, 
                        423, 
                        423, 
                        424, 
                        424, 
                        425, 
                        425, 
                        426, 
                        426, 
                        427, 
                        427, 
                        428, 
                        428, 
                        429, 
                        429, 
                        430, 
                        430, 
                        431, 
                        431, 
                        432, 
                        432, 
                        433, 
                        433, 
                        434, 
                        434, 
                        435, 
                        435, 
                        436, 
                        436, 
                        437, 
                        437, 
                        438, 
                        438, 
                        439, 
                        439, 
                        440, 
                        440, 
                        441, 
                        441, 
                        442, 
                        442, 
                        443, 
                        443, 
                        444, 
                        444, 
                        445, 
                        445, 
                        446, 
                        446, 
                        447, 
                        447, 
                        448, 
                        448, 
                        449, 
                        449, 
                        450, 
                        450, 
                        451, 
                        451, 
                        452, 
                        452, 
                        453, 
                        453, 
                        454, 
                        454, 
                        455, 
                        455, 
                        456, 
                        456, 
                        457, 
                        457, 
                        458, 
                        458, 
                        459, 
                        459, 
                        460, 
                        460, 
                        461, 
                        461, 
                        462, 
                        462, 
                        463, 
                        463, 
                        464, 
                        464, 
                        465, 
                        465, 
                        466, 
                        466, 
                        467, 
                        467, 
                        468, 
                        468, 
                        469, 
                        469, 
                        470, 
                        470, 
                        471, 
                        471, 
                        472, 
                        472, 
                        473, 
                        473, 
                        474, 
                        474, 
                        475, 
                        475, 
                        476, 
                        476, 
                        477, 
                        477, 
                        478, 
                        478, 
                        479, 
                        479, 
                        480, 
                        480, 
                        481, 
                        481, 
                        482, 
                        482, 
                        483, 
                        483, 
                        484, 
                        484, 
                        485, 
                        485, 
                        486, 
                        486, 
                        487, 
                        487, 
                        488, 
                        488, 
                        489, 
                        489, 
                        490, 
                        490, 
                        491, 
                        491, 
                        492, 
                        492, 
                        493, 
                        493, 
                        494, 
                        494, 
                        494, 
                        495, 
                        495, 
                        496, 
                        496, 
                        497, 
                        497, 
                        498, 
                        498, 
                        499, 
                        499, 
                        500, 
                        500, 
                        501, 
                        501, 
                        502, 
                        502, 
                        503, 
                        503, 
                        504, 
                        504, 
                        505, 
                        505, 
                        506, 
                        506, 
                        507, 
                        507, 
                        508, 
                        508, 
                        509, 
                        509, 
                        510, 
                        510, 
                        511, 
                        511, 
                        512, 
                        512, 
                        512, 
                        513, 
                        513, 
                        514, 
                        514, 
                        515, 
                        515, 
                        516, 
                        516, 
                        517, 
                        517, 
                        518, 
                        518, 
                        519, 
                        519, 
                        520, 
                        520, 
                        521, 
                        521, 
                        522, 
                        522, 
                        523, 
                        523, 
                        524, 
                        524, 
                        525, 
                        525, 
                        525, 
                        526, 
                        526, 
                        527, 
                        527, 
                        528, 
                        528, 
                        529, 
                        529, 
                        530, 
                        530, 
                        531, 
                        531, 
                        532, 
                        532, 
                        533, 
                        533, 
                        534, 
                        534, 
                        535, 
                        535, 
                        536, 
                        536, 
                        536, 
                        537, 
                        537, 
                        538, 
                        538, 
                        539, 
                        539, 
                        540, 
                        540, 
                        541, 
                        541, 
                        542, 
                        542, 
                        543, 
                        543, 
                        544, 
                        544, 
                        545, 
                        545, 
                        545, 
                        546, 
                        546, 
                        547, 
                        547, 
                        548, 
                        548, 
                        549, 
                        549, 
                        550, 
                        550, 
                        551, 
                        551, 
                        552, 
                        552, 
                        553, 
                        553, 
                        553, 
                        554, 
                        554, 
                        555, 
                        555, 
                        556, 
                        556, 
                        557, 
                        557, 
                        558, 
                        558, 
                        559, 
                        559, 
                        560, 
                        560, 
                        561, 
                        561, 
                        561, 
                        562, 
                        562, 
                        563, 
                        563, 
                        564, 
                        564, 
                        565, 
                        565, 
                        566, 
                        566, 
                        567, 
                        567, 
                        568, 
                        568, 
                        568, 
                        569, 
                        569, 
                        570, 
                        570, 
                        571, 
                        571, 
                        572, 
                        572, 
                        573, 
                        573, 
                        574, 
                        574, 
                        574, 
                        575, 
                        575, 
                        576, 
                        576, 
                        577, 
                        577, 
                        578, 
                        578, 
                        579, 
                        579, 
                        580, 
                        580, 
                        580, 
                        581, 
                        581, 
                        582, 
                        582, 
                        583, 
                        583, 
                        584, 
                        584, 
                        585, 
                        585, 
                        586, 
                        586, 
                        586, 
                        587, 
                        587, 
                        588, 
                        588, 
                        589, 
                        589, 
                        590, 
                        590, 
                        591, 
                        591, 
                        591, 
                        592, 
                        592, 
                        593, 
                        593, 
                        594, 
                        594, 
                        595, 
                        595, 
                        596, 
                        596, 
                        596, 
                        597, 
                        597, 
                        598, 
                        598, 
                        599, 
                        599, 
                        600, 
                        600, 
                        601, 
                        601, 
                        601, 
                        602, 
                        602, 
                        603, 
                        603, 
                        604, 
                        604, 
                        605, 
                        605, 
                        606, 
                        606, 
                        606, 
                        607, 
                        607, 
                        608, 
                        608, 
                        609, 
                        609, 
                        610, 
                        610, 
                        610, 
                        611, 
                        611, 
                        612, 
                        612, 
                        613, 
                        613, 
                        614, 
                        614, 
                        614, 
                        615, 
                        615, 
                        616, 
                        616, 
                        617, 
                        617, 
                        618, 
                        618, 
                        618, 
                        619, 
                        619, 
                        620, 
                        620, 
                        621, 
                        621, 
                        622, 
                        622, 
                        622, 
                        623, 
                        623, 
                        624, 
                        624, 
                        625, 
                        625, 
                        626, 
                        626, 
                        626, 
                        627, 
                        627, 
                        628, 
                        628, 
                        629, 
                        629, 
                        630, 
                        630, 
                        630, 
                        631, 
                        631, 
                        632, 
                        632, 
                        633, 
                        633, 
                        634, 
                        634, 
                        634, 
                        635, 
                        635, 
                        636, 
                        636, 
                        637, 
                        637, 
                        637, 
                        638, 
                        638, 
                        639, 
                        639, 
                        640, 
                        640, 
                        641, 
                        641, 
                        641, 
                        642, 
                        642, 
                        643, 
                        643, 
                        644, 
                        644, 
                        644, 
                        645, 
                        645, 
                        646, 
                        646, 
                        647, 
                        647, 
                        647, 
                        648, 
                        648, 
                        649, 
                        649, 
                        650, 
                        650, 
                        650, 
                        651, 
                        651, 
                        652, 
                        652, 
                        653, 
                        653, 
                        653, 
                        654, 
                        654, 
                        655, 
                        655, 
                        656, 
                        656, 
                        657, 
                        657, 
                        657, 
                        658, 
                        658, 
                        659, 
                        659, 
                        659, 
                        660, 
                        660, 
                        661, 
                        661, 
                        662, 
                        662, 
                        662, 
                        663, 
                        663, 
                        664, 
                        664, 
                        665, 
                        665, 
                        665, 
                        666, 
                        666, 
                        667, 
                        667, 
                        668, 
                        668, 
                        668, 
                        669, 
                        669, 
                        670, 
                        670, 
                        671, 
                        671, 
                        671, 
                        672, 
                        672, 
                        673, 
                        673, 
                        673, 
                        674, 
                        674, 
                        675, 
                        675, 
                        676, 
                        676, 
                        676, 
                        677, 
                        677, 
                        678, 
                        678, 
                        679, 
                        679, 
                        679, 
                        680, 
                        680, 
                        681, 
                        681, 
                        681, 
                        682, 
                        682, 
                        683, 
                        683, 
                        684, 
                        684, 
                        684, 
                        685, 
                        685, 
                        686, 
                        686, 
                        686, 
                        687, 
                        687, 
                        688, 
                        688, 
                        689, 
                        689, 
                        689, 
                        690, 
                        690, 
                        691, 
                        691, 
                        691, 
                        692, 
                        692, 
                        693, 
                        693, 
                        693, 
                        694, 
                        694, 
                        695, 
                        695, 
                        696, 
                        696, 
                        696, 
                        697, 
                        697, 
                        698, 
                        698, 
                        698, 
                        699, 
                        699, 
                        700, 
                        700, 
                        700, 
                        701, 
                        701, 
                        702, 
                        702, 
                        702, 
                        703, 
                        703, 
                        704, 
                        704, 
                        704, 
                        705, 
                        705, 
                        706, 
                        706, 
                        706, 
                        707, 
                        707, 
                        708, 
                        708, 
                        709, 
                        709, 
                        709, 
                        710, 
                        710, 
                        711, 
                        711, 
                        711, 
                        712, 
                        712, 
                        713, 
                        713, 
                        713, 
                        714, 
                        714, 
                        715, 
                        715, 
                        715, 
                        716, 
                        716, 
                        717, 
                        717, 
                        717, 
                        718, 
                        718, 
                        719, 
                        719, 
                        719, 
                        720, 
                        720, 
                        721, 
                        721, 
                        721, 
                        722, 
                        722, 
                        722, 
                        723, 
                        723, 
                        724, 
                        724, 
                        724, 
                        725, 
                        725, 
                        726, 
                        726, 
                        726, 
                        727, 
                        727, 
                        728, 
                        728, 
                        728, 
                        729, 
                        729, 
                        730, 
                        730, 
                        730, 
                        731, 
                        731, 
                        732, 
                        732, 
                        732, 
                        733, 
                        733, 
                        733, 
                        734, 
                        734, 
                        735, 
                        735, 
                        735, 
                        736, 
                        736, 
                        737, 
                        737, 
                        737, 
                        738, 
                        738, 
                        739, 
                        739, 
                        739, 
                        740, 
                        740, 
                        740, 
                        741, 
                        741, 
                        742, 
                        742, 
                        742, 
                        743, 
                        743, 
                        744, 
                        744, 
                        744, 
                        745, 
                        745, 
                        745, 
                        746, 
                        746, 
                        747, 
                        747, 
                        747, 
                        748, 
                        748, 
                        749, 
                        749, 
                        749, 
                        750, 
                        750, 
                        750, 
                        751, 
                        751, 
                        752, 
                        752, 
                        752, 
                        753, 
                        753, 
                        753, 
                        754, 
                        754, 
                        755, 
                        755, 
                        755, 
                        756, 
                        756, 
                        756, 
                        757, 
                        757, 
                        758, 
                        758, 
                        758, 
                        759, 
                        759, 
                        759, 
                        760, 
                        760, 
                        761, 
                        761, 
                        761, 
                        762, 
                        762, 
                        762, 
                        763, 
                        763, 
                        764, 
                        764, 
                        764, 
                        765, 
                        765, 
                        765, 
                        766, 
                        766, 
                        767, 
                        767, 
                        767, 
                        768, 
                        768, 
                        768, 
                        769, 
                        769, 
                        770, 
                        770, 
                        770, 
                        771, 
                        771, 
                        771, 
                        772, 
                        772, 
                        772, 
                        773, 
                        773, 
                        774, 
                        774, 
                        774, 
                        775, 
                        775, 
                        775, 
                        776, 
                        776, 
                        776, 
                        777, 
                        777, 
                        778, 
                        778, 
                        778, 
                        779, 
                        779, 
                        779, 
                        780, 
                        780, 
                        780, 
                        781, 
                        781, 
                        782, 
                        782, 
                        782, 
                        783, 
                        783, 
                        783, 
                        784, 
                        784, 
                        784, 
                        785, 
                        785, 
                        786, 
                        786, 
                        786, 
                        787, 
                        787, 
                        787, 
                        788, 
                        788, 
                        788, 
                        789, 
                        789, 
                        789, 
                        790, 
                        790, 
                        790, 
                        791, 
                        791, 
                        792, 
                        792, 
                        792, 
                        793, 
                        793, 
                        793, 
                        794, 
                        794, 
                        794, 
                        795, 
                        795, 
                        795, 
                        796, 
                        796, 
                        796, 
                        797, 
                        797, 
                        798, 
                        798, 
                        798, 
                        799, 
                        799, 
                        799, 
                        800, 
                        800, 
                        800, 
                        801, 
                        801, 
                        801, 
                        802, 
                        802, 
                        802, 
                        803, 
                        803, 
                        803, 
                        804, 
                        804, 
                        805, 
                        805, 
                        805, 
                        806, 
                        806, 
                        806, 
                        807, 
                        807, 
                        807, 
                        808, 
                        808, 
                        808, 
                        809, 
                        809, 
                        809, 
                        810, 
                        810, 
                        810, 
                        811, 
                        811, 
                        811, 
                        812, 
                        812, 
                        812, 
                        813, 
                        813, 
                        813, 
                        814, 
                        814, 
                        814, 
                        815, 
                        815, 
                        815, 
                        816, 
                        816, 
                        816, 
                        817, 
                        817, 
                        817, 
                        818, 
                        818, 
                        818, 
                        819, 
                        819, 
                        819, 
                        820, 
                        820, 
                        820, 
                        821, 
                        821, 
                        821, 
                        822, 
                        822, 
                        822, 
                        823, 
                        823, 
                        823, 
                        824, 
                        824, 
                        824, 
                        825, 
                        825, 
                        825, 
                        826, 
                        826, 
                        826, 
                        827, 
                        827, 
                        827, 
                        828, 
                        828, 
                        828, 
                        829, 
                        829, 
                        829, 
                        830, 
                        830, 
                        830, 
                        831, 
                        831, 
                        831, 
                        832, 
                        832, 
                        832, 
                        833, 
                        833, 
                        833, 
                        834, 
                        834, 
                        834, 
                        835, 
                        835, 
                        835, 
                        836, 
                        836, 
                        836, 
                        837, 
                        837, 
                        837, 
                        838, 
                        838, 
                        838, 
                        838, 
                        839, 
                        839, 
                        839, 
                        840, 
                        840, 
                        840, 
                        841, 
                        841, 
                        841, 
                        842, 
                        842, 
                        842, 
                        843, 
                        843, 
                        843, 
                        844, 
                        844, 
                        844, 
                        845, 
                        845, 
                        845, 
                        845, 
                        846, 
                        846, 
                        846, 
                        847, 
                        847, 
                        847, 
                        848, 
                        848, 
                        848, 
                        849, 
                        849, 
                        849, 
                        850, 
                        850, 
                        850, 
                        850, 
                        851, 
                        851, 
                        851, 
                        852, 
                        852, 
                        852, 
                        853, 
                        853, 
                        853, 
                        854, 
                        854, 
                        854, 
                        855, 
                        855, 
                        855, 
                        855, 
                        856, 
                        856, 
                        856, 
                        857, 
                        857, 
                        857, 
                        858, 
                        858, 
                        858, 
                        858, 
                        859, 
                        859, 
                        859, 
                        860, 
                        860, 
                        860, 
                        861, 
                        861, 
                        861, 
                        862, 
                        862, 
                        862, 
                        862, 
                        863, 
                        863, 
                        863, 
                        864, 
                        864, 
                        864, 
                        865, 
                        865, 
                        865, 
                        865, 
                        866, 
                        866, 
                        866, 
                        867, 
                        867, 
                        867, 
                        868, 
                        868, 
                        868, 
                        868, 
                        869, 
                        869, 
                        869, 
                        870, 
                        870, 
                        870, 
                        870, 
                        871, 
                        871, 
                        871, 
                        872, 
                        872, 
                        872, 
                        873, 
                        873, 
                        873, 
                        873, 
                        874, 
                        874, 
                        874, 
                        875, 
                        875, 
                        875, 
                        875, 
                        876, 
                        876, 
                        876, 
                        877, 
                        877, 
                        877, 
                        877, 
                        878, 
                        878, 
                        878, 
                        879, 
                        879, 
                        879, 
                        879, 
                        880, 
                        880, 
                        880, 
                        881, 
                        881, 
                        881, 
                        881, 
                        882, 
                        882, 
                        882, 
                        883, 
                        883, 
                        883, 
                        883, 
                        884, 
                        884, 
                        884, 
                        885, 
                        885, 
                        885, 
                        885, 
                        886, 
                        886, 
                        886, 
                        887, 
                        887, 
                        887, 
                        887, 
                        888, 
                        888, 
                        888, 
                        888, 
                        889, 
                        889, 
                        889, 
                        890, 
                        890, 
                        890, 
                        890, 
                        891, 
                        891, 
                        891, 
                        892, 
                        892, 
                        892, 
                        892, 
                        893, 
                        893, 
                        893, 
                        893, 
                        894, 
                        894, 
                        894, 
                        895, 
                        895, 
                        895, 
                        895, 
                        896, 
                        896, 
                        896, 
                        896, 
                        897, 
                        897, 
                        897, 
                        897, 
                        898, 
                        898, 
                        898, 
                        899, 
                        899, 
                        899, 
                        899, 
                        900, 
                        900, 
                        900, 
                        900, 
                        901, 
                        901, 
                        901, 
                        902, 
                        902, 
                        902, 
                        902, 
                        903, 
                        903, 
                        903, 
                        903, 
                        904, 
                        904, 
                        904, 
                        904, 
                        905, 
                        905, 
                        905, 
                        905, 
                        906, 
                        906, 
                        906, 
                        906, 
                        907, 
                        907, 
                        907, 
                        908, 
                        908, 
                        908, 
                        908, 
                        909, 
                        909, 
                        909, 
                        909, 
                        910, 
                        910, 
                        910, 
                        910, 
                        911, 
                        911, 
                        911, 
                        911, 
                        912, 
                        912, 
                        912, 
                        912, 
                        913, 
                        913, 
                        913, 
                        913, 
                        914, 
                        914, 
                        914, 
                        914, 
                        915, 
                        915, 
                        915, 
                        915, 
                        916, 
                        916, 
                        916, 
                        916, 
                        917, 
                        917, 
                        917, 
                        917, 
                        918, 
                        918, 
                        918, 
                        918, 
                        919, 
                        919, 
                        919, 
                        919, 
                        920, 
                        920, 
                        920, 
                        920, 
                        921, 
                        921, 
                        921, 
                        921, 
                        922, 
                        922, 
                        922, 
                        922, 
                        923, 
                        923, 
                        923, 
                        923, 
                        924, 
                        924, 
                        924, 
                        924, 
                        924, 
                        925, 
                        925, 
                        925, 
                        925, 
                        926, 
                        926, 
                        926, 
                        926, 
                        927, 
                        927, 
                        927, 
                        927, 
                        928, 
                        928, 
                        928, 
                        928, 
                        929, 
                        929, 
                        929, 
                        929, 
                        929, 
                        930, 
                        930, 
                        930, 
                        930, 
                        931, 
                        931, 
                        931, 
                        931, 
                        932, 
                        932, 
                        932, 
                        932, 
                        932, 
                        933, 
                        933, 
                        933, 
                        933, 
                        934, 
                        934, 
                        934, 
                        934, 
                        935, 
                        935, 
                        935, 
                        935, 
                        935, 
                        936, 
                        936, 
                        936, 
                        936, 
                        937, 
                        937, 
                        937, 
                        937, 
                        938, 
                        938, 
                        938, 
                        938, 
                        938, 
                        939, 
                        939, 
                        939, 
                        939, 
                        940, 
                        940, 
                        940, 
                        940, 
                        940, 
                        941, 
                        941, 
                        941, 
                        941, 
                        942, 
                        942, 
                        942, 
                        942, 
                        942, 
                        943, 
                        943, 
                        943, 
                        943, 
                        943, 
                        944, 
                        944, 
                        944, 
                        944, 
                        945, 
                        945, 
                        945, 
                        945, 
                        945, 
                        946, 
                        946, 
                        946, 
                        946, 
                        946, 
                        947, 
                        947, 
                        947, 
                        947, 
                        948, 
                        948, 
                        948, 
                        948, 
                        948, 
                        949, 
                        949, 
                        949, 
                        949, 
                        949, 
                        950, 
                        950, 
                        950, 
                        950, 
                        950, 
                        951, 
                        951, 
                        951, 
                        951, 
                        952, 
                        952, 
                        952, 
                        952, 
                        952, 
                        953, 
                        953, 
                        953, 
                        953, 
                        953, 
                        954, 
                        954, 
                        954, 
                        954, 
                        954, 
                        955, 
                        955, 
                        955, 
                        955, 
                        955, 
                        956, 
                        956, 
                        956, 
                        956, 
                        956, 
                        957, 
                        957, 
                        957, 
                        957, 
                        957, 
                        958, 
                        958, 
                        958, 
                        958, 
                        958, 
                        959, 
                        959, 
                        959, 
                        959, 
                        959, 
                        960, 
                        960, 
                        960, 
                        960, 
                        960, 
                        961, 
                        961, 
                        961, 
                        961, 
                        961, 
                        961, 
                        962, 
                        962, 
                        962, 
                        962, 
                        962, 
                        963, 
                        963, 
                        963, 
                        963, 
                        963, 
                        964, 
                        964, 
                        964, 
                        964, 
                        964, 
                        965, 
                        965, 
                        965, 
                        965, 
                        965, 
                        965, 
                        966, 
                        966, 
                        966, 
                        966, 
                        966, 
                        967, 
                        967, 
                        967, 
                        967, 
                        967, 
                        967, 
                        968, 
                        968, 
                        968, 
                        968, 
                        968, 
                        969, 
                        969, 
                        969, 
                        969, 
                        969, 
                        969, 
                        970, 
                        970, 
                        970, 
                        970, 
                        970, 
                        971, 
                        971, 
                        971, 
                        971, 
                        971, 
                        971, 
                        972, 
                        972, 
                        972, 
                        972, 
                        972, 
                        972, 
                        973, 
                        973, 
                        973, 
                        973, 
                        973, 
                        974, 
                        974, 
                        974, 
                        974, 
                        974, 
                        974, 
                        975, 
                        975, 
                        975, 
                        975, 
                        975, 
                        975, 
                        976, 
                        976, 
                        976, 
                        976, 
                        976, 
                        976, 
                        977, 
                        977, 
                        977, 
                        977, 
                        977, 
                        977, 
                        978, 
                        978, 
                        978, 
                        978, 
                        978, 
                        978, 
                        979, 
                        979, 
                        979, 
                        979, 
                        979, 
                        979, 
                        980, 
                        980, 
                        980, 
                        980, 
                        980, 
                        980, 
                        981, 
                        981, 
                        981, 
                        981, 
                        981, 
                        981, 
                        982, 
                        982, 
                        982, 
                        982, 
                        982, 
                        982, 
                        982, 
                        983, 
                        983, 
                        983, 
                        983, 
                        983, 
                        983, 
                        984, 
                        984, 
                        984, 
                        984, 
                        984, 
                        984, 
                        984, 
                        985, 
                        985, 
                        985, 
                        985, 
                        985, 
                        985, 
                        986, 
                        986, 
                        986, 
                        986, 
                        986, 
                        986, 
                        986, 
                        987, 
                        987, 
                        987, 
                        987, 
                        987, 
                        987, 
                        988, 
                        988, 
                        988, 
                        988, 
                        988, 
                        988, 
                        988, 
                        989, 
                        989, 
                        989, 
                        989, 
                        989, 
                        989, 
                        989, 
                        990, 
                        990, 
                        990, 
                        990, 
                        990, 
                        990, 
                        990, 
                        991, 
                        991, 
                        991, 
                        991, 
                        991, 
                        991, 
                        991, 
                        992, 
                        992, 
                        992, 
                        992, 
                        992, 
                        992, 
                        992, 
                        992, 
                        993, 
                        993, 
                        993, 
                        993, 
                        993, 
                        993, 
                        993, 
                        994, 
                        994, 
                        994, 
                        994, 
                        994, 
                        994, 
                        994, 
                        995, 
                        995, 
                        995, 
                        995, 
                        995, 
                        995, 
                        995, 
                        995, 
                        996, 
                        996, 
                        996, 
                        996, 
                        996, 
                        996, 
                        996, 
                        996, 
                        997, 
                        997, 
                        997, 
                        997, 
                        997, 
                        997, 
                        997, 
                        998, 
                        998, 
                        998, 
                        998, 
                        998, 
                        998, 
                        998, 
                        998, 
                        999, 
                        999, 
                        999, 
                        999, 
                        999, 
                        999, 
                        999, 
                        999, 
                        999, 
                        1000, 
                        1000, 
                        1000, 
                        1000, 
                        1000, 
                        1000, 
                        1000, 
                        1000, 
                        1001, 
                        1001, 
                        1001, 
                        1001, 
                        1001, 
                        1001, 
                        1001, 
                        1001, 
                        1002, 
                        1002, 
                        1002, 
                        1002, 
                        1002, 
                        1002, 
                        1002, 
                        1002, 
                        1002, 
                        1003, 
                        1003, 
                        1003, 
                        1003, 
                        1003, 
                        1003, 
                        1003, 
                        1003, 
                        1003, 
                        1004, 
                        1004, 
                        1004, 
                        1004, 
                        1004, 
                        1004, 
                        1004, 
                        1004, 
                        1004, 
                        1005, 
                        1005, 
                        1005, 
                        1005, 
                        1005, 
                        1005, 
                        1005, 
                        1005, 
                        1005, 
                        1006, 
                        1006, 
                        1006, 
                        1006, 
                        1006, 
                        1006, 
                        1006, 
                        1006, 
                        1006, 
                        1006, 
                        1007, 
                        1007, 
                        1007, 
                        1007, 
                        1007, 
                        1007, 
                        1007, 
                        1007, 
                        1007, 
                        1007, 
                        1008, 
                        1008, 
                        1008, 
                        1008, 
                        1008, 
                        1008, 
                        1008, 
                        1008, 
                        1008, 
                        1008, 
                        1009, 
                        1009, 
                        1009, 
                        1009, 
                        1009, 
                        1009, 
                        1009, 
                        1009, 
                        1009, 
                        1009, 
                        1009, 
                        1010, 
                        1010, 
                        1010, 
                        1010, 
                        1010, 
                        1010, 
                        1010, 
                        1010, 
                        1010, 
                        1010, 
                        1011, 
                        1011, 
                        1011, 
                        1011, 
                        1011, 
                        1011, 
                        1011, 
                        1011, 
                        1011, 
                        1011, 
                        1011, 
                        1011, 
                        1012, 
                        1012, 
                        1012, 
                        1012, 
                        1012, 
                        1012, 
                        1012, 
                        1012, 
                        1012, 
                        1012, 
                        1012, 
                        1013, 
                        1013, 
                        1013, 
                        1013, 
                        1013, 
                        1013, 
                        1013, 
                        1013, 
                        1013, 
                        1013, 
                        1013, 
                        1013, 
                        1013, 
                        1014, 
                        1014, 
                        1014, 
                        1014, 
                        1014, 
                        1014, 
                        1014, 
                        1014, 
                        1014, 
                        1014, 
                        1014, 
                        1014, 
                        1014, 
                        1015, 
                        1015, 
                        1015, 
                        1015, 
                        1015, 
                        1015, 
                        1015, 
                        1015, 
                        1015, 
                        1015, 
                        1015, 
                        1015, 
                        1015, 
                        1016, 
                        1016, 
                        1016, 
                        1016, 
                        1016, 
                        1016, 
                        1016, 
                        1016, 
                        1016, 
                        1016, 
                        1016, 
                        1016, 
                        1016, 
                        1016, 
                        1017, 
                        1017, 
                        1017, 
                        1017, 
                        1017, 
                        1017, 
                        1017, 
                        1017, 
                        1017, 
                        1017, 
                        1017, 
                        1017, 
                        1017, 
                        1017, 
                        1017, 
                        1017, 
                        1018, 
                        1018, 
                        1018, 
                        1018, 
                        1018, 
                        1018, 
                        1018, 
                        1018, 
                        1018, 
                        1018, 
                        1018, 
                        1018, 
                        1018, 
                        1018, 
                        1018, 
                        1018, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1024, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1023, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1022, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1021, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1020, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1019, 
                        1018, 
                        1018, 
                        1018, 
                        1018, 
                        1018, 
                        1018, 
                        1018, 
                        1018, 
                        1018, 
                        1018, 
                        1018, 
                        1018, 
                        1018, 
                        1018, 
                        1018, 
                        1018, 
                        1017, 
                        1017, 
                        1017, 
                        1017, 
                        1017, 
                        1017, 
                        1017, 
                        1017, 
                        1017, 
                        1017, 
                        1017, 
                        1017, 
                        1017, 
                        1017, 
                        1017, 
                        1017, 
                        1016, 
                        1016, 
                        1016, 
                        1016, 
                        1016, 
                        1016, 
                        1016, 
                        1016, 
                        1016, 
                        1016, 
                        1016, 
                        1016, 
                        1016, 
                        1016, 
                        1015, 
                        1015, 
                        1015, 
                        1015, 
                        1015, 
                        1015, 
                        1015, 
                        1015, 
                        1015, 
                        1015, 
                        1015, 
                        1015, 
                        1015, 
                        1014, 
                        1014, 
                        1014, 
                        1014, 
                        1014, 
                        1014, 
                        1014, 
                        1014, 
                        1014, 
                        1014, 
                        1014, 
                        1014, 
                        1014, 
                        1013, 
                        1013, 
                        1013, 
                        1013, 
                        1013, 
                        1013, 
                        1013, 
                        1013, 
                        1013, 
                        1013, 
                        1013, 
                        1013, 
                        1013, 
                        1012, 
                        1012, 
                        1012, 
                        1012, 
                        1012, 
                        1012, 
                        1012, 
                        1012, 
                        1012, 
                        1012, 
                        1012, 
                        1011, 
                        1011, 
                        1011, 
                        1011, 
                        1011, 
                        1011, 
                        1011, 
                        1011, 
                        1011, 
                        1011, 
                        1011, 
                        1011, 
                        1010, 
                        1010, 
                        1010, 
                        1010, 
                        1010, 
                        1010, 
                        1010, 
                        1010, 
                        1010, 
                        1010, 
                        1009, 
                        1009, 
                        1009, 
                        1009, 
                        1009, 
                        1009, 
                        1009, 
                        1009, 
                        1009, 
                        1009, 
                        1009, 
                        1008, 
                        1008, 
                        1008, 
                        1008, 
                        1008, 
                        1008, 
                        1008, 
                        1008, 
                        1008, 
                        1008, 
                        1007, 
                        1007, 
                        1007, 
                        1007, 
                        1007, 
                        1007, 
                        1007, 
                        1007, 
                        1007, 
                        1007, 
                        1006, 
                        1006, 
                        1006, 
                        1006, 
                        1006, 
                        1006, 
                        1006, 
                        1006, 
                        1006, 
                        1006, 
                        1005, 
                        1005, 
                        1005, 
                        1005, 
                        1005, 
                        1005, 
                        1005, 
                        1005, 
                        1005, 
                        1004, 
                        1004, 
                        1004, 
                        1004, 
                        1004, 
                        1004, 
                        1004, 
                        1004, 
                        1004, 
                        1003, 
                        1003, 
                        1003, 
                        1003, 
                        1003, 
                        1003, 
                        1003, 
                        1003, 
                        1003, 
                        1002, 
                        1002, 
                        1002, 
                        1002, 
                        1002, 
                        1002, 
                        1002, 
                        1002, 
                        1002, 
                        1001, 
                        1001, 
                        1001, 
                        1001, 
                        1001, 
                        1001, 
                        1001, 
                        1001, 
                        1000, 
                        1000, 
                        1000, 
                        1000, 
                        1000, 
                        1000, 
                        1000, 
                        1000, 
                        999, 
                        999, 
                        999, 
                        999, 
                        999, 
                        999, 
                        999, 
                        999, 
                        999, 
                        998, 
                        998, 
                        998, 
                        998, 
                        998, 
                        998, 
                        998, 
                        998, 
                        997, 
                        997, 
                        997, 
                        997, 
                        997, 
                        997, 
                        997, 
                        996, 
                        996, 
                        996, 
                        996, 
                        996, 
                        996, 
                        996, 
                        996, 
                        995, 
                        995, 
                        995, 
                        995, 
                        995, 
                        995, 
                        995, 
                        995, 
                        994, 
                        994, 
                        994, 
                        994, 
                        994, 
                        994, 
                        994, 
                        993, 
                        993, 
                        993, 
                        993, 
                        993, 
                        993, 
                        993, 
                        992, 
                        992, 
                        992, 
                        992, 
                        992, 
                        992, 
                        992, 
                        992, 
                        991, 
                        991, 
                        991, 
                        991, 
                        991, 
                        991, 
                        991, 
                        990, 
                        990, 
                        990, 
                        990, 
                        990, 
                        990, 
                        990, 
                        989, 
                        989, 
                        989, 
                        989, 
                        989, 
                        989, 
                        989, 
                        988, 
                        988, 
                        988, 
                        988, 
                        988, 
                        988, 
                        988, 
                        987, 
                        987, 
                        987, 
                        987, 
                        987, 
                        987, 
                        986, 
                        986, 
                        986, 
                        986, 
                        986, 
                        986, 
                        986, 
                        985, 
                        985, 
                        985, 
                        985, 
                        985, 
                        985, 
                        984, 
                        984, 
                        984, 
                        984, 
                        984, 
                        984, 
                        984, 
                        983, 
                        983, 
                        983, 
                        983, 
                        983, 
                        983, 
                        982, 
                        982, 
                        982, 
                        982, 
                        982, 
                        982, 
                        982, 
                        981, 
                        981, 
                        981, 
                        981, 
                        981, 
                        981, 
                        980, 
                        980, 
                        980, 
                        980, 
                        980, 
                        980, 
                        979, 
                        979, 
                        979, 
                        979, 
                        979, 
                        979, 
                        978, 
                        978, 
                        978, 
                        978, 
                        978, 
                        978, 
                        977, 
                        977, 
                        977, 
                        977, 
                        977, 
                        977, 
                        976, 
                        976, 
                        976, 
                        976, 
                        976, 
                        976, 
                        975, 
                        975, 
                        975, 
                        975, 
                        975, 
                        975, 
                        974, 
                        974, 
                        974, 
                        974, 
                        974, 
                        974, 
                        973, 
                        973, 
                        973, 
                        973, 
                        973, 
                        972, 
                        972, 
                        972, 
                        972, 
                        972, 
                        972, 
                        971, 
                        971, 
                        971, 
                        971, 
                        971, 
                        971, 
                        970, 
                        970, 
                        970, 
                        970, 
                        970, 
                        969, 
                        969, 
                        969, 
                        969, 
                        969, 
                        969, 
                        968, 
                        968, 
                        968, 
                        968, 
                        968, 
                        967, 
                        967, 
                        967, 
                        967, 
                        967, 
                        967, 
                        966, 
                        966, 
                        966, 
                        966, 
                        966, 
                        965, 
                        965, 
                        965, 
                        965, 
                        965, 
                        965, 
                        964, 
                        964, 
                        964, 
                        964, 
                        964, 
                        963, 
                        963, 
                        963, 
                        963, 
                        963, 
                        962, 
                        962, 
                        962, 
                        962, 
                        962, 
                        961, 
                        961, 
                        961, 
                        961, 
                        961, 
                        961, 
                        960, 
                        960, 
                        960, 
                        960, 
                        960, 
                        959, 
                        959, 
                        959, 
                        959, 
                        959, 
                        958, 
                        958, 
                        958, 
                        958, 
                        958, 
                        957, 
                        957, 
                        957, 
                        957, 
                        957, 
                        956, 
                        956, 
                        956, 
                        956, 
                        956, 
                        955, 
                        955, 
                        955, 
                        955, 
                        955, 
                        954, 
                        954, 
                        954, 
                        954, 
                        954, 
                        953, 
                        953, 
                        953, 
                        953, 
                        953, 
                        952, 
                        952, 
                        952, 
                        952, 
                        952, 
                        951, 
                        951, 
                        951, 
                        951, 
                        950, 
                        950, 
                        950, 
                        950, 
                        950, 
                        949, 
                        949, 
                        949, 
                        949, 
                        949, 
                        948, 
                        948, 
                        948, 
                        948, 
                        948, 
                        947, 
                        947, 
                        947, 
                        947, 
                        946, 
                        946, 
                        946, 
                        946, 
                        946, 
                        945, 
                        945, 
                        945, 
                        945, 
                        945, 
                        944, 
                        944, 
                        944, 
                        944, 
                        943, 
                        943, 
                        943, 
                        943, 
                        943, 
                        942, 
                        942, 
                        942, 
                        942, 
                        942, 
                        941, 
                        941, 
                        941, 
                        941, 
                        940, 
                        940, 
                        940, 
                        940, 
                        940, 
                        939, 
                        939, 
                        939, 
                        939, 
                        938, 
                        938, 
                        938, 
                        938, 
                        938, 
                        937, 
                        937, 
                        937, 
                        937, 
                        936, 
                        936, 
                        936, 
                        936, 
                        935, 
                        935, 
                        935, 
                        935, 
                        935, 
                        934, 
                        934, 
                        934, 
                        934, 
                        933, 
                        933, 
                        933, 
                        933, 
                        932, 
                        932, 
                        932, 
                        932, 
                        932, 
                        931, 
                        931, 
                        931, 
                        931, 
                        930, 
                        930, 
                        930, 
                        930, 
                        929, 
                        929, 
                        929, 
                        929, 
                        929, 
                        928, 
                        928, 
                        928, 
                        928, 
                        927, 
                        927, 
                        927, 
                        927, 
                        926, 
                        926, 
                        926, 
                        926, 
                        925, 
                        925, 
                        925, 
                        925, 
                        924, 
                        924, 
                        924, 
                        924, 
                        924, 
                        923, 
                        923, 
                        923, 
                        923, 
                        922, 
                        922, 
                        922, 
                        922, 
                        921, 
                        921, 
                        921, 
                        921, 
                        920, 
                        920, 
                        920, 
                        920, 
                        919, 
                        919, 
                        919, 
                        919, 
                        918, 
                        918, 
                        918, 
                        918, 
                        917, 
                        917, 
                        917, 
                        917, 
                        916, 
                        916, 
                        916, 
                        916, 
                        915, 
                        915, 
                        915, 
                        915, 
                        914, 
                        914, 
                        914, 
                        914, 
                        913, 
                        913, 
                        913, 
                        913, 
                        912, 
                        912, 
                        912, 
                        912, 
                        911, 
                        911, 
                        911, 
                        911, 
                        910, 
                        910, 
                        910, 
                        910, 
                        909, 
                        909, 
                        909, 
                        909, 
                        908, 
                        908, 
                        908, 
                        908, 
                        907, 
                        907, 
                        907, 
                        906, 
                        906, 
                        906, 
                        906, 
                        905, 
                        905, 
                        905, 
                        905, 
                        904, 
                        904, 
                        904, 
                        904, 
                        903, 
                        903, 
                        903, 
                        903, 
                        902, 
                        902, 
                        902, 
                        902, 
                        901, 
                        901, 
                        901, 
                        900, 
                        900, 
                        900, 
                        900, 
                        899, 
                        899, 
                        899, 
                        899, 
                        898, 
                        898, 
                        898, 
                        897, 
                        897, 
                        897, 
                        897, 
                        896, 
                        896, 
                        896, 
                        896, 
                        895, 
                        895, 
                        895, 
                        895, 
                        894, 
                        894, 
                        894, 
                        893, 
                        893, 
                        893, 
                        893, 
                        892, 
                        892, 
                        892, 
                        892, 
                        891, 
                        891, 
                        891, 
                        890, 
                        890, 
                        890, 
                        890, 
                        889, 
                        889, 
                        889, 
                        888, 
                        888, 
                        888, 
                        888, 
                        887, 
                        887, 
                        887, 
                        887, 
                        886, 
                        886, 
                        886, 
                        885, 
                        885, 
                        885, 
                        885, 
                        884, 
                        884, 
                        884, 
                        883, 
                        883, 
                        883, 
                        883, 
                        882, 
                        882, 
                        882, 
                        881, 
                        881, 
                        881, 
                        881, 
                        880, 
                        880, 
                        880, 
                        879, 
                        879, 
                        879, 
                        879, 
                        878, 
                        878, 
                        878, 
                        877, 
                        877, 
                        877, 
                        877, 
                        876, 
                        876, 
                        876, 
                        875, 
                        875, 
                        875, 
                        875, 
                        874, 
                        874, 
                        874, 
                        873, 
                        873, 
                        873, 
                        873, 
                        872, 
                        872, 
                        872, 
                        871, 
                        871, 
                        871, 
                        870, 
                        870, 
                        870, 
                        870, 
                        869, 
                        869, 
                        869, 
                        868, 
                        868, 
                        868, 
                        868, 
                        867, 
                        867, 
                        867, 
                        866, 
                        866, 
                        866, 
                        865, 
                        865, 
                        865, 
                        865, 
                        864, 
                        864, 
                        864, 
                        863, 
                        863, 
                        863, 
                        862, 
                        862, 
                        862, 
                        862, 
                        861, 
                        861, 
                        861, 
                        860, 
                        860, 
                        860, 
                        859, 
                        859, 
                        859, 
                        858, 
                        858, 
                        858, 
                        858, 
                        857, 
                        857, 
                        857, 
                        856, 
                        856, 
                        856, 
                        855, 
                        855, 
                        855, 
                        855, 
                        854, 
                        854, 
                        854, 
                        853, 
                        853, 
                        853, 
                        852, 
                        852, 
                        852, 
                        851, 
                        851, 
                        851, 
                        850, 
                        850, 
                        850, 
                        850, 
                        849, 
                        849, 
                        849, 
                        848, 
                        848, 
                        848, 
                        847, 
                        847, 
                        847, 
                        846, 
                        846, 
                        846, 
                        845, 
                        845, 
                        845, 
                        845, 
                        844, 
                        844, 
                        844, 
                        843, 
                        843, 
                        843, 
                        842, 
                        842, 
                        842, 
                        841, 
                        841, 
                        841, 
                        840, 
                        840, 
                        840, 
                        839, 
                        839, 
                        839, 
                        838, 
                        838, 
                        838, 
                        838, 
                        837, 
                        837, 
                        837, 
                        836, 
                        836, 
                        836, 
                        835, 
                        835, 
                        835, 
                        834, 
                        834, 
                        834, 
                        833, 
                        833, 
                        833, 
                        832, 
                        832, 
                        832, 
                        831, 
                        831, 
                        831, 
                        830, 
                        830, 
                        830, 
                        829, 
                        829, 
                        829, 
                        828, 
                        828, 
                        828, 
                        827, 
                        827, 
                        827, 
                        826, 
                        826, 
                        826, 
                        825, 
                        825, 
                        825, 
                        824, 
                        824, 
                        824, 
                        823, 
                        823, 
                        823, 
                        822, 
                        822, 
                        822, 
                        821, 
                        821, 
                        821, 
                        820, 
                        820, 
                        820, 
                        819, 
                        819, 
                        819, 
                        818, 
                        818, 
                        818, 
                        817, 
                        817, 
                        817, 
                        816, 
                        816, 
                        816, 
                        815, 
                        815, 
                        815, 
                        814, 
                        814, 
                        814, 
                        813, 
                        813, 
                        813, 
                        812, 
                        812, 
                        812, 
                        811, 
                        811, 
                        811, 
                        810, 
                        810, 
                        810, 
                        809, 
                        809, 
                        809, 
                        808, 
                        808, 
                        808, 
                        807, 
                        807, 
                        807, 
                        806, 
                        806, 
                        806, 
                        805, 
                        805, 
                        805, 
                        804, 
                        804, 
                        803, 
                        803, 
                        803, 
                        802, 
                        802, 
                        802, 
                        801, 
                        801, 
                        801, 
                        800, 
                        800, 
                        800, 
                        799, 
                        799, 
                        799, 
                        798, 
                        798, 
                        798, 
                        797, 
                        797, 
                        796, 
                        796, 
                        796, 
                        795, 
                        795, 
                        795, 
                        794, 
                        794, 
                        794, 
                        793, 
                        793, 
                        793, 
                        792, 
                        792, 
                        792, 
                        791, 
                        791, 
                        790, 
                        790, 
                        790, 
                        789, 
                        789, 
                        789, 
                        788, 
                        788, 
                        788, 
                        787, 
                        787, 
                        787, 
                        786, 
                        786, 
                        786, 
                        785, 
                        785, 
                        784, 
                        784, 
                        784, 
                        783, 
                        783, 
                        783, 
                        782, 
                        782, 
                        782, 
                        781, 
                        781, 
                        780, 
                        780, 
                        780, 
                        779, 
                        779, 
                        779, 
                        778, 
                        778, 
                        778, 
                        777, 
                        777, 
                        776, 
                        776, 
                        776, 
                        775, 
                        775, 
                        775, 
                        774, 
                        774, 
                        774, 
                        773, 
                        773, 
                        772, 
                        772, 
                        772, 
                        771, 
                        771, 
                        771, 
                        770, 
                        770, 
                        770, 
                        769, 
                        769, 
                        768, 
                        768, 
                        768, 
                        767, 
                        767, 
                        767, 
                        766, 
                        766, 
                        765, 
                        765, 
                        765, 
                        764, 
                        764, 
                        764, 
                        763, 
                        763, 
                        762, 
                        762, 
                        762, 
                        761, 
                        761, 
                        761, 
                        760, 
                        760, 
                        759, 
                        759, 
                        759, 
                        758, 
                        758, 
                        758, 
                        757, 
                        757, 
                        756, 
                        756, 
                        756, 
                        755, 
                        755, 
                        755, 
                        754, 
                        754, 
                        753, 
                        753, 
                        753, 
                        752, 
                        752, 
                        752, 
                        751, 
                        751, 
                        750, 
                        750, 
                        750, 
                        749, 
                        749, 
                        749, 
                        748, 
                        748, 
                        747, 
                        747, 
                        747, 
                        746, 
                        746, 
                        745, 
                        745, 
                        745, 
                        744, 
                        744, 
                        744, 
                        743, 
                        743, 
                        742, 
                        742, 
                        742, 
                        741, 
                        741, 
                        740, 
                        740, 
                        740, 
                        739, 
                        739, 
                        739, 
                        738, 
                        738, 
                        737, 
                        737, 
                        737, 
                        736, 
                        736, 
                        735, 
                        735, 
                        735, 
                        734, 
                        734, 
                        733, 
                        733, 
                        733, 
                        732, 
                        732, 
                        732, 
                        731, 
                        731, 
                        730, 
                        730, 
                        730, 
                        729, 
                        729, 
                        728, 
                        728, 
                        728, 
                        727, 
                        727, 
                        726, 
                        726, 
                        726, 
                        725, 
                        725, 
                        724, 
                        724, 
                        724, 
                        723, 
                        723, 
                        722, 
                        722, 
                        722, 
                        721, 
                        721, 
                        721, 
                        720, 
                        720, 
                        719, 
                        719, 
                        719, 
                        718, 
                        718, 
                        717, 
                        717, 
                        717, 
                        716, 
                        716, 
                        715, 
                        715, 
                        715, 
                        714, 
                        714, 
                        713, 
                        713, 
                        713, 
                        712, 
                        712, 
                        711, 
                        711, 
                        711, 
                        710, 
                        710, 
                        709, 
                        709, 
                        709, 
                        708, 
                        708, 
                        707, 
                        707, 
                        706, 
                        706, 
                        706, 
                        705, 
                        705, 
                        704, 
                        704, 
                        704, 
                        703, 
                        703, 
                        702, 
                        702, 
                        702, 
                        701, 
                        701, 
                        700, 
                        700, 
                        700, 
                        699, 
                        699, 
                        698, 
                        698, 
                        698, 
                        697, 
                        697, 
                        696, 
                        696, 
                        696, 
                        695, 
                        695, 
                        694, 
                        694, 
                        693, 
                        693, 
                        693, 
                        692, 
                        692, 
                        691, 
                        691, 
                        691, 
                        690, 
                        690, 
                        689, 
                        689, 
                        689, 
                        688, 
                        688, 
                        687, 
                        687, 
                        686, 
                        686, 
                        686, 
                        685, 
                        685, 
                        684, 
                        684, 
                        684, 
                        683, 
                        683, 
                        682, 
                        682, 
                        681, 
                        681, 
                        681, 
                        680, 
                        680, 
                        679, 
                        679, 
                        679, 
                        678, 
                        678, 
                        677, 
                        677, 
                        676, 
                        676, 
                        676, 
                        675, 
                        675, 
                        674, 
                        674, 
                        673, 
                        673, 
                        673, 
                        672, 
                        672, 
                        671, 
                        671, 
                        671, 
                        670, 
                        670, 
                        669, 
                        669, 
                        668, 
                        668, 
                        668, 
                        667, 
                        667, 
                        666, 
                        666, 
                        665, 
                        665, 
                        665, 
                        664, 
                        664, 
                        663, 
                        663, 
                        662, 
                        662, 
                        662, 
                        661, 
                        661, 
                        660, 
                        660, 
                        659, 
                        659, 
                        659, 
                        658, 
                        658, 
                        657, 
                        657, 
                        657, 
                        656, 
                        656, 
                        655, 
                        655, 
                        654, 
                        654, 
                        653, 
                        653, 
                        653, 
                        652, 
                        652, 
                        651, 
                        651, 
                        650, 
                        650, 
                        650, 
                        649, 
                        649, 
                        648, 
                        648, 
                        647, 
                        647, 
                        647, 
                        646, 
                        646, 
                        645, 
                        645, 
                        644, 
                        644, 
                        644, 
                        643, 
                        643, 
                        642, 
                        642, 
                        641, 
                        641, 
                        641, 
                        640, 
                        640, 
                        639, 
                        639, 
                        638, 
                        638, 
                        637, 
                        637, 
                        637, 
                        636, 
                        636, 
                        635, 
                        635, 
                        634, 
                        634, 
                        634, 
                        633, 
                        633, 
                        632, 
                        632, 
                        631, 
                        631, 
                        630, 
                        630, 
                        630, 
                        629, 
                        629, 
                        628, 
                        628, 
                        627, 
                        627, 
                        626, 
                        626, 
                        626, 
                        625, 
                        625, 
                        624, 
                        624, 
                        623, 
                        623, 
                        622, 
                        622, 
                        622, 
                        621, 
                        621, 
                        620, 
                        620, 
                        619, 
                        619, 
                        618, 
                        618, 
                        618, 
                        617, 
                        617, 
                        616, 
                        616, 
                        615, 
                        615, 
                        614, 
                        614, 
                        614, 
                        613, 
                        613, 
                        612, 
                        612, 
                        611, 
                        611, 
                        610, 
                        610, 
                        610, 
                        609, 
                        609, 
                        608, 
                        608, 
                        607, 
                        607, 
                        606, 
                        606, 
                        606, 
                        605, 
                        605, 
                        604, 
                        604, 
                        603, 
                        603, 
                        602, 
                        602, 
                        601, 
                        601, 
                        601, 
                        600, 
                        600, 
                        599, 
                        599, 
                        598, 
                        598, 
                        597, 
                        597, 
                        596, 
                        596, 
                        596, 
                        595, 
                        595, 
                        594, 
                        594, 
                        593, 
                        593, 
                        592, 
                        592, 
                        591, 
                        591, 
                        591, 
                        590, 
                        590, 
                        589, 
                        589, 
                        588, 
                        588, 
                        587, 
                        587, 
                        586, 
                        586, 
                        586, 
                        585, 
                        585, 
                        584, 
                        584, 
                        583, 
                        583, 
                        582, 
                        582, 
                        581, 
                        581, 
                        580, 
                        580, 
                        580, 
                        579, 
                        579, 
                        578, 
                        578, 
                        577, 
                        577, 
                        576, 
                        576, 
                        575, 
                        575, 
                        574, 
                        574, 
                        574, 
                        573, 
                        573, 
                        572, 
                        572, 
                        571, 
                        571, 
                        570, 
                        570, 
                        569, 
                        569, 
                        568, 
                        568, 
                        568, 
                        567, 
                        567, 
                        566, 
                        566, 
                        565, 
                        565, 
                        564, 
                        564, 
                        563, 
                        563, 
                        562, 
                        562, 
                        561, 
                        561, 
                        561, 
                        560, 
                        560, 
                        559, 
                        559, 
                        558, 
                        558, 
                        557, 
                        557, 
                        556, 
                        556, 
                        555, 
                        555, 
                        554, 
                        554, 
                        553, 
                        553, 
                        553, 
                        552, 
                        552, 
                        551, 
                        551, 
                        550, 
                        550, 
                        549, 
                        549, 
                        548, 
                        548, 
                        547, 
                        547, 
                        546, 
                        546, 
                        545, 
                        545, 
                        545, 
                        544, 
                        544, 
                        543, 
                        543, 
                        542, 
                        542, 
                        541, 
                        541, 
                        540, 
                        540, 
                        539, 
                        539, 
                        538, 
                        538, 
                        537, 
                        537, 
                        536, 
                        536, 
                        536, 
                        535, 
                        535, 
                        534, 
                        534, 
                        533, 
                        533, 
                        532, 
                        532, 
                        531, 
                        531, 
                        530, 
                        530, 
                        529, 
                        529, 
                        528, 
                        528, 
                        527, 
                        527, 
                        526, 
                        526, 
                        525, 
                        525, 
                        525, 
                        524, 
                        524, 
                        523, 
                        523, 
                        522, 
                        522, 
                        521, 
                        521, 
                        520, 
                        520, 
                        519, 
                        519, 
                        518, 
                        518, 
                        517, 
                        517, 
                        516, 
                        516, 
                        515, 
                        515, 
                        514, 
                        514, 
                        513, 
                        513, 
                        512, 
                        512, 
                        512, 
                        511, 
                        511, 
                        510, 
                        510, 
                        509, 
                        509, 
                        508, 
                        508, 
                        507, 
                        507, 
                        506, 
                        506, 
                        505, 
                        505, 
                        504, 
                        504, 
                        503, 
                        503, 
                        502, 
                        502, 
                        501, 
                        501, 
                        500, 
                        500, 
                        499, 
                        499, 
                        498, 
                        498, 
                        497, 
                        497, 
                        496, 
                        496, 
                        495, 
                        495, 
                        494, 
                        494, 
                        494, 
                        493, 
                        493, 
                        492, 
                        492, 
                        491, 
                        491, 
                        490, 
                        490, 
                        489, 
                        489, 
                        488, 
                        488, 
                        487, 
                        487, 
                        486, 
                        486, 
                        485, 
                        485, 
                        484, 
                        484, 
                        483, 
                        483, 
                        482, 
                        482, 
                        481, 
                        481, 
                        480, 
                        480, 
                        479, 
                        479, 
                        478, 
                        478, 
                        477, 
                        477, 
                        476, 
                        476, 
                        475, 
                        475, 
                        474, 
                        474, 
                        473, 
                        473, 
                        472, 
                        472, 
                        471, 
                        471, 
                        470, 
                        470, 
                        469, 
                        469, 
                        468, 
                        468, 
                        467, 
                        467, 
                        466, 
                        466, 
                        465, 
                        465, 
                        464, 
                        464, 
                        463, 
                        463, 
                        462, 
                        462, 
                        461, 
                        461, 
                        460, 
                        460, 
                        459, 
                        459, 
                        458, 
                        458, 
                        457, 
                        457, 
                        456, 
                        456, 
                        455, 
                        455, 
                        454, 
                        454, 
                        453, 
                        453, 
                        452, 
                        452, 
                        451, 
                        451, 
                        450, 
                        450, 
                        449, 
                        449, 
                        448, 
                        448, 
                        447, 
                        447, 
                        446, 
                        446, 
                        445, 
                        445, 
                        444, 
                        444, 
                        443, 
                        443, 
                        442, 
                        442, 
                        441, 
                        441, 
                        440, 
                        440, 
                        439, 
                        439, 
                        438, 
                        438, 
                        437, 
                        437, 
                        436, 
                        436, 
                        435, 
                        435, 
                        434, 
                        434, 
                        433, 
                        433, 
                        432, 
                        432, 
                        431, 
                        431, 
                        430, 
                        430, 
                        429, 
                        429, 
                        428, 
                        428, 
                        427, 
                        427, 
                        426, 
                        426, 
                        425, 
                        425, 
                        424, 
                        424, 
                        423, 
                        423, 
                        422, 
                        422, 
                        421, 
                        421, 
                        420, 
                        420, 
                        419, 
                        419, 
                        418, 
                        418, 
                        417, 
                        416, 
                        416, 
                        415, 
                        415, 
                        414, 
                        414, 
                        413, 
                        413, 
                        412, 
                        412, 
                        411, 
                        411, 
                        410, 
                        410, 
                        409, 
                        409, 
                        408, 
                        408, 
                        407, 
                        407, 
                        406, 
                        406, 
                        405, 
                        405, 
                        404, 
                        404, 
                        403, 
                        403, 
                        402, 
                        402, 
                        401, 
                        401, 
                        400, 
                        400, 
                        399, 
                        399, 
                        398, 
                        398, 
                        397, 
                        397, 
                        396, 
                        395, 
                        395, 
                        394, 
                        394, 
                        393, 
                        393, 
                        392, 
                        392, 
                        391, 
                        391, 
                        390, 
                        390, 
                        389, 
                        389, 
                        388, 
                        388, 
                        387, 
                        387, 
                        386, 
                        386, 
                        385, 
                        385, 
                        384, 
                        384, 
                        383, 
                        383, 
                        382, 
                        382, 
                        381, 
                        380, 
                        380, 
                        379, 
                        379, 
                        378, 
                        378, 
                        377, 
                        377, 
                        376, 
                        376, 
                        375, 
                        375, 
                        374, 
                        374, 
                        373, 
                        373, 
                        372, 
                        372, 
                        371, 
                        371, 
                        370, 
                        370, 
                        369, 
                        369, 
                        368, 
                        367, 
                        367, 
                        366, 
                        366, 
                        365, 
                        365, 
                        364, 
                        364, 
                        363, 
                        363, 
                        362, 
                        362, 
                        361, 
                        361, 
                        360, 
                        360, 
                        359, 
                        359, 
                        358, 
                        358, 
                        357, 
                        357, 
                        356, 
                        355, 
                        355, 
                        354, 
                        354, 
                        353, 
                        353, 
                        352, 
                        352, 
                        351, 
                        351, 
                        350, 
                        350, 
                        349, 
                        349, 
                        348, 
                        348, 
                        347, 
                        347, 
                        346, 
                        346, 
                        345, 
                        344, 
                        344, 
                        343, 
                        343, 
                        342, 
                        342, 
                        341, 
                        341, 
                        340, 
                        340, 
                        339, 
                        339, 
                        338, 
                        338, 
                        337, 
                        337, 
                        336, 
                        335, 
                        335, 
                        334, 
                        334, 
                        333, 
                        333, 
                        332, 
                        332, 
                        331, 
                        331, 
                        330, 
                        330, 
                        329, 
                        329, 
                        328, 
                        328, 
                        327, 
                        327, 
                        326, 
                        325, 
                        325, 
                        324, 
                        324, 
                        323, 
                        323, 
                        322, 
                        322, 
                        321, 
                        321, 
                        320, 
                        320, 
                        319, 
                        319, 
                        318, 
                        317, 
                        317, 
                        316, 
                        316, 
                        315, 
                        315, 
                        314, 
                        314, 
                        313, 
                        313, 
                        312, 
                        312, 
                        311, 
                        311, 
                        310, 
                        310, 
                        309, 
                        308, 
                        308, 
                        307, 
                        307, 
                        306, 
                        306, 
                        305, 
                        305, 
                        304, 
                        304, 
                        303, 
                        303, 
                        302, 
                        302, 
                        301, 
                        300, 
                        300, 
                        299, 
                        299, 
                        298, 
                        298, 
                        297, 
                        297, 
                        296, 
                        296, 
                        295, 
                        295, 
                        294, 
                        294, 
                        293, 
                        292, 
                        292, 
                        291, 
                        291, 
                        290, 
                        290, 
                        289, 
                        289, 
                        288, 
                        288, 
                        287, 
                        287, 
                        286, 
                        285, 
                        285, 
                        284, 
                        284, 
                        283, 
                        283, 
                        282, 
                        282, 
                        281, 
                        281, 
                        280, 
                        280, 
                        279, 
                        278, 
                        278, 
                        277, 
                        277, 
                        276, 
                        276, 
                        275, 
                        275, 
                        274, 
                        274, 
                        273, 
                        273, 
                        272, 
                        271, 
                        271, 
                        270, 
                        270, 
                        269, 
                        269, 
                        268, 
                        268, 
                        267, 
                        267, 
                        266, 
                        266, 
                        265, 
                        264, 
                        264, 
                        263, 
                        263, 
                        262, 
                        262, 
                        261, 
                        261, 
                        260, 
                        260, 
                        259, 
                        259, 
                        258, 
                        257, 
                        257, 
                        256, 
                        256, 
                        255, 
                        255, 
                        254, 
                        254, 
                        253, 
                        253, 
                        252, 
                        252, 
                        251, 
                        250, 
                        250, 
                        249, 
                        249, 
                        248, 
                        248, 
                        247, 
                        247, 
                        246, 
                        246, 
                        245, 
                        244, 
                        244, 
                        243, 
                        243, 
                        242, 
                        242, 
                        241, 
                        241, 
                        240, 
                        240, 
                        239, 
                        239, 
                        238, 
                        237, 
                        237, 
                        236, 
                        236, 
                        235, 
                        235, 
                        234, 
                        234, 
                        233, 
                        233, 
                        232, 
                        231, 
                        231, 
                        230, 
                        230, 
                        229, 
                        229, 
                        228, 
                        228, 
                        227, 
                        227, 
                        226, 
                        225, 
                        225, 
                        224, 
                        224, 
                        223, 
                        223, 
                        222, 
                        222, 
                        221, 
                        221, 
                        220, 
                        219, 
                        219, 
                        218, 
                        218, 
                        217, 
                        217, 
                        216, 
                        216, 
                        215, 
                        215, 
                        214, 
                        213, 
                        213, 
                        212, 
                        212, 
                        211, 
                        211, 
                        210, 
                        210, 
                        209, 
                        209, 
                        208, 
                        207, 
                        207, 
                        206, 
                        206, 
                        205, 
                        205, 
                        204, 
                        204, 
                        203, 
                        203, 
                        202, 
                        201, 
                        201, 
                        200, 
                        200, 
                        199, 
                        199, 
                        198, 
                        198, 
                        197, 
                        196, 
                        196, 
                        195, 
                        195, 
                        194, 
                        194, 
                        193, 
                        193, 
                        192, 
                        192, 
                        191, 
                        190, 
                        190, 
                        189, 
                        189, 
                        188, 
                        188, 
                        187, 
                        187, 
                        186, 
                        186, 
                        185, 
                        184, 
                        184, 
                        183, 
                        183, 
                        182, 
                        182, 
                        181, 
                        181, 
                        180, 
                        179, 
                        179, 
                        178, 
                        178, 
                        177, 
                        177, 
                        176, 
                        176, 
                        175, 
                        175, 
                        174, 
                        173, 
                        173, 
                        172, 
                        172, 
                        171, 
                        171, 
                        170, 
                        170, 
                        169, 
                        168, 
                        168, 
                        167, 
                        167, 
                        166, 
                        166, 
                        165, 
                        165, 
                        164, 
                        163, 
                        163, 
                        162, 
                        162, 
                        161, 
                        161, 
                        160, 
                        160, 
                        159, 
                        159, 
                        158, 
                        157, 
                        157, 
                        156, 
                        156, 
                        155, 
                        155, 
                        154, 
                        154, 
                        153, 
                        152, 
                        152, 
                        151, 
                        151, 
                        150, 
                        150, 
                        149, 
                        149, 
                        148, 
                        147, 
                        147, 
                        146, 
                        146, 
                        145, 
                        145, 
                        144, 
                        144, 
                        143, 
                        143, 
                        142, 
                        141, 
                        141, 
                        140, 
                        140, 
                        139, 
                        139, 
                        138, 
                        138, 
                        137, 
                        136, 
                        136, 
                        135, 
                        135, 
                        134, 
                        134, 
                        133, 
                        133, 
                        132, 
                        131, 
                        131, 
                        130, 
                        130, 
                        129, 
                        129, 
                        128, 
                        128, 
                        127, 
                        126, 
                        126, 
                        125, 
                        125, 
                        124, 
                        124, 
                        123, 
                        123, 
                        122, 
                        121, 
                        121, 
                        120, 
                        120, 
                        119, 
                        119, 
                        118, 
                        118, 
                        117, 
                        116, 
                        116, 
                        115, 
                        115, 
                        114, 
                        114, 
                        113, 
                        113, 
                        112, 
                        111, 
                        111, 
                        110, 
                        110, 
                        109, 
                        109, 
                        108, 
                        108, 
                        107, 
                        106, 
                        106, 
                        105, 
                        105, 
                        104, 
                        104, 
                        103, 
                        103, 
                        102, 
                        101, 
                        101, 
                        100, 
                        100, 
                        99, 
                        99, 
                        98, 
                        98, 
                        97, 
                        96, 
                        96, 
                        95, 
                        95, 
                        94, 
                        94, 
                        93, 
                        93, 
                        92, 
                        91, 
                        91, 
                        90, 
                        90, 
                        89, 
                        89, 
                        88, 
                        88, 
                        87, 
                        86, 
                        86, 
                        85, 
                        85, 
                        84, 
                        84, 
                        83, 
                        83, 
                        82, 
                        81, 
                        81, 
                        80, 
                        80, 
                        79, 
                        79, 
                        78, 
                        78, 
                        77, 
                        76, 
                        76, 
                        75, 
                        75, 
                        74, 
                        74, 
                        73, 
                        73, 
                        72, 
                        71, 
                        71, 
                        70, 
                        70, 
                        69, 
                        69, 
                        68, 
                        68, 
                        67, 
                        66, 
                        66, 
                        65, 
                        65, 
                        64, 
                        64, 
                        63, 
                        63, 
                        62, 
                        61, 
                        61, 
                        60, 
                        60, 
                        59, 
                        59, 
                        58, 
                        57, 
                        57, 
                        56, 
                        56, 
                        55, 
                        55, 
                        54, 
                        54, 
                        53, 
                        52, 
                        52, 
                        51, 
                        51, 
                        50, 
                        50, 
                        49, 
                        49, 
                        48, 
                        47, 
                        47, 
                        46, 
                        46, 
                        45, 
                        45, 
                        44, 
                        44, 
                        43, 
                        42, 
                        42, 
                        41, 
                        41, 
                        40, 
                        40, 
                        39, 
                        39, 
                        38, 
                        37, 
                        37, 
                        36, 
                        36, 
                        35, 
                        35, 
                        34, 
                        34, 
                        33, 
                        32, 
                        32, 
                        31, 
                        31, 
                        30, 
                        30, 
                        29, 
                        28, 
                        28, 
                        27, 
                        27, 
                        26, 
                        26, 
                        25, 
                        25, 
                        24, 
                        23, 
                        23, 
                        22, 
                        22, 
                        21, 
                        21, 
                        20, 
                        20, 
                        19, 
                        18, 
                        18, 
                        17, 
                        17, 
                        16, 
                        16, 
                        15, 
                        15, 
                        14, 
                        13, 
                        13, 
                        12, 
                        12, 
                        11, 
                        11, 
                        10, 
                        9, 
                        9, 
                        8, 
                        8, 
                        7, 
                        7, 
                        6, 
                        6, 
                        5, 
                        4, 
                        4, 
                        3, 
                        3, 
                        2, 
                        2, 
                        1, 
                        1
                    ], System.Int32);
                    this._arctanArray = System.Array.init([
                        0, 
                        57, 
                        115, 
                        172, 
                        229, 
                        286, 
                        344, 
                        401, 
                        458, 
                        515, 
                        572, 
                        629, 
                        686, 
                        742, 
                        799, 
                        856, 
                        912, 
                        968, 
                        1025, 
                        1081, 
                        1137, 
                        1193, 
                        1248, 
                        1304, 
                        1359, 
                        1415, 
                        1470, 
                        1525, 
                        1579, 
                        1634, 
                        1688, 
                        1743, 
                        1797, 
                        1850, 
                        1904, 
                        1958, 
                        2011, 
                        2064, 
                        2116, 
                        2169, 
                        2221, 
                        2273, 
                        2325, 
                        2377, 
                        2428, 
                        2479, 
                        2530, 
                        2581, 
                        2631, 
                        2681, 
                        2731, 
                        2781, 
                        2830, 
                        2879, 
                        2928, 
                        2976, 
                        3025, 
                        3073, 
                        3120, 
                        3168, 
                        3215, 
                        3262, 
                        3308, 
                        3354, 
                        3400, 
                        3446, 
                        3491, 
                        3537, 
                        3581, 
                        3626, 
                        3670, 
                        3714, 
                        3758, 
                        3801, 
                        3844, 
                        3887, 
                        3930, 
                        3972, 
                        4014, 
                        4055, 
                        4097, 
                        4138, 
                        4179, 
                        4219, 
                        4259, 
                        4299, 
                        4339, 
                        4378, 
                        4417, 
                        4456, 
                        4494, 
                        4533, 
                        4570, 
                        4608, 
                        4645, 
                        4683, 
                        4719, 
                        4756, 
                        4792, 
                        4828, 
                        4864, 
                        4899, 
                        4934, 
                        4969, 
                        5004, 
                        5038, 
                        5073, 
                        5106, 
                        5140, 
                        5173, 
                        5206, 
                        5239, 
                        5272, 
                        5304, 
                        5336, 
                        5368, 
                        5400, 
                        5431, 
                        5462, 
                        5493, 
                        5524, 
                        5554, 
                        5584, 
                        5614, 
                        5644, 
                        5673, 
                        5702, 
                        5731, 
                        5760, 
                        5789, 
                        5817, 
                        5845, 
                        5873, 
                        5900, 
                        5928, 
                        5955, 
                        5982, 
                        6009, 
                        6036, 
                        6062, 
                        6088, 
                        6114, 
                        6140, 
                        6166, 
                        6191, 
                        6216, 
                        6241, 
                        6266, 
                        6291, 
                        6315, 
                        6339, 
                        6363, 
                        6387, 
                        6411, 
                        6434, 
                        6458, 
                        6481, 
                        6504, 
                        6526, 
                        6549, 
                        6572, 
                        6594, 
                        6616, 
                        6638, 
                        6660, 
                        6681, 
                        6703, 
                        6724, 
                        6745, 
                        6766, 
                        6787, 
                        6808, 
                        6828, 
                        6848, 
                        6869, 
                        6889, 
                        6908, 
                        6928, 
                        6948, 
                        6967, 
                        6987, 
                        7006, 
                        7025, 
                        7044, 
                        7062, 
                        7081, 
                        7100, 
                        7118, 
                        7136, 
                        7154, 
                        7172, 
                        7190, 
                        7208, 
                        7225, 
                        7243, 
                        7260, 
                        7277, 
                        7294, 
                        7311, 
                        7328, 
                        7345, 
                        7361, 
                        7378, 
                        7394, 
                        7410, 
                        7427, 
                        7443, 
                        7458, 
                        7474, 
                        7490, 
                        7505, 
                        7521, 
                        7536, 
                        7552, 
                        7567, 
                        7582, 
                        7597, 
                        7612, 
                        7626, 
                        7641, 
                        7655, 
                        7670, 
                        7684, 
                        7699, 
                        7713, 
                        7727, 
                        7741, 
                        7755, 
                        7768, 
                        7782, 
                        7796, 
                        7809, 
                        7823, 
                        7836, 
                        7849, 
                        7862, 
                        7875, 
                        7888, 
                        7901, 
                        7914, 
                        7927, 
                        7939, 
                        7952, 
                        7964, 
                        7977, 
                        7989, 
                        8001, 
                        8014, 
                        8026, 
                        8038, 
                        8050, 
                        8061, 
                        8073, 
                        8085, 
                        8097, 
                        8108, 
                        8120, 
                        8131, 
                        8142, 
                        8154, 
                        8165, 
                        8176, 
                        8187, 
                        8198, 
                        8209, 
                        8220, 
                        8231, 
                        8242, 
                        8252, 
                        8263, 
                        8273, 
                        8284, 
                        8294, 
                        8305, 
                        8315, 
                        8325, 
                        8335, 
                        8345, 
                        8355, 
                        8365, 
                        8375, 
                        8385, 
                        8395, 
                        8405, 
                        8415, 
                        8424, 
                        8434, 
                        8443, 
                        8453, 
                        8462, 
                        8472, 
                        8481, 
                        8490, 
                        8499, 
                        8509, 
                        8518, 
                        8527, 
                        8536, 
                        8545, 
                        8554, 
                        8562, 
                        8571, 
                        8580, 
                        8589, 
                        8597, 
                        8606, 
                        8614, 
                        8623, 
                        8631, 
                        8640, 
                        8648, 
                        8657, 
                        8665, 
                        8673, 
                        8681, 
                        8689, 
                        8697, 
                        8706, 
                        8714, 
                        8721, 
                        8729, 
                        8737, 
                        8745, 
                        8753, 
                        8761, 
                        8768, 
                        8776, 
                        8784, 
                        8791, 
                        8799, 
                        8806, 
                        8814, 
                        8821, 
                        8829, 
                        8836, 
                        8843, 
                        8851, 
                        8858, 
                        8865, 
                        8872, 
                        8879, 
                        8886, 
                        8894, 
                        8901, 
                        8908, 
                        8914, 
                        8921, 
                        8928, 
                        8935, 
                        8942, 
                        8949, 
                        8955, 
                        8962, 
                        8969, 
                        8975, 
                        8982, 
                        8989, 
                        8995, 
                        9002, 
                        9008, 
                        9015, 
                        9021, 
                        9027, 
                        9034, 
                        9040, 
                        9046, 
                        9053, 
                        9059, 
                        9065, 
                        9071, 
                        9077, 
                        9084, 
                        9090, 
                        9096, 
                        9102, 
                        9108, 
                        9114, 
                        9120, 
                        9125, 
                        9131, 
                        9137, 
                        9143, 
                        9149, 
                        9155, 
                        9160, 
                        9166, 
                        9172, 
                        9177, 
                        9183, 
                        9189, 
                        9194, 
                        9200, 
                        9205, 
                        9211, 
                        9216, 
                        9222, 
                        9227, 
                        9233, 
                        9238, 
                        9243, 
                        9249, 
                        9254, 
                        9259, 
                        9265, 
                        9270, 
                        9275, 
                        9280, 
                        9285, 
                        9290, 
                        9296, 
                        9301, 
                        9306, 
                        9311, 
                        9316, 
                        9321, 
                        9326, 
                        9331, 
                        9336, 
                        9341, 
                        9346, 
                        9350, 
                        9355, 
                        9360, 
                        9365, 
                        9370, 
                        9375, 
                        9379, 
                        9384, 
                        9389, 
                        9393, 
                        9398, 
                        9403, 
                        9407, 
                        9412, 
                        9417, 
                        9421, 
                        9426, 
                        9430, 
                        9435, 
                        9439, 
                        9444, 
                        9448, 
                        9453, 
                        9457, 
                        9462, 
                        9466, 
                        9470, 
                        9475, 
                        9479, 
                        9483, 
                        9488, 
                        9492, 
                        9496, 
                        9500, 
                        9505, 
                        9509, 
                        9513, 
                        9517, 
                        9521, 
                        9525, 
                        9530, 
                        9534, 
                        9538, 
                        9542, 
                        9546, 
                        9550, 
                        9554, 
                        9558, 
                        9562, 
                        9566, 
                        9570, 
                        9574, 
                        9578, 
                        9582, 
                        9586, 
                        9590, 
                        9593, 
                        9597, 
                        9601, 
                        9605, 
                        9609, 
                        9613, 
                        9616, 
                        9620, 
                        9624, 
                        9628, 
                        9631, 
                        9635, 
                        9639, 
                        9642, 
                        9646, 
                        9650, 
                        9653, 
                        9657, 
                        9661, 
                        9664, 
                        9668, 
                        9671, 
                        9675, 
                        9678, 
                        9682, 
                        9686, 
                        9689, 
                        9693, 
                        9696, 
                        9699, 
                        9703, 
                        9706, 
                        9710, 
                        9713, 
                        9717, 
                        9720, 
                        9723, 
                        9727, 
                        9730, 
                        9733, 
                        9737, 
                        9740, 
                        9743, 
                        9747, 
                        9750, 
                        9753, 
                        9756, 
                        9760, 
                        9763, 
                        9766, 
                        9769, 
                        9773, 
                        9776, 
                        9779, 
                        9782, 
                        9785, 
                        9788, 
                        9792, 
                        9795, 
                        9798, 
                        9801, 
                        9804, 
                        9807, 
                        9810, 
                        9813, 
                        9816, 
                        9819, 
                        9822, 
                        9825, 
                        9828, 
                        9831, 
                        9834, 
                        9837, 
                        9840, 
                        9843, 
                        9846, 
                        9849, 
                        9852, 
                        9855, 
                        9858, 
                        9861, 
                        9863, 
                        9866, 
                        9869, 
                        9872, 
                        9875, 
                        9878, 
                        9880, 
                        9883, 
                        9886, 
                        9889, 
                        9892, 
                        9894, 
                        9897, 
                        9900, 
                        9903, 
                        9905, 
                        9908, 
                        9911, 
                        9914, 
                        9916, 
                        9919, 
                        9922, 
                        9924, 
                        9927, 
                        9930, 
                        9932, 
                        9935, 
                        9938, 
                        9940, 
                        9943, 
                        9945, 
                        9948, 
                        9951, 
                        9953, 
                        9956, 
                        9958, 
                        9961, 
                        9963, 
                        9966, 
                        9969, 
                        9971, 
                        9974, 
                        9976, 
                        9979, 
                        9981, 
                        9984, 
                        9986, 
                        9988, 
                        9991, 
                        9993, 
                        9996, 
                        9998, 
                        10001, 
                        10003, 
                        10006, 
                        10008, 
                        10010, 
                        10013, 
                        10015, 
                        10017, 
                        10020, 
                        10022, 
                        10025, 
                        10027, 
                        10029, 
                        10032, 
                        10034, 
                        10036, 
                        10039, 
                        10041, 
                        10043, 
                        10045, 
                        10048, 
                        10050, 
                        10052, 
                        10054, 
                        10057, 
                        10059, 
                        10061, 
                        10063, 
                        10066, 
                        10068, 
                        10070, 
                        10072, 
                        10075, 
                        10077, 
                        10079, 
                        10081, 
                        10083, 
                        10085, 
                        10088, 
                        10090, 
                        10092, 
                        10094, 
                        10096, 
                        10098, 
                        10100, 
                        10103, 
                        10105, 
                        10107, 
                        10109, 
                        10111, 
                        10113, 
                        10115, 
                        10117, 
                        10119, 
                        10121, 
                        10123, 
                        10125, 
                        10127, 
                        10130, 
                        10132, 
                        10134, 
                        10136, 
                        10138, 
                        10140, 
                        10142, 
                        10144, 
                        10146, 
                        10148, 
                        10150, 
                        10152, 
                        10154, 
                        10155, 
                        10157, 
                        10159, 
                        10161, 
                        10163, 
                        10165, 
                        10167, 
                        10169, 
                        10171, 
                        10173, 
                        10175, 
                        10177, 
                        10179, 
                        10181, 
                        10182, 
                        10184, 
                        10186, 
                        10188, 
                        10190, 
                        10192, 
                        10194, 
                        10195, 
                        10197, 
                        10199, 
                        10201, 
                        10203, 
                        10205, 
                        10206, 
                        10208, 
                        10210, 
                        10212, 
                        10214, 
                        10215, 
                        10217, 
                        10219, 
                        10221, 
                        10223, 
                        10224, 
                        10226, 
                        10228, 
                        10230, 
                        10231, 
                        10233, 
                        10235, 
                        10237, 
                        10238, 
                        10240, 
                        10242, 
                        10244, 
                        10245, 
                        10247, 
                        10249, 
                        10250, 
                        10252, 
                        10254, 
                        10255, 
                        10257, 
                        10259, 
                        10261, 
                        10262, 
                        10264, 
                        10266, 
                        10267, 
                        10269, 
                        10270, 
                        10272, 
                        10274, 
                        10275, 
                        10277, 
                        10279, 
                        10280, 
                        10282, 
                        10284, 
                        10285, 
                        10287, 
                        10288, 
                        10290, 
                        10292, 
                        10293, 
                        10295, 
                        10296, 
                        10298, 
                        10299, 
                        10301, 
                        10303, 
                        10304, 
                        10306, 
                        10307, 
                        10309, 
                        10310, 
                        10312, 
                        10313, 
                        10315, 
                        10317, 
                        10318, 
                        10320, 
                        10321, 
                        10323, 
                        10324, 
                        10326, 
                        10327, 
                        10329, 
                        10330, 
                        10332, 
                        10333, 
                        10335, 
                        10336, 
                        10338, 
                        10339, 
                        10340, 
                        10342, 
                        10343, 
                        10345, 
                        10346, 
                        10348, 
                        10349, 
                        10351, 
                        10352, 
                        10354, 
                        10355, 
                        10356, 
                        10358, 
                        10359, 
                        10361, 
                        10362, 
                        10364, 
                        10365, 
                        10366, 
                        10368, 
                        10369, 
                        10371, 
                        10372, 
                        10373, 
                        10375, 
                        10376, 
                        10378, 
                        10379, 
                        10380, 
                        10382, 
                        10383, 
                        10384, 
                        10386, 
                        10387, 
                        10388, 
                        10390, 
                        10391, 
                        10392, 
                        10394, 
                        10395, 
                        10397, 
                        10398, 
                        10399, 
                        10400, 
                        10402, 
                        10403, 
                        10404, 
                        10406, 
                        10407, 
                        10408, 
                        10410, 
                        10411, 
                        10412, 
                        10414, 
                        10415, 
                        10416, 
                        10417, 
                        10419, 
                        10420, 
                        10421, 
                        10423, 
                        10424, 
                        10425, 
                        10426, 
                        10428, 
                        10429, 
                        10430, 
                        10431, 
                        10433, 
                        10434, 
                        10435, 
                        10436, 
                        10438, 
                        10439, 
                        10440, 
                        10441, 
                        10443, 
                        10444, 
                        10445, 
                        10446, 
                        10447, 
                        10449, 
                        10450, 
                        10451, 
                        10452, 
                        10454, 
                        10455, 
                        10456, 
                        10457, 
                        10458, 
                        10459, 
                        10461, 
                        10462, 
                        10463, 
                        10464, 
                        10465, 
                        10467, 
                        10468, 
                        10469, 
                        10470, 
                        10471, 
                        10472, 
                        10474, 
                        10475, 
                        10476, 
                        10477, 
                        10478, 
                        10479, 
                        10480, 
                        10482, 
                        10483, 
                        10484, 
                        10485, 
                        10486, 
                        10487, 
                        10488, 
                        10490, 
                        10491, 
                        10492, 
                        10493, 
                        10494, 
                        10495, 
                        10496, 
                        10497, 
                        10498, 
                        10500, 
                        10501, 
                        10502, 
                        10503, 
                        10504, 
                        10505, 
                        10506, 
                        10507, 
                        10508, 
                        10509, 
                        10510, 
                        10512, 
                        10513, 
                        10514, 
                        10515, 
                        10516, 
                        10517, 
                        10518, 
                        10519, 
                        10520, 
                        10521, 
                        10522, 
                        10523, 
                        10524, 
                        10525, 
                        10526, 
                        10527, 
                        10528, 
                        10530, 
                        10531, 
                        10532, 
                        10533, 
                        10534, 
                        10535, 
                        10536, 
                        10537, 
                        10538, 
                        10539, 
                        10540, 
                        10541, 
                        10542, 
                        10543, 
                        10544, 
                        10545, 
                        10546, 
                        10547, 
                        10548, 
                        10549, 
                        10550, 
                        10551, 
                        10552, 
                        10553, 
                        10554, 
                        10555, 
                        10556, 
                        10557, 
                        10558, 
                        10559, 
                        10560, 
                        10561, 
                        10562, 
                        10563, 
                        10564, 
                        10565, 
                        10566, 
                        10567, 
                        10568, 
                        10568, 
                        10569, 
                        10570, 
                        10571, 
                        10572, 
                        10573, 
                        10574, 
                        10575, 
                        10576, 
                        10577, 
                        10578, 
                        10579, 
                        10580, 
                        10581, 
                        10582, 
                        10583, 
                        10584, 
                        10584, 
                        10585, 
                        10586, 
                        10587, 
                        10588, 
                        10589, 
                        10590, 
                        10591, 
                        10592, 
                        10593, 
                        10594, 
                        10595, 
                        10595, 
                        10596, 
                        10597, 
                        10598, 
                        10599, 
                        10600, 
                        10601, 
                        10602, 
                        10603, 
                        10604, 
                        10604, 
                        10605, 
                        10606, 
                        10607, 
                        10608, 
                        10609, 
                        10610, 
                        10611, 
                        10612, 
                        10612, 
                        10613, 
                        10614, 
                        10615, 
                        10616, 
                        10617, 
                        10618, 
                        10618, 
                        10619, 
                        10620, 
                        10621, 
                        10622, 
                        10623, 
                        10624, 
                        10624, 
                        10625, 
                        10626, 
                        10627, 
                        10628, 
                        10629, 
                        10630, 
                        10630, 
                        10631, 
                        10632, 
                        10633, 
                        10634, 
                        10635, 
                        10635, 
                        10636, 
                        10637, 
                        10638, 
                        10639, 
                        10639, 
                        10640, 
                        10641, 
                        10642, 
                        10643, 
                        10644, 
                        10644, 
                        10645, 
                        10646, 
                        10647, 
                        10648, 
                        10648, 
                        10649, 
                        10650, 
                        10651, 
                        10652, 
                        10652, 
                        10653, 
                        10654, 
                        10655, 
                        10656, 
                        10656, 
                        10657, 
                        10658, 
                        10659, 
                        10660, 
                        10660, 
                        10661, 
                        10662, 
                        10663, 
                        10663, 
                        10664, 
                        10665, 
                        10666, 
                        10667, 
                        10667, 
                        10668, 
                        10669, 
                        10670, 
                        10670, 
                        10671, 
                        10672, 
                        10673, 
                        10673, 
                        10674, 
                        10675, 
                        10676, 
                        10677, 
                        10677, 
                        10678, 
                        10679, 
                        10680, 
                        10680, 
                        10681, 
                        10682, 
                        10683, 
                        10683, 
                        10684, 
                        10685, 
                        10685, 
                        10686, 
                        10687, 
                        10688, 
                        10688, 
                        10689, 
                        10690, 
                        10691, 
                        10691, 
                        10692, 
                        10693, 
                        10694, 
                        10694, 
                        10695, 
                        10696, 
                        10696, 
                        10697, 
                        10698, 
                        10699, 
                        10699, 
                        10700, 
                        10701, 
                        10701, 
                        10702, 
                        10703, 
                        10704, 
                        10704, 
                        10705, 
                        10706, 
                        10706, 
                        10707, 
                        10708, 
                        10708, 
                        10709, 
                        10710, 
                        10711, 
                        10711, 
                        10712, 
                        10713, 
                        10713, 
                        10714, 
                        10715, 
                        10715, 
                        10716, 
                        10717, 
                        10717, 
                        10718, 
                        10719, 
                        10719, 
                        10720, 
                        10721, 
                        10722, 
                        10722, 
                        10723, 
                        10724, 
                        10724, 
                        10725, 
                        10726, 
                        10726, 
                        10727, 
                        10728, 
                        10728, 
                        10729, 
                        10730, 
                        10730, 
                        10731, 
                        10732, 
                        10732, 
                        10733, 
                        10734, 
                        10734, 
                        10735, 
                        10735, 
                        10736, 
                        10737, 
                        10737, 
                        10738, 
                        10739, 
                        10739, 
                        10740, 
                        10741, 
                        10741, 
                        10742, 
                        10743, 
                        10743, 
                        10744, 
                        10745, 
                        10745, 
                        10746, 
                        10746, 
                        10747, 
                        10748, 
                        10748, 
                        10749, 
                        10750, 
                        10750, 
                        10751, 
                        10751, 
                        10752, 
                        10753, 
                        10753, 
                        10754, 
                        10755, 
                        10755, 
                        10756, 
                        10756, 
                        10757, 
                        10758, 
                        10758, 
                        10759, 
                        10760, 
                        10760, 
                        10761, 
                        10761, 
                        10762, 
                        10763, 
                        10763, 
                        10764, 
                        10764, 
                        10765, 
                        10766, 
                        10766, 
                        10767, 
                        10767, 
                        10768, 
                        10769, 
                        10769, 
                        10770, 
                        10770, 
                        10771, 
                        10772, 
                        10772, 
                        10773, 
                        10773, 
                        10774, 
                        10775, 
                        10775, 
                        10776, 
                        10776, 
                        10777, 
                        10778, 
                        10778, 
                        10779, 
                        10779, 
                        10780, 
                        10780, 
                        10781, 
                        10782, 
                        10782, 
                        10783, 
                        10783, 
                        10784, 
                        10784, 
                        10785, 
                        10786, 
                        10786, 
                        10787, 
                        10787, 
                        10788, 
                        10788, 
                        10789, 
                        10790, 
                        10790, 
                        10791, 
                        10791, 
                        10792, 
                        10792, 
                        10793, 
                        10794, 
                        10794, 
                        10795, 
                        10795, 
                        10796, 
                        10796, 
                        10797, 
                        10797, 
                        10798, 
                        10799, 
                        10799, 
                        10800, 
                        10800, 
                        10801, 
                        10801, 
                        10802, 
                        10802, 
                        10803, 
                        10804, 
                        10804, 
                        10805, 
                        10805, 
                        10806, 
                        10806, 
                        10807, 
                        10807, 
                        10808, 
                        10808, 
                        10809, 
                        10809, 
                        10810, 
                        10811, 
                        10811, 
                        10812, 
                        10812, 
                        10813, 
                        10813, 
                        10814, 
                        10814, 
                        10815, 
                        10815, 
                        10816, 
                        10816, 
                        10817, 
                        10817, 
                        10818, 
                        10818, 
                        10819, 
                        10819, 
                        10820, 
                        10821, 
                        10821, 
                        10822, 
                        10822, 
                        10823, 
                        10823, 
                        10824, 
                        10824, 
                        10825, 
                        10825, 
                        10826, 
                        10826, 
                        10827, 
                        10827, 
                        10828, 
                        10828, 
                        10829, 
                        10829, 
                        10830, 
                        10830, 
                        10831, 
                        10831, 
                        10832, 
                        10832, 
                        10833, 
                        10833, 
                        10834, 
                        10834, 
                        10835, 
                        10835, 
                        10836, 
                        10836, 
                        10837, 
                        10837, 
                        10838, 
                        10838, 
                        10839, 
                        10839, 
                        10840, 
                        10840, 
                        10841, 
                        10841, 
                        10842, 
                        10842, 
                        10843, 
                        10843, 
                        10844, 
                        10844, 
                        10845, 
                        10845, 
                        10846, 
                        10846, 
                        10847, 
                        10847, 
                        10848, 
                        10848, 
                        10848, 
                        10849, 
                        10849, 
                        10850, 
                        10850, 
                        10851, 
                        10851, 
                        10852, 
                        10852, 
                        10853, 
                        10853, 
                        10854, 
                        10854, 
                        10855, 
                        10855, 
                        10856, 
                        10856, 
                        10857, 
                        10857, 
                        10857, 
                        10858, 
                        10858, 
                        10859, 
                        10859, 
                        10860, 
                        10860, 
                        10861, 
                        10861, 
                        10862, 
                        10862, 
                        10863, 
                        10863, 
                        10863, 
                        10864, 
                        10864, 
                        10865, 
                        10865, 
                        10866, 
                        10866, 
                        10867, 
                        10867, 
                        10868, 
                        10868, 
                        10868, 
                        10869, 
                        10869, 
                        10870, 
                        10870, 
                        10871, 
                        10871, 
                        10872, 
                        10872, 
                        10872, 
                        10873, 
                        10873, 
                        10874, 
                        10874, 
                        10875, 
                        10875, 
                        10876, 
                        10876, 
                        10876, 
                        10877, 
                        10877, 
                        10878, 
                        10878, 
                        10879, 
                        10879, 
                        10880, 
                        10880, 
                        10880, 
                        10881, 
                        10881, 
                        10882, 
                        10882, 
                        10883, 
                        10883, 
                        10883, 
                        10884, 
                        10884, 
                        10885, 
                        10885, 
                        10886, 
                        10886, 
                        10886, 
                        10887, 
                        10887, 
                        10888, 
                        10888, 
                        10889, 
                        10889, 
                        10889, 
                        10890, 
                        10890, 
                        10891, 
                        10891, 
                        10892, 
                        10892, 
                        10892, 
                        10893, 
                        10893, 
                        10894, 
                        10894, 
                        10894, 
                        10895, 
                        10895, 
                        10896, 
                        10896, 
                        10897, 
                        10897, 
                        10897, 
                        10898, 
                        10898, 
                        10899, 
                        10899, 
                        10899, 
                        10900, 
                        10900, 
                        10901, 
                        10901, 
                        10901, 
                        10902, 
                        10902, 
                        10903, 
                        10903, 
                        10903, 
                        10904, 
                        10904, 
                        10905, 
                        10905, 
                        10905, 
                        10906, 
                        10906, 
                        10907, 
                        10907, 
                        10907, 
                        10908, 
                        10908, 
                        10909, 
                        10909, 
                        10909, 
                        10910, 
                        10910, 
                        10911, 
                        10911, 
                        10911, 
                        10912, 
                        10912, 
                        10913, 
                        10913, 
                        10913, 
                        10914, 
                        10914, 
                        10915, 
                        10915, 
                        10915, 
                        10916, 
                        10916, 
                        10917, 
                        10917, 
                        10917, 
                        10918, 
                        10918, 
                        10918, 
                        10919, 
                        10919, 
                        10920, 
                        10920, 
                        10920, 
                        10921, 
                        10921, 
                        10922, 
                        10922, 
                        10922, 
                        10923, 
                        10923, 
                        10923, 
                        10924, 
                        10924, 
                        10925, 
                        10925, 
                        10925, 
                        10926, 
                        10926, 
                        10926, 
                        10927, 
                        10927, 
                        10928, 
                        10928, 
                        10928, 
                        10929, 
                        10929, 
                        10929, 
                        10930, 
                        10930, 
                        10931, 
                        10931, 
                        10931, 
                        10932, 
                        10932, 
                        10932, 
                        10933, 
                        10933, 
                        10933, 
                        10934, 
                        10934, 
                        10935, 
                        10935, 
                        10935, 
                        10936, 
                        10936, 
                        10936, 
                        10937, 
                        10937, 
                        10937, 
                        10938, 
                        10938, 
                        10939, 
                        10939, 
                        10939, 
                        10940, 
                        10940, 
                        10940, 
                        10941, 
                        10941, 
                        10941, 
                        10942, 
                        10942, 
                        10942, 
                        10943, 
                        10943, 
                        10944, 
                        10944, 
                        10944, 
                        10945, 
                        10945, 
                        10945, 
                        10946, 
                        10946, 
                        10946, 
                        10947, 
                        10947, 
                        10947, 
                        10948, 
                        10948, 
                        10948, 
                        10949, 
                        10949, 
                        10949, 
                        10950, 
                        10950, 
                        10950, 
                        10951, 
                        10951, 
                        10952, 
                        10952, 
                        10952, 
                        10953, 
                        10953, 
                        10953, 
                        10954, 
                        10954, 
                        10954, 
                        10955, 
                        10955, 
                        10955, 
                        10956, 
                        10956, 
                        10956, 
                        10957, 
                        10957, 
                        10957, 
                        10958, 
                        10958, 
                        10958, 
                        10959, 
                        10959, 
                        10959, 
                        10960, 
                        10960, 
                        10960, 
                        10961, 
                        10961, 
                        10961, 
                        10962, 
                        10962, 
                        10962, 
                        10963, 
                        10963, 
                        10963, 
                        10964, 
                        10964, 
                        10964, 
                        10965, 
                        10965, 
                        10965, 
                        10966, 
                        10966, 
                        10966, 
                        10967, 
                        10967, 
                        10967, 
                        10968, 
                        10968, 
                        10968, 
                        10969, 
                        10969, 
                        10969, 
                        10969, 
                        10970, 
                        10970, 
                        10970, 
                        10971, 
                        10971, 
                        10971, 
                        10972, 
                        10972, 
                        10972, 
                        10973, 
                        10973, 
                        10973, 
                        10974, 
                        10974, 
                        10974, 
                        10975, 
                        10975, 
                        10975, 
                        10976, 
                        10976, 
                        10976, 
                        10976, 
                        10977, 
                        10977, 
                        10977, 
                        10978, 
                        10978, 
                        10978, 
                        10979, 
                        10979, 
                        10979, 
                        10980, 
                        10980, 
                        10980, 
                        10981, 
                        10981, 
                        10981, 
                        10981, 
                        10982, 
                        10982, 
                        10982, 
                        10983, 
                        10983, 
                        10983, 
                        10984, 
                        10984, 
                        10984, 
                        10985, 
                        10985, 
                        10985, 
                        10985, 
                        10986, 
                        10986, 
                        10986, 
                        10987, 
                        10987, 
                        10987, 
                        10988, 
                        10988, 
                        10988, 
                        10988, 
                        10989, 
                        10989, 
                        10989, 
                        10990, 
                        10990, 
                        10990, 
                        10991, 
                        10991, 
                        10991, 
                        10991, 
                        10992, 
                        10992, 
                        10992, 
                        10993, 
                        10993, 
                        10993, 
                        10994, 
                        10994, 
                        10994, 
                        10994, 
                        10995, 
                        10995, 
                        10995, 
                        10996, 
                        10996, 
                        10996, 
                        10996, 
                        10997, 
                        10997, 
                        10997, 
                        10998, 
                        10998, 
                        10998, 
                        10998, 
                        10999, 
                        10999, 
                        10999, 
                        11000, 
                        11000, 
                        11000, 
                        11001, 
                        11001, 
                        11001, 
                        11001, 
                        11002, 
                        11002, 
                        11002, 
                        11003, 
                        11003, 
                        11003, 
                        11003, 
                        11004, 
                        11004, 
                        11004, 
                        11004, 
                        11005, 
                        11005, 
                        11005, 
                        11006, 
                        11006, 
                        11006, 
                        11006, 
                        11007, 
                        11007, 
                        11007, 
                        11008, 
                        11008, 
                        11008, 
                        11008, 
                        11009, 
                        11009, 
                        11009, 
                        11010, 
                        11010, 
                        11010, 
                        11010, 
                        11011, 
                        11011, 
                        11011, 
                        11011, 
                        11012, 
                        11012, 
                        11012, 
                        11013, 
                        11013, 
                        11013, 
                        11013, 
                        11014, 
                        11014, 
                        11014, 
                        11014, 
                        11015, 
                        11015, 
                        11015, 
                        11016, 
                        11016, 
                        11016, 
                        11016, 
                        11017, 
                        11017, 
                        11017, 
                        11017, 
                        11018, 
                        11018, 
                        11018, 
                        11019, 
                        11019, 
                        11019, 
                        11019, 
                        11020, 
                        11020, 
                        11020, 
                        11020, 
                        11021, 
                        11021, 
                        11021, 
                        11021, 
                        11022, 
                        11022, 
                        11022, 
                        11022, 
                        11023, 
                        11023, 
                        11023, 
                        11024, 
                        11024, 
                        11024, 
                        11024, 
                        11025, 
                        11025, 
                        11025, 
                        11025, 
                        11026, 
                        11026, 
                        11026, 
                        11026, 
                        11027, 
                        11027, 
                        11027, 
                        11027, 
                        11028, 
                        11028, 
                        11028, 
                        11028, 
                        11029, 
                        11029, 
                        11029, 
                        11030, 
                        11030, 
                        11030, 
                        11030, 
                        11031, 
                        11031, 
                        11031, 
                        11031, 
                        11032, 
                        11032, 
                        11032, 
                        11032, 
                        11033, 
                        11033, 
                        11033, 
                        11033, 
                        11034, 
                        11034, 
                        11034, 
                        11034, 
                        11035, 
                        11035, 
                        11035, 
                        11035, 
                        11036, 
                        11036, 
                        11036, 
                        11036, 
                        11037, 
                        11037, 
                        11037, 
                        11037, 
                        11038, 
                        11038, 
                        11038, 
                        11038, 
                        11039, 
                        11039, 
                        11039, 
                        11039, 
                        11040, 
                        11040, 
                        11040, 
                        11040, 
                        11041, 
                        11041, 
                        11041, 
                        11041, 
                        11041, 
                        11042, 
                        11042, 
                        11042, 
                        11042, 
                        11043, 
                        11043, 
                        11043, 
                        11043, 
                        11044, 
                        11044, 
                        11044, 
                        11044, 
                        11045, 
                        11045, 
                        11045, 
                        11045, 
                        11046, 
                        11046, 
                        11046, 
                        11046, 
                        11047, 
                        11047, 
                        11047, 
                        11047, 
                        11048, 
                        11048, 
                        11048, 
                        11048, 
                        11048, 
                        11049, 
                        11049, 
                        11049, 
                        11049, 
                        11050, 
                        11050, 
                        11050, 
                        11050, 
                        11051, 
                        11051, 
                        11051, 
                        11051, 
                        11052, 
                        11052, 
                        11052, 
                        11052, 
                        11052, 
                        11053, 
                        11053, 
                        11053, 
                        11053, 
                        11054, 
                        11054, 
                        11054, 
                        11054, 
                        11055, 
                        11055, 
                        11055, 
                        11055, 
                        11055, 
                        11056, 
                        11056, 
                        11056, 
                        11056, 
                        11057, 
                        11057, 
                        11057, 
                        11057, 
                        11057, 
                        11058, 
                        11058, 
                        11058, 
                        11058, 
                        11059, 
                        11059, 
                        11059, 
                        11059, 
                        11060, 
                        11060, 
                        11060, 
                        11060, 
                        11060, 
                        11061, 
                        11061, 
                        11061, 
                        11061, 
                        11062, 
                        11062, 
                        11062, 
                        11062, 
                        11062, 
                        11063, 
                        11063, 
                        11063, 
                        11063, 
                        11064, 
                        11064, 
                        11064, 
                        11064, 
                        11064, 
                        11065, 
                        11065, 
                        11065, 
                        11065, 
                        11066, 
                        11066, 
                        11066, 
                        11066, 
                        11066, 
                        11067, 
                        11067, 
                        11067, 
                        11067, 
                        11068, 
                        11068, 
                        11068, 
                        11068, 
                        11068, 
                        11069, 
                        11069, 
                        11069, 
                        11069, 
                        11069, 
                        11070, 
                        11070, 
                        11070, 
                        11070, 
                        11071, 
                        11071, 
                        11071, 
                        11071, 
                        11071, 
                        11072, 
                        11072, 
                        11072, 
                        11072, 
                        11072, 
                        11073, 
                        11073, 
                        11073, 
                        11073, 
                        11074, 
                        11074, 
                        11074, 
                        11074, 
                        11074, 
                        11075, 
                        11075, 
                        11075, 
                        11075, 
                        11075, 
                        11076, 
                        11076, 
                        11076, 
                        11076, 
                        11076, 
                        11077, 
                        11077, 
                        11077, 
                        11077, 
                        11078, 
                        11078, 
                        11078, 
                        11078, 
                        11078, 
                        11079, 
                        11079, 
                        11079, 
                        11079, 
                        11079, 
                        11080, 
                        11080, 
                        11080, 
                        11080, 
                        11080, 
                        11081, 
                        11081, 
                        11081, 
                        11081, 
                        11081, 
                        11082, 
                        11082, 
                        11082, 
                        11082, 
                        11082, 
                        11083, 
                        11083, 
                        11083, 
                        11083, 
                        11083, 
                        11084, 
                        11084, 
                        11084, 
                        11084, 
                        11085, 
                        11085, 
                        11085, 
                        11085, 
                        11085, 
                        11086, 
                        11086, 
                        11086, 
                        11086, 
                        11086, 
                        11087, 
                        11087, 
                        11087, 
                        11087, 
                        11087, 
                        11088, 
                        11088, 
                        11088, 
                        11088, 
                        11088, 
                        11088, 
                        11089, 
                        11089, 
                        11089, 
                        11089, 
                        11089, 
                        11090, 
                        11090, 
                        11090, 
                        11090, 
                        11090, 
                        11091, 
                        11091, 
                        11091, 
                        11091, 
                        11091, 
                        11092, 
                        11092, 
                        11092, 
                        11092, 
                        11092, 
                        11093, 
                        11093, 
                        11093, 
                        11093, 
                        11093, 
                        11094, 
                        11094, 
                        11094, 
                        11094, 
                        11094, 
                        11095, 
                        11095, 
                        11095, 
                        11095, 
                        11095, 
                        11096, 
                        11096, 
                        11096, 
                        11096, 
                        11096, 
                        11096, 
                        11097, 
                        11097, 
                        11097, 
                        11097, 
                        11097, 
                        11098, 
                        11098, 
                        11098, 
                        11098, 
                        11098, 
                        11099, 
                        11099, 
                        11099, 
                        11099, 
                        11099, 
                        11100, 
                        11100, 
                        11100, 
                        11100, 
                        11100, 
                        11100, 
                        11101, 
                        11101, 
                        11101, 
                        11101, 
                        11101, 
                        11102, 
                        11102, 
                        11102, 
                        11102, 
                        11102, 
                        11102, 
                        11103, 
                        11103, 
                        11103, 
                        11103, 
                        11103, 
                        11104, 
                        11104, 
                        11104, 
                        11104, 
                        11104, 
                        11105, 
                        11105, 
                        11105, 
                        11105, 
                        11105, 
                        11105, 
                        11106, 
                        11106, 
                        11106, 
                        11106, 
                        11106, 
                        11107, 
                        11107, 
                        11107, 
                        11107, 
                        11107, 
                        11107, 
                        11108, 
                        11108, 
                        11108, 
                        11108, 
                        11108, 
                        11109, 
                        11109, 
                        11109, 
                        11109, 
                        11109, 
                        11109, 
                        11110, 
                        11110, 
                        11110, 
                        11110, 
                        11110, 
                        11110, 
                        11111, 
                        11111, 
                        11111, 
                        11111, 
                        11111, 
                        11112, 
                        11112, 
                        11112, 
                        11112, 
                        11112, 
                        11112, 
                        11113, 
                        11113, 
                        11113, 
                        11113, 
                        11113, 
                        11114, 
                        11114, 
                        11114, 
                        11114, 
                        11114, 
                        11114, 
                        11115, 
                        11115, 
                        11115, 
                        11115, 
                        11115, 
                        11115, 
                        11116, 
                        11116, 
                        11116, 
                        11116, 
                        11116, 
                        11116, 
                        11117, 
                        11117, 
                        11117, 
                        11117, 
                        11117, 
                        11118, 
                        11118, 
                        11118, 
                        11118, 
                        11118, 
                        11118, 
                        11119, 
                        11119, 
                        11119, 
                        11119, 
                        11119, 
                        11119, 
                        11120, 
                        11120, 
                        11120, 
                        11120, 
                        11120, 
                        11120, 
                        11121, 
                        11121, 
                        11121, 
                        11121, 
                        11121, 
                        11121, 
                        11122, 
                        11122, 
                        11122, 
                        11122, 
                        11122, 
                        11122, 
                        11123, 
                        11123, 
                        11123, 
                        11123, 
                        11123, 
                        11123, 
                        11124, 
                        11124, 
                        11124, 
                        11124, 
                        11124, 
                        11124, 
                        11125, 
                        11125, 
                        11125, 
                        11125, 
                        11125, 
                        11125, 
                        11126, 
                        11126, 
                        11126, 
                        11126, 
                        11126, 
                        11126, 
                        11127, 
                        11127, 
                        11127, 
                        11127, 
                        11127, 
                        11127, 
                        11128, 
                        11128, 
                        11128, 
                        11128, 
                        11128, 
                        11128, 
                        11129, 
                        11129, 
                        11129, 
                        11129, 
                        11129, 
                        11129, 
                        11130, 
                        11130, 
                        11130, 
                        11130, 
                        11130, 
                        11130, 
                        11131, 
                        11131, 
                        11131, 
                        11131, 
                        11131, 
                        11131, 
                        11131, 
                        11132, 
                        11132, 
                        11132, 
                        11132, 
                        11132, 
                        11132, 
                        11133, 
                        11133, 
                        11133, 
                        11133, 
                        11133, 
                        11133, 
                        11134, 
                        11134, 
                        11134, 
                        11134, 
                        11134, 
                        11134, 
                        11135, 
                        11135, 
                        11135, 
                        11135, 
                        11135, 
                        11135, 
                        11135, 
                        11136, 
                        11136, 
                        11136, 
                        11136, 
                        11136, 
                        11136, 
                        11137, 
                        11137, 
                        11137, 
                        11137, 
                        11137, 
                        11137, 
                        11138, 
                        11138, 
                        11138, 
                        11138, 
                        11138, 
                        11138, 
                        11138, 
                        11139, 
                        11139, 
                        11139, 
                        11139, 
                        11139, 
                        11139, 
                        11140, 
                        11140, 
                        11140, 
                        11140, 
                        11140, 
                        11140, 
                        11140, 
                        11141, 
                        11141, 
                        11141, 
                        11141, 
                        11141, 
                        11141, 
                        11142, 
                        11142, 
                        11142, 
                        11142, 
                        11142, 
                        11142, 
                        11142, 
                        11143, 
                        11143, 
                        11143, 
                        11143, 
                        11143, 
                        11143, 
                        11143, 
                        11144, 
                        11144, 
                        11144, 
                        11144, 
                        11144, 
                        11144, 
                        11145, 
                        11145, 
                        11145, 
                        11145, 
                        11145, 
                        11145, 
                        11145, 
                        11146, 
                        11146, 
                        11146, 
                        11146, 
                        11146, 
                        11146, 
                        11146, 
                        11147, 
                        11147, 
                        11147, 
                        11147, 
                        11147, 
                        11147, 
                        11148, 
                        11148, 
                        11148, 
                        11148, 
                        11148, 
                        11148, 
                        11148, 
                        11149, 
                        11149, 
                        11149, 
                        11149, 
                        11149, 
                        11149, 
                        11149, 
                        11150, 
                        11150, 
                        11150, 
                        11150, 
                        11150, 
                        11150, 
                        11150, 
                        11151, 
                        11151, 
                        11151, 
                        11151, 
                        11151, 
                        11151, 
                        11151, 
                        11152, 
                        11152, 
                        11152, 
                        11152, 
                        11152, 
                        11152, 
                        11152, 
                        11153, 
                        11153, 
                        11153, 
                        11153, 
                        11153, 
                        11153, 
                        11153, 
                        11154, 
                        11154, 
                        11154, 
                        11154, 
                        11154, 
                        11154, 
                        11154, 
                        11155, 
                        11155, 
                        11155, 
                        11155, 
                        11155, 
                        11155, 
                        11155, 
                        11156, 
                        11156, 
                        11156, 
                        11156, 
                        11156, 
                        11156, 
                        11156, 
                        11157, 
                        11157, 
                        11157, 
                        11157, 
                        11157, 
                        11157, 
                        11157, 
                        11158, 
                        11158, 
                        11158, 
                        11158, 
                        11158, 
                        11158, 
                        11158, 
                        11159, 
                        11159, 
                        11159, 
                        11159, 
                        11159, 
                        11159, 
                        11159, 
                        11160, 
                        11160, 
                        11160, 
                        11160, 
                        11160, 
                        11160, 
                        11160, 
                        11160, 
                        11161, 
                        11161, 
                        11161, 
                        11161, 
                        11161, 
                        11161, 
                        11161, 
                        11162, 
                        11162, 
                        11162, 
                        11162, 
                        11162, 
                        11162, 
                        11162, 
                        11163, 
                        11163, 
                        11163, 
                        11163, 
                        11163, 
                        11163, 
                        11163, 
                        11163, 
                        11164, 
                        11164, 
                        11164, 
                        11164, 
                        11164, 
                        11164, 
                        11164, 
                        11165, 
                        11165, 
                        11165, 
                        11165, 
                        11165, 
                        11165, 
                        11165, 
                        11166, 
                        11166, 
                        11166, 
                        11166, 
                        11166, 
                        11166, 
                        11166, 
                        11166, 
                        11167, 
                        11167, 
                        11167, 
                        11167, 
                        11167, 
                        11167, 
                        11167, 
                        11167, 
                        11168, 
                        11168, 
                        11168, 
                        11168, 
                        11168, 
                        11168, 
                        11168, 
                        11169, 
                        11169, 
                        11169, 
                        11169, 
                        11169, 
                        11169, 
                        11169, 
                        11169, 
                        11170, 
                        11170, 
                        11170, 
                        11170, 
                        11170, 
                        11170, 
                        11170, 
                        11171, 
                        11171, 
                        11171, 
                        11171, 
                        11171, 
                        11171, 
                        11171, 
                        11171, 
                        11172, 
                        11172, 
                        11172, 
                        11172, 
                        11172, 
                        11172, 
                        11172, 
                        11172, 
                        11173, 
                        11173, 
                        11173, 
                        11173, 
                        11173, 
                        11173, 
                        11173, 
                        11173, 
                        11174, 
                        11174, 
                        11174, 
                        11174, 
                        11174, 
                        11174, 
                        11174, 
                        11174, 
                        11175, 
                        11175, 
                        11175, 
                        11175, 
                        11175, 
                        11175, 
                        11175, 
                        11176, 
                        11176, 
                        11176, 
                        11176, 
                        11176, 
                        11176, 
                        11176, 
                        11176, 
                        11177, 
                        11177, 
                        11177, 
                        11177, 
                        11177, 
                        11177, 
                        11177, 
                        11177, 
                        11178, 
                        11178, 
                        11178, 
                        11178, 
                        11178, 
                        11178, 
                        11178, 
                        11178, 
                        11179, 
                        11179, 
                        11179, 
                        11179, 
                        11179, 
                        11179, 
                        11179, 
                        11179, 
                        11180, 
                        11180, 
                        11180, 
                        11180, 
                        11180, 
                        11180, 
                        11180, 
                        11180, 
                        11180, 
                        11181, 
                        11181, 
                        11181, 
                        11181, 
                        11181, 
                        11181, 
                        11181, 
                        11181, 
                        11182, 
                        11182, 
                        11182, 
                        11182, 
                        11182, 
                        11182, 
                        11182, 
                        11182, 
                        11183, 
                        11183, 
                        11183, 
                        11183, 
                        11183, 
                        11183, 
                        11183, 
                        11183, 
                        11184, 
                        11184, 
                        11184, 
                        11184, 
                        11184, 
                        11184, 
                        11184, 
                        11184, 
                        11184, 
                        11185, 
                        11185, 
                        11185, 
                        11185, 
                        11185, 
                        11185, 
                        11185, 
                        11185, 
                        11186, 
                        11186, 
                        11186, 
                        11186, 
                        11186, 
                        11186, 
                        11186, 
                        11186, 
                        11187, 
                        11187, 
                        11187, 
                        11187, 
                        11187, 
                        11187, 
                        11187, 
                        11187, 
                        11187, 
                        11188, 
                        11188, 
                        11188, 
                        11188, 
                        11188, 
                        11188, 
                        11188, 
                        11188, 
                        11189, 
                        11189, 
                        11189, 
                        11189, 
                        11189, 
                        11189, 
                        11189, 
                        11189, 
                        11189, 
                        11190, 
                        11190, 
                        11190, 
                        11190, 
                        11190, 
                        11190, 
                        11190, 
                        11190, 
                        11190, 
                        11191, 
                        11191, 
                        11191, 
                        11191, 
                        11191, 
                        11191, 
                        11191, 
                        11191, 
                        11192, 
                        11192, 
                        11192, 
                        11192, 
                        11192, 
                        11192, 
                        11192, 
                        11192, 
                        11192, 
                        11193, 
                        11193, 
                        11193, 
                        11193, 
                        11193, 
                        11193, 
                        11193, 
                        11193, 
                        11193, 
                        11194, 
                        11194, 
                        11194, 
                        11194, 
                        11194, 
                        11194, 
                        11194, 
                        11194, 
                        11194, 
                        11195, 
                        11195, 
                        11195, 
                        11195, 
                        11195, 
                        11195, 
                        11195, 
                        11195, 
                        11196, 
                        11196, 
                        11196, 
                        11196, 
                        11196, 
                        11196, 
                        11196, 
                        11196, 
                        11196, 
                        11197, 
                        11197, 
                        11197, 
                        11197, 
                        11197, 
                        11197, 
                        11197, 
                        11197, 
                        11197, 
                        11198, 
                        11198, 
                        11198, 
                        11198, 
                        11198, 
                        11198, 
                        11198, 
                        11198, 
                        11198, 
                        11199, 
                        11199, 
                        11199, 
                        11199, 
                        11199, 
                        11199, 
                        11199, 
                        11199, 
                        11199, 
                        11199, 
                        11200, 
                        11200, 
                        11200, 
                        11200, 
                        11200, 
                        11200, 
                        11200, 
                        11200, 
                        11200, 
                        11201, 
                        11201, 
                        11201, 
                        11201, 
                        11201, 
                        11201, 
                        11201, 
                        11201, 
                        11201, 
                        11202, 
                        11202, 
                        11202, 
                        11202, 
                        11202, 
                        11202, 
                        11202, 
                        11202, 
                        11202, 
                        11203, 
                        11203, 
                        11203, 
                        11203, 
                        11203, 
                        11203, 
                        11203, 
                        11203, 
                        11203, 
                        11203, 
                        11204, 
                        11204, 
                        11204, 
                        11204, 
                        11204, 
                        11204, 
                        11204, 
                        11204, 
                        11204, 
                        11205, 
                        11205, 
                        11205, 
                        11205, 
                        11205, 
                        11205, 
                        11205, 
                        11205, 
                        11205, 
                        11205, 
                        11206, 
                        11206, 
                        11206, 
                        11206, 
                        11206, 
                        11206, 
                        11206, 
                        11206, 
                        11206, 
                        11207, 
                        11207, 
                        11207, 
                        11207, 
                        11207, 
                        11207, 
                        11207, 
                        11207, 
                        11207, 
                        11207, 
                        11208, 
                        11208, 
                        11208, 
                        11208, 
                        11208, 
                        11208, 
                        11208, 
                        11208, 
                        11208, 
                        11209, 
                        11209, 
                        11209, 
                        11209, 
                        11209, 
                        11209, 
                        11209, 
                        11209, 
                        11209, 
                        11209, 
                        11210, 
                        11210, 
                        11210, 
                        11210, 
                        11210, 
                        11210, 
                        11210, 
                        11210, 
                        11210, 
                        11210, 
                        11211, 
                        11211, 
                        11211, 
                        11211, 
                        11211, 
                        11211, 
                        11211, 
                        11211, 
                        11211, 
                        11211, 
                        11212, 
                        11212, 
                        11212, 
                        11212, 
                        11212, 
                        11212, 
                        11212, 
                        11212, 
                        11212, 
                        11212, 
                        11213, 
                        11213, 
                        11213, 
                        11213, 
                        11213, 
                        11213, 
                        11213, 
                        11213, 
                        11213, 
                        11214, 
                        11214, 
                        11214, 
                        11214, 
                        11214, 
                        11214, 
                        11214, 
                        11214, 
                        11214, 
                        11214, 
                        11214, 
                        11215, 
                        11215, 
                        11215, 
                        11215, 
                        11215, 
                        11215, 
                        11215, 
                        11215, 
                        11215, 
                        11215, 
                        11216, 
                        11216, 
                        11216, 
                        11216, 
                        11216, 
                        11216, 
                        11216, 
                        11216, 
                        11216, 
                        11216, 
                        11217, 
                        11217, 
                        11217, 
                        11217, 
                        11217, 
                        11217, 
                        11217, 
                        11217, 
                        11217, 
                        11217, 
                        11218, 
                        11218, 
                        11218, 
                        11218, 
                        11218, 
                        11218, 
                        11218, 
                        11218, 
                        11218, 
                        11218, 
                        11219, 
                        11219, 
                        11219, 
                        11219, 
                        11219, 
                        11219, 
                        11219, 
                        11219, 
                        11219, 
                        11219, 
                        11219, 
                        11220, 
                        11220, 
                        11220, 
                        11220, 
                        11220, 
                        11220, 
                        11220, 
                        11220, 
                        11220, 
                        11220, 
                        11221, 
                        11221, 
                        11221, 
                        11221, 
                        11221, 
                        11221, 
                        11221, 
                        11221, 
                        11221, 
                        11221, 
                        11221, 
                        11222, 
                        11222, 
                        11222, 
                        11222, 
                        11222, 
                        11222, 
                        11222, 
                        11222, 
                        11222, 
                        11222, 
                        11223, 
                        11223, 
                        11223, 
                        11223, 
                        11223, 
                        11223, 
                        11223, 
                        11223, 
                        11223, 
                        11223, 
                        11223, 
                        11224, 
                        11224, 
                        11224, 
                        11224, 
                        11224, 
                        11224, 
                        11224, 
                        11224, 
                        11224, 
                        11224, 
                        11224, 
                        11225, 
                        11225, 
                        11225, 
                        11225, 
                        11225, 
                        11225, 
                        11225, 
                        11225, 
                        11225, 
                        11225, 
                        11226, 
                        11226, 
                        11226, 
                        11226, 
                        11226, 
                        11226, 
                        11226, 
                        11226, 
                        11226, 
                        11226, 
                        11226, 
                        11227, 
                        11227, 
                        11227, 
                        11227, 
                        11227, 
                        11227, 
                        11227, 
                        11227, 
                        11227, 
                        11227, 
                        11227, 
                        11228, 
                        11228, 
                        11228, 
                        11228, 
                        11228, 
                        11228, 
                        11228, 
                        11228, 
                        11228, 
                        11228, 
                        11228, 
                        11229, 
                        11229, 
                        11229, 
                        11229, 
                        11229, 
                        11229, 
                        11229, 
                        11229, 
                        11229, 
                        11229, 
                        11229, 
                        11230, 
                        11230, 
                        11230, 
                        11230, 
                        11230, 
                        11230, 
                        11230, 
                        11230, 
                        11230, 
                        11230, 
                        11230, 
                        11231, 
                        11231, 
                        11231, 
                        11231, 
                        11231, 
                        11231, 
                        11231, 
                        11231, 
                        11231, 
                        11231, 
                        11231, 
                        11231, 
                        11232, 
                        11232, 
                        11232, 
                        11232, 
                        11232, 
                        11232, 
                        11232, 
                        11232, 
                        11232, 
                        11232, 
                        11232, 
                        11233, 
                        11233, 
                        11233, 
                        11233, 
                        11233, 
                        11233, 
                        11233, 
                        11233, 
                        11233, 
                        11233, 
                        11233, 
                        11234, 
                        11234, 
                        11234, 
                        11234, 
                        11234, 
                        11234, 
                        11234, 
                        11234, 
                        11234, 
                        11234, 
                        11234, 
                        11234, 
                        11235, 
                        11235, 
                        11235, 
                        11235, 
                        11235, 
                        11235, 
                        11235, 
                        11235, 
                        11235, 
                        11235, 
                        11235, 
                        11236, 
                        11236, 
                        11236, 
                        11236, 
                        11236, 
                        11236, 
                        11236, 
                        11236, 
                        11236, 
                        11236, 
                        11236, 
                        11236, 
                        11237, 
                        11237, 
                        11237, 
                        11237, 
                        11237, 
                        11237, 
                        11237, 
                        11237, 
                        11237, 
                        11237, 
                        11237, 
                        11237, 
                        11238, 
                        11238, 
                        11238, 
                        11238, 
                        11238, 
                        11238, 
                        11238, 
                        11238, 
                        11238, 
                        11238, 
                        11238, 
                        11238, 
                        11239, 
                        11239, 
                        11239, 
                        11239, 
                        11239, 
                        11239, 
                        11239, 
                        11239, 
                        11239, 
                        11239, 
                        11239, 
                        11239, 
                        11240, 
                        11240, 
                        11240, 
                        11240, 
                        11240, 
                        11240, 
                        11240, 
                        11240, 
                        11240, 
                        11240, 
                        11240, 
                        11241, 
                        11241, 
                        11241, 
                        11241, 
                        11241, 
                        11241, 
                        11241, 
                        11241, 
                        11241, 
                        11241, 
                        11241, 
                        11241, 
                        11241, 
                        11242, 
                        11242, 
                        11242, 
                        11242, 
                        11242, 
                        11242, 
                        11242, 
                        11242, 
                        11242, 
                        11242, 
                        11242, 
                        11242, 
                        11243, 
                        11243, 
                        11243, 
                        11243, 
                        11243, 
                        11243, 
                        11243, 
                        11243, 
                        11243, 
                        11243, 
                        11243, 
                        11243, 
                        11244, 
                        11244, 
                        11244, 
                        11244, 
                        11244, 
                        11244, 
                        11244, 
                        11244, 
                        11244, 
                        11244, 
                        11244, 
                        11244, 
                        11245, 
                        11245, 
                        11245, 
                        11245, 
                        11245, 
                        11245, 
                        11245, 
                        11245, 
                        11245, 
                        11245, 
                        11245, 
                        11245, 
                        11245, 
                        11246, 
                        11246, 
                        11246, 
                        11246, 
                        11246, 
                        11246, 
                        11246, 
                        11246, 
                        11246, 
                        11246, 
                        11246, 
                        11246, 
                        11247, 
                        11247, 
                        11247, 
                        11247, 
                        11247, 
                        11247, 
                        11247, 
                        11247, 
                        11247, 
                        11247, 
                        11247, 
                        11247, 
                        11247, 
                        11248, 
                        11248, 
                        11248, 
                        11248, 
                        11248, 
                        11248, 
                        11248, 
                        11248, 
                        11248, 
                        11248, 
                        11248, 
                        11248, 
                        11248, 
                        11249, 
                        11249, 
                        11249, 
                        11249, 
                        11249, 
                        11249, 
                        11249, 
                        11249, 
                        11249, 
                        11249, 
                        11249, 
                        11249, 
                        11250, 
                        11250, 
                        11250, 
                        11250, 
                        11250, 
                        11250, 
                        11250, 
                        11250, 
                        11250, 
                        11250, 
                        11250, 
                        11250, 
                        11250, 
                        11251, 
                        11251, 
                        11251, 
                        11251, 
                        11251, 
                        11251, 
                        11251, 
                        11251, 
                        11251, 
                        11251, 
                        11251, 
                        11251, 
                        11251, 
                        11252, 
                        11252, 
                        11252, 
                        11252, 
                        11252, 
                        11252, 
                        11252, 
                        11252, 
                        11252, 
                        11252, 
                        11252, 
                        11252, 
                        11252, 
                        11253, 
                        11253, 
                        11253, 
                        11253, 
                        11253, 
                        11253, 
                        11253, 
                        11253, 
                        11253, 
                        11253, 
                        11253, 
                        11253, 
                        11253, 
                        11254, 
                        11254, 
                        11254, 
                        11254, 
                        11254, 
                        11254, 
                        11254, 
                        11254, 
                        11254, 
                        11254, 
                        11254, 
                        11254, 
                        11254, 
                        11254, 
                        11255, 
                        11255, 
                        11255, 
                        11255, 
                        11255, 
                        11255, 
                        11255, 
                        11255, 
                        11255, 
                        11255, 
                        11255, 
                        11255, 
                        11255, 
                        11256, 
                        11256, 
                        11256, 
                        11256, 
                        11256, 
                        11256, 
                        11256, 
                        11256, 
                        11256, 
                        11256, 
                        11256, 
                        11256, 
                        11256, 
                        11256, 
                        11257, 
                        11257, 
                        11257, 
                        11257, 
                        11257, 
                        11257, 
                        11257, 
                        11257, 
                        11257, 
                        11257, 
                        11257, 
                        11257, 
                        11257, 
                        11258, 
                        11258, 
                        11258, 
                        11258, 
                        11258, 
                        11258, 
                        11258, 
                        11258, 
                        11258, 
                        11258, 
                        11258, 
                        11258, 
                        11258, 
                        11258, 
                        11259, 
                        11259, 
                        11259, 
                        11259, 
                        11259, 
                        11259, 
                        11259, 
                        11259, 
                        11259, 
                        11259, 
                        11259, 
                        11259, 
                        11259, 
                        11259, 
                        11260, 
                        11260, 
                        11260, 
                        11260, 
                        11260, 
                        11260, 
                        11260, 
                        11260, 
                        11260, 
                        11260, 
                        11260, 
                        11260, 
                        11260, 
                        11261, 
                        11261, 
                        11261, 
                        11261, 
                        11261, 
                        11261, 
                        11261, 
                        11261, 
                        11261, 
                        11261, 
                        11261, 
                        11261, 
                        11261, 
                        11261, 
                        11262, 
                        11262, 
                        11262, 
                        11262, 
                        11262, 
                        11262, 
                        11262, 
                        11262, 
                        11262, 
                        11262, 
                        11262, 
                        11262, 
                        11262, 
                        11262, 
                        11262, 
                        11263, 
                        11263, 
                        11263, 
                        11263, 
                        11263, 
                        11263, 
                        11263, 
                        11263, 
                        11263, 
                        11263, 
                        11263, 
                        11263, 
                        11263, 
                        11263, 
                        11264, 
                        11264, 
                        11264, 
                        11264, 
                        11264, 
                        11264, 
                        11264, 
                        11264, 
                        11264, 
                        11264, 
                        11264, 
                        11264, 
                        11264, 
                        11264, 
                        11265, 
                        11265, 
                        11265, 
                        11265, 
                        11265, 
                        11265, 
                        11265, 
                        11265, 
                        11265, 
                        11265, 
                        11265, 
                        11265, 
                        11265, 
                        11265, 
                        11265, 
                        11266, 
                        11266, 
                        11266, 
                        11266, 
                        11266, 
                        11266, 
                        11266, 
                        11266, 
                        11266, 
                        11266, 
                        11266, 
                        11266, 
                        11266, 
                        11266, 
                        11267, 
                        11267, 
                        11267, 
                        11267, 
                        11267, 
                        11267, 
                        11267, 
                        11267, 
                        11267, 
                        11267, 
                        11267, 
                        11267, 
                        11267, 
                        11267, 
                        11267, 
                        11268, 
                        11268, 
                        11268, 
                        11268, 
                        11268, 
                        11268, 
                        11268, 
                        11268, 
                        11268, 
                        11268, 
                        11268, 
                        11268, 
                        11268, 
                        11268, 
                        11268, 
                        11269, 
                        11269, 
                        11269, 
                        11269, 
                        11269, 
                        11269, 
                        11269, 
                        11269, 
                        11269, 
                        11269, 
                        11269, 
                        11269, 
                        11269, 
                        11269, 
                        11270, 
                        11270, 
                        11270, 
                        11270, 
                        11270, 
                        11270, 
                        11270, 
                        11270, 
                        11270, 
                        11270, 
                        11270, 
                        11270, 
                        11270, 
                        11270, 
                        11270, 
                        11270, 
                        11271, 
                        11271, 
                        11271, 
                        11271, 
                        11271, 
                        11271, 
                        11271, 
                        11271, 
                        11271, 
                        11271, 
                        11271, 
                        11271, 
                        11271, 
                        11271, 
                        11271, 
                        11272, 
                        11272, 
                        11272, 
                        11272, 
                        11272, 
                        11272, 
                        11272, 
                        11272, 
                        11272, 
                        11272, 
                        11272, 
                        11272, 
                        11272, 
                        11272, 
                        11272, 
                        11273, 
                        11273, 
                        11273, 
                        11273, 
                        11273, 
                        11273, 
                        11273, 
                        11273, 
                        11273, 
                        11273, 
                        11273, 
                        11273, 
                        11273, 
                        11273, 
                        11273, 
                        11274, 
                        11274, 
                        11274, 
                        11274, 
                        11274, 
                        11274, 
                        11274, 
                        11274, 
                        11274, 
                        11274, 
                        11274, 
                        11274, 
                        11274, 
                        11274, 
                        11274, 
                        11274, 
                        11275, 
                        11275, 
                        11275, 
                        11275, 
                        11275, 
                        11275, 
                        11275, 
                        11275, 
                        11275, 
                        11275, 
                        11275, 
                        11275, 
                        11275, 
                        11275, 
                        11275, 
                        11276, 
                        11276, 
                        11276, 
                        11276, 
                        11276, 
                        11276, 
                        11276, 
                        11276, 
                        11276, 
                        11276, 
                        11276, 
                        11276, 
                        11276, 
                        11276, 
                        11276, 
                        11276, 
                        11277, 
                        11277, 
                        11277, 
                        11277, 
                        11277, 
                        11277, 
                        11277, 
                        11277, 
                        11277, 
                        11277, 
                        11277, 
                        11277, 
                        11277, 
                        11277, 
                        11277, 
                        11277, 
                        11278, 
                        11278, 
                        11278, 
                        11278, 
                        11278, 
                        11278, 
                        11278, 
                        11278, 
                        11278, 
                        11278, 
                        11278, 
                        11278, 
                        11278, 
                        11278, 
                        11278, 
                        11278, 
                        11279, 
                        11279, 
                        11279, 
                        11279, 
                        11279, 
                        11279, 
                        11279, 
                        11279, 
                        11279, 
                        11279, 
                        11279, 
                        11279, 
                        11279, 
                        11279, 
                        11279, 
                        11279, 
                        11280, 
                        11280, 
                        11280, 
                        11280, 
                        11280, 
                        11280, 
                        11280, 
                        11280, 
                        11280, 
                        11280, 
                        11280, 
                        11280, 
                        11280, 
                        11280, 
                        11280, 
                        11280, 
                        11280, 
                        11281, 
                        11281, 
                        11281, 
                        11281, 
                        11281, 
                        11281, 
                        11281, 
                        11281, 
                        11281, 
                        11281, 
                        11281, 
                        11281, 
                        11281, 
                        11281, 
                        11281, 
                        11281, 
                        11282, 
                        11282, 
                        11282, 
                        11282, 
                        11282, 
                        11282, 
                        11282, 
                        11282, 
                        11282, 
                        11282, 
                        11282, 
                        11282, 
                        11282, 
                        11282, 
                        11282, 
                        11282, 
                        11282, 
                        11283, 
                        11283, 
                        11283, 
                        11283, 
                        11283, 
                        11283, 
                        11283, 
                        11283, 
                        11283, 
                        11283, 
                        11283, 
                        11283, 
                        11283, 
                        11283, 
                        11283, 
                        11283, 
                        11284, 
                        11284, 
                        11284, 
                        11284, 
                        11284, 
                        11284, 
                        11284, 
                        11284, 
                        11284, 
                        11284, 
                        11284, 
                        11284, 
                        11284, 
                        11284, 
                        11284, 
                        11284, 
                        11284, 
                        11285, 
                        11285, 
                        11285, 
                        11285, 
                        11285, 
                        11285, 
                        11285, 
                        11285, 
                        11285, 
                        11285, 
                        11285, 
                        11285, 
                        11285, 
                        11285, 
                        11285, 
                        11285, 
                        11285, 
                        11286, 
                        11286, 
                        11286, 
                        11286, 
                        11286, 
                        11286, 
                        11286, 
                        11286, 
                        11286, 
                        11286, 
                        11286, 
                        11286, 
                        11286, 
                        11286, 
                        11286, 
                        11286, 
                        11286, 
                        11287, 
                        11287, 
                        11287, 
                        11287, 
                        11287, 
                        11287, 
                        11287, 
                        11287, 
                        11287, 
                        11287, 
                        11287, 
                        11287, 
                        11287, 
                        11287, 
                        11287, 
                        11287, 
                        11287, 
                        11287, 
                        11288, 
                        11288, 
                        11288, 
                        11288, 
                        11288, 
                        11288, 
                        11288, 
                        11288, 
                        11288, 
                        11288, 
                        11288, 
                        11288, 
                        11288, 
                        11288, 
                        11288, 
                        11288, 
                        11288, 
                        11289, 
                        11289, 
                        11289, 
                        11289, 
                        11289, 
                        11289, 
                        11289, 
                        11289, 
                        11289, 
                        11289, 
                        11289, 
                        11289, 
                        11289, 
                        11289, 
                        11289, 
                        11289, 
                        11289, 
                        11289, 
                        11290, 
                        11290, 
                        11290, 
                        11290, 
                        11290, 
                        11290, 
                        11290, 
                        11290, 
                        11290, 
                        11290, 
                        11290, 
                        11290, 
                        11290, 
                        11290, 
                        11290, 
                        11290, 
                        11290, 
                        11290, 
                        11291, 
                        11291, 
                        11291, 
                        11291, 
                        11291, 
                        11291, 
                        11291, 
                        11291, 
                        11291, 
                        11291, 
                        11291, 
                        11291, 
                        11291, 
                        11291, 
                        11291, 
                        11291, 
                        11291, 
                        11292, 
                        11292, 
                        11292, 
                        11292, 
                        11292, 
                        11292, 
                        11292, 
                        11292, 
                        11292, 
                        11292, 
                        11292, 
                        11292, 
                        11292, 
                        11292, 
                        11292, 
                        11292, 
                        11292, 
                        11292, 
                        11293, 
                        11293, 
                        11293, 
                        11293, 
                        11293, 
                        11293, 
                        11293, 
                        11293, 
                        11293, 
                        11293, 
                        11293, 
                        11293, 
                        11293, 
                        11293, 
                        11293, 
                        11293, 
                        11293, 
                        11293, 
                        11293, 
                        11294, 
                        11294, 
                        11294, 
                        11294, 
                        11294, 
                        11294, 
                        11294, 
                        11294, 
                        11294, 
                        11294, 
                        11294, 
                        11294, 
                        11294, 
                        11294, 
                        11294, 
                        11294, 
                        11294, 
                        11294, 
                        11295, 
                        11295, 
                        11295, 
                        11295, 
                        11295, 
                        11295, 
                        11295, 
                        11295, 
                        11295, 
                        11295, 
                        11295, 
                        11295, 
                        11295, 
                        11295, 
                        11295, 
                        11295, 
                        11295, 
                        11295, 
                        11295, 
                        11296, 
                        11296, 
                        11296, 
                        11296, 
                        11296, 
                        11296, 
                        11296, 
                        11296, 
                        11296, 
                        11296, 
                        11296, 
                        11296, 
                        11296, 
                        11296, 
                        11296, 
                        11296, 
                        11296, 
                        11296, 
                        11297, 
                        11297, 
                        11297, 
                        11297, 
                        11297, 
                        11297, 
                        11297, 
                        11297, 
                        11297, 
                        11297, 
                        11297, 
                        11297, 
                        11297, 
                        11297, 
                        11297, 
                        11297, 
                        11297, 
                        11297, 
                        11297, 
                        11298, 
                        11298, 
                        11298, 
                        11298, 
                        11298, 
                        11298, 
                        11298, 
                        11298, 
                        11298, 
                        11298, 
                        11298, 
                        11298, 
                        11298, 
                        11298, 
                        11298, 
                        11298, 
                        11298, 
                        11298, 
                        11298, 
                        11299, 
                        11299, 
                        11299, 
                        11299, 
                        11299, 
                        11299, 
                        11299, 
                        11299, 
                        11299, 
                        11299, 
                        11299, 
                        11299, 
                        11299, 
                        11299, 
                        11299, 
                        11299, 
                        11299, 
                        11299, 
                        11299, 
                        11299, 
                        11300, 
                        11300, 
                        11300, 
                        11300, 
                        11300, 
                        11300, 
                        11300, 
                        11300, 
                        11300, 
                        11300, 
                        11300, 
                        11300, 
                        11300, 
                        11300, 
                        11300, 
                        11300, 
                        11300, 
                        11300, 
                        11300, 
                        11301, 
                        11301, 
                        11301, 
                        11301, 
                        11301, 
                        11301, 
                        11301, 
                        11301, 
                        11301, 
                        11301, 
                        11301, 
                        11301, 
                        11301, 
                        11301, 
                        11301, 
                        11301, 
                        11301, 
                        11301, 
                        11301, 
                        11302, 
                        11302, 
                        11302, 
                        11302, 
                        11302, 
                        11302, 
                        11302, 
                        11302, 
                        11302, 
                        11302, 
                        11302, 
                        11302, 
                        11302, 
                        11302, 
                        11302, 
                        11302, 
                        11302, 
                        11302, 
                        11302, 
                        11302, 
                        11303, 
                        11303, 
                        11303, 
                        11303, 
                        11303, 
                        11303, 
                        11303, 
                        11303, 
                        11303, 
                        11303, 
                        11303, 
                        11303, 
                        11303, 
                        11303, 
                        11303, 
                        11303, 
                        11303, 
                        11303, 
                        11303, 
                        11303, 
                        11304, 
                        11304, 
                        11304, 
                        11304, 
                        11304, 
                        11304, 
                        11304, 
                        11304, 
                        11304, 
                        11304, 
                        11304, 
                        11304, 
                        11304, 
                        11304, 
                        11304, 
                        11304, 
                        11304, 
                        11304, 
                        11304, 
                        11304, 
                        11305, 
                        11305, 
                        11305, 
                        11305, 
                        11305, 
                        11305, 
                        11305, 
                        11305, 
                        11305, 
                        11305, 
                        11305, 
                        11305, 
                        11305, 
                        11305, 
                        11305, 
                        11305, 
                        11305, 
                        11305, 
                        11305, 
                        11305, 
                        11305, 
                        11306, 
                        11306, 
                        11306, 
                        11306, 
                        11306, 
                        11306, 
                        11306, 
                        11306, 
                        11306, 
                        11306, 
                        11306, 
                        11306, 
                        11306, 
                        11306, 
                        11306, 
                        11306, 
                        11306, 
                        11306, 
                        11306, 
                        11306, 
                        11307, 
                        11307, 
                        11307, 
                        11307, 
                        11307, 
                        11307, 
                        11307, 
                        11307, 
                        11307, 
                        11307, 
                        11307, 
                        11307, 
                        11307, 
                        11307, 
                        11307, 
                        11307, 
                        11307, 
                        11307, 
                        11307, 
                        11307, 
                        11307, 
                        11308, 
                        11308, 
                        11308, 
                        11308, 
                        11308, 
                        11308, 
                        11308, 
                        11308, 
                        11308, 
                        11308, 
                        11308, 
                        11308, 
                        11308, 
                        11308, 
                        11308, 
                        11308, 
                        11308, 
                        11308, 
                        11308, 
                        11308, 
                        11308, 
                        11309, 
                        11309, 
                        11309, 
                        11309, 
                        11309, 
                        11309, 
                        11309, 
                        11309, 
                        11309, 
                        11309, 
                        11309, 
                        11309, 
                        11309, 
                        11309, 
                        11309, 
                        11309, 
                        11309, 
                        11309, 
                        11309, 
                        11309, 
                        11309, 
                        11310, 
                        11310, 
                        11310, 
                        11310, 
                        11310, 
                        11310, 
                        11310, 
                        11310, 
                        11310, 
                        11310, 
                        11310, 
                        11310, 
                        11310, 
                        11310, 
                        11310, 
                        11310, 
                        11310, 
                        11310, 
                        11310, 
                        11310, 
                        11310, 
                        11311, 
                        11311, 
                        11311, 
                        11311, 
                        11311, 
                        11311, 
                        11311, 
                        11311, 
                        11311, 
                        11311, 
                        11311, 
                        11311, 
                        11311, 
                        11311, 
                        11311, 
                        11311, 
                        11311, 
                        11311, 
                        11311, 
                        11311, 
                        11311, 
                        11311, 
                        11312, 
                        11312, 
                        11312, 
                        11312, 
                        11312, 
                        11312, 
                        11312, 
                        11312, 
                        11312, 
                        11312, 
                        11312, 
                        11312, 
                        11312, 
                        11312, 
                        11312, 
                        11312, 
                        11312, 
                        11312, 
                        11312, 
                        11312, 
                        11312, 
                        11313, 
                        11313, 
                        11313, 
                        11313, 
                        11313, 
                        11313, 
                        11313, 
                        11313, 
                        11313, 
                        11313, 
                        11313, 
                        11313, 
                        11313, 
                        11313, 
                        11313, 
                        11313, 
                        11313, 
                        11313, 
                        11313, 
                        11313, 
                        11313, 
                        11313, 
                        11314, 
                        11314, 
                        11314, 
                        11314, 
                        11314, 
                        11314, 
                        11314, 
                        11314, 
                        11314, 
                        11314, 
                        11314, 
                        11314, 
                        11314, 
                        11314, 
                        11314, 
                        11314, 
                        11314, 
                        11314, 
                        11314, 
                        11314, 
                        11314, 
                        11314, 
                        11315, 
                        11315, 
                        11315, 
                        11315, 
                        11315, 
                        11315, 
                        11315, 
                        11315, 
                        11315, 
                        11315, 
                        11315, 
                        11315, 
                        11315, 
                        11315, 
                        11315, 
                        11315, 
                        11315, 
                        11315, 
                        11315, 
                        11315, 
                        11315, 
                        11315, 
                        11315, 
                        11316, 
                        11316, 
                        11316, 
                        11316, 
                        11316, 
                        11316, 
                        11316, 
                        11316, 
                        11316, 
                        11316, 
                        11316, 
                        11316, 
                        11316, 
                        11316, 
                        11316, 
                        11316, 
                        11316, 
                        11316, 
                        11316, 
                        11316, 
                        11316, 
                        11316, 
                        11317, 
                        11317, 
                        11317, 
                        11317, 
                        11317, 
                        11317, 
                        11317, 
                        11317, 
                        11317, 
                        11317, 
                        11317, 
                        11317, 
                        11317, 
                        11317, 
                        11317, 
                        11317, 
                        11317, 
                        11317, 
                        11317, 
                        11317, 
                        11317, 
                        11317, 
                        11317, 
                        11318, 
                        11318, 
                        11318, 
                        11318, 
                        11318, 
                        11318, 
                        11318, 
                        11318, 
                        11318, 
                        11318, 
                        11318, 
                        11318, 
                        11318, 
                        11318, 
                        11318, 
                        11318, 
                        11318, 
                        11318, 
                        11318, 
                        11318, 
                        11318, 
                        11318, 
                        11318, 
                        11319, 
                        11319, 
                        11319, 
                        11319, 
                        11319, 
                        11319, 
                        11319, 
                        11319, 
                        11319, 
                        11319, 
                        11319, 
                        11319, 
                        11319, 
                        11319, 
                        11319, 
                        11319, 
                        11319, 
                        11319, 
                        11319, 
                        11319, 
                        11319, 
                        11319, 
                        11319, 
                        11320, 
                        11320, 
                        11320, 
                        11320, 
                        11320, 
                        11320, 
                        11320, 
                        11320, 
                        11320, 
                        11320, 
                        11320, 
                        11320, 
                        11320, 
                        11320, 
                        11320, 
                        11320, 
                        11320, 
                        11320, 
                        11320, 
                        11320, 
                        11320, 
                        11320, 
                        11320, 
                        11320, 
                        11321, 
                        11321, 
                        11321, 
                        11321, 
                        11321, 
                        11321, 
                        11321, 
                        11321, 
                        11321, 
                        11321, 
                        11321, 
                        11321, 
                        11321, 
                        11321, 
                        11321, 
                        11321, 
                        11321, 
                        11321, 
                        11321, 
                        11321, 
                        11321, 
                        11321, 
                        11321, 
                        11322, 
                        11322, 
                        11322, 
                        11322, 
                        11322, 
                        11322, 
                        11322, 
                        11322, 
                        11322, 
                        11322, 
                        11322, 
                        11322, 
                        11322, 
                        11322, 
                        11322, 
                        11322, 
                        11322, 
                        11322, 
                        11322, 
                        11322, 
                        11322, 
                        11322, 
                        11322, 
                        11322, 
                        11323, 
                        11323, 
                        11323, 
                        11323, 
                        11323, 
                        11323, 
                        11323, 
                        11323, 
                        11323, 
                        11323, 
                        11323, 
                        11323, 
                        11323, 
                        11323, 
                        11323, 
                        11323, 
                        11323, 
                        11323, 
                        11323, 
                        11323, 
                        11323, 
                        11323, 
                        11323, 
                        11323, 
                        11323, 
                        11324, 
                        11324, 
                        11324, 
                        11324, 
                        11324, 
                        11324, 
                        11324, 
                        11324, 
                        11324, 
                        11324, 
                        11324, 
                        11324, 
                        11324, 
                        11324, 
                        11324, 
                        11324, 
                        11324, 
                        11324, 
                        11324, 
                        11324, 
                        11324, 
                        11324, 
                        11324, 
                        11324, 
                        11325, 
                        11325, 
                        11325, 
                        11325, 
                        11325, 
                        11325, 
                        11325, 
                        11325, 
                        11325, 
                        11325, 
                        11325, 
                        11325, 
                        11325, 
                        11325, 
                        11325, 
                        11325, 
                        11325, 
                        11325, 
                        11325, 
                        11325, 
                        11325, 
                        11325, 
                        11325, 
                        11325, 
                        11325, 
                        11326, 
                        11326, 
                        11326, 
                        11326, 
                        11326, 
                        11326, 
                        11326, 
                        11326, 
                        11326, 
                        11326, 
                        11326, 
                        11326, 
                        11326, 
                        11326, 
                        11326, 
                        11326, 
                        11326, 
                        11326, 
                        11326, 
                        11326, 
                        11326, 
                        11326, 
                        11326, 
                        11326, 
                        11326, 
                        11327, 
                        11327, 
                        11327, 
                        11327, 
                        11327, 
                        11327, 
                        11327, 
                        11327, 
                        11327, 
                        11327, 
                        11327, 
                        11327, 
                        11327, 
                        11327, 
                        11327, 
                        11327, 
                        11327, 
                        11327, 
                        11327, 
                        11327, 
                        11327, 
                        11327, 
                        11327, 
                        11327, 
                        11327, 
                        11328, 
                        11328, 
                        11328, 
                        11328, 
                        11328, 
                        11328, 
                        11328, 
                        11328, 
                        11328, 
                        11328, 
                        11328, 
                        11328, 
                        11328, 
                        11328, 
                        11328, 
                        11328, 
                        11328, 
                        11328, 
                        11328, 
                        11328, 
                        11328, 
                        11328, 
                        11328, 
                        11328, 
                        11328, 
                        11329, 
                        11329, 
                        11329, 
                        11329, 
                        11329, 
                        11329, 
                        11329, 
                        11329, 
                        11329, 
                        11329, 
                        11329, 
                        11329, 
                        11329, 
                        11329, 
                        11329, 
                        11329, 
                        11329, 
                        11329, 
                        11329, 
                        11329, 
                        11329, 
                        11329, 
                        11329, 
                        11329, 
                        11329, 
                        11329, 
                        11330, 
                        11330, 
                        11330, 
                        11330, 
                        11330, 
                        11330, 
                        11330, 
                        11330, 
                        11330, 
                        11330, 
                        11330, 
                        11330, 
                        11330, 
                        11330, 
                        11330, 
                        11330, 
                        11330, 
                        11330, 
                        11330, 
                        11330, 
                        11330, 
                        11330, 
                        11330, 
                        11330, 
                        11330, 
                        11330, 
                        11331, 
                        11331, 
                        11331, 
                        11331, 
                        11331, 
                        11331, 
                        11331, 
                        11331, 
                        11331, 
                        11331, 
                        11331, 
                        11331, 
                        11331, 
                        11331, 
                        11331, 
                        11331, 
                        11331, 
                        11331, 
                        11331, 
                        11331, 
                        11331, 
                        11331, 
                        11331, 
                        11331, 
                        11331, 
                        11331, 
                        11332, 
                        11332, 
                        11332, 
                        11332, 
                        11332, 
                        11332, 
                        11332, 
                        11332, 
                        11332, 
                        11332, 
                        11332, 
                        11332, 
                        11332, 
                        11332, 
                        11332, 
                        11332, 
                        11332, 
                        11332, 
                        11332, 
                        11332, 
                        11332, 
                        11332, 
                        11332, 
                        11332, 
                        11332, 
                        11332, 
                        11332, 
                        11333, 
                        11333, 
                        11333, 
                        11333, 
                        11333, 
                        11333, 
                        11333, 
                        11333, 
                        11333, 
                        11333, 
                        11333, 
                        11333, 
                        11333, 
                        11333, 
                        11333, 
                        11333, 
                        11333, 
                        11333, 
                        11333, 
                        11333, 
                        11333, 
                        11333, 
                        11333, 
                        11333, 
                        11333, 
                        11333, 
                        11333, 
                        11334, 
                        11334, 
                        11334, 
                        11334, 
                        11334, 
                        11334, 
                        11334, 
                        11334, 
                        11334, 
                        11334, 
                        11334, 
                        11334, 
                        11334, 
                        11334, 
                        11334, 
                        11334, 
                        11334, 
                        11334, 
                        11334, 
                        11334, 
                        11334, 
                        11334, 
                        11334, 
                        11334, 
                        11334, 
                        11334, 
                        11334, 
                        11335, 
                        11335, 
                        11335, 
                        11335, 
                        11335, 
                        11335, 
                        11335, 
                        11335, 
                        11335, 
                        11335, 
                        11335, 
                        11335, 
                        11335, 
                        11335, 
                        11335, 
                        11335, 
                        11335, 
                        11335, 
                        11335, 
                        11335, 
                        11335, 
                        11335, 
                        11335, 
                        11335, 
                        11335, 
                        11335, 
                        11335, 
                        11336, 
                        11336, 
                        11336, 
                        11336, 
                        11336, 
                        11336, 
                        11336, 
                        11336, 
                        11336, 
                        11336, 
                        11336, 
                        11336, 
                        11336, 
                        11336, 
                        11336, 
                        11336, 
                        11336, 
                        11336, 
                        11336, 
                        11336, 
                        11336, 
                        11336, 
                        11336, 
                        11336, 
                        11336, 
                        11336, 
                        11336, 
                        11336, 
                        11337, 
                        11337, 
                        11337, 
                        11337, 
                        11337, 
                        11337, 
                        11337, 
                        11337, 
                        11337, 
                        11337, 
                        11337, 
                        11337, 
                        11337, 
                        11337, 
                        11337, 
                        11337, 
                        11337, 
                        11337, 
                        11337, 
                        11337, 
                        11337, 
                        11337, 
                        11337, 
                        11337, 
                        11337, 
                        11337, 
                        11337, 
                        11337, 
                        11338, 
                        11338, 
                        11338, 
                        11338, 
                        11338, 
                        11338, 
                        11338, 
                        11338, 
                        11338, 
                        11338, 
                        11338, 
                        11338, 
                        11338, 
                        11338, 
                        11338, 
                        11338, 
                        11338, 
                        11338, 
                        11338, 
                        11338, 
                        11338, 
                        11338, 
                        11338, 
                        11338, 
                        11338, 
                        11338, 
                        11338, 
                        11338, 
                        11338, 
                        11339, 
                        11339, 
                        11339, 
                        11339, 
                        11339, 
                        11339, 
                        11339, 
                        11339, 
                        11339, 
                        11339, 
                        11339, 
                        11339, 
                        11339, 
                        11339, 
                        11339, 
                        11339, 
                        11339, 
                        11339, 
                        11339, 
                        11339, 
                        11339, 
                        11339, 
                        11339, 
                        11339, 
                        11339, 
                        11339, 
                        11339, 
                        11339, 
                        11340, 
                        11340, 
                        11340, 
                        11340, 
                        11340, 
                        11340, 
                        11340, 
                        11340, 
                        11340, 
                        11340, 
                        11340, 
                        11340, 
                        11340, 
                        11340, 
                        11340, 
                        11340, 
                        11340, 
                        11340, 
                        11340, 
                        11340, 
                        11340, 
                        11340, 
                        11340, 
                        11340, 
                        11340, 
                        11340, 
                        11340, 
                        11340, 
                        11340, 
                        11341, 
                        11341, 
                        11341, 
                        11341, 
                        11341, 
                        11341, 
                        11341, 
                        11341, 
                        11341, 
                        11341, 
                        11341, 
                        11341, 
                        11341, 
                        11341, 
                        11341, 
                        11341, 
                        11341, 
                        11341, 
                        11341, 
                        11341, 
                        11341, 
                        11341, 
                        11341, 
                        11341, 
                        11341, 
                        11341, 
                        11341, 
                        11341, 
                        11341, 
                        11342, 
                        11342, 
                        11342, 
                        11342, 
                        11342, 
                        11342, 
                        11342, 
                        11342, 
                        11342, 
                        11342, 
                        11342, 
                        11342, 
                        11342, 
                        11342, 
                        11342, 
                        11342, 
                        11342, 
                        11342, 
                        11342, 
                        11342, 
                        11342, 
                        11342, 
                        11342, 
                        11342, 
                        11342, 
                        11342, 
                        11342, 
                        11342, 
                        11342, 
                        11342, 
                        11343, 
                        11343, 
                        11343, 
                        11343, 
                        11343, 
                        11343, 
                        11343, 
                        11343, 
                        11343, 
                        11343, 
                        11343, 
                        11343, 
                        11343, 
                        11343, 
                        11343, 
                        11343, 
                        11343, 
                        11343, 
                        11343, 
                        11343, 
                        11343, 
                        11343, 
                        11343, 
                        11343, 
                        11343, 
                        11343, 
                        11343, 
                        11343, 
                        11343, 
                        11343, 
                        11344, 
                        11344, 
                        11344, 
                        11344, 
                        11344, 
                        11344, 
                        11344, 
                        11344, 
                        11344, 
                        11344, 
                        11344, 
                        11344, 
                        11344, 
                        11344, 
                        11344, 
                        11344, 
                        11344, 
                        11344, 
                        11344, 
                        11344, 
                        11344, 
                        11344, 
                        11344, 
                        11344, 
                        11344, 
                        11344, 
                        11344, 
                        11344, 
                        11344, 
                        11344, 
                        11345, 
                        11345, 
                        11345, 
                        11345, 
                        11345, 
                        11345, 
                        11345, 
                        11345, 
                        11345, 
                        11345, 
                        11345, 
                        11345, 
                        11345, 
                        11345, 
                        11345, 
                        11345, 
                        11345, 
                        11345, 
                        11345, 
                        11345, 
                        11345, 
                        11345, 
                        11345, 
                        11345, 
                        11345, 
                        11345, 
                        11345, 
                        11345, 
                        11345, 
                        11345, 
                        11345, 
                        11346, 
                        11346, 
                        11346, 
                        11346, 
                        11346, 
                        11346, 
                        11346, 
                        11346, 
                        11346, 
                        11346, 
                        11346, 
                        11346, 
                        11346, 
                        11346, 
                        11346, 
                        11346, 
                        11346, 
                        11346, 
                        11346, 
                        11346, 
                        11346, 
                        11346, 
                        11346, 
                        11346, 
                        11346, 
                        11346, 
                        11346, 
                        11346, 
                        11346, 
                        11346, 
                        11346, 
                        11347, 
                        11347, 
                        11347, 
                        11347, 
                        11347, 
                        11347, 
                        11347, 
                        11347, 
                        11347, 
                        11347, 
                        11347, 
                        11347, 
                        11347, 
                        11347, 
                        11347, 
                        11347, 
                        11347, 
                        11347, 
                        11347, 
                        11347, 
                        11347, 
                        11347, 
                        11347, 
                        11347, 
                        11347, 
                        11347, 
                        11347, 
                        11347, 
                        11347, 
                        11347, 
                        11347, 
                        11348, 
                        11348, 
                        11348, 
                        11348, 
                        11348, 
                        11348, 
                        11348, 
                        11348, 
                        11348, 
                        11348, 
                        11348, 
                        11348, 
                        11348, 
                        11348, 
                        11348, 
                        11348, 
                        11348, 
                        11348, 
                        11348, 
                        11348, 
                        11348, 
                        11348, 
                        11348, 
                        11348, 
                        11348, 
                        11348, 
                        11348, 
                        11348, 
                        11348, 
                        11348, 
                        11348, 
                        11348, 
                        11349, 
                        11349, 
                        11349, 
                        11349, 
                        11349, 
                        11349, 
                        11349, 
                        11349, 
                        11349, 
                        11349, 
                        11349, 
                        11349, 
                        11349, 
                        11349, 
                        11349, 
                        11349, 
                        11349, 
                        11349, 
                        11349, 
                        11349, 
                        11349, 
                        11349, 
                        11349, 
                        11349, 
                        11349, 
                        11349, 
                        11349, 
                        11349, 
                        11349, 
                        11349, 
                        11349, 
                        11349, 
                        11350, 
                        11350, 
                        11350, 
                        11350, 
                        11350, 
                        11350, 
                        11350, 
                        11350, 
                        11350, 
                        11350, 
                        11350, 
                        11350, 
                        11350, 
                        11350, 
                        11350, 
                        11350, 
                        11350, 
                        11350, 
                        11350, 
                        11350, 
                        11350, 
                        11350, 
                        11350, 
                        11350, 
                        11350, 
                        11350, 
                        11350, 
                        11350, 
                        11350, 
                        11350, 
                        11350, 
                        11350, 
                        11350, 
                        11351, 
                        11351, 
                        11351, 
                        11351, 
                        11351, 
                        11351, 
                        11351, 
                        11351, 
                        11351, 
                        11351, 
                        11351, 
                        11351, 
                        11351, 
                        11351, 
                        11351, 
                        11351, 
                        11351, 
                        11351, 
                        11351, 
                        11351, 
                        11351, 
                        11351, 
                        11351, 
                        11351, 
                        11351, 
                        11351, 
                        11351, 
                        11351, 
                        11351, 
                        11351, 
                        11351, 
                        11351, 
                        11351, 
                        11352, 
                        11352, 
                        11352, 
                        11352, 
                        11352, 
                        11352, 
                        11352, 
                        11352, 
                        11352, 
                        11352, 
                        11352, 
                        11352, 
                        11352, 
                        11352, 
                        11352, 
                        11352, 
                        11352, 
                        11352, 
                        11352, 
                        11352, 
                        11352, 
                        11352, 
                        11352, 
                        11352, 
                        11352, 
                        11352, 
                        11352, 
                        11352, 
                        11352, 
                        11352, 
                        11352, 
                        11352, 
                        11352, 
                        11353, 
                        11353, 
                        11353, 
                        11353, 
                        11353, 
                        11353, 
                        11353, 
                        11353, 
                        11353, 
                        11353, 
                        11353, 
                        11353, 
                        11353, 
                        11353, 
                        11353, 
                        11353, 
                        11353, 
                        11353, 
                        11353, 
                        11353, 
                        11353, 
                        11353, 
                        11353, 
                        11353, 
                        11353, 
                        11353, 
                        11353, 
                        11353, 
                        11353, 
                        11353, 
                        11353, 
                        11353, 
                        11353, 
                        11353, 
                        11354, 
                        11354, 
                        11354, 
                        11354, 
                        11354, 
                        11354, 
                        11354, 
                        11354, 
                        11354, 
                        11354, 
                        11354, 
                        11354, 
                        11354, 
                        11354, 
                        11354, 
                        11354, 
                        11354, 
                        11354, 
                        11354, 
                        11354, 
                        11354, 
                        11354, 
                        11354, 
                        11354, 
                        11354, 
                        11354, 
                        11354, 
                        11354, 
                        11354, 
                        11354, 
                        11354, 
                        11354, 
                        11354, 
                        11354, 
                        11355, 
                        11355, 
                        11355, 
                        11355, 
                        11355, 
                        11355, 
                        11355, 
                        11355, 
                        11355, 
                        11355, 
                        11355, 
                        11355, 
                        11355, 
                        11355, 
                        11355, 
                        11355, 
                        11355, 
                        11355, 
                        11355, 
                        11355, 
                        11355, 
                        11355, 
                        11355, 
                        11355, 
                        11355, 
                        11355, 
                        11355, 
                        11355, 
                        11355, 
                        11355, 
                        11355, 
                        11355, 
                        11355, 
                        11355, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11356, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11357, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11358, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11359, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11360, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11361, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11362, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11363, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11364, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11365, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11366, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11367, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11368, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11369, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11370, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11371, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11372, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11373, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11374, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11375, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11376, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11377, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11378, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11379, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11380, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11381, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11382, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11383, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11384, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11385, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11386, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11387, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11388, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11389, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11390, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11391, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11392, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11393, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11394, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11395, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11396, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11397, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11398, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11399, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11400, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11401, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11402, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11403, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11404, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11405, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11406, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11407, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11408, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11409, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11410, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11411, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11412, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11413, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11414, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11415, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11416, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11417, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11418, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11419, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11420, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11421, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11422, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11423, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11424, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11425, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11426, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11427, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11428, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11429, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11430, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11431, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11432, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11433, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11434, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11435, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11436, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11437, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11438, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11439, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11440, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11441, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11442, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11443, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11444, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11445, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11446, 
                        11447, 
                        11447, 
                        11447, 
                        11447, 
                        11447, 
                        11447, 
                        11447, 
                        11447, 
                        11447, 
                        11447, 
                        11447, 
                        11447, 
                        11447, 
                        11447, 
                        11447, 
                        11447, 
                        11447, 
                        11447, 
                        11447, 
                        11447, 
                        11447, 
                        11447, 
                        11447, 
                        11447, 
                        11447, 
                        11447, 
                        11447, 
                        11447
                    ], System.Int32);
                }
            },
            methods: {
                SineScaled: function (degreesScaled) {
                    if (degreesScaled === -2147483648) {
                        return DTLibrary.DTMath.SineScaled(((degreesScaled + 46080) | 0));
                    }

                    if (degreesScaled < 0) {
                        return ((-DTLibrary.DTMath.SineScaled(((-degreesScaled) | 0))) | 0);
                    }

                    var degreesTimes32 = degreesScaled >> 2;

                    var newDegreesTimes32;

                    if (degreesTimes32 < 11520) {
                        newDegreesTimes32 = degreesTimes32;
                    } else {
                        var division = (Bridge.Int.div(degreesTimes32, (11520))) | 0;
                        newDegreesTimes32 = (degreesTimes32 - Bridge.Int.mul(11520, division)) | 0;
                    }

                    if (newDegreesTimes32 < 5760) {
                        return DTLibrary.DTMath._sineArray[System.Array.index(newDegreesTimes32, DTLibrary.DTMath._sineArray)];
                    } else {
                        var translatedDegrees = (newDegreesTimes32 - 5760) | 0;
                        return ((-DTLibrary.DTMath._sineArray[System.Array.index(translatedDegrees, DTLibrary.DTMath._sineArray)]) | 0);
                    }
                },
                CosineScaled: function (degreesScaled) {
                    if (degreesScaled === -2147483648) {
                        return DTLibrary.DTMath.CosineScaled(((degreesScaled + 46080) | 0));
                    }

                    if (degreesScaled < 0) {
                        degreesScaled = (-degreesScaled) | 0;
                    }

                    if (degreesScaled >= 46080) {
                        var division = (Bridge.Int.div(degreesScaled, (46080))) | 0;
                        degreesScaled = (degreesScaled - Bridge.Int.mul(46080, division)) | 0;
                    }

                    var newDegrees = (degreesScaled + 11520) | 0;

                    if (newDegrees >= 46080) {
                        newDegrees = (newDegrees - (46080)) | 0;
                    }

                    return DTLibrary.DTMath.SineScaled(newDegrees);
                },
                ArcTangentScaled: function (x, y) {
                    if (x === 0) {
                        if (y > 0) {
                            return 11520;
                        } else {
                            return -11520;
                        }
                    }

                    if (y === 0) {
                        if (x > 0) {
                            return 0;
                        } else {
                            return 23040;
                        }
                    }

                    if (x > 0 && y > 0) {
                        var result;

                        if (x >= 15000000 || y >= 15000000) {
                            var xLong = System.Int64(x);
                            var yLong = System.Int64(y);

                            var resultLong = (yLong.mul(System.Int64(128))).div(xLong);
                            if (resultLong.gte(System.Int64(1000000000))) {
                                resultLong = System.Int64(1000000000);
                            }
                            result = System.Int64.clip32(resultLong);
                        } else {
                            result = (Bridge.Int.div((y << 7), x)) | 0;
                        }

                        if (result >= DTLibrary.DTMath._arctanArray.length) {
                            result = (DTLibrary.DTMath._arctanArray.length - 1) | 0;
                        }

                        var angle = DTLibrary.DTMath._arctanArray[System.Array.index(result, DTLibrary.DTMath._arctanArray)];
                        return angle;
                    }
                    if (x < 0 && y > 0) {
                        var negativeX;
                        if (x === -2147483648) {
                            negativeX = 2147483647;
                        } else {
                            negativeX = (-x) | 0;
                        }
                        return ((11520 + DTLibrary.DTMath.ArcTangentScaled(y, negativeX)) | 0);
                    }
                    if (y < 0) {
                        var negativeY;
                        if (y === -2147483648) {
                            negativeY = 2147483647;
                        } else {
                            negativeY = (-y) | 0;
                        }
                        return ((-DTLibrary.DTMath.ArcTangentScaled(x, negativeY)) | 0);
                    }

                    throw new System.Exception("Unreachable");
                }
            }
        }
    });

    Bridge.define("DTLibrary.GlobalConfigurationManager", {
        statics: {
            methods: {
                /**
                 * If no saved configuration is found (or the saved configuration is invalid), returns a default GlobalConfiguration.
                 *
                 * @static
                 * @public
                 * @this DTLibrary.GlobalConfigurationManager
                 * @memberof DTLibrary.GlobalConfigurationManager
                 * @param   {DTLibrary.IFileIO}                                           fileIO    
                 * @param   {number}                                                      fileId
                 * @return  {DTLibrary.GlobalConfigurationManager.GlobalConfiguration}
                 */
                GetGlobalConfiguration: function (fileIO, fileId) {
                    var byteList = fileIO.DTLibrary$IFileIO$FetchData(fileId);

                    if (byteList == null) {
                        return new DTLibrary.GlobalConfigurationManager.GlobalConfiguration(DTLibrary.GlobalConfigurationManager.GlobalConfiguration.DEFAULT_FPS, DTLibrary.GlobalConfigurationManager.GlobalConfiguration.DEFAULT_DEBUG_MODE);
                    }

                    var iterator = byteList.GetIterator();

                    var fps = DTLibrary.GlobalConfigurationManager.GlobalConfiguration.DEFAULT_FPS;
                    var debugMode = DTLibrary.GlobalConfigurationManager.GlobalConfiguration.DEFAULT_DEBUG_MODE;

                    try {
                        while (true) {
                            if (!iterator.HasNextByte()) {
                                break;
                            }

                            var str = DTLibrary.GlobalConfigurationManager.TryDeserializeAsciiLineOfInput(iterator);

                            var array = System.String.split(str, [61].map(function (i) {{ return String.fromCharCode(i); }}));

                            if (array.length < 2) {
                                continue;
                            }

                            if (Bridge.referenceEquals(array[System.Array.index(0, array)], "fps")) {
                                var fpsString = array[System.Array.index(1, array)];

                                var possibleFpsValue = DTLibrary.StringUtil.TryParseInt(fpsString);

                                if (System.Nullable.hasValue(possibleFpsValue)) {
                                    fps = System.Nullable.getValue(possibleFpsValue);
                                }
                            }

                            if (Bridge.referenceEquals(array[System.Array.index(0, array)], "debugmode")) {
                                if (Bridge.referenceEquals(array[System.Array.index(1, array)], "true")) {
                                    debugMode = true;
                                }
                                if (Bridge.referenceEquals(array[System.Array.index(1, array)], "false")) {
                                    debugMode = false;
                                }
                            }
                        }
                    } catch ($e1) {
                        $e1 = System.Exception.create($e1);
                        if (Bridge.is($e1, DTLibrary.DTDeserializationException)) {
                        } else {
                            throw $e1;
                        }
                    }

                    if (fps < DTLibrary.GlobalConfigurationManager.GlobalConfiguration.MIN_FPS) {
                        fps = DTLibrary.GlobalConfigurationManager.GlobalConfiguration.MIN_FPS;
                    }
                    if (fps > DTLibrary.GlobalConfigurationManager.GlobalConfiguration.MAX_FPS) {
                        fps = DTLibrary.GlobalConfigurationManager.GlobalConfiguration.MAX_FPS;
                    }

                    return new DTLibrary.GlobalConfigurationManager.GlobalConfiguration(fps, debugMode);
                },
                SaveGlobalConfiguration: function (globalConfiguration, fileIO, fileId) {
                    var builder = new DTLibrary.ByteList.Builder();

                    var fps = globalConfiguration.Fps;
                    var fpsString = "fps=" + (DTLibrary.StringUtil.ToStringCultureInvariant(fps) || "");

                    DTLibrary.GlobalConfigurationManager.SerializeAsciiLineOfInput(fpsString, builder);

                    var debugMode = globalConfiguration.DebugMode;
                    var debugModeString = "debugmode=" + ((debugMode ? "true" : "false") || "");

                    DTLibrary.GlobalConfigurationManager.SerializeAsciiLineOfInput(debugModeString, builder);

                    fileIO.DTLibrary$IFileIO$PersistData(fileId, builder.ToByteList());
                },
                /**
                 * Can possibly throw DTDeserializationException
                 *
                 * @static
                 * @private
                 * @this DTLibrary.GlobalConfigurationManager
                 * @memberof DTLibrary.GlobalConfigurationManager
                 * @param   {DTLibrary.ByteList.Iterator}    byteListIterator
                 * @return  {string}
                 */
                TryDeserializeAsciiLineOfInput: function (byteListIterator) {
                    var line = "";

                    while (true) {
                        if (!byteListIterator.HasNextByte()) {
                            return line;
                        }

                        var b = byteListIterator.TryPop();
                        var c = b;

                        if (c === 10) {
                            return line;
                        }

                        line = (line || "") + ((String.fromCharCode(c)) || "");
                    }
                },
                SerializeAsciiLineOfInput: function (asciiString, byteListBuilder) {
                    var $t;
                    $t = Bridge.getEnumerator(asciiString);
                    try {
                        while ($t.moveNext()) {
                            var c = $t.Current;
                            var b = c & 255;
                            byteListBuilder.Add(b);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    var newline = 10;
                    var newLineAsByte = newline & 255;
                    byteListBuilder.Add(newLineAsByte);
                }
            }
        }
    });

    Bridge.define("DTLibrary.GlobalConfigurationManager.GlobalConfiguration", {
        $kind: "nested class",
        statics: {
            fields: {
                DEFAULT_FPS: 0,
                MIN_FPS: 0,
                MAX_FPS: 0,
                DEFAULT_DEBUG_MODE: false
            },
            ctors: {
                init: function () {
                    this.DEFAULT_FPS = 60;
                    this.MIN_FPS = 10;
                    this.MAX_FPS = 300;
                    this.DEFAULT_DEBUG_MODE = false;
                }
            }
        },
        fields: {
            Fps: 0,
            DebugMode: false
        },
        ctors: {
            ctor: function (fps, debugMode) {
                this.$initialize();
                this.Fps = fps;
                this.DebugMode = debugMode;
            }
        }
    });

    Bridge.define("DTLibrary.GuidGenerator", {
        statics: {
            methods: {
                IntToString: function (i) {
                    switch (i) {
                        case 0: 
                            return "0";
                        case 1: 
                            return "1";
                        case 2: 
                            return "2";
                        case 3: 
                            return "3";
                        case 4: 
                            return "4";
                        case 5: 
                            return "5";
                        case 6: 
                            return "6";
                        case 7: 
                            return "7";
                        case 8: 
                            return "8";
                        case 9: 
                            return "9";
                    }

                    if (i < 0) {
                        return "-" + (DTLibrary.GuidGenerator.IntToString(((-i) | 0)) || "");
                    }

                    var x = (Bridge.Int.div(i, 10)) | 0;
                    var y = i % 10;

                    return (DTLibrary.GuidGenerator.IntToString(x) || "") + (DTLibrary.GuidGenerator.IntToString(y) || "");
                }
            }
        },
        fields: {
            currentValue1: 0,
            currentValue2: 0,
            guidString: null
        },
        ctors: {
            ctor: function (guidString) {
                this.$initialize();
                this.currentValue1 = 0;
                this.currentValue2 = 0;
                this.guidString = guidString;
            }
        },
        methods: {
            NextGuid: function () {
                if (this.currentValue1 === 2147483647) {
                    this.currentValue1 = 0;
                    this.currentValue2 = (this.currentValue2 + 1) | 0;
                } else {
                    this.currentValue1 = (this.currentValue1 + 1) | 0;
                }

                var currentValue1AsString = DTLibrary.GuidGenerator.IntToString(this.currentValue1);
                var currentValue2AsString = this.currentValue2 === 0 ? "0" : DTLibrary.GuidGenerator.IntToString(this.currentValue2);
                return "g=" + (this.guidString || "") + "," + (currentValue1AsString || "") + "," + (currentValue2AsString || "");
            }
        }
    });

    Bridge.define("DTLibrary.IFileIO", {
        $kind: "interface"
    });

    Bridge.definei("DTLibrary.IFrame$4", function (ImageEnum, FontEnum, SoundEnum, MusicEnum) { return {
        $kind: "interface"
    }; });

    Bridge.define("DTLibrary.IMusicCleanup", {
        $kind: "interface"
    });

    Bridge.define("DTLibrary.IMusicProcessing", {
        $kind: "interface"
    });

    Bridge.definei("DTLibrary.IMusicOutput$1", function (MusicEnum) { return {
        $kind: "interface"
    }; });

    Bridge.define("DTLibrary.IntTupleEqualityComparer", {
        inherits: [System.Collections.Generic.IEqualityComparer$1(System.Tuple$2(System.Int32,System.Int32))],
        alias: [
            "equals2", ["System$Collections$Generic$IEqualityComparer$1$System$Tuple$2$System$Int32$System$Int32$equals2", "System$Collections$Generic$IEqualityComparer$1$equals2"],
            "getHashCode2", ["System$Collections$Generic$IEqualityComparer$1$System$Tuple$2$System$Int32$System$Int32$getHashCode2", "System$Collections$Generic$IEqualityComparer$1$getHashCode2"]
        ],
        methods: {
            equals2: function (x, y) {
                if (x == null && y == null) {
                    return true;
                }

                if (x == null || y == null) {
                    return false;
                }

                return x.Item1 === y.Item1 && x.Item2 === y.Item2;
            },
            getHashCode2: function (obj) {
                var a = obj.Item1 << 4;

                return ((((a + obj.Item1) | 0) + obj.Item2) | 0);
            }
        }
    });

    Bridge.definei("DTLibrary.ISoundOutput$1", function (SoundEnum) { return {
        $kind: "interface"
    }; });

    Bridge.define("DTLibrary.ITimer", {
        $kind: "interface"
    });

    Bridge.define("DTLibrary.Key", {
        $kind: "enum",
        statics: {
            fields: {
                A: 0,
                B: 1,
                C: 2,
                D: 3,
                E: 4,
                F: 5,
                G: 6,
                H: 7,
                I: 8,
                J: 9,
                K: 10,
                L: 11,
                M: 12,
                N: 13,
                O: 14,
                P: 15,
                Q: 16,
                R: 17,
                S: 18,
                T: 19,
                U: 20,
                V: 21,
                W: 22,
                X: 23,
                Y: 24,
                Z: 25,
                Zero: 26,
                One: 27,
                Two: 28,
                Three: 29,
                Four: 30,
                Five: 31,
                Six: 32,
                Seven: 33,
                Eight: 34,
                Nine: 35,
                UpArrow: 36,
                DownArrow: 37,
                LeftArrow: 38,
                RightArrow: 39,
                Delete: 40,
                Backspace: 41,
                Enter: 42,
                Shift: 43,
                Space: 44,
                Esc: 45
            }
        }
    });

    Bridge.define("DTLibrary.ListUtil", {
        statics: {
            methods: {
                Shuffle: function (T, list, random) {
                    for (var i = (list.Count - 1) | 0; i > 0; i = (i - 1) | 0) {
                        var index = random.DTLibrary$IDTRandom$NextInt(((i + 1) | 0));
                        if (index !== i) {
                            var element = list.getItem(index);
                            list.setItem(index, list.getItem(i));
                            list.setItem(i, element);
                        }
                    }
                }
            }
        }
    });

    Bridge.define("DTLibrary.StringConcatenation", {
        statics: {
            methods: {
                Concat: function (s, i) {
                    return (s || "") + (DTLibrary.StringUtil.ToStringCultureInvariant(i) || "");
                }
            }
        }
    });

    Bridge.define("DTLibrary.StringUtil", {
        statics: {
            methods: {
                IsDigit: function (c) {
                    return c === 48 || c === 49 || c === 50 || c === 51 || c === 52 || c === 53 || c === 54 || c === 55 || c === 56 || c === 57;
                },
                TryParseInt: function (str) {
                    var result = DTLibrary.StringUtil.TryParseLong(str);

                    if (System.Nullable.lifteq("equals", result, System.Int64.lift(null))) {
                        return null;
                    }

                    var minAllowedValue = System.Int64(-2147483648);
                    var maxAllowedValue = System.Int64(2147483647);

                    if (System.Nullable.getValue(result).lt(minAllowedValue)) {
                        return null;
                    }
                    if (System.Nullable.getValue(result).gt(maxAllowedValue)) {
                        return null;
                    }

                    return System.Int64.clip32(System.Nullable.getValue(result));
                },
                ParseInt: function (str) {
                    var val = DTLibrary.StringUtil.TryParseInt(str);

                    if (val == null) {
                        throw new System.Exception("str does not represent an int: " + (str || ""));
                    }

                    return System.Nullable.getValue(val);
                },
                /**
                 * Returns null if the string does not represent a long
                 *
                 * @static
                 * @public
                 * @this DTLibrary.StringUtil
                 * @memberof DTLibrary.StringUtil
                 * @param   {string}           str
                 * @return  {?System.Int64}
                 */
                TryParseLong: function (str) {
                    if (str == null) {
                        return System.Int64.lift(null);
                    }

                    if (Bridge.referenceEquals(str, "")) {
                        return System.Int64.lift(null);
                    }

                    if (str.charCodeAt(0) !== 45 && !DTLibrary.StringUtil.IsDigit(str.charCodeAt(0))) {
                        return System.Int64.lift(null);
                    }

                    if (Bridge.referenceEquals(str, "-")) {
                        return System.Int64.lift(null);
                    }

                    for (var i = 1; i < str.length; i = (i + 1) | 0) {
                        if (!DTLibrary.StringUtil.IsDigit(str.charCodeAt(i))) {
                            return System.Int64.lift(null);
                        }
                    }

                    if (Bridge.referenceEquals(str, "-9223372036854775808")) {
                        return System.Int64.MinValue;
                    }

                    if (str.charCodeAt(0) === 45) {
                        var result = DTLibrary.StringUtil.TryParseLong(str.substr(1));
                        if (System.Nullable.lifteq("equals", result, System.Int64.lift(null))) {
                            return System.Int64.lift(null);
                        }
                        return System.Int64(-1).mul(System.Nullable.getValue(result));
                    }

                    if (str.length === 1) {
                        if (Bridge.referenceEquals(str, "0")) {
                            return System.Int64(0);
                        }
                        if (Bridge.referenceEquals(str, "1")) {
                            return System.Int64(1);
                        }
                        if (Bridge.referenceEquals(str, "2")) {
                            return System.Int64(2);
                        }
                        if (Bridge.referenceEquals(str, "3")) {
                            return System.Int64(3);
                        }
                        if (Bridge.referenceEquals(str, "4")) {
                            return System.Int64(4);
                        }
                        if (Bridge.referenceEquals(str, "5")) {
                            return System.Int64(5);
                        }
                        if (Bridge.referenceEquals(str, "6")) {
                            return System.Int64(6);
                        }
                        if (Bridge.referenceEquals(str, "7")) {
                            return System.Int64(7);
                        }
                        if (Bridge.referenceEquals(str, "8")) {
                            return System.Int64(8);
                        }
                        if (Bridge.referenceEquals(str, "9")) {
                            return System.Int64(9);
                        }
                    }

                    var leastSignificantDigit = DTLibrary.StringUtil.TryParseLong(str.substr(((str.length - 1) | 0)));
                    var restOfNumber = DTLibrary.StringUtil.TryParseLong(str.substr(0, ((str.length - 1) | 0)));

                    if (System.Nullable.lifteq("equals", leastSignificantDigit, System.Int64.lift(null)) || System.Nullable.lifteq("equals", restOfNumber, System.Int64.lift(null))) {
                        return System.Int64.lift(null);
                    }

                    try {
                        var number = System.Nullable.getValue(leastSignificantDigit).add(System.Int64(10).mul(System.Nullable.getValue(restOfNumber), 1), 1);
                        return number;
                    } catch ($e1) {
                        $e1 = System.Exception.create($e1);
                        if (Bridge.is($e1, System.OverflowException)) {
                            return System.Int64.lift(null);
                        } else {
                            throw $e1;
                        }
                    }
                },
                ToUpperCaseCultureInvariant: function (str) {
                    var array = System.Array.init(str.length, 0, System.Char);

                    for (var i = 0; i < array.length; i = (i + 1) | 0) {
                        var c = str.charCodeAt(i);

                        if (c < 97 || c > 122) {
                            array[System.Array.index(i, array)] = c;
                        } else {
                            array[System.Array.index(i, array)] = (((c - 32) | 0)) & 65535;
                        }
                    }

                    return System.String.fromCharArray(array);
                },
                ToStringCultureInvariant: function (i) {
                    if (i === -2147483648) {
                        return "-2147483648";
                    }

                    return DTLibrary.StringUtil.IntToStringHelper(i);
                },
                ToStringCultureInvariant$1: function (l) {
                    if (l.equals(System.Int64.MinValue)) {
                        return "-9223372036854775808";
                    }

                    return DTLibrary.StringUtil.LongToStringHelper(l);
                },
                IntToStringHelper: function (i) {
                    switch (i) {
                        case 0: 
                            return "0";
                        case 1: 
                            return "1";
                        case 2: 
                            return "2";
                        case 3: 
                            return "3";
                        case 4: 
                            return "4";
                        case 5: 
                            return "5";
                        case 6: 
                            return "6";
                        case 7: 
                            return "7";
                        case 8: 
                            return "8";
                        case 9: 
                            return "9";
                    }

                    if (i < 0) {
                        return "-" + (DTLibrary.StringUtil.IntToStringHelper(((-i) | 0)) || "");
                    }

                    var x = (Bridge.Int.div(i, 10)) | 0;
                    var y = i % 10;

                    return (DTLibrary.StringUtil.IntToStringHelper(x) || "") + (DTLibrary.StringUtil.IntToStringHelper(y) || "");
                },
                LongToStringHelper: function (l) {
                    switch (l.toString()) {
                        case "0": 
                            return "0";
                        case "1": 
                            return "1";
                        case "2": 
                            return "2";
                        case "3": 
                            return "3";
                        case "4": 
                            return "4";
                        case "5": 
                            return "5";
                        case "6": 
                            return "6";
                        case "7": 
                            return "7";
                        case "8": 
                            return "8";
                        case "9": 
                            return "9";
                    }

                    if (l.lt(System.Int64(0))) {
                        return "-" + (DTLibrary.StringUtil.LongToStringHelper(l.neg()) || "");
                    }

                    var x = l.div(System.Int64(10));
                    var y = l.mod(System.Int64(10));

                    return (DTLibrary.StringUtil.LongToStringHelper(x) || "") + (DTLibrary.StringUtil.LongToStringHelper(y) || "");
                }
            }
        }
    });

    Bridge.define("DTLibrary.StringUtil.CultureInvariantComparer", {
        inherits: [System.Collections.Generic.IComparer$1(System.String)],
        $kind: "nested class",
        alias: ["compare", ["System$Collections$Generic$IComparer$1$System$String$compare", "System$Collections$Generic$IComparer$1$compare"]],
        methods: {
            compare: function (x, y) {
                if (x == null && y == null) {
                    return 0;
                }

                if (x == null) {
                    return -1;
                }

                if (y == null) {
                    return 1;
                }

                var index = 0;

                while (true) {
                    if (index === x.length && index === y.length) {
                        return 0;
                    }

                    if (index === x.length) {
                        return -1;
                    }

                    if (index === y.length) {
                        return 1;
                    }

                    var c1 = x.charCodeAt(index);
                    var c2 = y.charCodeAt(index);

                    if (c1 < c2) {
                        return -1;
                    }

                    if (c1 > c2) {
                        return 1;
                    }

                    index = (index + 1) | 0;
                }
            }
        }
    });

    Bridge.define("DTLibrary.VolumeUtil", {
        statics: {
            methods: {
                GetVolumeSmoothed: function (elapsedMicrosPerFrame, currentVolume, desiredVolume) {
                    var maxChangePerFrame = (Bridge.Int.div(elapsedMicrosPerFrame, 5000)) | 0;
                    if (maxChangePerFrame <= 0) {
                        maxChangePerFrame = 1;
                    }

                    if (Math.abs(((desiredVolume - currentVolume) | 0)) <= maxChangePerFrame) {
                        return desiredVolume;
                    } else {
                        if (desiredVolume > currentVolume) {
                            return ((currentVolume + maxChangePerFrame) | 0);
                        } else {
                            return ((currentVolume - maxChangePerFrame) | 0);
                        }
                    }
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercent.BridgeDisplayFont", {
        fields: {
            windowHeight: 0
        },
        ctors: {
            ctor: function (windowHeight) {
                this.$initialize();
                this.windowHeight = windowHeight;

                eval("\r\n\t\t\t\twindow.BridgeDisplayFontJavascript = ((function () {\r\n\t\t\t\t\t'use strict';\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar fontDictionary = {};\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar context = null;\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar fontFamilyCount = 0;\r\n\t\t\t\t\tvar numberOfFontObjectsLoaded = 0;\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar finishedLoading = false;\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar loadFonts = function (fontNames) {\r\n\t\t\t\t\t\tvar fontNamesArray = fontNames.split(',');\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tvar numberOfFontObjects = fontNamesArray.length;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tfor (var i = 0; i < fontNamesArray.length; i++) {\r\n\t\t\t\t\t\t\tvar fontName = fontNamesArray[i];\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif (fontDictionary[fontName])\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tvar fontFamilyName = 'DTFontFamily' + fontFamilyCount;\r\n\t\t\t\t\t\t\tfontFamilyCount++;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tvar font = new FontFace(fontFamilyName, 'url(Data/Font/' + fontName + ')');\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tfontDictionary[fontName] = {\r\n\t\t\t\t\t\t\t\tfont: font,\r\n\t\t\t\t\t\t\t\tfontFamilyName: fontFamilyName\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tfont.load().then((function (f) {\r\n\t\t\t\t\t\t\t\treturn function () {\r\n\t\t\t\t\t\t\t\t\tdocument.fonts.add(f);\r\n\t\t\t\t\t\t\t\t\tnumberOfFontObjectsLoaded++;\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t})(font));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tfinishedLoading = numberOfFontObjects === numberOfFontObjectsLoaded;\r\n\t\t\t\t\t\treturn finishedLoading;\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\t\r\n\t\t\t\t\tvar drawText = function (x, y, str, fontName, javascriptFontSize, lineHeight, red, green, blue, alpha) {\r\n\t\t\t\t\t\tif (context === null) {\r\n\t\t\t\t\t\t\tvar canvas = document.getElementById('bridgeCanvas');\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif (canvas === null)\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tcontext = canvas.getContext('2d');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tlineHeight = parseFloat(lineHeight);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tcontext.textBaseline = 'top';\r\n\t\t\t\t\t\tcontext.fillStyle = 'rgba(' + red.toString() + ', ' + green.toString() + ', ' + blue.toString() + ', ' + (alpha / 255).toString() + ')';\r\n\t\t\t\t\t\tcontext.strokeStyle = 'rgba(' + red.toString() + ', ' + green.toString() + ', ' + blue.toString() + ', ' + (alpha / 255).toString() + ')';\r\n\t\t\t\t\t\tcontext.font = javascriptFontSize + 'px \"' + fontDictionary[fontName].fontFamilyName + '\"';\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tvar strArray = str.split('\\n');\r\n\t\t\t\t\t\tvar lineY = y;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tfor (var i = 0; i < strArray.length; i++) {\r\n\t\t\t\t\t\t\tcontext.fillText(strArray[i], x, Math.round(lineY));\r\n\t\t\t\t\t\t\tlineY += lineHeight;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\t\r\n\t\t\t\t\tvar tryDrawText = function (x, y, str, fontName, javascriptFontSize, lineHeight, red, green, blue, alpha) {\r\n\t\t\t\t\t\tif (!finishedLoading)\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tdrawText(x, y, str, fontName, javascriptFontSize, lineHeight, red, green, blue, alpha);\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\t\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tloadFonts: loadFonts,\r\n\t\t\t\t\t\tdrawText: drawText,\r\n\t\t\t\t\t\ttryDrawText: tryDrawText\r\n\t\t\t\t\t};\r\n\t\t\t\t})());\r\n\t\t\t");
            }
        },
        methods: {
            LoadFonts: function () {
                var $t, $t1;
                var woffFontFilenames = new (System.Collections.Generic.HashSet$1(System.String)).ctor();

                $t = Bridge.getEnumerator(System.Enum.getValues(TuxPlanetSpeedrunAnyPercentLibrary.GameFont));
                try {
                    while ($t.moveNext()) {
                        var font = Bridge.cast($t.Current, TuxPlanetSpeedrunAnyPercentLibrary.GameFont);
                        woffFontFilenames.add(TuxPlanetSpeedrunAnyPercentLibrary.GameFontUtil.GetFontInfo(font).WoffFontFilename);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }

                var woffFontFilenamesAsString = "";
                var isFirst = true;
                $t1 = Bridge.getEnumerator(woffFontFilenames);
                try {
                    while ($t1.moveNext()) {
                        var woffFontFilename = $t1.Current;
                        if (isFirst) {
                            isFirst = false;
                        } else {
                            woffFontFilenamesAsString = (woffFontFilenamesAsString || "") + ",";
                        }
                        woffFontFilenamesAsString = (woffFontFilenamesAsString || "") + (woffFontFilename || "");
                    }
                } finally {
                    if (Bridge.is($t1, System.IDisposable)) {
                        $t1.System$IDisposable$Dispose();
                    }
                }

                if (Bridge.referenceEquals(woffFontFilenamesAsString, "")) {
                    return true;
                }

                return eval("window.BridgeDisplayFontJavascript.loadFonts('" + (woffFontFilenamesAsString || "") + "')");
            },
            DrawText: function (x, y, text, font, color) {
                y = (((this.windowHeight - y) | 0) - 1) | 0;

                var red = color.R;
                var green = color.G;
                var blue = color.B;
                var alpha = color.Alpha;

                var fontInfo = TuxPlanetSpeedrunAnyPercentLibrary.GameFontUtil.GetFontInfo(font);

                window.BridgeDisplayFontJavascript.drawText(x, y, text, fontInfo.WoffFontFilename, fontInfo.JavascriptFontSize, fontInfo.LineHeight, red, green, blue, alpha);
            },
            TryDrawText: function (x, y, text, font, color) {
                y = (((this.windowHeight - y) | 0) - 1) | 0;

                var red = color.R;
                var green = color.G;
                var blue = color.B;
                var alpha = color.Alpha;

                var fontInfo = TuxPlanetSpeedrunAnyPercentLibrary.GameFontUtil.GetFontInfo(font);

                window.BridgeDisplayFontJavascript.tryDrawText(x, y, text, fontInfo.WoffFontFilename, fontInfo.JavascriptFontSize, fontInfo.LineHeight, red, green, blue, alpha);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercent.BridgeDisplayImages", {
        fields: {
            widthDictionary: null,
            heightDictionary: null,
            windowHeight: 0
        },
        ctors: {
            ctor: function (windowHeight) {
                this.$initialize();
                this.windowHeight = windowHeight;

                this.widthDictionary = new (System.Collections.Generic.Dictionary$2(TuxPlanetSpeedrunAnyPercentLibrary.GameImage,System.Int32))();
                this.heightDictionary = new (System.Collections.Generic.Dictionary$2(TuxPlanetSpeedrunAnyPercentLibrary.GameImage,System.Int32))();
                eval("\r\n\t\t\t\twindow.BridgeDisplayImagesJavascript = ((function () {\r\n\t\t\t\t\t'use strict';\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar imgDict = {};\r\n\t\t\t\t\tvar widthDict = {};\r\n\t\t\t\t\tvar heightDict = {};\r\n\t\t\t\t\tvar canvas = null;\r\n\t\t\t\t\tvar context = null;\r\n\t\t\t\t\tvar radianConversion = 1.0 / 128.0 * (2.0 * Math.PI / 360.0);\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar numberOfImagesLoaded = 0;\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar loadImages = function (imageNames) {\r\n\t\t\t\t\t\tvar imageNamesArray = imageNames.split(',');\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tvar count = 0;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tfor (var i = 0; i < imageNamesArray.length; i++) {\r\n\t\t\t\t\t\t\tvar imageName = imageNamesArray[i];\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif (imgDict[imageName])\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tvar imgPath = 'Data/Images/' + imageName;\r\n\t\t\t\t\t\t\tvar img = new Image();\r\n\t\t\t\t\t\t\timg.addEventListener('load', (function (a, b) {\r\n\t\t\t\t\t\t\t\treturn function () {\r\n\t\t\t\t\t\t\t\t\tnumberOfImagesLoaded++;\r\n\t\t\t\t\t\t\t\t\twidthDict[a] = b.naturalWidth;\r\n\t\t\t\t\t\t\t\t\theightDict[a] = b.naturalHeight;\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t})(imageName, img));\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\timg.src = imgPath;\r\n\t\t\t\t\t\t\timgDict[imageName] = img;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tcount++;\r\n\t\t\t\t\t\t\tif (count === 15) // arbitrary\r\n\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\treturn numberOfImagesLoaded === imageNamesArray.length;\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar drawImageRotatedClockwise = function (imageName, x, y, degreesScaled, scalingFactorScaled) {\r\n\t\t\t\t\t\tif (canvas === null) {\r\n\t\t\t\t\t\t\tcanvas = document.getElementById('bridgeCanvas');\r\n\t\t\t\t\t\t\tif (canvas !== null)\r\n\t\t\t\t\t\t\t\tcontext = canvas.getContext('2d');\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tvar img = imgDict[imageName];\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tcontext.imageSmoothingEnabled = false;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (degreesScaled === 0 && scalingFactorScaled === 128) {\r\n\t\t\t\t\t\t\tcontext.drawImage(img, x, y);\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tvar scalingFactor = scalingFactorScaled / 128.0;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tcontext.translate(x, y);\r\n\t\t\t\t\t\tcontext.scale(scalingFactor, scalingFactor);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tcontext.translate(img.width / 2, img.height / 2);\r\n\t\t\t\t\t\tcontext.rotate(degreesScaled * radianConversion);\r\n\t\t\t\t\t\tcontext.translate(-img.width / 2, -img.height / 2);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tcontext.drawImage(img, 0, 0);\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tcontext.setTransform(1, 0, 0, 1, 0, 0);\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar drawImageRotatedClockwise2 = function (imageName, imageX, imageY, imageWidth, imageHeight, x, y, degreesScaled, scalingFactorScaled) {\r\n\t\t\t\t\t\tif (canvas === null) {\r\n\t\t\t\t\t\t\tcanvas = document.getElementById('bridgeCanvas');\r\n\t\t\t\t\t\t\tif (canvas !== null)\r\n\t\t\t\t\t\t\t\tcontext = canvas.getContext('2d');\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tvar img = imgDict[imageName];\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tcontext.imageSmoothingEnabled = false;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tvar scalingFactor = scalingFactorScaled / 128.0;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tcontext.translate(x, y);\r\n\t\t\t\t\t\tcontext.scale(scalingFactor, scalingFactor);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tcontext.translate(imageWidth / 2, imageHeight / 2);\r\n\t\t\t\t\t\tcontext.rotate(degreesScaled * radianConversion);\r\n\t\t\t\t\t\tcontext.translate(-imageWidth / 2, -imageHeight / 2);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tcontext.drawImage(img, imageX, imageY, imageWidth, imageHeight, 0, 0, imageWidth, imageHeight);\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tcontext.setTransform(1, 0, 0, 1, 0, 0);\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar getWidth = function (imageName) {\r\n\t\t\t\t\t\treturn widthDict[imageName];\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar getHeight = function (imageName) {\r\n\t\t\t\t\t\treturn heightDict[imageName];\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tloadImages: loadImages,\r\n\t\t\t\t\t\tdrawImageRotatedClockwise: drawImageRotatedClockwise,\r\n\t\t\t\t\t\tdrawImageRotatedClockwise2: drawImageRotatedClockwise2,\r\n\t\t\t\t\t\tgetWidth: getWidth,\r\n\t\t\t\t\t\tgetHeight: getHeight\r\n\t\t\t\t\t};\r\n\t\t\t\t})());\r\n\t\t\t");
            }
        },
        methods: {
            LoadImages: function () {
                var $t;
                var imageNames = "";
                var isFirst = true;

                $t = Bridge.getEnumerator(System.Enum.getValues(TuxPlanetSpeedrunAnyPercentLibrary.GameImage));
                try {
                    while ($t.moveNext()) {
                        var gameImage = Bridge.cast($t.Current, TuxPlanetSpeedrunAnyPercentLibrary.GameImage);
                        if (isFirst) {
                            isFirst = false;
                        } else {
                            imageNames = (imageNames || "") + ",";
                        }
                        imageNames = (imageNames || "") + (TuxPlanetSpeedrunAnyPercentLibrary.GameImageUtil.GetImageFilename(gameImage) || "");
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }

                if (Bridge.referenceEquals(imageNames, "")) {
                    return true;
                }

                var result = eval("window.BridgeDisplayImagesJavascript.loadImages('" + (imageNames || "") + "')");

                if (result) {
                    return true;
                }
                return false;
            },
            DrawImageRotatedClockwise: function (image, x, y, degreesScaled, scalingFactorScaled) {
                var height = this.GetHeight(image);
                var scaledHeight = (Bridge.Int.div(Bridge.Int.mul(height, scalingFactorScaled), 128)) | 0;
                y = (((this.windowHeight - y) | 0) - scaledHeight) | 0;

                window.BridgeDisplayImagesJavascript.drawImageRotatedClockwise(TuxPlanetSpeedrunAnyPercentLibrary.GameImageUtil.GetImageFilename(image), x, y, degreesScaled, scalingFactorScaled);
            },
            DrawImageRotatedClockwise$1: function (image, imageX, imageY, imageWidth, imageHeight, x, y, degreesScaled, scalingFactorScaled) {
                var height = imageHeight;
                var scaledHeight = (Bridge.Int.div(Bridge.Int.mul(height, scalingFactorScaled), 128)) | 0;
                y = (((this.windowHeight - y) | 0) - scaledHeight) | 0;

                window.BridgeDisplayImagesJavascript.drawImageRotatedClockwise2(TuxPlanetSpeedrunAnyPercentLibrary.GameImageUtil.GetImageFilename(image), imageX, imageY, imageWidth, imageHeight, x, y, degreesScaled, scalingFactorScaled);
            },
            GetWidth: function (image) {
                if (this.widthDictionary.containsKey(image)) {
                    return this.widthDictionary.get(image);
                }

                var width = this.GetWidthFromJavascript(image);
                this.widthDictionary.set(image, width);
                return width;
            },
            GetWidthFromJavascript: function (image) {
                return eval("window.BridgeDisplayImagesJavascript.getWidth('" + (TuxPlanetSpeedrunAnyPercentLibrary.GameImageUtil.GetImageFilename(image) || "") + "')");
            },
            GetHeight: function (image) {
                if (this.heightDictionary.containsKey(image)) {
                    return this.heightDictionary.get(image);
                }

                var height = this.GetHeightFromJavascript(image);
                this.heightDictionary.set(image, height);
                return height;
            },
            GetHeightFromJavascript: function (image) {
                return eval("window.BridgeDisplayImagesJavascript.getHeight('" + (TuxPlanetSpeedrunAnyPercentLibrary.GameImageUtil.GetImageFilename(image) || "") + "')");
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercent.BridgeDisplayRectangle", {
        fields: {
            windowHeight: 0
        },
        ctors: {
            ctor: function (windowHeight) {
                this.$initialize();
                this.windowHeight = windowHeight;

                eval("\r\n\t\t\t\twindow.BridgeDisplayRectangleJavascript = ((function () {\r\n\t\t\t\t\t'use strict';\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar canvas = null;\r\n\t\t\t\t\tvar context = null;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\tvar drawRectangle = function (x, y, width, height, red, green, blue, alpha, fill) {\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (canvas === null) {\r\n\t\t\t\t\t\t\tcanvas = document.getElementById('bridgeCanvas');\t\t\r\n\t\t\t\t\t\t\tif (canvas === null)\r\n\t\t\t\t\t\t\t\treturn;\t\r\n\t\t\t\t\t\t\tcontext = canvas.getContext('2d');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tcontext.fillStyle = 'rgba(' + red.toString() + ', ' + green.toString() + ', ' + blue.toString() + ', ' + (alpha / 255).toString() + ')';\r\n\t\t\t\t\t\tcontext.strokeStyle = 'rgba(' + red.toString() + ', ' + green.toString() + ', ' + blue.toString() + ', ' + (alpha / 255).toString() + ')';\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (fill)\r\n\t\t\t\t\t\t\tcontext.fillRect(x, y, width, height);\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tcontext.strokeRect(x, y, width, height);\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tdrawRectangle: drawRectangle\r\n\t\t\t\t\t};\r\n\t\t\t\t})());\r\n\t\t\t");
            }
        },
        methods: {
            DrawRectangle: function (x, y, width, height, color, fill) {
                y = (((this.windowHeight - y) | 0) - height) | 0;

                var red = color.R;
                var green = color.G;
                var blue = color.B;
                var alpha = color.Alpha;

                window.BridgeDisplayRectangleJavascript.drawRectangle(x, y, width, height, red, green, blue, alpha, fill);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercent.GameInitializer", {
        statics: {
            fields: {
                bridgeKeyboard: null,
                bridgeMouse: null,
                previousKeyboard: null,
                previousMouse: null,
                display: null,
                soundOutput: null,
                music: null,
                displayLogger: null,
                shouldRenderDisplayLogger: false,
                frame: null,
                hasInitializedClearCanvasJavascript: false,
                clickUrl: null
            },
            methods: {
                InitializeClearCanvasJavascript: function () {
                    eval("\r\n\t\t\t\twindow.BridgeClearCanvasJavascript = ((function () {\r\n\t\t\t\t\t'use strict';\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar canvas = null;\r\n\t\t\t\t\tvar context = null;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\tvar clearCanvas = function () {\r\n\t\t\t\t\t\tif (canvas === null) {\r\n\t\t\t\t\t\t\tcanvas = document.getElementById('bridgeCanvas');\r\n\t\t\t\t\t\t\tif (canvas === null)\r\n\t\t\t\t\t\t\t\treturn;\t\r\n\t\t\t\t\t\t\tcontext = canvas.getContext('2d');\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tcontext.clearRect(0, 0, canvas.width, canvas.height);\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tclearCanvas: clearCanvas\r\n\t\t\t\t\t};\r\n\t\t\t\t})());\r\n\t\t\t");
                },
                ClearCanvas: function () {
                    if (!TuxPlanetSpeedrunAnyPercent.GameInitializer.hasInitializedClearCanvasJavascript) {
                        TuxPlanetSpeedrunAnyPercent.GameInitializer.InitializeClearCanvasJavascript();
                        TuxPlanetSpeedrunAnyPercent.GameInitializer.hasInitializedClearCanvasJavascript = true;
                    }

                    window.BridgeClearCanvasJavascript.clearCanvas();
                },
                ClearClickUrl: function () {
                    eval("window.bridgeClickUrl = null;");
                },
                UpdateClickUrl: function (clickUrl) {
                    eval("window.bridgeClickUrl = '" + (clickUrl || "") + "';");
                },
                AddClickUrlListener: function () {
                    eval("\r\n\t\t\t\tdocument.addEventListener('click', function (e) {\r\n\t\t\t\t\tif (window.bridgeClickUrl !== undefined\r\n\t\t\t\t\t\t\t&& window.bridgeClickUrl !== null\r\n\t\t\t\t\t\t\t&& window.bridgeClickUrl !== '')\r\n\t\t\t\t\t\twindow.open(window.bridgeClickUrl, '_blank');\r\n\t\t\t\t}, false);\r\n\t\t\t");
                },
                RemoveMarginOnBody: function () {
                    eval("\r\n\t\t\t\t((function () {\r\n\t\t\t\t\tvar removeMargin;\r\n\t\t\t\t\t\r\n\t\t\t\t\tremoveMargin = function () {\r\n\t\t\t\t\t\tvar bodyElement = document.body;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (!bodyElement) {\r\n\t\t\t\t\t\t\tsetTimeout(removeMargin, 50);\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tbodyElement.style.margin = '0px';\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\r\n\t\t\t\t\tremoveMargin();\r\n\t\t\t\t})());\r\n\t\t\t");
                },
                Start: function (fps, isWebPortalVersion, debugMode) {
                    TuxPlanetSpeedrunAnyPercent.GameInitializer.hasInitializedClearCanvasJavascript = false;

                    TuxPlanetSpeedrunAnyPercent.GameInitializer.clickUrl = null;

                    TuxPlanetSpeedrunAnyPercent.GameInitializer.ClearClickUrl();

                    TuxPlanetSpeedrunAnyPercent.GameInitializer.AddClickUrlListener();

                    if (isWebPortalVersion) {
                        TuxPlanetSpeedrunAnyPercent.GameInitializer.RemoveMarginOnBody();
                    }

                    TuxPlanetSpeedrunAnyPercent.GameInitializer.shouldRenderDisplayLogger = true;

                    var logger;
                    if (debugMode) {
                        TuxPlanetSpeedrunAnyPercent.GameInitializer.displayLogger = new DTLibrary.DisplayLogger(5, 95);
                        logger = TuxPlanetSpeedrunAnyPercent.GameInitializer.displayLogger;
                    } else {
                        TuxPlanetSpeedrunAnyPercent.GameInitializer.displayLogger = null;
                        logger = new DTLibrary.EmptyLogger();
                    }

                    var windowWidth = 1000;
                    var windowHeight = 700;

                    var globalState = new TuxPlanetSpeedrunAnyPercentLibrary.GlobalState(windowWidth, windowHeight, fps, new DTLibrary.DTRandom(), new DTLibrary.GuidGenerator("391523846186017403"), logger, new DTLibrary.SimpleTimer(), new TuxPlanetSpeedrunAnyPercent.BridgeFileIO(), true, isWebPortalVersion, debugMode, null);

                    TuxPlanetSpeedrunAnyPercent.GameInitializer.frame = TuxPlanetSpeedrunAnyPercentLibrary.TuxPlanetSpeedrunAnyPercent.GetFirstFrame(globalState);

                    TuxPlanetSpeedrunAnyPercent.GameInitializer.bridgeKeyboard = new TuxPlanetSpeedrunAnyPercent.BridgeKeyboard(isWebPortalVersion);
                    TuxPlanetSpeedrunAnyPercent.GameInitializer.bridgeMouse = new TuxPlanetSpeedrunAnyPercent.BridgeMouse();

                    TuxPlanetSpeedrunAnyPercent.GameInitializer.display = new TuxPlanetSpeedrunAnyPercent.BridgeDisplay(windowHeight);
                    TuxPlanetSpeedrunAnyPercent.GameInitializer.soundOutput = new TuxPlanetSpeedrunAnyPercent.BridgeSoundOutput(globalState.ElapsedMicrosPerFrame);
                    TuxPlanetSpeedrunAnyPercent.GameInitializer.music = new TuxPlanetSpeedrunAnyPercent.BridgeMusic();

                    TuxPlanetSpeedrunAnyPercent.GameInitializer.previousKeyboard = new DTLibrary.EmptyKeyboard();
                    TuxPlanetSpeedrunAnyPercent.GameInitializer.previousMouse = new DTLibrary.EmptyMouse();

                    TuxPlanetSpeedrunAnyPercent.GameInitializer.ClearCanvas();
                    TuxPlanetSpeedrunAnyPercent.GameInitializer.frame.DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$Render(TuxPlanetSpeedrunAnyPercent.GameInitializer.display);
                    TuxPlanetSpeedrunAnyPercent.GameInitializer.frame.DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$RenderMusic(TuxPlanetSpeedrunAnyPercent.GameInitializer.music);
                    if (TuxPlanetSpeedrunAnyPercent.GameInitializer.displayLogger != null && TuxPlanetSpeedrunAnyPercent.GameInitializer.shouldRenderDisplayLogger) {
                        TuxPlanetSpeedrunAnyPercent.GameInitializer.displayLogger.Render(TuxPlanetSpeedrunAnyPercentLibrary.GameImage, TuxPlanetSpeedrunAnyPercentLibrary.GameFont, TuxPlanetSpeedrunAnyPercent.GameInitializer.display, TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont14Pt, DTLibrary.DTColor.Black());
                    }
                },
                ProcessExtraTime: function (milliseconds) {
                    TuxPlanetSpeedrunAnyPercent.GameInitializer.frame.DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessExtraTime(milliseconds);
                },
                ComputeAndRenderNextFrame: function () {
                    var currentKeyboard = new DTLibrary.CopiedKeyboard(TuxPlanetSpeedrunAnyPercent.GameInitializer.bridgeKeyboard);
                    var currentMouse = new DTLibrary.CopiedMouse(TuxPlanetSpeedrunAnyPercent.GameInitializer.bridgeMouse);

                    TuxPlanetSpeedrunAnyPercent.GameInitializer.frame = TuxPlanetSpeedrunAnyPercent.GameInitializer.frame.DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetNextFrame(currentKeyboard, currentMouse, TuxPlanetSpeedrunAnyPercent.GameInitializer.previousKeyboard, TuxPlanetSpeedrunAnyPercent.GameInitializer.previousMouse, TuxPlanetSpeedrunAnyPercent.GameInitializer.display, TuxPlanetSpeedrunAnyPercent.GameInitializer.soundOutput, TuxPlanetSpeedrunAnyPercent.GameInitializer.music);
                    TuxPlanetSpeedrunAnyPercent.GameInitializer.frame.DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessMusic();
                    TuxPlanetSpeedrunAnyPercent.GameInitializer.soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$ProcessFrame();
                    TuxPlanetSpeedrunAnyPercent.GameInitializer.ClearCanvas();
                    TuxPlanetSpeedrunAnyPercent.GameInitializer.frame.DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$Render(TuxPlanetSpeedrunAnyPercent.GameInitializer.display);
                    TuxPlanetSpeedrunAnyPercent.GameInitializer.frame.DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$RenderMusic(TuxPlanetSpeedrunAnyPercent.GameInitializer.music);

                    var newClickUrl = TuxPlanetSpeedrunAnyPercent.GameInitializer.frame.DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetClickUrl();

                    if (!Bridge.referenceEquals(TuxPlanetSpeedrunAnyPercent.GameInitializer.clickUrl, newClickUrl)) {
                        TuxPlanetSpeedrunAnyPercent.GameInitializer.clickUrl = newClickUrl;
                        if (TuxPlanetSpeedrunAnyPercent.GameInitializer.clickUrl == null) {
                            TuxPlanetSpeedrunAnyPercent.GameInitializer.ClearClickUrl();
                        } else {
                            TuxPlanetSpeedrunAnyPercent.GameInitializer.UpdateClickUrl(TuxPlanetSpeedrunAnyPercent.GameInitializer.clickUrl);
                        }
                    }

                    if (TuxPlanetSpeedrunAnyPercent.GameInitializer.displayLogger != null && TuxPlanetSpeedrunAnyPercent.GameInitializer.shouldRenderDisplayLogger) {
                        TuxPlanetSpeedrunAnyPercent.GameInitializer.displayLogger.Render(TuxPlanetSpeedrunAnyPercentLibrary.GameImage, TuxPlanetSpeedrunAnyPercentLibrary.GameFont, TuxPlanetSpeedrunAnyPercent.GameInitializer.display, TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont14Pt, DTLibrary.DTColor.Black());
                    }

                    if (currentKeyboard.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.L) && !TuxPlanetSpeedrunAnyPercent.GameInitializer.previousKeyboard.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.L)) {
                        TuxPlanetSpeedrunAnyPercent.GameInitializer.shouldRenderDisplayLogger = !TuxPlanetSpeedrunAnyPercent.GameInitializer.shouldRenderDisplayLogger;
                    }

                    TuxPlanetSpeedrunAnyPercent.GameInitializer.previousKeyboard = new DTLibrary.CopiedKeyboard(currentKeyboard);
                    TuxPlanetSpeedrunAnyPercent.GameInitializer.previousMouse = new DTLibrary.CopiedMouse(currentMouse);
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercent.Program", {
        main: function Main (args) {
            TuxPlanetSpeedrunAnyPercent.Program.AddFpsDisplayJavascript();
            TuxPlanetSpeedrunAnyPercent.Program.Initialize();
        },
        statics: {
            methods: {
                AddFpsDisplayJavascript: function () {
                    eval("\n\t\t\t\twindow.FpsDisplayJavascript = ((function () {\n\t\t\t\t\t'use strict';\n\t\t\t\t\t\n\t\t\t\t\tvar numberOfFrames = 0;\n\t\t\t\t\tvar hasAddedFpsLabel = false;\n\t\t\t\t\tvar startTimeMillis = Date.now();\n\t\t\t\t\tvar fpsNode = null;\n\t\t\t\t\t\n\t\t\t\t\tvar frameComputedAndRendered = function () {\n\t\t\t\t\t\tnumberOfFrames++;\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tvar displayFps = function () {\n\t\t\t\t\t\tif (!hasAddedFpsLabel) {\n\t\t\t\t\t\t\tvar fpsLabelNode = document.getElementById('fpsLabel');\n\t\t\t\t\t\t\tif (fpsLabelNode !== null) {\n\t\t\t\t\t\t\t\tfpsLabelNode.textContent = 'FPS: ';\n\t\t\t\t\t\t\t\thasAddedFpsLabel = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar currentTimeMillis = Date.now();\n\t\t\t\t\t\tif (currentTimeMillis - startTimeMillis > 2000) {\n\t\t\t\t\t\t\tvar actualFps = numberOfFrames / 2;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (fpsNode === null)\n\t\t\t\t\t\t\t\tfpsNode = document.getElementById('fps');\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (fpsNode !== null)\n\t\t\t\t\t\t\t\tfpsNode.textContent = actualFps.toString();\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tnumberOfFrames = 0;\n\t\t\t\t\t\t\tstartTimeMillis = currentTimeMillis;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\treturn {\n\t\t\t\t\t\tframeComputedAndRendered: frameComputedAndRendered,\n\t\t\t\t\t\tdisplayFps: displayFps\n\t\t\t\t\t};\n\t\t\t\t})());\n\t\t\t");
                },
                Initialize: function () {
                    eval("\n\t\t\t\t((function () {\n\t\t\t\t\t'use strict';\n\t\t\t\t\t\n\t\t\t\t\tvar isWebPortalVersion = false;\n\t\t\t\t\t\n\t\t\t\t\tvar urlParams = (new URL(document.location)).searchParams;\n\t\t\t\t\t\n\t\t\t\t\tvar showFps = urlParams.get('showfps') !== null\n\t\t\t\t\t\t? (urlParams.get('showfps') === 'true')\n\t\t\t\t\t\t: false;\n\t\t\t\t\tvar fps = urlParams.get('fps') !== null\n\t\t\t\t\t\t? parseInt(urlParams.get('fps'), 10)\n\t\t\t\t\t\t: 60;\n\t\t\t\t\tvar debugMode = urlParams.get('debugmode') !== null\n\t\t\t\t\t\t? (urlParams.get('debugmode') === 'true')\n\t\t\t\t\t\t: false;\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\twindow.TuxPlanetSpeedrunAnyPercent.GameInitializer.Start(fps, isWebPortalVersion, debugMode);\n\t\t\t\t\t\n\t\t\t\t\tvar computeAndRenderNextFrame;\n\t\t\t\t\t\n\t\t\t\t\tvar nextTimeToAct = Date.now() + (1000.0 / fps);\n\t\t\t\t\t\n\t\t\t\t\tvar hasProcessedExtraTime = false;\n\t\t\t\t\t\n\t\t\t\t\tcomputeAndRenderNextFrame = function () {\n\t\t\t\t\t\tvar now = Date.now();\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (nextTimeToAct > now) {\n\t\t\t\t\t\t\tif (!hasProcessedExtraTime) {\n\t\t\t\t\t\t\t\tvar extraTime = Math.round(nextTimeToAct - now);\n\t\t\t\t\t\t\t\tif (extraTime > 0)\n\t\t\t\t\t\t\t\t\twindow.TuxPlanetSpeedrunAnyPercent.GameInitializer.ProcessExtraTime(extraTime);\n\t\t\t\t\t\t\t\thasProcessedExtraTime = true;\n\t\t\t\t\t\t\t\tsetTimeout(computeAndRenderNextFrame, 0);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tsetTimeout(computeAndRenderNextFrame, 5);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\thasProcessedExtraTime = false;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (nextTimeToAct < now - 5.0*(1000.0 / fps))\n\t\t\t\t\t\t\tnextTimeToAct = now - 5.0*(1000.0 / fps);\n\t\t\t\t\t\t\n\t\t\t\t\t\tnextTimeToAct = nextTimeToAct + (1000.0 / fps);\n\t\t\t\t\t\t\n\t\t\t\t\t\twindow.TuxPlanetSpeedrunAnyPercent.GameInitializer.ComputeAndRenderNextFrame();\n\t\t\t\t\t\twindow.FpsDisplayJavascript.frameComputedAndRendered();\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (showFps)\n\t\t\t\t\t\t\twindow.FpsDisplayJavascript.displayFps();\n\t\t\t\t\t\t\n\t\t\t\t\t\tsetTimeout(computeAndRenderNextFrame, 0);\n\t\t\t\t\t};\n\t\t\t\t\t\n\t\t\t\t\tsetTimeout(computeAndRenderNextFrame, 0);\n\t\t\t\t})());\n\t\t\t");
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.ArrayUtil", {
        statics: {
            methods: {
                ShallowCopyTArray: function (T, array) {
                    var $t, $t1;
                    var newArray = System.Array.init(array.length, null, System.Array.type(T));

                    for (var i = 0; i < newArray.length; i = (i + 1) | 0) {
                        newArray[System.Array.index(i, newArray)] = System.Array.init(array[System.Array.index(i, array)].length, function (){
                            return Bridge.getDefaultValue(T);
                        }, T);
                        for (var j = 0; j < newArray[System.Array.index(i, newArray)].length; j = (j + 1) | 0) {
                            ($t = newArray[System.Array.index(i, newArray)])[System.Array.index(j, $t)] = ($t1 = array[System.Array.index(i, array)])[System.Array.index(j, $t1)];
                        }
                    }

                    return newArray;
                },
                CopyBoolArray: function (array) {
                    var $t, $t1;
                    var newArray = System.Array.init(array.length, null, System.Array.type(System.Boolean));

                    for (var i = 0; i < newArray.length; i = (i + 1) | 0) {
                        newArray[System.Array.index(i, newArray)] = System.Array.init(array[System.Array.index(i, array)].length, false, System.Boolean);
                        for (var j = 0; j < newArray[System.Array.index(i, newArray)].length; j = (j + 1) | 0) {
                            ($t = newArray[System.Array.index(i, newArray)])[System.Array.index(j, $t)] = ($t1 = array[System.Array.index(i, array)])[System.Array.index(j, $t1)];
                        }
                    }

                    return newArray;
                },
                EmptyBoolArray: function (length1, length2) {
                    var $t;
                    var array = System.Array.init(length1, null, System.Array.type(System.Boolean));

                    for (var i = 0; i < length1; i = (i + 1) | 0) {
                        array[System.Array.index(i, array)] = System.Array.init(length2, false, System.Boolean);
                        for (var j = 0; j < length2; j = (j + 1) | 0) {
                            ($t = array[System.Array.index(i, array)])[System.Array.index(j, $t)] = false;
                        }
                    }

                    return array;
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.IBackground", {
        $kind: "interface"
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.ITilemap", {
        $kind: "interface"
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.Button", {
        statics: {
            methods: {
                GetStandardPrimaryBackgroundColor: function () {
                    return new DTLibrary.DTColor.ctor(235, 235, 235);
                },
                GetStandardSecondaryBackgroundColor: function () {
                    return new DTLibrary.DTColor.ctor(200, 200, 200);
                },
                GetStandardHoverColor: function () {
                    return new DTLibrary.DTColor.ctor(250, 249, 200);
                },
                GetStandardClickColor: function () {
                    return new DTLibrary.DTColor.ctor(252, 251, 154);
                }
            }
        },
        fields: {
            x: 0,
            y: 0,
            width: 0,
            height: 0,
            backgroundColor: null,
            hoverColor: null,
            clickColor: null,
            text: null,
            textXOffset: 0,
            textYOffset: 0,
            font: 0,
            isHover: false,
            isClicked: false,
            previousMouseInput: null
        },
        ctors: {
            ctor: function (x, y, width, height, backgroundColor, hoverColor, clickColor, text, textXOffset, textYOffset, font) {
                this.$initialize();
                this.x = x;
                this.y = y;
                this.width = width;
                this.height = height;
                this.backgroundColor = backgroundColor;
                this.hoverColor = hoverColor;
                this.clickColor = clickColor;
                this.text = text;
                this.textXOffset = textXOffset;
                this.textYOffset = textYOffset;
                this.font = font;

                this.isHover = false;
                this.isClicked = false;

                this.previousMouseInput = null;
            }
        },
        methods: {
            IsHover: function (mouseInput) {
                var mouseX = mouseInput.DTLibrary$IMouse$GetX();
                var mouseY = mouseInput.DTLibrary$IMouse$GetY();
                return this.x <= mouseX && mouseX <= ((this.x + this.width) | 0) && this.y <= mouseY && mouseY <= ((this.y + this.height) | 0);
            },
            /**
             * Returns whether or not the user has clicked the button
             *
             * @instance
             * @public
             * @this TuxPlanetSpeedrunAnyPercentLibrary.Button
             * @memberof TuxPlanetSpeedrunAnyPercentLibrary.Button
             * @param   {DTLibrary.IMouse}    mouseInput            
             * @param   {DTLibrary.IMouse}    previousMouseInput
             * @return  {boolean}
             */
            ProcessFrame: function (mouseInput, previousMouseInput) {
                if (this.previousMouseInput != null) {
                    previousMouseInput = this.previousMouseInput;
                }

                this.previousMouseInput = new DTLibrary.CopiedMouse(mouseInput);

                var inRange = this.IsHover(mouseInput);

                this.isHover = inRange;

                if (mouseInput.DTLibrary$IMouse$IsLeftMouseButtonPressed() && !previousMouseInput.DTLibrary$IMouse$IsLeftMouseButtonPressed()) {
                    if (inRange) {
                        this.isClicked = true;
                    }
                }

                if (this.isClicked && !mouseInput.DTLibrary$IMouse$IsLeftMouseButtonPressed() && previousMouseInput.DTLibrary$IMouse$IsLeftMouseButtonPressed()) {
                    this.isClicked = false;

                    if (inRange) {
                        return true;
                    }
                }

                return false;
            },
            Render: function (displayOutput) {
                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle(this.x, this.y, ((this.width - 1) | 0), ((this.height - 1) | 0), this.isClicked ? this.clickColor : (this.isHover ? this.hoverColor : this.backgroundColor), true);

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle(this.x, this.y, this.width, this.height, DTLibrary.DTColor.Black(), false);

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText(((this.x + this.textXOffset) | 0), ((((this.y + this.height) | 0) - this.textYOffset) | 0), this.text, this.font, DTLibrary.DTColor.Black());
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.CameraState", {
        statics: {
            fields: {
                CUTSCENE_CAMERA_SPEED: 0
            },
            ctors: {
                init: function () {
                    this.CUTSCENE_CAMERA_SPEED = 500;
                }
            },
            methods: {
                GetCameraState: function (x, y) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.CameraState(x, y);
                },
                SmoothCameraState: function (currentCameraX, currentCameraY, destinationCameraX, destinationCameraY, elapsedMicrosPerFrame, cameraSpeedInPixelsPerSecond) {
                    var maxDistancePerFrame = (Bridge.Int.div(Bridge.Int.mul((elapsedMicrosPerFrame >> 3), cameraSpeedInPixelsPerSecond), (125000))) | 0;

                    if (maxDistancePerFrame <= 0) {
                        maxDistancePerFrame = 1;
                    }

                    var newX;
                    var newY;

                    if (Math.abs(((currentCameraX - destinationCameraX) | 0)) <= maxDistancePerFrame) {
                        newX = destinationCameraX;
                    } else {
                        newX = currentCameraX < destinationCameraX ? (((currentCameraX + maxDistancePerFrame) | 0)) : (((currentCameraX - maxDistancePerFrame) | 0));
                    }

                    if (Math.abs(((currentCameraY - destinationCameraY) | 0)) <= maxDistancePerFrame) {
                        newY = destinationCameraY;
                    } else {
                        newY = currentCameraY < destinationCameraY ? (((currentCameraY + maxDistancePerFrame) | 0)) : (((currentCameraY - maxDistancePerFrame) | 0));
                    }

                    return new TuxPlanetSpeedrunAnyPercentLibrary.CameraState(newX, newY);
                },
                SmoothCameraState$1: function (currentCamera, destinationCameraX, destinationCameraY, elapsedMicrosPerFrame, cameraSpeedInPixelsPerSecond) {
                    return TuxPlanetSpeedrunAnyPercentLibrary.CameraState.SmoothCameraState(currentCamera.X, currentCamera.Y, destinationCameraX, destinationCameraY, elapsedMicrosPerFrame, cameraSpeedInPixelsPerSecond);
                },
                SmoothCameraState$2: function (currentCamera, destinationCamera, elapsedMicrosPerFrame, cameraSpeedInPixelsPerSecond) {
                    return TuxPlanetSpeedrunAnyPercentLibrary.CameraState.SmoothCameraState(currentCamera.X, currentCamera.Y, destinationCamera.X, destinationCamera.Y, elapsedMicrosPerFrame, cameraSpeedInPixelsPerSecond);
                }
            }
        },
        fields: {
            X: 0,
            Y: 0
        },
        ctors: {
            ctor: function (x, y) {
                this.$initialize();
                this.X = x;
                this.Y = y;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.CameraStateProcessing", {
        statics: {
            methods: {
                ComputeCameraState: function (tuxXMibi, tuxYMibi, tuxTeleportStartingLocation, tuxTeleportInProgressElapsedMicros, tilemap, windowWidth, windowHeight) {
                    if (tuxTeleportInProgressElapsedMicros != null) {
                        var deltaX = System.Int64(tuxXMibi - tuxTeleportStartingLocation.Item1);
                        var deltaY = System.Int64(tuxYMibi - tuxTeleportStartingLocation.Item2);

                        tuxXMibi = System.Int64.clip32(System.Int64(tuxTeleportStartingLocation.Item1).add(deltaX.mul(System.Int64(System.Nullable.getValue(tuxTeleportInProgressElapsedMicros))).div(System.Int64(TuxPlanetSpeedrunAnyPercentLibrary.TuxState.TELEPORT_DURATION))));
                        tuxYMibi = System.Int64.clip32(System.Int64(tuxTeleportStartingLocation.Item2).add(deltaY.mul(System.Int64(System.Nullable.getValue(tuxTeleportInProgressElapsedMicros))).div(System.Int64(TuxPlanetSpeedrunAnyPercentLibrary.TuxState.TELEPORT_DURATION))));
                    }

                    var x = tuxXMibi >> 10;
                    var y = tuxYMibi >> 10;

                    var halfWindowWidth = windowWidth >> 1;
                    var halfWindowHeight = windowHeight >> 1;

                    var maxX = (tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetWidth() - halfWindowWidth) | 0;
                    var maxY = (tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetHeight() - halfWindowHeight) | 0;

                    if (x > maxX) {
                        x = maxX;
                    }
                    if (x < halfWindowWidth) {
                        x = halfWindowWidth;
                    }

                    if (y > maxY) {
                        y = maxY;
                    }

                    if (y < halfWindowHeight) {
                        y = halfWindowHeight;
                    }

                    return TuxPlanetSpeedrunAnyPercentLibrary.CameraState.GetCameraState(x, y);
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.CollisionProcessing_Enemies", {
        statics: {
            methods: {
                ProcessFrame: function (enemies) {
                    var finalEnemies = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor();

                    var killedEnemies = new (System.Collections.Generic.List$1(System.String)).ctor();

                    var indexOfRemoveKonqiEnemy = null;
                    var indexOfKonqiEnemy = null;
                    var konqiEnemyId = null;
                    var konqiLocation = null;

                    for (var i = 0; i < System.Array.getCount(enemies, TuxPlanetSpeedrunAnyPercentLibrary.IEnemy); i = (i + 1) | 0) {
                        if (System.Array.getItem(enemies, i, TuxPlanetSpeedrunAnyPercentLibrary.IEnemy).TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$IsRemoveKonqi) {
                            indexOfRemoveKonqiEnemy = i;
                        }

                        if (System.Array.getItem(enemies, i, TuxPlanetSpeedrunAnyPercentLibrary.IEnemy).TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$IsKonqi) {
                            indexOfKonqiEnemy = i;
                            konqiLocation = System.Array.getItem(enemies, i, TuxPlanetSpeedrunAnyPercentLibrary.IEnemy).TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetKonqiLocation();
                            konqiEnemyId = System.Array.getItem(enemies, i, TuxPlanetSpeedrunAnyPercentLibrary.IEnemy).TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId;
                        }

                        finalEnemies.add(System.Array.getItem(enemies, i, TuxPlanetSpeedrunAnyPercentLibrary.IEnemy));
                    }

                    if (System.Nullable.hasValue(indexOfRemoveKonqiEnemy) && System.Nullable.hasValue(indexOfKonqiEnemy)) {
                        var newFinalEnemies = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor();

                        for (var i1 = 0; i1 < finalEnemies.Count; i1 = (i1 + 1) | 0) {
                            if (!finalEnemies.getItem(i1).TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$IsRemoveKonqi && !finalEnemies.getItem(i1).TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$IsKonqi) {
                                newFinalEnemies.add(finalEnemies.getItem(i1));
                            }
                        }

                        newFinalEnemies.add(TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiDisappear.GetEnemyKonqiDisappear(konqiLocation.Item1 << 10, konqiLocation.Item2 << 10, "konqiDisappear"));

                        finalEnemies = newFinalEnemies;

                        killedEnemies.add(konqiEnemyId);
                    }

                    return new TuxPlanetSpeedrunAnyPercentLibrary.CollisionProcessing_Enemies.Result(finalEnemies, killedEnemies);
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.CollisionProcessing_Enemies.Result", {
        $kind: "nested class",
        fields: {
            NewEnemies: null,
            NewlyKilledEnemies: null
        },
        ctors: {
            ctor: function (newEnemies, newlyKilledEnemies) {
                this.$initialize();
                this.NewEnemies = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).$ctor1(newEnemies);
                this.NewlyKilledEnemies = new (System.Collections.Generic.List$1(System.String)).$ctor1(newlyKilledEnemies);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.CollisionProcessing_Tux", {
        statics: {
            methods: {
                ProcessFrame: function (tuxState, enemies, soundOutput) {
                    var $t, $t1, $t2, $t3, $t4;
                    if (tuxState.IsDead || tuxState.HasFinishedLevel) {
                        return new TuxPlanetSpeedrunAnyPercentLibrary.CollisionProcessing_Tux.Result(tuxState, enemies, new (System.Collections.Generic.List$1(System.String)).ctor());
                    }

                    var newEnemies = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor();
                    var newlyKilledEnemies = new (System.Collections.Generic.List$1(System.String)).ctor();

                    var tuxHitboxes = tuxState.GetHitboxes();

                    var newTuxState = tuxState;
                    var isTuxDead = false;

                    $t = Bridge.getEnumerator(enemies, TuxPlanetSpeedrunAnyPercentLibrary.IEnemy);
                    try {
                        while ($t.moveNext()) {
                            var enemy = $t.Current;
                            var enemyDamageBoxes = enemy.TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDamageBoxes();

                            var isSquished = false;
                            var hasCollided = false;

                            $t1 = Bridge.getEnumerator(tuxHitboxes);
                            try {
                                while ($t1.moveNext()) {
                                    var tuxHitbox = $t1.Current;
                                    $t2 = Bridge.getEnumerator(enemyDamageBoxes, TuxPlanetSpeedrunAnyPercentLibrary.Hitbox);
                                    try {
                                        while ($t2.moveNext()) {
                                            var enemyDamageBox = $t2.Current;
                                            if (TuxPlanetSpeedrunAnyPercentLibrary.CollisionProcessing_Tux.HasCollided(tuxHitbox, enemyDamageBox)) {
                                                isSquished = tuxHitbox.Y > ((enemyDamageBox.Y + (enemyDamageBox.Height >> 1)) | 0) || tuxState.YSpeedInMibipixelsPerSecond < 0;
                                                break;
                                            }
                                        }
                                    } finally {
                                        if (Bridge.is($t2, System.IDisposable)) {
                                            $t2.System$IDisposable$Dispose();
                                        }
                                    }

                                    if (isSquished) {
                                        break;
                                    }
                                }
                            } finally {
                                if (Bridge.is($t1, System.IDisposable)) {
                                    $t1.System$IDisposable$Dispose();
                                }
                            }

                            if (!isSquished) {
                                $t3 = Bridge.getEnumerator(tuxHitboxes);
                                try {
                                    while ($t3.moveNext()) {
                                        var tuxHitbox1 = $t3.Current;
                                        $t4 = Bridge.getEnumerator(enemy.TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetHitboxes(), TuxPlanetSpeedrunAnyPercentLibrary.Hitbox);
                                        try {
                                            while ($t4.moveNext()) {
                                                var enemyHitbox = $t4.Current;
                                                if (TuxPlanetSpeedrunAnyPercentLibrary.CollisionProcessing_Tux.HasCollided(tuxHitbox1, enemyHitbox)) {
                                                    hasCollided = true;
                                                    break;
                                                }
                                            }
                                        } finally {
                                            if (Bridge.is($t4, System.IDisposable)) {
                                                $t4.System$IDisposable$Dispose();
                                            }
                                        }

                                        if (hasCollided) {
                                            break;
                                        }
                                    }
                                } finally {
                                    if (Bridge.is($t3, System.IDisposable)) {
                                        $t3.System$IDisposable$Dispose();
                                    }
                                }
                            }

                            if (isSquished) {
                                soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$PlaySound(TuxPlanetSpeedrunAnyPercentLibrary.GameSound.Squish);
                                newlyKilledEnemies.add(enemy.TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId);
                                newEnemies.add(enemy.TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDeadEnemy());

                                newTuxState = newTuxState.SetYSpeedInMibipixelsPerSecond(TuxPlanetSpeedrunAnyPercentLibrary.TuxState.JUMP_Y_SPEED).SetIsStillHoldingJumpButton(true).SetLastTimeOnGround(null).SetHasAlreadyUsedTeleport(false);
                            } else if (hasCollided) {
                                isTuxDead = true;
                                newEnemies.add(enemy);
                            } else {
                                newEnemies.add(enemy);
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    if (isTuxDead) {
                        newTuxState = newTuxState.Kill();
                    }

                    return new TuxPlanetSpeedrunAnyPercentLibrary.CollisionProcessing_Tux.Result(newTuxState, newEnemies, newlyKilledEnemies);
                },
                HasCollided: function (a, b) {
                    if (a.X > ((b.X + b.Width) | 0)) {
                        return false;
                    }

                    if (b.X > ((a.X + a.Width) | 0)) {
                        return false;
                    }

                    if (a.Y > ((b.Y + b.Height) | 0)) {
                        return false;
                    }

                    if (b.Y > ((a.Y + a.Height) | 0)) {
                        return false;
                    }

                    return true;
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.CollisionProcessing_Tux.Result", {
        $kind: "nested class",
        fields: {
            NewTuxState: null,
            NewEnemies: null,
            NewlyKilledEnemies: null
        },
        ctors: {
            ctor: function (newTuxState, newEnemies, newlyKilledEnemies) {
                this.$initialize();
                this.NewTuxState = newTuxState;
                this.NewEnemies = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).$ctor1(newEnemies);
                this.NewlyKilledEnemies = new (System.Collections.Generic.List$1(System.String)).$ctor1(newlyKilledEnemies);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset", {
        $kind: "nested class",
        fields: {
            Tilemap: null,
            XOffset: 0,
            YOffset: 0,
            AlwaysIncludeTilemap: false
        },
        ctors: {
            ctor: function (tilemap, xOffset, yOffset, alwaysIncludeTilemap) {
                this.$initialize();
                this.Tilemap = tilemap;
                this.XOffset = xOffset;
                this.YOffset = yOffset;
                this.AlwaysIncludeTilemap = alwaysIncludeTilemap;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.Credits_DesignAndCoding", {
        statics: {
            methods: {
                GetWebBrowserVersionText: function () {
                    return "Design and coding by dtsudo: \n\nThis game is a fangame of SuperTux and SuperTux Advance. \n\nThis game is open source, licensed under the AGPL 3.0. \n(Code dependencies and images/font/sound/music licensed under \nAGPL-compatible licenses.) \n\nThe source code is written in C# and transpiled to javascript using \nBridge.NET. \n\nSee the source code for more information (including licensing \ndetails).";
                },
                GetDesktopVersionText: function () {
                    return "";
                },
                IsHoverOverGitHubUrl: function (mouse, isWebBrowserVersion, width, height) {
                    if (!isWebBrowserVersion) {
                        return false;
                    }

                    var mouseX = mouse.DTLibrary$IMouse$GetX();
                    var mouseY = mouse.DTLibrary$IMouse$GetY();

                    return 394 <= mouseX && mouseX <= 745 && ((height - 38) | 0) <= mouseY && mouseY <= ((height - 13) | 0);
                },
                Render: function (displayOutput, isHoverOverGitHubUrl, isWebBrowserVersion, width, height) {
                    if (isWebBrowserVersion) {
                        var text = TuxPlanetSpeedrunAnyPercentLibrary.Credits_DesignAndCoding.GetWebBrowserVersionText();

                        displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText(10, ((height - 10) | 0), text, TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont20Pt, DTLibrary.DTColor.Black());

                        displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText(395, ((height - 10) | 0), "https://github.com/dtsudo", TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont20Pt, isHoverOverGitHubUrl ? new DTLibrary.DTColor.ctor(0, 0, 255) : DTLibrary.DTColor.Black());
                    } else {
                        var text1 = TuxPlanetSpeedrunAnyPercentLibrary.Credits_DesignAndCoding.GetDesktopVersionText();

                        displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText(10, ((height - 10) | 0), text1, TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont20Pt, DTLibrary.DTColor.Black());
                    }
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.Credits_Font", {
        statics: {
            methods: {
                Render: function (displayOutput, width, height) {
                    var text = "The font used in this game was generated by metaflop and then \nslightly modified by dtsudo. \nhttps://www.metaflop.com/modulator \n\nThe font is licensed under SIL Open Font License v1.1 \nSee the source code for more details about the license. \n";

                    displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText(10, ((height - 10) | 0), text, TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont20Pt, DTLibrary.DTColor.Black());
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.Credits_Images", {
        statics: {
            methods: {
                GetText: function () {
                    return "Image files created by: \n* Benjamin K. Smith, Lanea Zimmerman (AKA Sharm), Daniel Eddeland, \n   William.Thompsonj, Nushio, Adrix89 \n* FrostC \n* Kelvin Shadewing \n* Kenney \n* KnoblePersona \n* Nemisys \n\nSee the source code for more information (including licensing \ndetails).";
                },
                Render: function (displayOutput, width, height) {
                    displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText(10, ((height - 10) | 0), TuxPlanetSpeedrunAnyPercentLibrary.Credits_Images.GetText(), TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont20Pt, DTLibrary.DTColor.Black());
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.Credits_Music", {
        statics: {
            methods: {
                GetText: function () {
                    return "Music track authors: \n* cynicmusic \n* Jason Lavallee \n* Lukas Nystrand \n* Cal McEachern \n* wansti \n\nSee the source code for more information (including licensing \ndetails).";
                },
                Render: function (displayOutput, width, height) {
                    displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText(10, ((height - 10) | 0), TuxPlanetSpeedrunAnyPercentLibrary.Credits_Music.GetText(), TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont20Pt, DTLibrary.DTColor.Black());
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.Credits_Sound", {
        statics: {
            methods: {
                GetText: function () {
                    return "Sound effects created by: \n* Basto \n* Kenney \n* Little Robot Sound Factory \n* SuperTux team (Some_Person, wansti) \n\nSee the source code for more information (including licensing \ndetails).";
                },
                Render: function (displayOutput, width, height) {
                    displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText(10, ((height - 10) | 0), TuxPlanetSpeedrunAnyPercentLibrary.Credits_Sound.GetText(), TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont20Pt, DTLibrary.DTColor.Black());
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.CreditsFrame.Tab", {
        $kind: "nested enum",
        statics: {
            fields: {
                DesignAndCoding: 0,
                Images: 1,
                Font: 2,
                Sound: 3,
                Music: 4
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.CreditsFrame.TabButton", {
        $kind: "nested class",
        fields: {
            X: 0,
            Y: 0,
            Width: 0,
            Height: 0,
            Tab: 0,
            TabName: null
        },
        ctors: {
            ctor: function (x, y, width, height, tab, tabName) {
                this.$initialize();
                this.X = x;
                this.Y = y;
                this.Width = width;
                this.Height = height;
                this.Tab = tab;
                this.TabName = tabName;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.ICutscene", {
        $kind: "interface"
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_SaveState.Status", {
        $kind: "nested enum",
        statics: {
            fields: {
                A_Camera: 0,
                B_Dialogue: 1,
                C_KonqiDisappear: 2,
                D_Camera: 3
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_Teleport.Status", {
        $kind: "nested enum",
        statics: {
            fields: {
                A_Camera: 0,
                B_Dialogue: 1,
                C_KonqiDisappear: 2,
                D_Camera: 3
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_TimeSlowdown.Status", {
        $kind: "nested enum",
        statics: {
            fields: {
                A_Camera: 0,
                B_Dialogue: 1,
                C_KonqiDisappear: 2,
                D_Camera: 3
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.CutsceneProcessing", {
        statics: {
            fields: {
                SAVESTATE_CUTSCENE: null,
                TIME_SLOWDOWN_CUTSCENE: null,
                TELEPORT_CUTSCENE: null
            },
            ctors: {
                init: function () {
                    this.SAVESTATE_CUTSCENE = "savestate_cutscene";
                    this.TIME_SLOWDOWN_CUTSCENE = "time_slowdown_cutscene";
                    this.TELEPORT_CUTSCENE = "teleport_cutscene";
                }
            },
            methods: {
                GetCutscene: function (cutsceneName) {
                    if (Bridge.referenceEquals(cutsceneName, TuxPlanetSpeedrunAnyPercentLibrary.CutsceneProcessing.SAVESTATE_CUTSCENE)) {
                        return TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_SaveState.GetCutscene();
                    } else {
                        if (Bridge.referenceEquals(cutsceneName, TuxPlanetSpeedrunAnyPercentLibrary.CutsceneProcessing.TIME_SLOWDOWN_CUTSCENE)) {
                            return TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_TimeSlowdown.GetCutscene();
                        } else {
                            if (Bridge.referenceEquals(cutsceneName, TuxPlanetSpeedrunAnyPercentLibrary.CutsceneProcessing.TELEPORT_CUTSCENE)) {
                                return TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_Teleport.GetCutscene();
                            } else {
                                throw new System.Exception();
                            }
                        }
                    }
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.CutsceneProcessing.Result", {
        $kind: "nested class",
        fields: {
            Move: null,
            CameraState: null,
            NewEnemies: null,
            Cutscene: null,
            ShouldGrantSaveStatePower: false,
            ShouldGrantTimeSlowdownPower: false,
            ShouldGrantTeleportPower: false
        },
        ctors: {
            ctor: function (move, cameraState, newEnemies, cutscene, shouldGrantSaveStatePower, shouldGrantTimeSlowdownPower, shouldGrantTeleportPower) {
                this.$initialize();
                this.Move = move;
                this.CameraState = cameraState;
                this.NewEnemies = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).$ctor1(newEnemies);
                this.Cutscene = cutscene;
                this.ShouldGrantSaveStatePower = shouldGrantSaveStatePower;
                this.ShouldGrantTimeSlowdownPower = shouldGrantTimeSlowdownPower;
                this.ShouldGrantTeleportPower = shouldGrantTeleportPower;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.Dialogue", {
        statics: {
            fields: {
                MICROS_PER_CHARACTER: 0
            },
            ctors: {
                init: function () {
                    this.MICROS_PER_CHARACTER = 30000;
                }
            },
            methods: {
                GetDialogue: function (x, y, width, height, text) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.Dialogue(x, y, width, height, text, 0, true, TuxPlanetSpeedrunAnyPercentLibrary.Move.EmptyMove());
                }
            }
        },
        fields: {
            x: 0,
            y: 0,
            width: 0,
            height: 0,
            text: null,
            elapsedMicros: 0,
            isFirst: false,
            previousMove: null
        },
        ctors: {
            ctor: function (x, y, width, height, text, elapsedMicros, isFirst, previousMove) {
                this.$initialize();
                this.x = x;
                this.y = y;
                this.width = width;
                this.height = height;
                this.text = text;
                this.elapsedMicros = elapsedMicros;
                this.isFirst = isFirst;
                this.previousMove = previousMove;
            }
        },
        methods: {
            GetMaxElapsedMicros: function () {
                return Bridge.Int.mul(this.text.length, TuxPlanetSpeedrunAnyPercentLibrary.Dialogue.MICROS_PER_CHARACTER);
            },
            ProcessFrame: function (move, elapsedMicrosPerFrame) {
                var newElapsedMicros = (this.elapsedMicros + elapsedMicrosPerFrame) | 0;

                var hasFinishedRenderingText;

                if (newElapsedMicros >= this.GetMaxElapsedMicros()) {
                    newElapsedMicros = (this.GetMaxElapsedMicros() + 1) | 0;
                    hasFinishedRenderingText = true;
                } else {
                    hasFinishedRenderingText = false;
                }

                var done = false;

                if (move.Jumped && !this.previousMove.Jumped && !this.isFirst) {
                    if (hasFinishedRenderingText) {
                        done = true;
                    } else {
                        newElapsedMicros = (this.GetMaxElapsedMicros() + 1) | 0;
                    }
                }

                return new TuxPlanetSpeedrunAnyPercentLibrary.Dialogue.Result(new TuxPlanetSpeedrunAnyPercentLibrary.Dialogue(this.x, this.y, this.width, this.height, this.text, newElapsedMicros, false, move), done);
            },
            Render: function (displayOutput, windowWidth, windowHeight) {
                var numCharactersToRender = (Bridge.Int.div(this.elapsedMicros, TuxPlanetSpeedrunAnyPercentLibrary.Dialogue.MICROS_PER_CHARACTER)) | 0;

                var textToRender;

                if (numCharactersToRender >= this.text.length) {
                    textToRender = this.text;
                } else {
                    textToRender = this.text.substr(0, numCharactersToRender);
                }

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle(this.x, this.y, this.width, this.height, new DTLibrary.DTColor.$ctor1(0, 0, 0, 150), true);

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText(((this.x + 5) | 0), ((((this.y + this.height) | 0) - 5) | 0), textToRender, TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont20Pt, DTLibrary.DTColor.White());
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.Dialogue.Result", {
        $kind: "nested class",
        fields: {
            Dialogue: null,
            IsDone: false
        },
        ctors: {
            ctor: function (dialogue, isDone) {
                this.$initialize();
                this.Dialogue = dialogue;
                this.IsDone = isDone;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.DialogueList", {
        fields: {
            dialogues: null
        },
        ctors: {
            ctor: function (dialogues) {
                this.$initialize();
                this.dialogues = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Dialogue)).$ctor1(dialogues);
            }
        },
        methods: {
            ProcessFrame: function (move, elapsedMicrosPerFrame) {
                var dialogueResult = System.Array.getItem(this.dialogues, 0, TuxPlanetSpeedrunAnyPercentLibrary.Dialogue).ProcessFrame(move, elapsedMicrosPerFrame);

                var newDialogues;
                var isDone = false;

                if (dialogueResult.IsDone) {
                    if (System.Array.getCount(this.dialogues, TuxPlanetSpeedrunAnyPercentLibrary.Dialogue) === 1) {
                        newDialogues = function (_o1) {
                                _o1.add(dialogueResult.Dialogue);
                                return _o1;
                            }(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Dialogue)).ctor());
                        isDone = true;
                    } else {
                        newDialogues = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Dialogue)).ctor();
                        for (var i = 1; i < System.Array.getCount(this.dialogues, TuxPlanetSpeedrunAnyPercentLibrary.Dialogue); i = (i + 1) | 0) {
                            newDialogues.add(System.Array.getItem(this.dialogues, i, TuxPlanetSpeedrunAnyPercentLibrary.Dialogue));
                        }
                    }
                } else {
                    newDialogues = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Dialogue)).ctor();
                    newDialogues.add(dialogueResult.Dialogue);
                    for (var i1 = 1; i1 < System.Array.getCount(this.dialogues, TuxPlanetSpeedrunAnyPercentLibrary.Dialogue); i1 = (i1 + 1) | 0) {
                        newDialogues.add(System.Array.getItem(this.dialogues, i1, TuxPlanetSpeedrunAnyPercentLibrary.Dialogue));
                    }
                }

                return new TuxPlanetSpeedrunAnyPercentLibrary.DialogueList.Result(new TuxPlanetSpeedrunAnyPercentLibrary.DialogueList(newDialogues), isDone);
            },
            Render: function (displayOutput, windowWidth, windowHeight) {
                System.Array.getItem(this.dialogues, 0, TuxPlanetSpeedrunAnyPercentLibrary.Dialogue).Render(displayOutput, windowWidth, windowHeight);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.DialogueList.Result", {
        $kind: "nested class",
        fields: {
            DialogueList: null,
            IsDone: false
        },
        ctors: {
            ctor: function (dialogueList, isDone) {
                this.$initialize();
                this.DialogueList = dialogueList;
                this.IsDone = isDone;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.ElapsedTimeUtil", {
        statics: {
            methods: {
                GetElapsedTimeString: function (elapsedMillis) {
                    var elapsedMinutes = DTLibrary.StringUtil.ToStringCultureInvariant((((Bridge.Int.div(((Bridge.Int.div(elapsedMillis, 1000)) | 0), 60)) | 0)));
                    if (elapsedMinutes.length < 2) {
                        elapsedMinutes = "0" + (elapsedMinutes || "");
                    }
                    var elapsedSeconds = DTLibrary.StringUtil.ToStringCultureInvariant(((((Bridge.Int.div(elapsedMillis, 1000)) | 0)) % 60));
                    if (elapsedSeconds.length < 2) {
                        elapsedSeconds = "0" + (elapsedSeconds || "");
                    }
                    var elapsedCentiseconds = DTLibrary.StringUtil.ToStringCultureInvariant((((Bridge.Int.div((elapsedMillis % 1000), 10)) | 0)));
                    if (elapsedCentiseconds.length < 2) {
                        elapsedCentiseconds = "0" + (elapsedCentiseconds || "");
                    }

                    return (elapsedMinutes || "") + ":" + (elapsedSeconds || "") + "." + (elapsedCentiseconds || "");
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.IEnemy", {
        $kind: "interface"
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemyIdGenerator", {
        fields: {
            id: 0
        },
        ctors: {
            ctor: function () {
                this.$initialize();
                this.id = 1;
            }
        },
        methods: {
            GetNewId: function () {
                var newId = "enemyId" + (DTLibrary.StringUtil.ToStringCultureInvariant(this.id) || "");
                this.id = (this.id + 1) | 0;
                return newId;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing", {
        statics: {
            methods: {
                ProcessFrame: function (tilemap, cameraX, cameraY, windowWidth, windowHeight, enemies, killedEnemies, elapsedMicrosPerFrame) {
                    var $t, $t1, $t2, $t3, $t4, $t5, $t6;
                    var existingEnemies = new (System.Collections.Generic.HashSet$1(System.String)).ctor();
                    $t = Bridge.getEnumerator(enemies, TuxPlanetSpeedrunAnyPercentLibrary.IEnemy);
                    try {
                        while ($t.moveNext()) {
                            var enemy = $t.Current;
                            existingEnemies.add(enemy.TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    var killedEnemiesSet = new (System.Collections.Generic.HashSet$1(System.String)).ctor();
                    $t1 = Bridge.getEnumerator(killedEnemies, System.String);
                    try {
                        while ($t1.moveNext()) {
                            var killedEnemy = $t1.Current;
                            killedEnemiesSet.add(killedEnemy);
                        }
                    } finally {
                        if (Bridge.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$Dispose();
                        }
                    }

                    var newEnemies = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor();
                    var newlyKilledEnemies = new (System.Collections.Generic.List$1(System.String)).ctor();

                    var potentialNewEnemies = tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetEnemies(0, 0);
                    $t2 = Bridge.getEnumerator(potentialNewEnemies, TuxPlanetSpeedrunAnyPercentLibrary.IEnemy);
                    try {
                        while ($t2.moveNext()) {
                            var potentialNewEnemy = $t2.Current;
                            if (!existingEnemies.contains(potentialNewEnemy.TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId) && !killedEnemiesSet.contains(potentialNewEnemy.TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId)) {
                                newEnemies.add(potentialNewEnemy);
                            }
                        }
                    } finally {
                        if (Bridge.is($t2, System.IDisposable)) {
                            $t2.System$IDisposable$Dispose();
                        }
                    }

                    var processedEnemies = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor();
                    var processedEnemiesSet = new (System.Collections.Generic.HashSet$1(System.String)).ctor();

                    $t3 = Bridge.getEnumerator(enemies, TuxPlanetSpeedrunAnyPercentLibrary.IEnemy);
                    try {
                        while ($t3.moveNext()) {
                            var enemy1 = $t3.Current;
                            var result = enemy1.TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ProcessFrame(cameraX, cameraY, windowWidth, windowHeight, elapsedMicrosPerFrame, tilemap);

                            $t4 = Bridge.getEnumerator(result.Enemies, TuxPlanetSpeedrunAnyPercentLibrary.IEnemy);
                            try {
                                while ($t4.moveNext()) {
                                    var e = $t4.Current;
                                    if (!processedEnemiesSet.contains(e.TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId) && !killedEnemiesSet.contains(e.TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId)) {
                                        processedEnemies.add(e);
                                        processedEnemiesSet.add(e.TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId);
                                    }
                                }
                            } finally {
                                if (Bridge.is($t4, System.IDisposable)) {
                                    $t4.System$IDisposable$Dispose();
                                }
                            }
                            newlyKilledEnemies.AddRange(result.NewlyKilledEnemies);
                        }
                    } finally {
                        if (Bridge.is($t3, System.IDisposable)) {
                            $t3.System$IDisposable$Dispose();
                        }
                    }

                    $t5 = Bridge.getEnumerator(newEnemies);
                    try {
                        while ($t5.moveNext()) {
                            var enemy2 = $t5.Current;
                            var result1 = enemy2.TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ProcessFrame(cameraX, cameraY, windowWidth, windowHeight, elapsedMicrosPerFrame, tilemap);

                            $t6 = Bridge.getEnumerator(result1.Enemies, TuxPlanetSpeedrunAnyPercentLibrary.IEnemy);
                            try {
                                while ($t6.moveNext()) {
                                    var e1 = $t6.Current;
                                    if (!processedEnemiesSet.contains(e1.TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId) && !killedEnemiesSet.contains(e1.TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId)) {
                                        processedEnemies.add(e1);
                                        processedEnemiesSet.add(e1.TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId);
                                    }
                                }
                            } finally {
                                if (Bridge.is($t6, System.IDisposable)) {
                                    $t6.System$IDisposable$Dispose();
                                }
                            }
                            newlyKilledEnemies.AddRange(result1.NewlyKilledEnemies);
                        }
                    } finally {
                        if (Bridge.is($t5, System.IDisposable)) {
                            $t5.System$IDisposable$Dispose();
                        }
                    }

                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(processedEnemies, newlyKilledEnemies);
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result", {
        $kind: "nested class",
        fields: {
            Enemies: null,
            NewlyKilledEnemies: null
        },
        ctors: {
            ctor: function (enemies, newlyKilledEnemies) {
                this.$initialize();
                this.Enemies = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).$ctor1(enemies);
                this.NewlyKilledEnemies = new (System.Collections.Generic.List$1(System.String)).$ctor1(newlyKilledEnemies);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.GameFontUtil", {
        statics: {
            methods: {
                GetFontInfo: function (font) {
                    switch (font) {
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont12Pt: 
                            return new TuxPlanetSpeedrunAnyPercentLibrary.GameFontUtil.FontInfo("Metaflop/dtsimplefont.ttf", "Metaflop/dtsimplefont.woff", 12, "15.86", "15.5", "dtsimplefont12");
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont14Pt: 
                            return new TuxPlanetSpeedrunAnyPercentLibrary.GameFontUtil.FontInfo("Metaflop/dtsimplefont.ttf", "Metaflop/dtsimplefont.woff", 14, "19.31", "18.5", "dtsimplefont14");
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont16Pt: 
                            return new TuxPlanetSpeedrunAnyPercentLibrary.GameFontUtil.FontInfo("Metaflop/dtsimplefont.ttf", "Metaflop/dtsimplefont.woff", 16, "21.85", "23", "dtsimplefont16");
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont18Pt: 
                            return new TuxPlanetSpeedrunAnyPercentLibrary.GameFontUtil.FontInfo("Metaflop/dtsimplefont.ttf", "Metaflop/dtsimplefont.woff", 18, "24.19", "24", "dtsimplefont18");
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont20Pt: 
                            return new TuxPlanetSpeedrunAnyPercentLibrary.GameFontUtil.FontInfo("Metaflop/dtsimplefont.ttf", "Metaflop/dtsimplefont.woff", 20, "26.76", "28.2", "dtsimplefont20");
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont32Pt: 
                            return new TuxPlanetSpeedrunAnyPercentLibrary.GameFontUtil.FontInfo("Metaflop/dtsimplefont.ttf", "Metaflop/dtsimplefont.woff", 32, "42.95", "44", "dtsimplefont32");
                        default: 
                            throw new System.Exception();
                    }
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.GameFontUtil.FontInfo", {
        $kind: "nested class",
        fields: {
            TtfFontFilename: null,
            WoffFontFilename: null,
            FontSize: 0,
            JavascriptFontSize: null,
            LineHeight: null,
            MonoGameSpriteFontName: null
        },
        ctors: {
            ctor: function (ttfFontFilename, woffFontFilename, fontSize, javascriptFontSize, lineHeight, monoGameSpriteFontName) {
                this.$initialize();
                this.TtfFontFilename = ttfFontFilename;
                this.WoffFontFilename = woffFontFilename;
                this.FontSize = fontSize;
                this.JavascriptFontSize = javascriptFontSize;
                this.LineHeight = lineHeight;
                this.MonoGameSpriteFontName = monoGameSpriteFontName;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.GameImageUtil", {
        statics: {
            methods: {
                GetImageFilename: function (image) {
                    switch (image) {
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.SoundOn_Black: 
                            return "Kenney/SoundOn_Black.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.SoundOff_Black: 
                            return "Kenney/SoundOff_Black.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.MusicOn_Black: 
                            return "Kenney/MusicOn_Black.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.MusicOff_Black: 
                            return "Kenney/MusicOff_Black.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.SoundOn_White: 
                            return "Kenney/SoundOn_White.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.SoundOff_White: 
                            return "Kenney/SoundOff_White.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.MusicOn_White: 
                            return "Kenney/MusicOn_White.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.MusicOff_White: 
                            return "Kenney/MusicOff_White.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.TilemapSnow: 
                            return "KelvinShadewing/tssnow.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Tux: 
                            return "KelvinShadewing/tux.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.TuxMirrored: 
                            return "KelvinShadewing/tux_mirrored.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Konqi: 
                            return "KelvinShadewing/konqi.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.KonqiMirrored: 
                            return "KelvinShadewing/konqi_mirrored.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Blazeborn: 
                            return "FrostC/Blazeborn.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.BlazebornMirrored: 
                            return "FrostC/Blazeborn_mirrored.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Smartcap: 
                            return "KelvinShadewing/smartcap.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.SmartcapMirrored: 
                            return "KelvinShadewing/smartcap_mirrored.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.BossHealth: 
                            return "KelvinShadewing/boss-health.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.C4: 
                            return "KelvinShadewing/c4.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Coin: 
                            return "KelvinShadewing/coin.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.EarthShell: 
                            return "KelvinShadewing/earthshell.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Igloo: 
                            return "KelvinShadewing/igloo.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Actors: 
                            return "KelvinShadewing/actors.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Solid: 
                            return "KelvinShadewing/solid.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Spikes: 
                            return "FrostC/spikes.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Signpost: 
                            return "Nemisys/signpost.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.PathDirt: 
                            return "BenCreating/PathDirt.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Snow: 
                            return "BenCreating/Snow/Snow.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.LevelIcons: 
                            return "KelvinShadewing/level-icons.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.TuxOverworld: 
                            return "KelvinShadewing/tuxO.png";
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameImage.OceanBackground: 
                            return "KnoblePersona/ocean.png";
                        default: 
                            throw new System.Exception();
                    }
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState", {
        statics: {
            fields: {
                MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS: 0,
                MARGIN_FOR_TILEMAP_DESPAWN_IN_PIXELS: 0
            },
            ctors: {
                init: function () {
                    this.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS = 250;
                    this.MARGIN_FOR_TILEMAP_DESPAWN_IN_PIXELS = 400;
                }
            }
        },
        fields: {
            LevelConfiguration: null,
            Background: null,
            Tilemap: null,
            Tux: null,
            Camera: null,
            LevelNameDisplay: null,
            Enemies: null,
            KilledEnemies: null,
            PreviousMove: null,
            FrameCounter: 0,
            WindowWidth: 0,
            WindowHeight: 0,
            Level: 0,
            CanUseSaveStates: false,
            CanUseTimeSlowdown: false,
            CanUseTeleport: false,
            StartedLevelOrCheckpointWithSaveStates: false,
            StartedLevelOrCheckpointWithTimeSlowdown: false,
            StartedLevelOrCheckpointWithTeleport: false,
            CheckpointLocation: null,
            CompletedCutscenesAtCheckpoint: null,
            KilledEnemiesAtCheckpoint: null,
            CompletedCutscenes: null,
            Cutscene: null
        },
        ctors: {
            ctor: function (levelConfiguration, background, tilemap, tux, camera, levelNameDisplay, enemies, killedEnemies, previousMove, frameCounter, windowWidth, windowHeight, level, canUseSaveStates, canUseTimeSlowdown, canUseTeleport, startedLevelOrCheckpointWithSaveStates, startedLevelOrCheckpointWithTimeSlowdown, startedLevelOrCheckpointWithTeleport, checkpointLocation, completedCutscenesAtCheckpoint, killedEnemiesAtCheckpoint, completedCutscenes, cutscene) {
                this.$initialize();
                this.LevelConfiguration = levelConfiguration;
                this.Background = background;
                this.Tilemap = tilemap;
                this.Tux = tux;
                this.Camera = camera;
                this.LevelNameDisplay = levelNameDisplay;
                this.Enemies = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).$ctor1(enemies);
                this.KilledEnemies = new (System.Collections.Generic.List$1(System.String)).$ctor1(killedEnemies);
                this.PreviousMove = previousMove;
                this.FrameCounter = frameCounter;
                this.WindowWidth = windowWidth;
                this.WindowHeight = windowHeight;
                this.Level = level;
                this.CanUseSaveStates = canUseSaveStates;
                this.CanUseTimeSlowdown = canUseTimeSlowdown;
                this.CanUseTeleport = canUseTeleport;
                this.StartedLevelOrCheckpointWithSaveStates = startedLevelOrCheckpointWithSaveStates;
                this.StartedLevelOrCheckpointWithTimeSlowdown = startedLevelOrCheckpointWithTimeSlowdown;
                this.StartedLevelOrCheckpointWithTeleport = startedLevelOrCheckpointWithTeleport;
                this.CheckpointLocation = checkpointLocation;
                this.CompletedCutscenesAtCheckpoint = new (System.Collections.Generic.List$1(System.String)).$ctor1(completedCutscenesAtCheckpoint);
                this.KilledEnemiesAtCheckpoint = new (System.Collections.Generic.List$1(System.String)).$ctor1(killedEnemiesAtCheckpoint);
                this.CompletedCutscenes = new (System.Collections.Generic.List$1(System.String)).$ctor1(completedCutscenes);
                this.Cutscene = cutscene;
            },
            $ctor1: function (level, windowWidth, windowHeight, canUseSaveStates, canUseTimeSlowdown, canUseTeleport, mapInfo, random) {
                this.$initialize();
                var levelConfig;

                if (level === TuxPlanetSpeedrunAnyPercentLibrary.Level.Level1) {
                    levelConfig = new TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level1(mapInfo, random);
                } else {
                    if (level === TuxPlanetSpeedrunAnyPercentLibrary.Level.Level2) {
                        levelConfig = new TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level2(mapInfo, canUseSaveStates, random);
                    } else {
                        if (level === TuxPlanetSpeedrunAnyPercentLibrary.Level.Level3) {
                            levelConfig = new TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level3(mapInfo, canUseTeleport, random);
                        } else {
                            if (level === TuxPlanetSpeedrunAnyPercentLibrary.Level.Level4) {
                                levelConfig = new TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level4(mapInfo, canUseTimeSlowdown, random);
                            } else {
                                if (level === TuxPlanetSpeedrunAnyPercentLibrary.Level.Level5) {
                                    levelConfig = new TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level5(mapInfo, random);
                                } else {
                                    throw new System.Exception();
                                }
                            }
                        }
                    }
                }

                this.LevelConfiguration = levelConfig;
                this.Background = this.LevelConfiguration.TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetBackground();
                this.Tilemap = this.LevelConfiguration.TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetTilemap(null, null, windowWidth, windowHeight);
                this.Tux = TuxPlanetSpeedrunAnyPercentLibrary.TuxState.GetDefaultTuxState(this.Tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetTuxLocation(0, 0).Item1, this.Tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetTuxLocation(0, 0).Item2);
                this.Camera = TuxPlanetSpeedrunAnyPercentLibrary.CameraStateProcessing.ComputeCameraState(this.Tux.XMibi, this.Tux.YMibi, this.Tux.TeleportStartingLocation, this.Tux.TeleportInProgressElapsedMicros, this.Tilemap, windowWidth, windowHeight);
                this.LevelNameDisplay = TuxPlanetSpeedrunAnyPercentLibrary.LevelNameDisplay.GetLevelNameDisplay(TuxPlanetSpeedrunAnyPercentLibrary.LevelUtil.GetLevelName(level));
                this.Enemies = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor();
                this.KilledEnemies = new (System.Collections.Generic.List$1(System.String)).ctor();
                this.PreviousMove = TuxPlanetSpeedrunAnyPercentLibrary.Move.EmptyMove();
                this.FrameCounter = 0;
                this.WindowWidth = windowWidth;
                this.WindowHeight = windowHeight;
                this.Level = level;
                this.CanUseSaveStates = canUseSaveStates;
                this.CanUseTimeSlowdown = canUseTimeSlowdown;
                this.CanUseTeleport = canUseTeleport;
                this.StartedLevelOrCheckpointWithSaveStates = canUseSaveStates;
                this.StartedLevelOrCheckpointWithTimeSlowdown = canUseTimeSlowdown;
                this.StartedLevelOrCheckpointWithTeleport = canUseTeleport;
                this.CheckpointLocation = null;
                this.CompletedCutscenesAtCheckpoint = new (System.Collections.Generic.List$1(System.String)).ctor();
                this.KilledEnemiesAtCheckpoint = new (System.Collections.Generic.List$1(System.String)).ctor();
                this.CompletedCutscenes = new (System.Collections.Generic.List$1(System.String)).ctor();
                this.Cutscene = null;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.GameLogicStateProcessing", {
        statics: {
            methods: {
                ProcessFrame: function (gameLogicState, move, debugMode, debugKeyboardInput, debugPreviousKeyboardInput, displayProcessing, soundOutput, elapsedMicrosPerFrame) {
                    var newTilemap = gameLogicState.LevelConfiguration.TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetTilemap(gameLogicState.Tux.XMibi >> 10, gameLogicState.Tux.YMibi >> 10, gameLogicState.WindowWidth, gameLogicState.WindowHeight);

                    var newLevelNameDisplay = gameLogicState.LevelNameDisplay.ProcessFrame(elapsedMicrosPerFrame);

                    var newCutscene = gameLogicState.Cutscene;
                    var newCompletedCutscenes = new (System.Collections.Generic.List$1(System.String)).$ctor1(gameLogicState.CompletedCutscenes);

                    var newCanUseSaveStates = gameLogicState.CanUseSaveStates;
                    var newCanUseTimeSlowdown = gameLogicState.CanUseTimeSlowdown;
                    var newCanUseTeleport = gameLogicState.CanUseTeleport;

                    var newCamera = gameLogicState.Camera;

                    var newEnemies = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).$ctor1(gameLogicState.Enemies);

                    if (newCutscene == null) {
                        var cutsceneName = newTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetCutscene(gameLogicState.Tux.XMibi >> 10, gameLogicState.Tux.YMibi >> 10);
                        if (cutsceneName != null && !newCompletedCutscenes.contains(cutsceneName)) {
                            newCutscene = TuxPlanetSpeedrunAnyPercentLibrary.CutsceneProcessing.GetCutscene(cutsceneName);
                        }
                    }

                    if (newCutscene != null) {
                        var cutsceneName1 = newCutscene.TuxPlanetSpeedrunAnyPercentLibrary$ICutscene$GetCutsceneName();
                        var cutsceneResult = newCutscene.TuxPlanetSpeedrunAnyPercentLibrary$ICutscene$ProcessFrame(move, gameLogicState.Tux.XMibi, gameLogicState.Tux.YMibi, newCamera, elapsedMicrosPerFrame, gameLogicState.WindowWidth, gameLogicState.WindowHeight, newTilemap);

                        if (cutsceneResult.Move != null) {
                            move = cutsceneResult.Move;
                        }

                        newCutscene = cutsceneResult.Cutscene;

                        if (System.Array.getCount(cutsceneResult.NewEnemies, TuxPlanetSpeedrunAnyPercentLibrary.IEnemy) > 0) {
                            newEnemies.AddRange(cutsceneResult.NewEnemies);
                        }

                        newCamera = cutsceneResult.CameraState;

                        if (cutsceneResult.ShouldGrantSaveStatePower) {
                            newCanUseSaveStates = true;
                        }

                        if (cutsceneResult.ShouldGrantTimeSlowdownPower) {
                            newCanUseTimeSlowdown = true;
                        }

                        if (cutsceneResult.ShouldGrantTeleportPower) {
                            newCanUseTeleport = true;
                        }

                        if (newCutscene == null) {
                            newCompletedCutscenes.add(cutsceneName1);
                        }
                    }

                    if (debugMode && debugKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Two) && !debugPreviousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Two)) {
                        newCanUseSaveStates = true;
                    }
                    if (debugMode && debugKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Three) && !debugPreviousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Three)) {
                        newCanUseTeleport = true;
                    }
                    if (debugMode && debugKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Four) && !debugPreviousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Four)) {
                        newCanUseTimeSlowdown = true;
                    }

                    var result = TuxPlanetSpeedrunAnyPercentLibrary.TuxStateProcessing.ProcessFrame(gameLogicState.Tux, move, gameLogicState.PreviousMove, gameLogicState.CanUseTeleport, debugMode, debugKeyboardInput, debugPreviousKeyboardInput, displayProcessing, soundOutput, elapsedMicrosPerFrame, gameLogicState.Tilemap);

                    var newTuxState = result.TuxState;

                    if (newCutscene == null) {
                        newCamera = TuxPlanetSpeedrunAnyPercentLibrary.CameraStateProcessing.ComputeCameraState(newTuxState.XMibi, newTuxState.YMibi, newTuxState.TeleportStartingLocation, newTuxState.TeleportInProgressElapsedMicros, gameLogicState.Tilemap, gameLogicState.WindowWidth, gameLogicState.WindowHeight);
                    }

                    var enemyProcessingResult = TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.ProcessFrame(newTilemap, newCamera.X, newCamera.Y, gameLogicState.WindowWidth, gameLogicState.WindowHeight, newEnemies, gameLogicState.KilledEnemies, elapsedMicrosPerFrame);

                    newEnemies = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).$ctor1(enemyProcessingResult.Enemies);

                    var newKilledEnemies = new (System.Collections.Generic.List$1(System.String)).$ctor1(gameLogicState.KilledEnemies);
                    newKilledEnemies.AddRange(enemyProcessingResult.NewlyKilledEnemies);

                    var collisionResultTux = TuxPlanetSpeedrunAnyPercentLibrary.CollisionProcessing_Tux.ProcessFrame(newTuxState, newEnemies, soundOutput);

                    newTuxState = collisionResultTux.NewTuxState;
                    newEnemies = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).$ctor1(collisionResultTux.NewEnemies);

                    newKilledEnemies.AddRange(collisionResultTux.NewlyKilledEnemies);

                    var collisionResultEnemy = TuxPlanetSpeedrunAnyPercentLibrary.CollisionProcessing_Enemies.ProcessFrame(newEnemies);

                    newEnemies = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).$ctor1(collisionResultEnemy.NewEnemies);

                    newKilledEnemies.AddRange(collisionResultEnemy.NewlyKilledEnemies);

                    var newStartedLevelOrCheckpointWithSaveStates = gameLogicState.StartedLevelOrCheckpointWithSaveStates;
                    var newStartedLevelOrCheckpointWithTimeSlowdown = gameLogicState.StartedLevelOrCheckpointWithTimeSlowdown;
                    var newStartedLevelOrCheckpointWithTeleport = gameLogicState.StartedLevelOrCheckpointWithTeleport;

                    var newCompletedCutscenesAtCheckpoint = gameLogicState.CompletedCutscenesAtCheckpoint;
                    var newKilledEnemiesAtCheckpoint = gameLogicState.KilledEnemiesAtCheckpoint;

                    var newCheckpointLocation = gameLogicState.CheckpointLocation;

                    var checkpoint = newTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetCheckpoint(newTuxState.XMibi >> 10, newTuxState.YMibi >> 10);
                    if (checkpoint != null) {
                        newCheckpointLocation = checkpoint;
                        newStartedLevelOrCheckpointWithSaveStates = gameLogicState.CanUseSaveStates;
                        newStartedLevelOrCheckpointWithTimeSlowdown = gameLogicState.CanUseTimeSlowdown;
                        newStartedLevelOrCheckpointWithTeleport = gameLogicState.CanUseTeleport;
                        newCompletedCutscenesAtCheckpoint = new (System.Collections.Generic.List$1(System.String)).$ctor1(gameLogicState.CompletedCutscenes);
                        newKilledEnemiesAtCheckpoint = new (System.Collections.Generic.List$1(System.String)).$ctor1(gameLogicState.KilledEnemies);
                    }

                    if (result.HasDied) {
                        var restartedTilemap = gameLogicState.LevelConfiguration.TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetTilemap(null, null, gameLogicState.WindowWidth, gameLogicState.WindowHeight);

                        var originalTuxState;

                        if (gameLogicState.CheckpointLocation == null) {
                            originalTuxState = TuxPlanetSpeedrunAnyPercentLibrary.TuxState.GetDefaultTuxState(restartedTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetTuxLocation(0, 0).Item1, restartedTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetTuxLocation(0, 0).Item2);
                        } else {
                            originalTuxState = TuxPlanetSpeedrunAnyPercentLibrary.TuxState.GetDefaultTuxState(gameLogicState.CheckpointLocation.Item1, gameLogicState.CheckpointLocation.Item2);
                        }

                        newCamera = TuxPlanetSpeedrunAnyPercentLibrary.CameraStateProcessing.ComputeCameraState(originalTuxState.XMibi, originalTuxState.YMibi, originalTuxState.TeleportStartingLocation, originalTuxState.TeleportInProgressElapsedMicros, restartedTilemap, gameLogicState.WindowWidth, gameLogicState.WindowHeight);

                        return new TuxPlanetSpeedrunAnyPercentLibrary.GameLogicStateProcessing.Result(new TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.ctor(gameLogicState.LevelConfiguration, gameLogicState.LevelConfiguration.TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetBackground(), restartedTilemap, originalTuxState, newCamera, newLevelNameDisplay, new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor(), gameLogicState.KilledEnemiesAtCheckpoint, move, ((gameLogicState.FrameCounter + 1) | 0), gameLogicState.WindowWidth, gameLogicState.WindowHeight, gameLogicState.Level, gameLogicState.StartedLevelOrCheckpointWithSaveStates, gameLogicState.StartedLevelOrCheckpointWithTimeSlowdown, gameLogicState.StartedLevelOrCheckpointWithTeleport, gameLogicState.StartedLevelOrCheckpointWithSaveStates, gameLogicState.StartedLevelOrCheckpointWithTimeSlowdown, gameLogicState.StartedLevelOrCheckpointWithTeleport, gameLogicState.CheckpointLocation, gameLogicState.CompletedCutscenesAtCheckpoint, gameLogicState.KilledEnemiesAtCheckpoint, gameLogicState.CompletedCutscenesAtCheckpoint, null), result.EndLevel, restartedTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$PlayMusic(), result.ShouldStopMusic);
                    } else {
                        return new TuxPlanetSpeedrunAnyPercentLibrary.GameLogicStateProcessing.Result(new TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.ctor(gameLogicState.LevelConfiguration, gameLogicState.LevelConfiguration.TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetBackground(), newTilemap, newTuxState, newCamera, newLevelNameDisplay, newEnemies, newKilledEnemies, move, ((gameLogicState.FrameCounter + 1) | 0), gameLogicState.WindowWidth, gameLogicState.WindowHeight, gameLogicState.Level, newCanUseSaveStates, newCanUseTimeSlowdown, newCanUseTeleport, newStartedLevelOrCheckpointWithSaveStates, newStartedLevelOrCheckpointWithTimeSlowdown, newStartedLevelOrCheckpointWithTeleport, newCheckpointLocation, newCompletedCutscenesAtCheckpoint, newKilledEnemiesAtCheckpoint, newCompletedCutscenes, newCutscene), result.EndLevel, newTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$PlayMusic(), result.ShouldStopMusic);
                    }
                },
                Render: function (gameLogicState, displayOutput, elapsedMillis, debug_showHitboxes) {
                    var $t, $t1, $t2;
                    var camera = gameLogicState.Camera;

                    gameLogicState.Background.TuxPlanetSpeedrunAnyPercentLibrary$IBackground$Render(camera.X, camera.Y, gameLogicState.WindowWidth, gameLogicState.WindowHeight, displayOutput);

                    var translatedDisplayOutput = new (DTLibrary.TranslatedDisplayOutput$2(TuxPlanetSpeedrunAnyPercentLibrary.GameImage,TuxPlanetSpeedrunAnyPercentLibrary.GameFont))(displayOutput, ((-(((camera.X - ((Bridge.Int.div(gameLogicState.WindowWidth, 2)) | 0)) | 0))) | 0), ((-(((camera.Y - ((Bridge.Int.div(gameLogicState.WindowHeight, 2)) | 0)) | 0))) | 0));

                    gameLogicState.Tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$RenderBackgroundTiles(translatedDisplayOutput, gameLogicState.Camera.X, gameLogicState.Camera.Y, gameLogicState.WindowWidth, gameLogicState.WindowHeight);

                    $t = Bridge.getEnumerator(gameLogicState.Enemies, TuxPlanetSpeedrunAnyPercentLibrary.IEnemy);
                    try {
                        while ($t.moveNext()) {
                            var enemy = $t.Current;
                            enemy.TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$Render(translatedDisplayOutput);
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    TuxPlanetSpeedrunAnyPercentLibrary.TuxStateProcessing.Render(gameLogicState.Tux, displayOutput, gameLogicState.Camera, gameLogicState.WindowWidth, gameLogicState.WindowHeight);

                    gameLogicState.Tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$RenderForegroundTiles(translatedDisplayOutput, gameLogicState.Camera.X, gameLogicState.Camera.Y, gameLogicState.WindowWidth, gameLogicState.WindowHeight);

                    if (debug_showHitboxes) {
                        var hitboxes = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Hitbox)).ctor();
                        hitboxes.AddRange(gameLogicState.Tux.GetHitboxes());

                        $t1 = Bridge.getEnumerator(gameLogicState.Enemies, TuxPlanetSpeedrunAnyPercentLibrary.IEnemy);
                        try {
                            while ($t1.moveNext()) {
                                var enemy1 = $t1.Current;
                                hitboxes.AddRange(enemy1.TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetHitboxes());
                            }
                        } finally {
                            if (Bridge.is($t1, System.IDisposable)) {
                                $t1.System$IDisposable$Dispose();
                            }
                        }

                        $t2 = Bridge.getEnumerator(hitboxes);
                        try {
                            while ($t2.moveNext()) {
                                var hitbox = $t2.Current;
                                translatedDisplayOutput.DrawRectangle(hitbox.X, hitbox.Y, hitbox.Width, hitbox.Height, new DTLibrary.DTColor.$ctor1(255, 0, 0, 128), true);
                            }
                        } finally {
                            if (Bridge.is($t2, System.IDisposable)) {
                                $t2.System$IDisposable$Dispose();
                            }
                        }
                    }

                    gameLogicState.LevelNameDisplay.Render(displayOutput, gameLogicState.WindowWidth, gameLogicState.WindowHeight);

                    var elapsedTimeString = TuxPlanetSpeedrunAnyPercentLibrary.ElapsedTimeUtil.GetElapsedTimeString(elapsedMillis);
                    var timerText = "Time: " + (elapsedTimeString || "");

                    displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText(((gameLogicState.WindowWidth - 120) | 0), ((gameLogicState.WindowHeight - 10) | 0), timerText, TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont14Pt, DTLibrary.DTColor.Black());

                    if (gameLogicState.Cutscene != null) {
                        gameLogicState.Cutscene.TuxPlanetSpeedrunAnyPercentLibrary$ICutscene$Render(displayOutput, gameLogicState.WindowWidth, gameLogicState.WindowHeight);
                    }
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.GameLogicStateProcessing.Result", {
        $kind: "nested class",
        fields: {
            NewGameLogicState: null,
            EndLevel: false,
            PlayMusic: null,
            ShouldStopMusic: false
        },
        ctors: {
            ctor: function (newGameLogicState, endLevel, playMusic, shouldStopMusic) {
                this.$initialize();
                this.NewGameLogicState = newGameLogicState;
                this.EndLevel = endLevel;
                this.PlayMusic = playMusic;
                this.ShouldStopMusic = shouldStopMusic;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.GameMusicUtil", {
        statics: {
            methods: {
                GetMusicFilename: function (music) {
                    switch (music) {
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameMusic.Airship2: 
                            return new TuxPlanetSpeedrunAnyPercentLibrary.GameMusicUtil.MusicFilenameInfo("JasonLavallee/airship_2.ogg", "JasonLavallee/airship_2.wav");
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameMusic.Theme: 
                            return new TuxPlanetSpeedrunAnyPercentLibrary.GameMusicUtil.MusicFilenameInfo("wansti/theme.ogg", "wansti/theme.wav");
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameMusic.PeaceAtLast: 
                            return new TuxPlanetSpeedrunAnyPercentLibrary.GameMusicUtil.MusicFilenameInfo("Trex0n/peace_at_last.ogg", "Trex0n/peace_at_last.wav");
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameMusic.Chipdisko: 
                            return new TuxPlanetSpeedrunAnyPercentLibrary.GameMusicUtil.MusicFilenameInfo("LukasNystrand/chipdisko.ogg", "LukasNystrand/chipdisko.wav");
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameMusic.Jewels: 
                            return new TuxPlanetSpeedrunAnyPercentLibrary.GameMusicUtil.MusicFilenameInfo("cynicmusic/music_jewels.ogg", "cynicmusic/music_jewels.wav");
                        default: 
                            throw new System.Exception();
                    }
                },
                GetMusicVolume: function (music) {
                    switch (music) {
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameMusic.Airship2: 
                            return 40;
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameMusic.Theme: 
                            return 10;
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameMusic.PeaceAtLast: 
                            return 30;
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameMusic.Chipdisko: 
                            return 70;
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameMusic.Jewels: 
                            return 30;
                        default: 
                            throw new System.Exception();
                    }
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.GameMusicUtil.MusicFilenameInfo", {
        $kind: "nested class",
        fields: {
            DefaultFilename: null,
            WavFilename: null
        },
        ctors: {
            ctor: function (defaultFilename, wavFilename) {
                this.$initialize();
                this.DefaultFilename = defaultFilename;
                this.WavFilename = wavFilename;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.GameSoundUtil", {
        statics: {
            methods: {
                GetSoundFilename: function (sound) {
                    switch (sound) {
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameSound.Click: 
                            return new TuxPlanetSpeedrunAnyPercentLibrary.GameSoundUtil.SoundFilenameInfo("Kenney/click3_Modified.wav", "Kenney/click3_Modified.wav");
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameSound.JingleWin01: 
                            return new TuxPlanetSpeedrunAnyPercentLibrary.GameSoundUtil.SoundFilenameInfo("LittleRobotSoundFactory/Jingle_Win_01.ogg", "LittleRobotSoundFactory/Jingle_Win_01_modified.wav");
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameSound.Die: 
                            return new TuxPlanetSpeedrunAnyPercentLibrary.GameSoundUtil.SoundFilenameInfo("Basto/cut.ogg", "Basto/cut.wav");
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameSound.Squish: 
                            return new TuxPlanetSpeedrunAnyPercentLibrary.GameSoundUtil.SoundFilenameInfo("SuperTux/squish.wav", "SuperTux/squish.wav");
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameSound.Jump: 
                            return new TuxPlanetSpeedrunAnyPercentLibrary.GameSoundUtil.SoundFilenameInfo("LittleRobotSoundFactory/Jump_03.wav", "LittleRobotSoundFactory/Jump_03.wav");
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameSound.Teleport: 
                            return new TuxPlanetSpeedrunAnyPercentLibrary.GameSoundUtil.SoundFilenameInfo("Basto/heavy_splash.ogg", "Basto/heavy_splash.wav");
                        default: 
                            throw new System.Exception();
                    }
                },
                GetSoundVolume: function (sound) {
                    switch (sound) {
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameSound.Click: 
                            return 30;
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameSound.JingleWin01: 
                            return 30;
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameSound.Die: 
                            return 30;
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameSound.Squish: 
                            return 30;
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameSound.Jump: 
                            return 30;
                        case TuxPlanetSpeedrunAnyPercentLibrary.GameSound.Teleport: 
                            return 30;
                        default: 
                            throw new System.Exception();
                    }
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.GameSoundUtil.SoundFilenameInfo", {
        $kind: "nested class",
        fields: {
            DefaultFilename: null,
            WavFilename: null
        },
        ctors: {
            ctor: function (defaultFilename, wavFilename) {
                this.$initialize();
                this.DefaultFilename = defaultFilename;
                this.WavFilename = wavFilename;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.GlobalState", {
        statics: {
            fields: {
                DEFAULT_VOLUME: 0
            },
            ctors: {
                init: function () {
                    this.DEFAULT_VOLUME = 50;
                }
            }
        },
        fields: {
            WindowWidth: 0,
            WindowHeight: 0,
            Fps: 0,
            Rng: null,
            GuidGenerator: null,
            Logger: null,
            Timer: null,
            IsWebBrowserVersion: false,
            IsWebPortalVersion: false,
            DebugMode: false,
            Debug_ShowHitBoxes: false,
            MapInfo: null,
            saveAndLoadData: null,
            desiredMusicVolume: 0,
            currentMusicVolume: 0,
            MusicPlayer: null,
            ElapsedMicrosPerFrame: 0
        },
        props: {
            MusicVolume: {
                get: function () {
                    return this.desiredMusicVolume;
                },
                set: function (value) {
                    this.desiredMusicVolume = value;
                }
            }
        },
        ctors: {
            ctor: function (windowWidth, windowHeight, fps, rng, guidGenerator, logger, timer, fileIO, isWebBrowserVersion, isWebPortalVersion, debugMode, initialMusicVolume) {
                var $t;
                this.$initialize();
                this.WindowWidth = windowWidth;
                this.WindowHeight = windowHeight;
                this.Fps = fps;
                this.Rng = rng;
                this.GuidGenerator = guidGenerator;
                this.Logger = logger;
                this.Timer = timer;
                this.IsWebBrowserVersion = isWebBrowserVersion;
                this.IsWebPortalVersion = isWebPortalVersion;
                this.DebugMode = debugMode;
                this.desiredMusicVolume = ($t = initialMusicVolume, $t != null ? $t : TuxPlanetSpeedrunAnyPercentLibrary.GlobalState.DEFAULT_VOLUME);
                this.currentMusicVolume = this.desiredMusicVolume;

                var elapsedMicrosPerFrame = (Bridge.Int.div(1000000, fps)) | 0;

                this.MusicPlayer = new TuxPlanetSpeedrunAnyPercentLibrary.MusicPlayer(elapsedMicrosPerFrame);
                this.ElapsedMicrosPerFrame = elapsedMicrosPerFrame;

                this.saveAndLoadData = new TuxPlanetSpeedrunAnyPercentLibrary.SaveAndLoadData(fileIO);

                this.Debug_ShowHitBoxes = false;

                this.MapInfo = TuxPlanetSpeedrunAnyPercentLibrary.MapDataHelper.GetStronglyTypedMapData(TuxPlanetSpeedrunAnyPercentLibrary.MapData.GetMapData());
            }
        },
        methods: {
            ProcessMusic: function () {
                this.MusicPlayer.ProcessFrame();
                this.currentMusicVolume = DTLibrary.VolumeUtil.GetVolumeSmoothed(this.ElapsedMicrosPerFrame, this.currentMusicVolume, this.desiredMusicVolume);
            },
            RenderMusic: function (musicOutput) {
                this.MusicPlayer.RenderMusic(musicOutput, this.currentMusicVolume);
            },
            SaveData: function (sessionState, soundVolume) {
                this.saveAndLoadData.SaveData(sessionState, soundVolume, this.desiredMusicVolume);
            },
            LoadSessionState: function (sessionState) {
                this.saveAndLoadData.LoadSessionState(sessionState, this.WindowWidth, this.WindowHeight, this.MapInfo);
            },
            LoadSoundVolume: function () {
                return this.saveAndLoadData.LoadSoundVolume();
            },
            LoadMusicVolume: function () {
                var musicVolume = this.saveAndLoadData.LoadMusicVolume();

                if (System.Nullable.hasValue(musicVolume)) {
                    this.desiredMusicVolume = System.Nullable.getValue(musicVolume);
                    this.currentMusicVolume = System.Nullable.getValue(musicVolume);
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.Hitbox", {
        fields: {
            X: 0,
            Y: 0,
            Width: 0,
            Height: 0
        },
        ctors: {
            ctor: function (x, y, width, height) {
                this.$initialize();
                this.X = x;
                this.Y = y;
                this.Width = width;
                this.Height = height;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.ILevelConfiguration", {
        $kind: "interface"
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.Level", {
        $kind: "enum",
        statics: {
            fields: {
                Level1: 0,
                Level2: 1,
                Level3: 2,
                Level4: 3,
                Level5: 4
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.LevelConfigurationHelper", {
        statics: {
            methods: {
                GetRandomGameMusic: function (random) {
                    var i = random.DTLibrary$IDTRandom$NextInt(3);

                    switch (i) {
                        case 0: 
                            return TuxPlanetSpeedrunAnyPercentLibrary.GameMusic.Airship2;
                        case 1: 
                            return TuxPlanetSpeedrunAnyPercentLibrary.GameMusic.Chipdisko;
                        case 2: 
                            return TuxPlanetSpeedrunAnyPercentLibrary.GameMusic.Jewels;
                        default: 
                            throw new System.Exception();
                    }
                },
                GetTilemap: function (normalizedTilemaps, tuxX, tuxY, windowWidth, windowHeight) {
                    var $t, $t1;
                    var tilemapWidth = 0;
                    var tilemapHeight = 0;

                    $t = Bridge.getEnumerator(normalizedTilemaps, TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset);
                    try {
                        while ($t.moveNext()) {
                            var tilemap = $t.Current;
                            var width = (tilemap.XOffset + tilemap.Tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetWidth()) | 0;

                            if (tilemapWidth < width) {
                                tilemapWidth = width;
                            }

                            var height = (tilemap.YOffset + tilemap.Tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetHeight()) | 0;

                            if (tilemapHeight < height) {
                                tilemapHeight = height;
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    if (tuxX == null || tuxY == null) {
                        return new TuxPlanetSpeedrunAnyPercentLibrary.BoundedTilemap(new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap(normalizedTilemaps, tilemapWidth, tilemapHeight));
                    }

                    if (System.Nullable.getValue(tuxX) > tilemapWidth) {
                        tuxX = tilemapWidth;
                    }
                    if (System.Nullable.getValue(tuxX) < 0) {
                        tuxX = 0;
                    }
                    if (System.Nullable.getValue(tuxY) > tilemapHeight) {
                        tuxY = tilemapHeight;
                    }
                    if (System.Nullable.getValue(tuxY) < 0) {
                        tuxY = 0;
                    }

                    var tilemapsNearTux = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset)).ctor();

                    var halfWindowWidth = windowWidth >> 1;
                    var halfWindowHeight = windowHeight >> 1;

                    var cameraLeft = (System.Nullable.getValue(tuxX) - halfWindowWidth) | 0;
                    var cameraRight = (System.Nullable.getValue(tuxX) + halfWindowWidth) | 0;
                    var cameraBottom = (System.Nullable.getValue(tuxY) - halfWindowHeight) | 0;
                    var cameraTop = (System.Nullable.getValue(tuxY) + halfWindowHeight) | 0;

                    var margin = TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_TILEMAP_DESPAWN_IN_PIXELS;

                    $t1 = Bridge.getEnumerator(normalizedTilemaps, TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset);
                    try {
                        while ($t1.moveNext()) {
                            var tilemap1 = $t1.Current;
                            if (!tilemap1.AlwaysIncludeTilemap) {
                                var tilemapLeft = tilemap1.XOffset;
                                var tilemapRight = (tilemap1.XOffset + tilemap1.Tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetWidth()) | 0;

                                if (tilemapRight < ((cameraLeft - margin) | 0)) {
                                    continue;
                                }
                                if (tilemapLeft > ((cameraRight + margin) | 0)) {
                                    continue;
                                }

                                var tilemapBottom = tilemap1.YOffset;
                                var tilemapTop = (tilemap1.YOffset + tilemap1.Tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetHeight()) | 0;

                                if (tilemapTop < ((cameraBottom - margin) | 0)) {
                                    continue;
                                }
                                if (tilemapBottom > ((cameraTop + margin) | 0)) {
                                    continue;
                                }
                            }

                            tilemapsNearTux.add(tilemap1);
                        }
                    } finally {
                        if (Bridge.is($t1, System.IDisposable)) {
                            $t1.System$IDisposable$Dispose();
                        }
                    }

                    return new TuxPlanetSpeedrunAnyPercentLibrary.BoundedTilemap(new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap(tilemapsNearTux, tilemapWidth, tilemapHeight));
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.LevelNameDisplay", {
        statics: {
            fields: {
                LEVEL_NAME_DISPLAY_DURATION: 0
            },
            ctors: {
                init: function () {
                    this.LEVEL_NAME_DISPLAY_DURATION = 3000000;
                }
            },
            methods: {
                GetLevelNameDisplay: function (levelName) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.LevelNameDisplay(levelName, 0);
                }
            }
        },
        fields: {
            levelName: null,
            elapsedMicros: 0
        },
        ctors: {
            ctor: function (levelName, elapsedMicros) {
                this.$initialize();
                this.levelName = levelName;
                this.elapsedMicros = elapsedMicros;
            }
        },
        methods: {
            ProcessFrame: function (elapsedMicrosPerFrame) {
                return new TuxPlanetSpeedrunAnyPercentLibrary.LevelNameDisplay(this.levelName, Math.min(((this.elapsedMicros + elapsedMicrosPerFrame) | 0), 3000001));
            },
            Render: function (displayOutput, windowWidth, windowHeight) {
                if (this.elapsedMicros >= TuxPlanetSpeedrunAnyPercentLibrary.LevelNameDisplay.LEVEL_NAME_DISPLAY_DURATION) {
                    return;
                }

                var alpha;

                if (this.elapsedMicros <= 1500000) {
                    alpha = 255;
                } else {
                    var amount = System.Int64(this.elapsedMicros - 1500000);
                    alpha = System.Int64.clip32(System.Int64(255).sub(amount.mul(System.Int64(255)).div(System.Int64((1500000)))));
                }

                if (alpha < 0) {
                    alpha = 0;
                }
                if (alpha > 255) {
                    alpha = 255;
                }

                var backgroundAlpha = (Bridge.Int.div(Bridge.Int.mul(128, alpha), 255)) | 0;

                if (backgroundAlpha < 0) {
                    backgroundAlpha = 0;
                }
                if (backgroundAlpha > 255) {
                    backgroundAlpha = 255;
                }

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle(0, ((((Bridge.Int.div(windowHeight, 2)) | 0) + 100) | 0), windowWidth, 100, new DTLibrary.DTColor.$ctor1(0, 0, 0, backgroundAlpha), true);

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText(50, ((((Bridge.Int.div(windowHeight, 2)) | 0) + 170) | 0), this.levelName, TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont32Pt, new DTLibrary.DTColor.$ctor1(255, 255, 255, alpha));
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.LevelUtil", {
        statics: {
            methods: {
                IsLastLevel: function (level) {
                    switch (level) {
                        case TuxPlanetSpeedrunAnyPercentLibrary.Level.Level1: 
                        case TuxPlanetSpeedrunAnyPercentLibrary.Level.Level2: 
                        case TuxPlanetSpeedrunAnyPercentLibrary.Level.Level3: 
                        case TuxPlanetSpeedrunAnyPercentLibrary.Level.Level4: 
                            return false;
                        case TuxPlanetSpeedrunAnyPercentLibrary.Level.Level5: 
                            return true;
                        default: 
                            throw new System.Exception();
                    }
                },
                GetLevelName: function (level) {
                    switch (level) {
                        case TuxPlanetSpeedrunAnyPercentLibrary.Level.Level1: 
                            return "Level 1";
                        case TuxPlanetSpeedrunAnyPercentLibrary.Level.Level2: 
                            return "Level 2";
                        case TuxPlanetSpeedrunAnyPercentLibrary.Level.Level3: 
                            return "Level 3";
                        case TuxPlanetSpeedrunAnyPercentLibrary.Level.Level4: 
                            return "Level 4";
                        case TuxPlanetSpeedrunAnyPercentLibrary.Level.Level5: 
                            return "Level 5";
                        default: 
                            throw new System.Exception();
                    }
                },
                ToSerializableInt: function (level) {
                    switch (level) {
                        case TuxPlanetSpeedrunAnyPercentLibrary.Level.Level1: 
                            return 1;
                        case TuxPlanetSpeedrunAnyPercentLibrary.Level.Level2: 
                            return 2;
                        case TuxPlanetSpeedrunAnyPercentLibrary.Level.Level3: 
                            return 3;
                        case TuxPlanetSpeedrunAnyPercentLibrary.Level.Level4: 
                            return 4;
                        case TuxPlanetSpeedrunAnyPercentLibrary.Level.Level5: 
                            return 5;
                        default: 
                            throw new System.Exception();
                    }
                },
                FromSerializableInt: function (i) {
                    var level = TuxPlanetSpeedrunAnyPercentLibrary.LevelUtil.TryFromSerializableInt(i);

                    if (level == null) {
                        throw new System.Exception();
                    }

                    return System.Nullable.getValue(level);
                },
                TryFromSerializableInt: function (i) {
                    switch (i) {
                        case 1: 
                            return TuxPlanetSpeedrunAnyPercentLibrary.Level.Level1;
                        case 2: 
                            return TuxPlanetSpeedrunAnyPercentLibrary.Level.Level2;
                        case 3: 
                            return TuxPlanetSpeedrunAnyPercentLibrary.Level.Level3;
                        case 4: 
                            return TuxPlanetSpeedrunAnyPercentLibrary.Level.Level4;
                        case 5: 
                            return TuxPlanetSpeedrunAnyPercentLibrary.Level.Level5;
                        default: 
                            return null;
                    }
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.MapData", {
        statics: {
            methods: {
                GetMapData: function () {
                    var dictionary = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String)))))();


                    var mapDictionary0 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level1", mapDictionary0);

                    mapDictionary0.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary0_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary0_0.set("firstgid", "1");
                    tilesetDictionary0_0.set("imagewidth", "464");
                    tilesetDictionary0_0.set("imageheight", "176");
                    tilesetDictionary0_0.set("name", "TsSnow");
                    tilesetDictionary0_0.set("tilewidth", "16");
                    tilesetDictionary0_0.set("tileheight", "16");
                    mapDictionary0.get("tilesets").add(tilesetDictionary0_0);
                    var tilesetDictionary0_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary0_1.set("firstgid", "320");
                    tilesetDictionary0_1.set("imagewidth", "80");
                    tilesetDictionary0_1.set("imageheight", "192");
                    tilesetDictionary0_1.set("name", "Solid");
                    tilesetDictionary0_1.set("tilewidth", "16");
                    tilesetDictionary0_1.set("tileheight", "16");
                    mapDictionary0.get("tilesets").add(tilesetDictionary0_1);
                    var tilesetDictionary0_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary0_2.set("firstgid", "380");
                    tilesetDictionary0_2.set("imagewidth", "128");
                    tilesetDictionary0_2.set("imageheight", "160");
                    tilesetDictionary0_2.set("name", "Actors");
                    tilesetDictionary0_2.set("tilewidth", "16");
                    tilesetDictionary0_2.set("tileheight", "16");
                    mapDictionary0.get("tilesets").add(tilesetDictionary0_2);
                    var tilesetDictionary0_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary0_3.set("firstgid", "460");
                    tilesetDictionary0_3.set("imagewidth", "128");
                    tilesetDictionary0_3.set("imageheight", "32");
                    tilesetDictionary0_3.set("name", "Spikes");
                    tilesetDictionary0_3.set("tilewidth", "16");
                    tilesetDictionary0_3.set("tileheight", "16");
                    mapDictionary0.get("tilesets").add(tilesetDictionary0_3);
                    var tilesetDictionary0_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary0_4.set("firstgid", "476");
                    tilesetDictionary0_4.set("imagewidth", "192");
                    tilesetDictionary0_4.set("imageheight", "80");
                    tilesetDictionary0_4.set("name", "Igloo");
                    tilesetDictionary0_4.set("tilewidth", "16");
                    tilesetDictionary0_4.set("tileheight", "16");
                    mapDictionary0.get("tilesets").add(tilesetDictionary0_4);

                    mapDictionary0.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary0_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary0_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,495,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,507,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,519,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary0_0.set("width", "140");
                    layersDictionary0_0.set("height", "29");
                    layersDictionary0_0.set("name", "Background");
                    mapDictionary0.get("layers").add(layersDictionary0_0);
                    var layersDictionary0_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary0_1.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,393,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,447,0,0,2,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,393,0,0,2,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,393,0,0,0,0,0,0,0,0,447,0,0,2,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,4,0,0,0,0,393,0,0,2,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,477,478,479,479,480,481,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,488,489,490,491,491,492,493,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,393,0,0,393,0,393,0,0,0,0,0,0,0,0,0,0,0,393,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,500,501,502,503,504,492,505,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,31,32,32,32,32,33,0,0,0,0,0,0,0,0,0,0,2,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,500,513,514,515,515,516,517,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,465,465,465,465,465,465,0,0,0,0,0,0,393,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,393,0,393,0,393,0,393,0,393,0,393,0,0,0,0,0,31,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,0,380,0,0,0,0,0,0,0,0,0,0,0,0,0,464,0,0,0,464,0,0,0,0,0,0,0,0,393,0,0,393,0,393,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,393,0,0,0,0,31,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,97,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,33,0,0,0,0,31,32,32,32,32,32,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,465,465,465,68,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,89,90,90,90,90,90,91,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,465,465,465,465,68,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,465,465,465,68,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61");
                    layersDictionary0_1.set("width", "140");
                    layersDictionary0_1.set("height", "29");
                    layersDictionary0_1.set("name", "Foreground");
                    mapDictionary0.get("layers").add(layersDictionary0_1);
                    var layersDictionary0_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary0_2.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,0,0,0,0,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,0,0,0,0,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,357,357,357,357,357,357,357,0,0,0,0,0,0,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,363,363,363,363,363,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,363,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,0,0,0,0,363,363,363,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,363,363,363,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,363,363,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320");
                    layersDictionary0_2.set("width", "140");
                    layersDictionary0_2.set("height", "29");
                    layersDictionary0_2.set("name", "Solid");
                    mapDictionary0.get("layers").add(layersDictionary0_2);



                    var mapDictionary1 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level2A_Start", mapDictionary1);

                    mapDictionary1.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary1_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary1_0.set("firstgid", "1");
                    tilesetDictionary1_0.set("imagewidth", "464");
                    tilesetDictionary1_0.set("imageheight", "176");
                    tilesetDictionary1_0.set("name", "TsSnow");
                    tilesetDictionary1_0.set("tilewidth", "16");
                    tilesetDictionary1_0.set("tileheight", "16");
                    mapDictionary1.get("tilesets").add(tilesetDictionary1_0);
                    var tilesetDictionary1_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary1_1.set("firstgid", "320");
                    tilesetDictionary1_1.set("imagewidth", "80");
                    tilesetDictionary1_1.set("imageheight", "192");
                    tilesetDictionary1_1.set("name", "Solid");
                    tilesetDictionary1_1.set("tilewidth", "16");
                    tilesetDictionary1_1.set("tileheight", "16");
                    mapDictionary1.get("tilesets").add(tilesetDictionary1_1);
                    var tilesetDictionary1_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary1_2.set("firstgid", "380");
                    tilesetDictionary1_2.set("imagewidth", "128");
                    tilesetDictionary1_2.set("imageheight", "160");
                    tilesetDictionary1_2.set("name", "Actors");
                    tilesetDictionary1_2.set("tilewidth", "16");
                    tilesetDictionary1_2.set("tileheight", "16");
                    mapDictionary1.get("tilesets").add(tilesetDictionary1_2);
                    var tilesetDictionary1_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary1_3.set("firstgid", "460");
                    tilesetDictionary1_3.set("imagewidth", "128");
                    tilesetDictionary1_3.set("imageheight", "32");
                    tilesetDictionary1_3.set("name", "Spikes");
                    tilesetDictionary1_3.set("tilewidth", "16");
                    tilesetDictionary1_3.set("tileheight", "16");
                    mapDictionary1.get("tilesets").add(tilesetDictionary1_3);
                    var tilesetDictionary1_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary1_4.set("firstgid", "476");
                    tilesetDictionary1_4.set("imagewidth", "192");
                    tilesetDictionary1_4.set("imageheight", "80");
                    tilesetDictionary1_4.set("name", "Igloo");
                    tilesetDictionary1_4.set("tilewidth", "16");
                    tilesetDictionary1_4.set("tileheight", "16");
                    mapDictionary1.get("tilesets").add(tilesetDictionary1_4);

                    mapDictionary1.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary1_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary1_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary1_0.set("width", "60");
                    layersDictionary1_0.set("height", "25");
                    layersDictionary1_0.set("name", "Background");
                    mapDictionary1.get("layers").add(layersDictionary1_0);
                    var layersDictionary1_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary1_1.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,380,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,393,0,393,0,0,0,0,0,393,0,393,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,33,0,0,31,32,32,32,32,33,0,0,31,32,32,32,32,97,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,60,61,61,61,61,62,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,60,61,61,61,61,62,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62");
                    layersDictionary1_1.set("width", "60");
                    layersDictionary1_1.set("height", "25");
                    layersDictionary1_1.set("name", "Foreground");
                    mapDictionary1.get("layers").add(layersDictionary1_1);
                    var layersDictionary1_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary1_2.set("data
                    layersDictionary1_2.set("width", "60");
                    layersDictionary1_2.set("height", "25");
                    layersDictionary1_2.set("name", "Solid");
                    mapDictionary1.get("layers").add(layersDictionary1_2);



                    var mapDictionary2 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level2B_Drop1", mapDictionary2);

                    mapDictionary2.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary2_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary2_0.set("firstgid", "1");
                    tilesetDictionary2_0.set("imagewidth", "464");
                    tilesetDictionary2_0.set("imageheight", "176");
                    tilesetDictionary2_0.set("name", "TsSnow");
                    tilesetDictionary2_0.set("tilewidth", "16");
                    tilesetDictionary2_0.set("tileheight", "16");
                    mapDictionary2.get("tilesets").add(tilesetDictionary2_0);
                    var tilesetDictionary2_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary2_1.set("firstgid", "320");
                    tilesetDictionary2_1.set("imagewidth", "80");
                    tilesetDictionary2_1.set("imageheight", "192");
                    tilesetDictionary2_1.set("name", "Solid");
                    tilesetDictionary2_1.set("tilewidth", "16");
                    tilesetDictionary2_1.set("tileheight", "16");
                    mapDictionary2.get("tilesets").add(tilesetDictionary2_1);
                    var tilesetDictionary2_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary2_2.set("firstgid", "380");
                    tilesetDictionary2_2.set("imagewidth", "128");
                    tilesetDictionary2_2.set("imageheight", "160");
                    tilesetDictionary2_2.set("name", "Actors");
                    tilesetDictionary2_2.set("tilewidth", "16");
                    tilesetDictionary2_2.set("tileheight", "16");
                    mapDictionary2.get("tilesets").add(tilesetDictionary2_2);
                    var tilesetDictionary2_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary2_3.set("firstgid", "460");
                    tilesetDictionary2_3.set("imagewidth", "128");
                    tilesetDictionary2_3.set("imageheight", "32");
                    tilesetDictionary2_3.set("name", "Spikes");
                    tilesetDictionary2_3.set("tilewidth", "16");
                    tilesetDictionary2_3.set("tileheight", "16");
                    mapDictionary2.get("tilesets").add(tilesetDictionary2_3);
                    var tilesetDictionary2_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary2_4.set("firstgid", "476");
                    tilesetDictionary2_4.set("imagewidth", "192");
                    tilesetDictionary2_4.set("imageheight", "80");
                    tilesetDictionary2_4.set("name", "Igloo");
                    tilesetDictionary2_4.set("tilewidth", "16");
                    tilesetDictionary2_4.set("tileheight", "16");
                    mapDictionary2.get("tilesets").add(tilesetDictionary2_4);

                    mapDictionary2.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary2_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary2_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary2_0.set("width", "60");
                    layersDictionary2_0.set("height", "15");
                    layersDictionary2_0.set("name", "Background");
                    mapDictionary2.get("layers").add(layersDictionary2_0);
                    var layersDictionary2_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary2_1.set("data
                    layersDictionary2_1.set("width", "60");
                    layersDictionary2_1.set("height", "15");
                    layersDictionary2_1.set("name", "Foreground");
                    mapDictionary2.get("layers").add(layersDictionary2_1);
                    var layersDictionary2_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary2_2.set("data
                    layersDictionary2_2.set("width", "60");
                    layersDictionary2_2.set("height", "15");
                    layersDictionary2_2.set("name", "Solid");
                    mapDictionary2.get("layers").add(layersDictionary2_2);



                    var mapDictionary3 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level2B_Drop2", mapDictionary3);

                    mapDictionary3.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary3_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary3_0.set("firstgid", "1");
                    tilesetDictionary3_0.set("imagewidth", "464");
                    tilesetDictionary3_0.set("imageheight", "176");
                    tilesetDictionary3_0.set("name", "TsSnow");
                    tilesetDictionary3_0.set("tilewidth", "16");
                    tilesetDictionary3_0.set("tileheight", "16");
                    mapDictionary3.get("tilesets").add(tilesetDictionary3_0);
                    var tilesetDictionary3_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary3_1.set("firstgid", "320");
                    tilesetDictionary3_1.set("imagewidth", "80");
                    tilesetDictionary3_1.set("imageheight", "192");
                    tilesetDictionary3_1.set("name", "Solid");
                    tilesetDictionary3_1.set("tilewidth", "16");
                    tilesetDictionary3_1.set("tileheight", "16");
                    mapDictionary3.get("tilesets").add(tilesetDictionary3_1);
                    var tilesetDictionary3_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary3_2.set("firstgid", "380");
                    tilesetDictionary3_2.set("imagewidth", "128");
                    tilesetDictionary3_2.set("imageheight", "160");
                    tilesetDictionary3_2.set("name", "Actors");
                    tilesetDictionary3_2.set("tilewidth", "16");
                    tilesetDictionary3_2.set("tileheight", "16");
                    mapDictionary3.get("tilesets").add(tilesetDictionary3_2);
                    var tilesetDictionary3_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary3_3.set("firstgid", "460");
                    tilesetDictionary3_3.set("imagewidth", "128");
                    tilesetDictionary3_3.set("imageheight", "32");
                    tilesetDictionary3_3.set("name", "Spikes");
                    tilesetDictionary3_3.set("tilewidth", "16");
                    tilesetDictionary3_3.set("tileheight", "16");
                    mapDictionary3.get("tilesets").add(tilesetDictionary3_3);
                    var tilesetDictionary3_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary3_4.set("firstgid", "476");
                    tilesetDictionary3_4.set("imagewidth", "192");
                    tilesetDictionary3_4.set("imageheight", "80");
                    tilesetDictionary3_4.set("name", "Igloo");
                    tilesetDictionary3_4.set("tilewidth", "16");
                    tilesetDictionary3_4.set("tileheight", "16");
                    mapDictionary3.get("tilesets").add(tilesetDictionary3_4);

                    mapDictionary3.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary3_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary3_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary3_0.set("width", "60");
                    layersDictionary3_0.set("height", "15");
                    layersDictionary3_0.set("name", "Background");
                    mapDictionary3.get("layers").add(layersDictionary3_0);
                    var layersDictionary3_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary3_1.set("data
                    layersDictionary3_1.set("width", "60");
                    layersDictionary3_1.set("height", "15");
                    layersDictionary3_1.set("name", "Foreground");
                    mapDictionary3.get("layers").add(layersDictionary3_1);
                    var layersDictionary3_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary3_2.set("data
                    layersDictionary3_2.set("width", "60");
                    layersDictionary3_2.set("height", "15");
                    layersDictionary3_2.set("name", "Solid");
                    mapDictionary3.get("layers").add(layersDictionary3_2);



                    var mapDictionary4 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level2B_Platform", mapDictionary4);

                    mapDictionary4.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary4_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary4_0.set("firstgid", "1");
                    tilesetDictionary4_0.set("imagewidth", "464");
                    tilesetDictionary4_0.set("imageheight", "176");
                    tilesetDictionary4_0.set("name", "TsSnow");
                    tilesetDictionary4_0.set("tilewidth", "16");
                    tilesetDictionary4_0.set("tileheight", "16");
                    mapDictionary4.get("tilesets").add(tilesetDictionary4_0);
                    var tilesetDictionary4_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary4_1.set("firstgid", "320");
                    tilesetDictionary4_1.set("imagewidth", "80");
                    tilesetDictionary4_1.set("imageheight", "192");
                    tilesetDictionary4_1.set("name", "Solid");
                    tilesetDictionary4_1.set("tilewidth", "16");
                    tilesetDictionary4_1.set("tileheight", "16");
                    mapDictionary4.get("tilesets").add(tilesetDictionary4_1);
                    var tilesetDictionary4_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary4_2.set("firstgid", "380");
                    tilesetDictionary4_2.set("imagewidth", "128");
                    tilesetDictionary4_2.set("imageheight", "160");
                    tilesetDictionary4_2.set("name", "Actors");
                    tilesetDictionary4_2.set("tilewidth", "16");
                    tilesetDictionary4_2.set("tileheight", "16");
                    mapDictionary4.get("tilesets").add(tilesetDictionary4_2);
                    var tilesetDictionary4_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary4_3.set("firstgid", "460");
                    tilesetDictionary4_3.set("imagewidth", "128");
                    tilesetDictionary4_3.set("imageheight", "32");
                    tilesetDictionary4_3.set("name", "Spikes");
                    tilesetDictionary4_3.set("tilewidth", "16");
                    tilesetDictionary4_3.set("tileheight", "16");
                    mapDictionary4.get("tilesets").add(tilesetDictionary4_3);
                    var tilesetDictionary4_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary4_4.set("firstgid", "476");
                    tilesetDictionary4_4.set("imagewidth", "192");
                    tilesetDictionary4_4.set("imageheight", "80");
                    tilesetDictionary4_4.set("name", "Igloo");
                    tilesetDictionary4_4.set("tilewidth", "16");
                    tilesetDictionary4_4.set("tileheight", "16");
                    mapDictionary4.get("tilesets").add(tilesetDictionary4_4);

                    mapDictionary4.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary4_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary4_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary4_0.set("width", "60");
                    layersDictionary4_0.set("height", "15");
                    layersDictionary4_0.set("name", "Background");
                    mapDictionary4.get("layers").add(layersDictionary4_0);
                    var layersDictionary4_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary4_1.set("data
                    layersDictionary4_1.set("width", "60");
                    layersDictionary4_1.set("height", "15");
                    layersDictionary4_1.set("name", "Foreground");
                    mapDictionary4.get("layers").add(layersDictionary4_1);
                    var layersDictionary4_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary4_2.set("data
                    layersDictionary4_2.set("width", "60");
                    layersDictionary4_2.set("height", "15");
                    layersDictionary4_2.set("name", "Solid");
                    mapDictionary4.get("layers").add(layersDictionary4_2);



                    var mapDictionary5 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level2C_LowerFloor", mapDictionary5);

                    mapDictionary5.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary5_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary5_0.set("firstgid", "1");
                    tilesetDictionary5_0.set("imagewidth", "464");
                    tilesetDictionary5_0.set("imageheight", "176");
                    tilesetDictionary5_0.set("name", "TsSnow");
                    tilesetDictionary5_0.set("tilewidth", "16");
                    tilesetDictionary5_0.set("tileheight", "16");
                    mapDictionary5.get("tilesets").add(tilesetDictionary5_0);
                    var tilesetDictionary5_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary5_1.set("firstgid", "320");
                    tilesetDictionary5_1.set("imagewidth", "80");
                    tilesetDictionary5_1.set("imageheight", "192");
                    tilesetDictionary5_1.set("name", "Solid");
                    tilesetDictionary5_1.set("tilewidth", "16");
                    tilesetDictionary5_1.set("tileheight", "16");
                    mapDictionary5.get("tilesets").add(tilesetDictionary5_1);
                    var tilesetDictionary5_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary5_2.set("firstgid", "380");
                    tilesetDictionary5_2.set("imagewidth", "128");
                    tilesetDictionary5_2.set("imageheight", "160");
                    tilesetDictionary5_2.set("name", "Actors");
                    tilesetDictionary5_2.set("tilewidth", "16");
                    tilesetDictionary5_2.set("tileheight", "16");
                    mapDictionary5.get("tilesets").add(tilesetDictionary5_2);
                    var tilesetDictionary5_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary5_3.set("firstgid", "460");
                    tilesetDictionary5_3.set("imagewidth", "128");
                    tilesetDictionary5_3.set("imageheight", "32");
                    tilesetDictionary5_3.set("name", "Spikes");
                    tilesetDictionary5_3.set("tilewidth", "16");
                    tilesetDictionary5_3.set("tileheight", "16");
                    mapDictionary5.get("tilesets").add(tilesetDictionary5_3);
                    var tilesetDictionary5_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary5_4.set("firstgid", "476");
                    tilesetDictionary5_4.set("imagewidth", "192");
                    tilesetDictionary5_4.set("imageheight", "80");
                    tilesetDictionary5_4.set("name", "Igloo");
                    tilesetDictionary5_4.set("tilewidth", "16");
                    tilesetDictionary5_4.set("tileheight", "16");
                    mapDictionary5.get("tilesets").add(tilesetDictionary5_4);

                    mapDictionary5.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary5_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary5_0.set("data
                    layersDictionary5_0.set("width", "60");
                    layersDictionary5_0.set("height", "35");
                    layersDictionary5_0.set("name", "Background");
                    mapDictionary5.get("layers").add(layersDictionary5_0);
                    var layersDictionary5_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary5_1.set("data", "61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,60,61,61,61,61,62,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,67,90,90,90,90,90,91,0,0,89,90,90,90,90,91,0,0,89,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,91,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,96,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61");
                    layersDictionary5_1.set("width", "60");
                    layersDictionary5_1.set("height", "35");
                    layersDictionary5_1.set("name", "Foreground");
                    mapDictionary5.get("layers").add(layersDictionary5_1);
                    var layersDictionary5_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary5_2.set("data
                    layersDictionary5_2.set("width", "60");
                    layersDictionary5_2.set("height", "35");
                    layersDictionary5_2.set("name", "Solid");
                    mapDictionary5.get("layers").add(layersDictionary5_2);



                    var mapDictionary6 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level2D_Cutscene", mapDictionary6);

                    mapDictionary6.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary6_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary6_0.set("firstgid", "1");
                    tilesetDictionary6_0.set("imagewidth", "464");
                    tilesetDictionary6_0.set("imageheight", "176");
                    tilesetDictionary6_0.set("name", "TsSnow");
                    tilesetDictionary6_0.set("tilewidth", "16");
                    tilesetDictionary6_0.set("tileheight", "16");
                    mapDictionary6.get("tilesets").add(tilesetDictionary6_0);
                    var tilesetDictionary6_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary6_1.set("firstgid", "320");
                    tilesetDictionary6_1.set("imagewidth", "80");
                    tilesetDictionary6_1.set("imageheight", "192");
                    tilesetDictionary6_1.set("name", "Solid");
                    tilesetDictionary6_1.set("tilewidth", "16");
                    tilesetDictionary6_1.set("tileheight", "16");
                    mapDictionary6.get("tilesets").add(tilesetDictionary6_1);
                    var tilesetDictionary6_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary6_2.set("firstgid", "380");
                    tilesetDictionary6_2.set("imagewidth", "128");
                    tilesetDictionary6_2.set("imageheight", "160");
                    tilesetDictionary6_2.set("name", "Actors");
                    tilesetDictionary6_2.set("tilewidth", "16");
                    tilesetDictionary6_2.set("tileheight", "16");
                    mapDictionary6.get("tilesets").add(tilesetDictionary6_2);
                    var tilesetDictionary6_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary6_3.set("firstgid", "460");
                    tilesetDictionary6_3.set("imagewidth", "128");
                    tilesetDictionary6_3.set("imageheight", "32");
                    tilesetDictionary6_3.set("name", "Spikes");
                    tilesetDictionary6_3.set("tilewidth", "16");
                    tilesetDictionary6_3.set("tileheight", "16");
                    mapDictionary6.get("tilesets").add(tilesetDictionary6_3);
                    var tilesetDictionary6_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary6_4.set("firstgid", "476");
                    tilesetDictionary6_4.set("imagewidth", "192");
                    tilesetDictionary6_4.set("imageheight", "80");
                    tilesetDictionary6_4.set("name", "Igloo");
                    tilesetDictionary6_4.set("tilewidth", "16");
                    tilesetDictionary6_4.set("tileheight", "16");
                    mapDictionary6.get("tilesets").add(tilesetDictionary6_4);

                    mapDictionary6.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary6_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary6_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary6_0.set("width", "25");
                    layersDictionary6_0.set("height", "45");
                    layersDictionary6_0.set("name", "Background");
                    mapDictionary6.get("layers").add(layersDictionary6_0);
                    var layersDictionary6_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary6_1.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,403,0,0,0,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61");
                    layersDictionary6_1.set("width", "25");
                    layersDictionary6_1.set("height", "45");
                    layersDictionary6_1.set("name", "Foreground");
                    mapDictionary6.get("layers").add(layersDictionary6_1);
                    var layersDictionary6_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary6_2.set("data
                    layersDictionary6_2.set("width", "25");
                    layersDictionary6_2.set("height", "45");
                    layersDictionary6_2.set("name", "Solid");
                    mapDictionary6.get("layers").add(layersDictionary6_2);



                    var mapDictionary7 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level2E", mapDictionary7);

                    mapDictionary7.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary7_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary7_0.set("firstgid", "1");
                    tilesetDictionary7_0.set("imagewidth", "464");
                    tilesetDictionary7_0.set("imageheight", "176");
                    tilesetDictionary7_0.set("name", "TsSnow");
                    tilesetDictionary7_0.set("tilewidth", "16");
                    tilesetDictionary7_0.set("tileheight", "16");
                    mapDictionary7.get("tilesets").add(tilesetDictionary7_0);
                    var tilesetDictionary7_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary7_1.set("firstgid", "320");
                    tilesetDictionary7_1.set("imagewidth", "80");
                    tilesetDictionary7_1.set("imageheight", "192");
                    tilesetDictionary7_1.set("name", "Solid");
                    tilesetDictionary7_1.set("tilewidth", "16");
                    tilesetDictionary7_1.set("tileheight", "16");
                    mapDictionary7.get("tilesets").add(tilesetDictionary7_1);
                    var tilesetDictionary7_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary7_2.set("firstgid", "380");
                    tilesetDictionary7_2.set("imagewidth", "128");
                    tilesetDictionary7_2.set("imageheight", "160");
                    tilesetDictionary7_2.set("name", "Actors");
                    tilesetDictionary7_2.set("tilewidth", "16");
                    tilesetDictionary7_2.set("tileheight", "16");
                    mapDictionary7.get("tilesets").add(tilesetDictionary7_2);
                    var tilesetDictionary7_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary7_3.set("firstgid", "460");
                    tilesetDictionary7_3.set("imagewidth", "128");
                    tilesetDictionary7_3.set("imageheight", "32");
                    tilesetDictionary7_3.set("name", "Spikes");
                    tilesetDictionary7_3.set("tilewidth", "16");
                    tilesetDictionary7_3.set("tileheight", "16");
                    mapDictionary7.get("tilesets").add(tilesetDictionary7_3);
                    var tilesetDictionary7_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary7_4.set("firstgid", "476");
                    tilesetDictionary7_4.set("imagewidth", "192");
                    tilesetDictionary7_4.set("imageheight", "80");
                    tilesetDictionary7_4.set("name", "Igloo");
                    tilesetDictionary7_4.set("tilewidth", "16");
                    tilesetDictionary7_4.set("tileheight", "16");
                    mapDictionary7.get("tilesets").add(tilesetDictionary7_4);

                    mapDictionary7.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary7_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary7_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary7_0.set("width", "55");
                    layersDictionary7_0.set("height", "35");
                    layersDictionary7_0.set("name", "Background");
                    mapDictionary7.get("layers").add(layersDictionary7_0);
                    var layersDictionary7_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary7_1.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,393,0,0,393,0,0,0,0,447,0,0,393,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,33,0,0,31,33,0,0,31,33,0,0,31,33,0,0,31,32,32,97,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,60,62,0,0,60,62,0,0,60,62,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62");
                    layersDictionary7_1.set("width", "55");
                    layersDictionary7_1.set("height", "35");
                    layersDictionary7_1.set("name", "Foreground");
                    mapDictionary7.get("layers").add(layersDictionary7_1);
                    var layersDictionary7_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary7_2.set("data
                    layersDictionary7_2.set("width", "55");
                    layersDictionary7_2.set("height", "35");
                    layersDictionary7_2.set("name", "Solid");
                    mapDictionary7.get("layers").add(layersDictionary7_2);



                    var mapDictionary8 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level2F_Drop1", mapDictionary8);

                    mapDictionary8.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary8_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary8_0.set("firstgid", "1");
                    tilesetDictionary8_0.set("imagewidth", "464");
                    tilesetDictionary8_0.set("imageheight", "176");
                    tilesetDictionary8_0.set("name", "TsSnow");
                    tilesetDictionary8_0.set("tilewidth", "16");
                    tilesetDictionary8_0.set("tileheight", "16");
                    mapDictionary8.get("tilesets").add(tilesetDictionary8_0);
                    var tilesetDictionary8_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary8_1.set("firstgid", "320");
                    tilesetDictionary8_1.set("imagewidth", "80");
                    tilesetDictionary8_1.set("imageheight", "192");
                    tilesetDictionary8_1.set("name", "Solid");
                    tilesetDictionary8_1.set("tilewidth", "16");
                    tilesetDictionary8_1.set("tileheight", "16");
                    mapDictionary8.get("tilesets").add(tilesetDictionary8_1);
                    var tilesetDictionary8_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary8_2.set("firstgid", "380");
                    tilesetDictionary8_2.set("imagewidth", "128");
                    tilesetDictionary8_2.set("imageheight", "160");
                    tilesetDictionary8_2.set("name", "Actors");
                    tilesetDictionary8_2.set("tilewidth", "16");
                    tilesetDictionary8_2.set("tileheight", "16");
                    mapDictionary8.get("tilesets").add(tilesetDictionary8_2);
                    var tilesetDictionary8_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary8_3.set("firstgid", "460");
                    tilesetDictionary8_3.set("imagewidth", "128");
                    tilesetDictionary8_3.set("imageheight", "32");
                    tilesetDictionary8_3.set("name", "Spikes");
                    tilesetDictionary8_3.set("tilewidth", "16");
                    tilesetDictionary8_3.set("tileheight", "16");
                    mapDictionary8.get("tilesets").add(tilesetDictionary8_3);
                    var tilesetDictionary8_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary8_4.set("firstgid", "476");
                    tilesetDictionary8_4.set("imagewidth", "192");
                    tilesetDictionary8_4.set("imageheight", "80");
                    tilesetDictionary8_4.set("name", "Igloo");
                    tilesetDictionary8_4.set("tilewidth", "16");
                    tilesetDictionary8_4.set("tileheight", "16");
                    mapDictionary8.get("tilesets").add(tilesetDictionary8_4);

                    mapDictionary8.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary8_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary8_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary8_0.set("width", "55");
                    layersDictionary8_0.set("height", "15");
                    layersDictionary8_0.set("name", "Background");
                    mapDictionary8.get("layers").add(layersDictionary8_0);
                    var layersDictionary8_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary8_1.set("data
                    layersDictionary8_1.set("width", "55");
                    layersDictionary8_1.set("height", "15");
                    layersDictionary8_1.set("name", "Foreground");
                    mapDictionary8.get("layers").add(layersDictionary8_1);
                    var layersDictionary8_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary8_2.set("data
                    layersDictionary8_2.set("width", "55");
                    layersDictionary8_2.set("height", "15");
                    layersDictionary8_2.set("name", "Solid");
                    mapDictionary8.get("layers").add(layersDictionary8_2);



                    var mapDictionary9 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level2F_Drop2", mapDictionary9);

                    mapDictionary9.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary9_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary9_0.set("firstgid", "1");
                    tilesetDictionary9_0.set("imagewidth", "464");
                    tilesetDictionary9_0.set("imageheight", "176");
                    tilesetDictionary9_0.set("name", "TsSnow");
                    tilesetDictionary9_0.set("tilewidth", "16");
                    tilesetDictionary9_0.set("tileheight", "16");
                    mapDictionary9.get("tilesets").add(tilesetDictionary9_0);
                    var tilesetDictionary9_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary9_1.set("firstgid", "320");
                    tilesetDictionary9_1.set("imagewidth", "80");
                    tilesetDictionary9_1.set("imageheight", "192");
                    tilesetDictionary9_1.set("name", "Solid");
                    tilesetDictionary9_1.set("tilewidth", "16");
                    tilesetDictionary9_1.set("tileheight", "16");
                    mapDictionary9.get("tilesets").add(tilesetDictionary9_1);
                    var tilesetDictionary9_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary9_2.set("firstgid", "380");
                    tilesetDictionary9_2.set("imagewidth", "128");
                    tilesetDictionary9_2.set("imageheight", "160");
                    tilesetDictionary9_2.set("name", "Actors");
                    tilesetDictionary9_2.set("tilewidth", "16");
                    tilesetDictionary9_2.set("tileheight", "16");
                    mapDictionary9.get("tilesets").add(tilesetDictionary9_2);
                    var tilesetDictionary9_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary9_3.set("firstgid", "460");
                    tilesetDictionary9_3.set("imagewidth", "128");
                    tilesetDictionary9_3.set("imageheight", "32");
                    tilesetDictionary9_3.set("name", "Spikes");
                    tilesetDictionary9_3.set("tilewidth", "16");
                    tilesetDictionary9_3.set("tileheight", "16");
                    mapDictionary9.get("tilesets").add(tilesetDictionary9_3);
                    var tilesetDictionary9_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary9_4.set("firstgid", "476");
                    tilesetDictionary9_4.set("imagewidth", "192");
                    tilesetDictionary9_4.set("imageheight", "80");
                    tilesetDictionary9_4.set("name", "Igloo");
                    tilesetDictionary9_4.set("tilewidth", "16");
                    tilesetDictionary9_4.set("tileheight", "16");
                    mapDictionary9.get("tilesets").add(tilesetDictionary9_4);

                    mapDictionary9.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary9_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary9_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary9_0.set("width", "55");
                    layersDictionary9_0.set("height", "15");
                    layersDictionary9_0.set("name", "Background");
                    mapDictionary9.get("layers").add(layersDictionary9_0);
                    var layersDictionary9_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary9_1.set("data
                    layersDictionary9_1.set("width", "55");
                    layersDictionary9_1.set("height", "15");
                    layersDictionary9_1.set("name", "Foreground");
                    mapDictionary9.get("layers").add(layersDictionary9_1);
                    var layersDictionary9_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary9_2.set("data
                    layersDictionary9_2.set("width", "55");
                    layersDictionary9_2.set("height", "15");
                    layersDictionary9_2.set("name", "Solid");
                    mapDictionary9.get("layers").add(layersDictionary9_2);



                    var mapDictionary10 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level2F_Drop3", mapDictionary10);

                    mapDictionary10.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary10_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary10_0.set("firstgid", "1");
                    tilesetDictionary10_0.set("imagewidth", "464");
                    tilesetDictionary10_0.set("imageheight", "176");
                    tilesetDictionary10_0.set("name", "TsSnow");
                    tilesetDictionary10_0.set("tilewidth", "16");
                    tilesetDictionary10_0.set("tileheight", "16");
                    mapDictionary10.get("tilesets").add(tilesetDictionary10_0);
                    var tilesetDictionary10_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary10_1.set("firstgid", "320");
                    tilesetDictionary10_1.set("imagewidth", "80");
                    tilesetDictionary10_1.set("imageheight", "192");
                    tilesetDictionary10_1.set("name", "Solid");
                    tilesetDictionary10_1.set("tilewidth", "16");
                    tilesetDictionary10_1.set("tileheight", "16");
                    mapDictionary10.get("tilesets").add(tilesetDictionary10_1);
                    var tilesetDictionary10_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary10_2.set("firstgid", "380");
                    tilesetDictionary10_2.set("imagewidth", "128");
                    tilesetDictionary10_2.set("imageheight", "160");
                    tilesetDictionary10_2.set("name", "Actors");
                    tilesetDictionary10_2.set("tilewidth", "16");
                    tilesetDictionary10_2.set("tileheight", "16");
                    mapDictionary10.get("tilesets").add(tilesetDictionary10_2);
                    var tilesetDictionary10_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary10_3.set("firstgid", "460");
                    tilesetDictionary10_3.set("imagewidth", "128");
                    tilesetDictionary10_3.set("imageheight", "32");
                    tilesetDictionary10_3.set("name", "Spikes");
                    tilesetDictionary10_3.set("tilewidth", "16");
                    tilesetDictionary10_3.set("tileheight", "16");
                    mapDictionary10.get("tilesets").add(tilesetDictionary10_3);
                    var tilesetDictionary10_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary10_4.set("firstgid", "476");
                    tilesetDictionary10_4.set("imagewidth", "192");
                    tilesetDictionary10_4.set("imageheight", "80");
                    tilesetDictionary10_4.set("name", "Igloo");
                    tilesetDictionary10_4.set("tilewidth", "16");
                    tilesetDictionary10_4.set("tileheight", "16");
                    mapDictionary10.get("tilesets").add(tilesetDictionary10_4);

                    mapDictionary10.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary10_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary10_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary10_0.set("width", "55");
                    layersDictionary10_0.set("height", "15");
                    layersDictionary10_0.set("name", "Background");
                    mapDictionary10.get("layers").add(layersDictionary10_0);
                    var layersDictionary10_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary10_1.set("data
                    layersDictionary10_1.set("width", "55");
                    layersDictionary10_1.set("height", "15");
                    layersDictionary10_1.set("name", "Foreground");
                    mapDictionary10.get("layers").add(layersDictionary10_1);
                    var layersDictionary10_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary10_2.set("data
                    layersDictionary10_2.set("width", "55");
                    layersDictionary10_2.set("height", "15");
                    layersDictionary10_2.set("name", "Solid");
                    mapDictionary10.get("layers").add(layersDictionary10_2);



                    var mapDictionary11 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level2F_Drop4", mapDictionary11);

                    mapDictionary11.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary11_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary11_0.set("firstgid", "1");
                    tilesetDictionary11_0.set("imagewidth", "464");
                    tilesetDictionary11_0.set("imageheight", "176");
                    tilesetDictionary11_0.set("name", "TsSnow");
                    tilesetDictionary11_0.set("tilewidth", "16");
                    tilesetDictionary11_0.set("tileheight", "16");
                    mapDictionary11.get("tilesets").add(tilesetDictionary11_0);
                    var tilesetDictionary11_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary11_1.set("firstgid", "320");
                    tilesetDictionary11_1.set("imagewidth", "80");
                    tilesetDictionary11_1.set("imageheight", "192");
                    tilesetDictionary11_1.set("name", "Solid");
                    tilesetDictionary11_1.set("tilewidth", "16");
                    tilesetDictionary11_1.set("tileheight", "16");
                    mapDictionary11.get("tilesets").add(tilesetDictionary11_1);
                    var tilesetDictionary11_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary11_2.set("firstgid", "380");
                    tilesetDictionary11_2.set("imagewidth", "128");
                    tilesetDictionary11_2.set("imageheight", "160");
                    tilesetDictionary11_2.set("name", "Actors");
                    tilesetDictionary11_2.set("tilewidth", "16");
                    tilesetDictionary11_2.set("tileheight", "16");
                    mapDictionary11.get("tilesets").add(tilesetDictionary11_2);
                    var tilesetDictionary11_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary11_3.set("firstgid", "460");
                    tilesetDictionary11_3.set("imagewidth", "128");
                    tilesetDictionary11_3.set("imageheight", "32");
                    tilesetDictionary11_3.set("name", "Spikes");
                    tilesetDictionary11_3.set("tilewidth", "16");
                    tilesetDictionary11_3.set("tileheight", "16");
                    mapDictionary11.get("tilesets").add(tilesetDictionary11_3);
                    var tilesetDictionary11_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary11_4.set("firstgid", "476");
                    tilesetDictionary11_4.set("imagewidth", "192");
                    tilesetDictionary11_4.set("imageheight", "80");
                    tilesetDictionary11_4.set("name", "Igloo");
                    tilesetDictionary11_4.set("tilewidth", "16");
                    tilesetDictionary11_4.set("tileheight", "16");
                    mapDictionary11.get("tilesets").add(tilesetDictionary11_4);

                    mapDictionary11.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary11_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary11_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary11_0.set("width", "55");
                    layersDictionary11_0.set("height", "15");
                    layersDictionary11_0.set("name", "Background");
                    mapDictionary11.get("layers").add(layersDictionary11_0);
                    var layersDictionary11_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary11_1.set("data
                    layersDictionary11_1.set("width", "55");
                    layersDictionary11_1.set("height", "15");
                    layersDictionary11_1.set("name", "Foreground");
                    mapDictionary11.get("layers").add(layersDictionary11_1);
                    var layersDictionary11_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary11_2.set("data
                    layersDictionary11_2.set("width", "55");
                    layersDictionary11_2.set("height", "15");
                    layersDictionary11_2.set("name", "Solid");
                    mapDictionary11.get("layers").add(layersDictionary11_2);



                    var mapDictionary12 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level2F_Platform", mapDictionary12);

                    mapDictionary12.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary12_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary12_0.set("firstgid", "1");
                    tilesetDictionary12_0.set("imagewidth", "464");
                    tilesetDictionary12_0.set("imageheight", "176");
                    tilesetDictionary12_0.set("name", "TsSnow");
                    tilesetDictionary12_0.set("tilewidth", "16");
                    tilesetDictionary12_0.set("tileheight", "16");
                    mapDictionary12.get("tilesets").add(tilesetDictionary12_0);
                    var tilesetDictionary12_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary12_1.set("firstgid", "320");
                    tilesetDictionary12_1.set("imagewidth", "80");
                    tilesetDictionary12_1.set("imageheight", "192");
                    tilesetDictionary12_1.set("name", "Solid");
                    tilesetDictionary12_1.set("tilewidth", "16");
                    tilesetDictionary12_1.set("tileheight", "16");
                    mapDictionary12.get("tilesets").add(tilesetDictionary12_1);
                    var tilesetDictionary12_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary12_2.set("firstgid", "380");
                    tilesetDictionary12_2.set("imagewidth", "128");
                    tilesetDictionary12_2.set("imageheight", "160");
                    tilesetDictionary12_2.set("name", "Actors");
                    tilesetDictionary12_2.set("tilewidth", "16");
                    tilesetDictionary12_2.set("tileheight", "16");
                    mapDictionary12.get("tilesets").add(tilesetDictionary12_2);
                    var tilesetDictionary12_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary12_3.set("firstgid", "460");
                    tilesetDictionary12_3.set("imagewidth", "128");
                    tilesetDictionary12_3.set("imageheight", "32");
                    tilesetDictionary12_3.set("name", "Spikes");
                    tilesetDictionary12_3.set("tilewidth", "16");
                    tilesetDictionary12_3.set("tileheight", "16");
                    mapDictionary12.get("tilesets").add(tilesetDictionary12_3);
                    var tilesetDictionary12_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary12_4.set("firstgid", "476");
                    tilesetDictionary12_4.set("imagewidth", "192");
                    tilesetDictionary12_4.set("imageheight", "80");
                    tilesetDictionary12_4.set("name", "Igloo");
                    tilesetDictionary12_4.set("tilewidth", "16");
                    tilesetDictionary12_4.set("tileheight", "16");
                    mapDictionary12.get("tilesets").add(tilesetDictionary12_4);

                    mapDictionary12.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary12_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary12_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary12_0.set("width", "55");
                    layersDictionary12_0.set("height", "15");
                    layersDictionary12_0.set("name", "Background");
                    mapDictionary12.get("layers").add(layersDictionary12_0);
                    var layersDictionary12_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary12_1.set("data", "61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,60,62,0,0,60,62,0,0,60,62,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,67,90,90,90,90,90,91,0,0,89,91,0,0,89,91,0,0,89,91,0,0,89,90,90,90,90,90,68,61,61,61,61,61,61,61,61,61,61,61,62,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,62,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,62,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,62,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,62,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,62,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,393,0,393,0,0,393,0,0,393,0,0,0,393,0,393,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,62,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,62,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,62,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,62,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,62,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,393,0,0,0,0,0,393,0,0,0,393,0,0,393,0,0,0,0,0,0,393,0,0,60,61,61,61,61,61,61,61,61,61,61,61,62,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,96,32,32,32,32,32,33,0,0,31,33,0,0,31,33,0,0,31,33,0,0,31,32,32,32,32,32,97,61,61,61,61,61,61,61,61,61,61,61,62,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,60,62,0,0,60,62,0,0,60,62,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62");
                    layersDictionary12_1.set("width", "55");
                    layersDictionary12_1.set("height", "15");
                    layersDictionary12_1.set("name", "Foreground");
                    mapDictionary12.get("layers").add(layersDictionary12_1);
                    var layersDictionary12_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary12_2.set("data
                    layersDictionary12_2.set("width", "55");
                    layersDictionary12_2.set("height", "15");
                    layersDictionary12_2.set("name", "Solid");
                    mapDictionary12.get("layers").add(layersDictionary12_2);



                    var mapDictionary13 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level2G_Finish", mapDictionary13);

                    mapDictionary13.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary13_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary13_0.set("firstgid", "1");
                    tilesetDictionary13_0.set("imagewidth", "464");
                    tilesetDictionary13_0.set("imageheight", "176");
                    tilesetDictionary13_0.set("name", "TsSnow");
                    tilesetDictionary13_0.set("tilewidth", "16");
                    tilesetDictionary13_0.set("tileheight", "16");
                    mapDictionary13.get("tilesets").add(tilesetDictionary13_0);
                    var tilesetDictionary13_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary13_1.set("firstgid", "320");
                    tilesetDictionary13_1.set("imagewidth", "80");
                    tilesetDictionary13_1.set("imageheight", "192");
                    tilesetDictionary13_1.set("name", "Solid");
                    tilesetDictionary13_1.set("tilewidth", "16");
                    tilesetDictionary13_1.set("tileheight", "16");
                    mapDictionary13.get("tilesets").add(tilesetDictionary13_1);
                    var tilesetDictionary13_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary13_2.set("firstgid", "380");
                    tilesetDictionary13_2.set("imagewidth", "128");
                    tilesetDictionary13_2.set("imageheight", "160");
                    tilesetDictionary13_2.set("name", "Actors");
                    tilesetDictionary13_2.set("tilewidth", "16");
                    tilesetDictionary13_2.set("tileheight", "16");
                    mapDictionary13.get("tilesets").add(tilesetDictionary13_2);
                    var tilesetDictionary13_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary13_3.set("firstgid", "460");
                    tilesetDictionary13_3.set("imagewidth", "128");
                    tilesetDictionary13_3.set("imageheight", "32");
                    tilesetDictionary13_3.set("name", "Spikes");
                    tilesetDictionary13_3.set("tilewidth", "16");
                    tilesetDictionary13_3.set("tileheight", "16");
                    mapDictionary13.get("tilesets").add(tilesetDictionary13_3);
                    var tilesetDictionary13_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary13_4.set("firstgid", "476");
                    tilesetDictionary13_4.set("imagewidth", "192");
                    tilesetDictionary13_4.set("imageheight", "80");
                    tilesetDictionary13_4.set("name", "Igloo");
                    tilesetDictionary13_4.set("tilewidth", "16");
                    tilesetDictionary13_4.set("tileheight", "16");
                    mapDictionary13.get("tilesets").add(tilesetDictionary13_4);

                    mapDictionary13.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary13_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary13_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,495,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,507,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,519,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary13_0.set("width", "85");
                    layersDictionary13_0.set("height", "15");
                    layersDictionary13_0.set("name", "Background");
                    mapDictionary13.get("layers").add(layersDictionary13_0);
                    var layersDictionary13_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary13_1.set("data", "61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,60,62,0,0,60,62,0,0,60,62,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,67,90,90,91,0,0,89,91,0,0,89,91,0,0,89,91,0,0,89,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,91,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,477,478,479,479,480,481,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,488,489,490,491,491,492,493,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,500,501,502,503,504,492,505,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,500,513,514,515,515,516,517,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,96,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61");
                    layersDictionary13_1.set("width", "85");
                    layersDictionary13_1.set("height", "15");
                    layersDictionary13_1.set("name", "Foreground");
                    mapDictionary13.get("layers").add(layersDictionary13_1);
                    var layersDictionary13_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary13_2.set("data
                    layersDictionary13_2.set("width", "85");
                    layersDictionary13_2.set("height", "15");
                    layersDictionary13_2.set("name", "Solid");
                    mapDictionary13.get("layers").add(layersDictionary13_2);



                    var mapDictionary14 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level3A_Start", mapDictionary14);

                    mapDictionary14.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary14_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary14_0.set("firstgid", "1");
                    tilesetDictionary14_0.set("imagewidth", "464");
                    tilesetDictionary14_0.set("imageheight", "176");
                    tilesetDictionary14_0.set("name", "TsSnow");
                    tilesetDictionary14_0.set("tilewidth", "16");
                    tilesetDictionary14_0.set("tileheight", "16");
                    mapDictionary14.get("tilesets").add(tilesetDictionary14_0);
                    var tilesetDictionary14_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary14_1.set("firstgid", "320");
                    tilesetDictionary14_1.set("imagewidth", "80");
                    tilesetDictionary14_1.set("imageheight", "192");
                    tilesetDictionary14_1.set("name", "Solid");
                    tilesetDictionary14_1.set("tilewidth", "16");
                    tilesetDictionary14_1.set("tileheight", "16");
                    mapDictionary14.get("tilesets").add(tilesetDictionary14_1);
                    var tilesetDictionary14_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary14_2.set("firstgid", "380");
                    tilesetDictionary14_2.set("imagewidth", "128");
                    tilesetDictionary14_2.set("imageheight", "160");
                    tilesetDictionary14_2.set("name", "Actors");
                    tilesetDictionary14_2.set("tilewidth", "16");
                    tilesetDictionary14_2.set("tileheight", "16");
                    mapDictionary14.get("tilesets").add(tilesetDictionary14_2);
                    var tilesetDictionary14_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary14_3.set("firstgid", "460");
                    tilesetDictionary14_3.set("imagewidth", "128");
                    tilesetDictionary14_3.set("imageheight", "32");
                    tilesetDictionary14_3.set("name", "Spikes");
                    tilesetDictionary14_3.set("tilewidth", "16");
                    tilesetDictionary14_3.set("tileheight", "16");
                    mapDictionary14.get("tilesets").add(tilesetDictionary14_3);
                    var tilesetDictionary14_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary14_4.set("firstgid", "476");
                    tilesetDictionary14_4.set("imagewidth", "192");
                    tilesetDictionary14_4.set("imageheight", "80");
                    tilesetDictionary14_4.set("name", "Igloo");
                    tilesetDictionary14_4.set("tilewidth", "16");
                    tilesetDictionary14_4.set("tileheight", "16");
                    mapDictionary14.get("tilesets").add(tilesetDictionary14_4);
                    var tilesetDictionary14_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary14_5.set("firstgid", "536");
                    tilesetDictionary14_5.set("imagewidth", "80");
                    tilesetDictionary14_5.set("imageheight", "80");
                    tilesetDictionary14_5.set("name", "Signpost");
                    tilesetDictionary14_5.set("tilewidth", "16");
                    tilesetDictionary14_5.set("tileheight", "16");
                    mapDictionary14.get("tilesets").add(tilesetDictionary14_5);

                    mapDictionary14.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary14_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary14_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536,537,538,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,541,553,543,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,546,547,548,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary14_0.set("width", "70");
                    layersDictionary14_0.set("height", "30");
                    layersDictionary14_0.set("name", "Background");
                    mapDictionary14.get("layers").add(layersDictionary14_0);
                    var layersDictionary14_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary14_1.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,393,0,0,393,0,0,393,0,0,393,0,0,0,0,0,0,0,0,0,0,393,0,0,0,0,0,0,393,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,464,0,0,464,0,0,464,0,0,464,0,0,0,0,0,0,0,0,0,0,464,0,0,0,0,0,0,464,0,0,0,0,0,0,0,0,0,0,0,0,0,0,380,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,8,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,4,0,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,67,90,90,91,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,91,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary14_1.set("width", "70");
                    layersDictionary14_1.set("height", "30");
                    layersDictionary14_1.set("name", "Foreground");
                    mapDictionary14.get("layers").add(layersDictionary14_1);
                    var layersDictionary14_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary14_2.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,363,0,0,363,0,0,363,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,0,0,363,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,0,0,320,0,0,320,0,0,320,0,0,0,0,0,0,0,0,0,0,320,0,0,0,0,0,0,320,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary14_2.set("width", "70");
                    layersDictionary14_2.set("height", "30");
                    layersDictionary14_2.set("name", "Solid");
                    mapDictionary14.get("layers").add(layersDictionary14_2);



                    var mapDictionary15 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level3B_Drop", mapDictionary15);

                    mapDictionary15.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary15_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary15_0.set("firstgid", "1");
                    tilesetDictionary15_0.set("imagewidth", "464");
                    tilesetDictionary15_0.set("imageheight", "176");
                    tilesetDictionary15_0.set("name", "TsSnow");
                    tilesetDictionary15_0.set("tilewidth", "16");
                    tilesetDictionary15_0.set("tileheight", "16");
                    mapDictionary15.get("tilesets").add(tilesetDictionary15_0);
                    var tilesetDictionary15_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary15_1.set("firstgid", "320");
                    tilesetDictionary15_1.set("imagewidth", "80");
                    tilesetDictionary15_1.set("imageheight", "192");
                    tilesetDictionary15_1.set("name", "Solid");
                    tilesetDictionary15_1.set("tilewidth", "16");
                    tilesetDictionary15_1.set("tileheight", "16");
                    mapDictionary15.get("tilesets").add(tilesetDictionary15_1);
                    var tilesetDictionary15_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary15_2.set("firstgid", "380");
                    tilesetDictionary15_2.set("imagewidth", "128");
                    tilesetDictionary15_2.set("imageheight", "160");
                    tilesetDictionary15_2.set("name", "Actors");
                    tilesetDictionary15_2.set("tilewidth", "16");
                    tilesetDictionary15_2.set("tileheight", "16");
                    mapDictionary15.get("tilesets").add(tilesetDictionary15_2);
                    var tilesetDictionary15_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary15_3.set("firstgid", "460");
                    tilesetDictionary15_3.set("imagewidth", "128");
                    tilesetDictionary15_3.set("imageheight", "32");
                    tilesetDictionary15_3.set("name", "Spikes");
                    tilesetDictionary15_3.set("tilewidth", "16");
                    tilesetDictionary15_3.set("tileheight", "16");
                    mapDictionary15.get("tilesets").add(tilesetDictionary15_3);
                    var tilesetDictionary15_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary15_4.set("firstgid", "476");
                    tilesetDictionary15_4.set("imagewidth", "192");
                    tilesetDictionary15_4.set("imageheight", "80");
                    tilesetDictionary15_4.set("name", "Igloo");
                    tilesetDictionary15_4.set("tilewidth", "16");
                    tilesetDictionary15_4.set("tileheight", "16");
                    mapDictionary15.get("tilesets").add(tilesetDictionary15_4);
                    var tilesetDictionary15_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary15_5.set("firstgid", "536");
                    tilesetDictionary15_5.set("imagewidth", "80");
                    tilesetDictionary15_5.set("imageheight", "80");
                    tilesetDictionary15_5.set("name", "Signpost");
                    tilesetDictionary15_5.set("tilewidth", "16");
                    tilesetDictionary15_5.set("tileheight", "16");
                    mapDictionary15.get("tilesets").add(tilesetDictionary15_5);

                    mapDictionary15.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary15_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary15_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536,537,538,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,541,553,543,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,546,547,548,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary15_0.set("width", "70");
                    layersDictionary15_0.set("height", "50");
                    layersDictionary15_0.set("name", "Background");
                    mapDictionary15.get("layers").add(layersDictionary15_0);
                    var layersDictionary15_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary15_1.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,3,3,3,3,66,64,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,91,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,464,464,0,0,464,464,464,464,464,464,0,0,464,464,464,0,0,0,0,0,0,0,0,0,0,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,3,3,3,3,3,3,3,3,3,3,3,3,4,0,0,0,0,0,0,0,0,0,0,59,0,0,0,0,0,0,0,0,393,0,0,0,0,0,0,393,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,59,0,0,0,393,0,0,0,0,464,0,0,0,0,0,0,464,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,393,0,0,0,0,0,59,0,0,0,464,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,464,0,0,0,0,0,59,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,59,393,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,393,0,0,0,0,0,0,0,0,0,0,0,59,464,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,393,0,0,0,0,0,464,0,0,0,0,0,0,0,0,0,0,0,59,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,464,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,59,0,0,393,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,59,0,0,464,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,59,0,0,1,0,0,0,393,0,0,0,0,393,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,393,0,0,0,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,59,0,0,0,0,0,0,464,0,0,0,0,464,0,0,0,393,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,464,0,0,0,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,35,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,464,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,393,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,464,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,393,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,393,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,464,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,464,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,393,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,393,0,0,0,0,0,393,0,0,0,0,447,0,0,0,0,393,0,0,0,0,464,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,464,0,0,0,0,0,464,0,0,0,0,464,0,0,0,0,464,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary15_1.set("width", "70");
                    layersDictionary15_1.set("height", "50");
                    layersDictionary15_1.set("name", "Foreground");
                    mapDictionary15.get("layers").add(layersDictionary15_1);
                    var layersDictionary15_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary15_2.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,363,0,0,363,363,363,363,363,363,0,0,363,363,363,0,0,0,0,0,0,0,0,0,0,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,412,412,412,412,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,0,0,0,0,0,0,0,0,363,0,0,0,0,0,0,363,0,0,0,0,0,0,0,412,412,412,452,412,412,412,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,0,0,0,363,0,0,0,0,320,0,0,0,0,0,0,320,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,0,320,0,0,0,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,0,0,0,0,0,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,363,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,0,320,0,0,0,0,0,0,0,0,0,0,0,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,0,0,363,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,0,0,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,363,320,0,0,0,0,0,0,363,0,0,0,0,363,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,0,0,0,0,0,0,320,0,0,0,0,320,0,0,0,363,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,0,363,0,0,0,0,363,0,0,0,0,363,0,0,0,0,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,0,0,0,0,0,320,0,0,0,0,320,0,0,0,0,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary15_2.set("width", "70");
                    layersDictionary15_2.set("height", "50");
                    layersDictionary15_2.set("name", "Solid");
                    mapDictionary15.get("layers").add(layersDictionary15_2);



                    var mapDictionary16 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level3C_Cutscene", mapDictionary16);

                    mapDictionary16.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary16_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary16_0.set("firstgid", "1");
                    tilesetDictionary16_0.set("imagewidth", "464");
                    tilesetDictionary16_0.set("imageheight", "176");
                    tilesetDictionary16_0.set("name", "TsSnow");
                    tilesetDictionary16_0.set("tilewidth", "16");
                    tilesetDictionary16_0.set("tileheight", "16");
                    mapDictionary16.get("tilesets").add(tilesetDictionary16_0);
                    var tilesetDictionary16_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary16_1.set("firstgid", "320");
                    tilesetDictionary16_1.set("imagewidth", "80");
                    tilesetDictionary16_1.set("imageheight", "192");
                    tilesetDictionary16_1.set("name", "Solid");
                    tilesetDictionary16_1.set("tilewidth", "16");
                    tilesetDictionary16_1.set("tileheight", "16");
                    mapDictionary16.get("tilesets").add(tilesetDictionary16_1);
                    var tilesetDictionary16_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary16_2.set("firstgid", "380");
                    tilesetDictionary16_2.set("imagewidth", "128");
                    tilesetDictionary16_2.set("imageheight", "160");
                    tilesetDictionary16_2.set("name", "Actors");
                    tilesetDictionary16_2.set("tilewidth", "16");
                    tilesetDictionary16_2.set("tileheight", "16");
                    mapDictionary16.get("tilesets").add(tilesetDictionary16_2);
                    var tilesetDictionary16_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary16_3.set("firstgid", "460");
                    tilesetDictionary16_3.set("imagewidth", "128");
                    tilesetDictionary16_3.set("imageheight", "32");
                    tilesetDictionary16_3.set("name", "Spikes");
                    tilesetDictionary16_3.set("tilewidth", "16");
                    tilesetDictionary16_3.set("tileheight", "16");
                    mapDictionary16.get("tilesets").add(tilesetDictionary16_3);
                    var tilesetDictionary16_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary16_4.set("firstgid", "476");
                    tilesetDictionary16_4.set("imagewidth", "192");
                    tilesetDictionary16_4.set("imageheight", "80");
                    tilesetDictionary16_4.set("name", "Igloo");
                    tilesetDictionary16_4.set("tilewidth", "16");
                    tilesetDictionary16_4.set("tileheight", "16");
                    mapDictionary16.get("tilesets").add(tilesetDictionary16_4);
                    var tilesetDictionary16_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary16_5.set("firstgid", "536");
                    tilesetDictionary16_5.set("imagewidth", "80");
                    tilesetDictionary16_5.set("imageheight", "80");
                    tilesetDictionary16_5.set("name", "Signpost");
                    tilesetDictionary16_5.set("tilewidth", "16");
                    tilesetDictionary16_5.set("tileheight", "16");
                    mapDictionary16.get("tilesets").add(tilesetDictionary16_5);

                    mapDictionary16.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary16_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary16_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536,537,538,0,0,0,0,536,537,538,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,541,539,543,0,0,0,0,541,539,543,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,546,547,548,0,0,0,0,546,547,548,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary16_0.set("width", "70");
                    layersDictionary16_0.set("height", "30");
                    layersDictionary16_0.set("name", "Background");
                    mapDictionary16.get("layers").add(layersDictionary16_0);
                    var layersDictionary16_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary16_1.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,464,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,464,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,464,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,464,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,464,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,464,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,464,0,0,0,0,0,0,31,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,0,0,0,0,0,0,0,0,0,0,464,0,0,0,0,0,1,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,0,0,0,0,464,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,464,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,0,0,0,0,0,0,0,0,0,0,0,0,464,0,0,0,0,0,0,0,0,0,89,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,68,67,90,90,90,90,90,68,67,90,90,90,90,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,464,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,60,62,0,0,0,0,0,464,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,60,62,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,403,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,60,62,0,0,0,0,0,0,0,31,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,97,96,32,32,32,32,32,97,96,32,32,32,32,0,0,0,89,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary16_1.set("width", "70");
                    layersDictionary16_1.set("height", "30");
                    layersDictionary16_1.set("name", "Foreground");
                    mapDictionary16.get("layers").add(layersDictionary16_1);
                    var layersDictionary16_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary16_2.set("data
                    layersDictionary16_2.set("width", "70");
                    layersDictionary16_2.set("height", "30");
                    layersDictionary16_2.set("name", "Solid");
                    mapDictionary16.get("layers").add(layersDictionary16_2);



                    var mapDictionary17 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level3D_Finish", mapDictionary17);

                    mapDictionary17.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary17_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary17_0.set("firstgid", "1");
                    tilesetDictionary17_0.set("imagewidth", "464");
                    tilesetDictionary17_0.set("imageheight", "176");
                    tilesetDictionary17_0.set("name", "TsSnow");
                    tilesetDictionary17_0.set("tilewidth", "16");
                    tilesetDictionary17_0.set("tileheight", "16");
                    mapDictionary17.get("tilesets").add(tilesetDictionary17_0);
                    var tilesetDictionary17_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary17_1.set("firstgid", "320");
                    tilesetDictionary17_1.set("imagewidth", "80");
                    tilesetDictionary17_1.set("imageheight", "192");
                    tilesetDictionary17_1.set("name", "Solid");
                    tilesetDictionary17_1.set("tilewidth", "16");
                    tilesetDictionary17_1.set("tileheight", "16");
                    mapDictionary17.get("tilesets").add(tilesetDictionary17_1);
                    var tilesetDictionary17_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary17_2.set("firstgid", "380");
                    tilesetDictionary17_2.set("imagewidth", "128");
                    tilesetDictionary17_2.set("imageheight", "160");
                    tilesetDictionary17_2.set("name", "Actors");
                    tilesetDictionary17_2.set("tilewidth", "16");
                    tilesetDictionary17_2.set("tileheight", "16");
                    mapDictionary17.get("tilesets").add(tilesetDictionary17_2);
                    var tilesetDictionary17_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary17_3.set("firstgid", "460");
                    tilesetDictionary17_3.set("imagewidth", "128");
                    tilesetDictionary17_3.set("imageheight", "32");
                    tilesetDictionary17_3.set("name", "Spikes");
                    tilesetDictionary17_3.set("tilewidth", "16");
                    tilesetDictionary17_3.set("tileheight", "16");
                    mapDictionary17.get("tilesets").add(tilesetDictionary17_3);
                    var tilesetDictionary17_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary17_4.set("firstgid", "476");
                    tilesetDictionary17_4.set("imagewidth", "192");
                    tilesetDictionary17_4.set("imageheight", "80");
                    tilesetDictionary17_4.set("name", "Igloo");
                    tilesetDictionary17_4.set("tilewidth", "16");
                    tilesetDictionary17_4.set("tileheight", "16");
                    mapDictionary17.get("tilesets").add(tilesetDictionary17_4);
                    var tilesetDictionary17_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary17_5.set("firstgid", "536");
                    tilesetDictionary17_5.set("imagewidth", "80");
                    tilesetDictionary17_5.set("imageheight", "80");
                    tilesetDictionary17_5.set("name", "Signpost");
                    tilesetDictionary17_5.set("tilewidth", "16");
                    tilesetDictionary17_5.set("tileheight", "16");
                    mapDictionary17.get("tilesets").add(tilesetDictionary17_5);

                    mapDictionary17.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary17_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary17_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536,537,538,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,541,553,543,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,546,547,548,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536,537,538,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,541,553,543,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,546,547,548,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,495,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,507,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,519,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary17_0.set("width", "45");
                    layersDictionary17_0.set("height", "50");
                    layersDictionary17_0.set("name", "Background");
                    mapDictionary17.get("layers").add(layersDictionary17_0);
                    var layersDictionary17_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary17_1.set("data", "464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,464,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,90,90,90,90,90,90,68,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,32,32,32,33,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,90,68,61,62,464,464,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,60,61,96,3,3,97,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,60,61,62,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,60,61,62,0,0,89,90,90,90,90,90,90,68,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,60,61,62,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,60,61,62,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,60,61,62,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,60,61,62,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,60,61,96,32,32,32,32,32,32,33,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,60,61,61,61,61,61,61,61,61,62,464,464,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,60,61,61,61,61,61,61,61,61,96,3,3,97,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,60,61,61,61,61,61,61,61,61,62,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,60,61,61,61,61,61,61,61,61,62,0,0,89,90,90,90,90,90,90,68,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,60,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,60,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,60,61,61,61,61,61,61,61,61,96,32,32,32,32,32,32,33,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,464,464,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,96,3,3,97,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,89,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,477,478,479,479,480,481,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,488,489,490,491,492,492,493,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,500,501,502,503,504,492,505,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,0,0,0,500,513,514,515,516,516,517,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,96,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61");
                    layersDictionary17_1.set("width", "45");
                    layersDictionary17_1.set("height", "50");
                    layersDictionary17_1.set("name", "Foreground");
                    mapDictionary17.get("layers").add(layersDictionary17_1);
                    var layersDictionary17_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary17_2.set("data
                    layersDictionary17_2.set("width", "45");
                    layersDictionary17_2.set("height", "50");
                    layersDictionary17_2.set("name", "Solid");
                    mapDictionary17.get("layers").add(layersDictionary17_2);



                    var mapDictionary18 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level4A_Start", mapDictionary18);

                    mapDictionary18.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary18_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary18_0.set("firstgid", "1");
                    tilesetDictionary18_0.set("imagewidth", "464");
                    tilesetDictionary18_0.set("imageheight", "176");
                    tilesetDictionary18_0.set("name", "TsSnow");
                    tilesetDictionary18_0.set("tilewidth", "16");
                    tilesetDictionary18_0.set("tileheight", "16");
                    mapDictionary18.get("tilesets").add(tilesetDictionary18_0);
                    var tilesetDictionary18_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary18_1.set("firstgid", "320");
                    tilesetDictionary18_1.set("imagewidth", "80");
                    tilesetDictionary18_1.set("imageheight", "192");
                    tilesetDictionary18_1.set("name", "Solid");
                    tilesetDictionary18_1.set("tilewidth", "16");
                    tilesetDictionary18_1.set("tileheight", "16");
                    mapDictionary18.get("tilesets").add(tilesetDictionary18_1);
                    var tilesetDictionary18_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary18_2.set("firstgid", "380");
                    tilesetDictionary18_2.set("imagewidth", "128");
                    tilesetDictionary18_2.set("imageheight", "160");
                    tilesetDictionary18_2.set("name", "Actors");
                    tilesetDictionary18_2.set("tilewidth", "16");
                    tilesetDictionary18_2.set("tileheight", "16");
                    mapDictionary18.get("tilesets").add(tilesetDictionary18_2);
                    var tilesetDictionary18_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary18_3.set("firstgid", "460");
                    tilesetDictionary18_3.set("imagewidth", "128");
                    tilesetDictionary18_3.set("imageheight", "32");
                    tilesetDictionary18_3.set("name", "Spikes");
                    tilesetDictionary18_3.set("tilewidth", "16");
                    tilesetDictionary18_3.set("tileheight", "16");
                    mapDictionary18.get("tilesets").add(tilesetDictionary18_3);
                    var tilesetDictionary18_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary18_4.set("firstgid", "476");
                    tilesetDictionary18_4.set("imagewidth", "192");
                    tilesetDictionary18_4.set("imageheight", "80");
                    tilesetDictionary18_4.set("name", "Igloo");
                    tilesetDictionary18_4.set("tilewidth", "16");
                    tilesetDictionary18_4.set("tileheight", "16");
                    mapDictionary18.get("tilesets").add(tilesetDictionary18_4);
                    var tilesetDictionary18_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary18_5.set("firstgid", "536");
                    tilesetDictionary18_5.set("imagewidth", "80");
                    tilesetDictionary18_5.set("imageheight", "80");
                    tilesetDictionary18_5.set("name", "Signpost");
                    tilesetDictionary18_5.set("tilewidth", "16");
                    tilesetDictionary18_5.set("tileheight", "16");
                    mapDictionary18.get("tilesets").add(tilesetDictionary18_5);

                    mapDictionary18.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary18_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary18_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary18_0.set("width", "30");
                    layersDictionary18_0.set("height", "30");
                    layersDictionary18_0.set("name", "Background");
                    mapDictionary18.get("layers").add(layersDictionary18_0);
                    var layersDictionary18_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary18_1.set("data", "62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,393,0,0,0,0,0,393,0,0,0,0,0,0,393,0,0,0,0,0,0,393,0,0,60,62,0,0,0,0,0,2,4,0,0,0,0,2,4,0,0,0,0,0,2,4,0,0,0,0,0,2,4,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,393,0,0,0,0,0,60,91,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,4,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,393,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,4,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,393,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,4,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,4,0,0,0,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,393,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,4,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,4,0,0,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,393,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,4,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,0,380,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,97,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61");
                    layersDictionary18_1.set("width", "30");
                    layersDictionary18_1.set("height", "30");
                    layersDictionary18_1.set("name", "Foreground");
                    mapDictionary18.get("layers").add(layersDictionary18_1);
                    var layersDictionary18_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary18_2.set("data", "320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,320,320,0,0,0,0,320,320,0,0,0,0,0,320,320,0,0,0,0,0,320,320,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320");
                    layersDictionary18_2.set("width", "30");
                    layersDictionary18_2.set("height", "30");
                    layersDictionary18_2.set("name", "Solid");
                    mapDictionary18.get("layers").add(layersDictionary18_2);



                    var mapDictionary19 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level4B_Segment1", mapDictionary19);

                    mapDictionary19.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary19_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary19_0.set("firstgid", "1");
                    tilesetDictionary19_0.set("imagewidth", "464");
                    tilesetDictionary19_0.set("imageheight", "176");
                    tilesetDictionary19_0.set("name", "TsSnow");
                    tilesetDictionary19_0.set("tilewidth", "16");
                    tilesetDictionary19_0.set("tileheight", "16");
                    mapDictionary19.get("tilesets").add(tilesetDictionary19_0);
                    var tilesetDictionary19_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary19_1.set("firstgid", "320");
                    tilesetDictionary19_1.set("imagewidth", "80");
                    tilesetDictionary19_1.set("imageheight", "192");
                    tilesetDictionary19_1.set("name", "Solid");
                    tilesetDictionary19_1.set("tilewidth", "16");
                    tilesetDictionary19_1.set("tileheight", "16");
                    mapDictionary19.get("tilesets").add(tilesetDictionary19_1);
                    var tilesetDictionary19_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary19_2.set("firstgid", "380");
                    tilesetDictionary19_2.set("imagewidth", "128");
                    tilesetDictionary19_2.set("imageheight", "160");
                    tilesetDictionary19_2.set("name", "Actors");
                    tilesetDictionary19_2.set("tilewidth", "16");
                    tilesetDictionary19_2.set("tileheight", "16");
                    mapDictionary19.get("tilesets").add(tilesetDictionary19_2);
                    var tilesetDictionary19_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary19_3.set("firstgid", "460");
                    tilesetDictionary19_3.set("imagewidth", "128");
                    tilesetDictionary19_3.set("imageheight", "32");
                    tilesetDictionary19_3.set("name", "Spikes");
                    tilesetDictionary19_3.set("tilewidth", "16");
                    tilesetDictionary19_3.set("tileheight", "16");
                    mapDictionary19.get("tilesets").add(tilesetDictionary19_3);
                    var tilesetDictionary19_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary19_4.set("firstgid", "476");
                    tilesetDictionary19_4.set("imagewidth", "192");
                    tilesetDictionary19_4.set("imageheight", "80");
                    tilesetDictionary19_4.set("name", "Igloo");
                    tilesetDictionary19_4.set("tilewidth", "16");
                    tilesetDictionary19_4.set("tileheight", "16");
                    mapDictionary19.get("tilesets").add(tilesetDictionary19_4);
                    var tilesetDictionary19_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary19_5.set("firstgid", "536");
                    tilesetDictionary19_5.set("imagewidth", "80");
                    tilesetDictionary19_5.set("imageheight", "80");
                    tilesetDictionary19_5.set("name", "Signpost");
                    tilesetDictionary19_5.set("tilewidth", "16");
                    tilesetDictionary19_5.set("tileheight", "16");
                    mapDictionary19.get("tilesets").add(tilesetDictionary19_5);

                    mapDictionary19.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary19_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary19_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary19_0.set("width", "30");
                    layersDictionary19_0.set("height", "30");
                    layersDictionary19_0.set("name", "Background");
                    mapDictionary19.get("layers").add(layersDictionary19_0);
                    var layersDictionary19_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary19_1.set("data", "11,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,393,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,11,3,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,393,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,393,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,393,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,464,0,0,0,0,0,0,0,0,393,0,0,0,60,62,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,393,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,60,62,0,0,0,0,465,0,0,0,0,0,0,0,0,0,0,0,0,0,0,465,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,465,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,393,0,0,0,0,0,0,464,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,464,0,0,0,0,0,0,393,0,0,0,0,0,464,0,0,0,0,60,62,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,60");
                    layersDictionary19_1.set("width", "30");
                    layersDictionary19_1.set("height", "30");
                    layersDictionary19_1.set("name", "Foreground");
                    mapDictionary19.get("layers").add(layersDictionary19_1);
                    var layersDictionary19_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary19_2.set("data", "320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,320,0,0,0,0,0,0,0,320,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,320,0,0,0,0,0,0,0,320,0,0,0,0,0,0,0,0,320,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,320,0,0,0,0,0,0,320,0,0,0,0,0,0,0,320,0,0,0,0,0,0,0,0,320,320,0,0,0,0,363,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,320,0,0,0,0,0,0,320,0,0,0,0,0,0,320,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,363,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,320,0,0,0,0,0,0,320,0,0,0,0,0,0,320,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,320,320,0,0,0,320,0,0,0,0,0,0,320,0,0,0,0,0,0,320,0,0,0,0,0,320,0,0,0,0,320");
                    layersDictionary19_2.set("width", "30");
                    layersDictionary19_2.set("height", "30");
                    layersDictionary19_2.set("name", "Solid");
                    mapDictionary19.get("layers").add(layersDictionary19_2);



                    var mapDictionary20 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level4B_Segment2", mapDictionary20);

                    mapDictionary20.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary20_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary20_0.set("firstgid", "1");
                    tilesetDictionary20_0.set("imagewidth", "464");
                    tilesetDictionary20_0.set("imageheight", "176");
                    tilesetDictionary20_0.set("name", "TsSnow");
                    tilesetDictionary20_0.set("tilewidth", "16");
                    tilesetDictionary20_0.set("tileheight", "16");
                    mapDictionary20.get("tilesets").add(tilesetDictionary20_0);
                    var tilesetDictionary20_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary20_1.set("firstgid", "320");
                    tilesetDictionary20_1.set("imagewidth", "80");
                    tilesetDictionary20_1.set("imageheight", "192");
                    tilesetDictionary20_1.set("name", "Solid");
                    tilesetDictionary20_1.set("tilewidth", "16");
                    tilesetDictionary20_1.set("tileheight", "16");
                    mapDictionary20.get("tilesets").add(tilesetDictionary20_1);
                    var tilesetDictionary20_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary20_2.set("firstgid", "380");
                    tilesetDictionary20_2.set("imagewidth", "128");
                    tilesetDictionary20_2.set("imageheight", "160");
                    tilesetDictionary20_2.set("name", "Actors");
                    tilesetDictionary20_2.set("tilewidth", "16");
                    tilesetDictionary20_2.set("tileheight", "16");
                    mapDictionary20.get("tilesets").add(tilesetDictionary20_2);
                    var tilesetDictionary20_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary20_3.set("firstgid", "460");
                    tilesetDictionary20_3.set("imagewidth", "128");
                    tilesetDictionary20_3.set("imageheight", "32");
                    tilesetDictionary20_3.set("name", "Spikes");
                    tilesetDictionary20_3.set("tilewidth", "16");
                    tilesetDictionary20_3.set("tileheight", "16");
                    mapDictionary20.get("tilesets").add(tilesetDictionary20_3);
                    var tilesetDictionary20_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary20_4.set("firstgid", "476");
                    tilesetDictionary20_4.set("imagewidth", "192");
                    tilesetDictionary20_4.set("imageheight", "80");
                    tilesetDictionary20_4.set("name", "Igloo");
                    tilesetDictionary20_4.set("tilewidth", "16");
                    tilesetDictionary20_4.set("tileheight", "16");
                    mapDictionary20.get("tilesets").add(tilesetDictionary20_4);
                    var tilesetDictionary20_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary20_5.set("firstgid", "536");
                    tilesetDictionary20_5.set("imagewidth", "80");
                    tilesetDictionary20_5.set("imageheight", "80");
                    tilesetDictionary20_5.set("name", "Signpost");
                    tilesetDictionary20_5.set("tilewidth", "16");
                    tilesetDictionary20_5.set("tileheight", "16");
                    mapDictionary20.get("tilesets").add(tilesetDictionary20_5);

                    mapDictionary20.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary20_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary20_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary20_0.set("width", "30");
                    layersDictionary20_0.set("height", "30");
                    layersDictionary20_0.set("name", "Background");
                    mapDictionary20.get("layers").add(layersDictionary20_0);
                    var layersDictionary20_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary20_1.set("data", "11,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,393,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,11,3,3,3,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,393,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,393,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,464,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,60,62,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,393,0,0,0,0,0,60,62,0,0,0,0,393,0,0,0,0,0,0,0,0,0,0,0,0,0,0,393,0,0,1,0,0,0,0,0,60,62,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,60,62,0,0,0,0,465,0,0,0,0,0,0,0,0,0,0,0,0,0,0,465,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,464,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,465,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,464,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,393,0,0,0,0,0,0,0,0,0,0,0,0,464,0,0,0,0,60,62,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,60");
                    layersDictionary20_1.set("width", "30");
                    layersDictionary20_1.set("height", "30");
                    layersDictionary20_1.set("name", "Foreground");
                    mapDictionary20.get("layers").add(layersDictionary20_1);
                    var layersDictionary20_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary20_2.set("data", "320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,320,0,0,0,0,0,0,320,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,0,0,0,0,320,320,0,0,0,0,0,0,0,320,0,0,0,0,0,0,0,320,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,0,0,0,0,0,320,320,0,0,0,0,320,0,0,0,0,0,0,320,0,0,0,0,0,0,0,320,0,0,0,0,0,0,0,0,320,320,0,0,0,0,363,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,320,0,0,0,0,0,0,320,0,0,0,0,0,0,320,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,363,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,320,0,0,0,0,0,0,320,0,0,0,0,0,0,320,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,320,320,0,0,0,320,0,0,0,0,0,0,320,0,0,0,0,0,0,320,0,0,0,0,0,320,0,0,0,0,320");
                    layersDictionary20_2.set("width", "30");
                    layersDictionary20_2.set("height", "30");
                    layersDictionary20_2.set("name", "Solid");
                    mapDictionary20.get("layers").add(layersDictionary20_2);



                    var mapDictionary21 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level4C_Cutscene", mapDictionary21);

                    mapDictionary21.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary21_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary21_0.set("firstgid", "1");
                    tilesetDictionary21_0.set("imagewidth", "464");
                    tilesetDictionary21_0.set("imageheight", "176");
                    tilesetDictionary21_0.set("name", "TsSnow");
                    tilesetDictionary21_0.set("tilewidth", "16");
                    tilesetDictionary21_0.set("tileheight", "16");
                    mapDictionary21.get("tilesets").add(tilesetDictionary21_0);
                    var tilesetDictionary21_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary21_1.set("firstgid", "320");
                    tilesetDictionary21_1.set("imagewidth", "80");
                    tilesetDictionary21_1.set("imageheight", "192");
                    tilesetDictionary21_1.set("name", "Solid");
                    tilesetDictionary21_1.set("tilewidth", "16");
                    tilesetDictionary21_1.set("tileheight", "16");
                    mapDictionary21.get("tilesets").add(tilesetDictionary21_1);
                    var tilesetDictionary21_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary21_2.set("firstgid", "380");
                    tilesetDictionary21_2.set("imagewidth", "128");
                    tilesetDictionary21_2.set("imageheight", "160");
                    tilesetDictionary21_2.set("name", "Actors");
                    tilesetDictionary21_2.set("tilewidth", "16");
                    tilesetDictionary21_2.set("tileheight", "16");
                    mapDictionary21.get("tilesets").add(tilesetDictionary21_2);
                    var tilesetDictionary21_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary21_3.set("firstgid", "460");
                    tilesetDictionary21_3.set("imagewidth", "128");
                    tilesetDictionary21_3.set("imageheight", "32");
                    tilesetDictionary21_3.set("name", "Spikes");
                    tilesetDictionary21_3.set("tilewidth", "16");
                    tilesetDictionary21_3.set("tileheight", "16");
                    mapDictionary21.get("tilesets").add(tilesetDictionary21_3);
                    var tilesetDictionary21_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary21_4.set("firstgid", "476");
                    tilesetDictionary21_4.set("imagewidth", "192");
                    tilesetDictionary21_4.set("imageheight", "80");
                    tilesetDictionary21_4.set("name", "Igloo");
                    tilesetDictionary21_4.set("tilewidth", "16");
                    tilesetDictionary21_4.set("tileheight", "16");
                    mapDictionary21.get("tilesets").add(tilesetDictionary21_4);
                    var tilesetDictionary21_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary21_5.set("firstgid", "536");
                    tilesetDictionary21_5.set("imagewidth", "80");
                    tilesetDictionary21_5.set("imageheight", "80");
                    tilesetDictionary21_5.set("name", "Signpost");
                    tilesetDictionary21_5.set("tilewidth", "16");
                    tilesetDictionary21_5.set("tileheight", "16");
                    mapDictionary21.get("tilesets").add(tilesetDictionary21_5);

                    mapDictionary21.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary21_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary21_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary21_0.set("width", "30");
                    layersDictionary21_0.set("height", "40");
                    layersDictionary21_0.set("name", "Background");
                    mapDictionary21.get("layers").add(layersDictionary21_0);
                    var layersDictionary21_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary21_1.set("data", "62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,41,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,41,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,41,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,403,0,0,0,0,0,60,62,0,0,0,31,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,97,62,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,11,4,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,2,41,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,11,4,0,0,89,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,68,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60");
                    layersDictionary21_1.set("width", "30");
                    layersDictionary21_1.set("height", "40");
                    layersDictionary21_1.set("name", "Foreground");
                    mapDictionary21.get("layers").add(layersDictionary21_1);
                    var layersDictionary21_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary21_2.set("data
                    layersDictionary21_2.set("width", "30");
                    layersDictionary21_2.set("height", "40");
                    layersDictionary21_2.set("name", "Solid");
                    mapDictionary21.get("layers").add(layersDictionary21_2);



                    var mapDictionary22 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level4D_Segment1", mapDictionary22);

                    mapDictionary22.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary22_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary22_0.set("firstgid", "1");
                    tilesetDictionary22_0.set("imagewidth", "464");
                    tilesetDictionary22_0.set("imageheight", "176");
                    tilesetDictionary22_0.set("name", "TsSnow");
                    tilesetDictionary22_0.set("tilewidth", "16");
                    tilesetDictionary22_0.set("tileheight", "16");
                    mapDictionary22.get("tilesets").add(tilesetDictionary22_0);
                    var tilesetDictionary22_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary22_1.set("firstgid", "320");
                    tilesetDictionary22_1.set("imagewidth", "80");
                    tilesetDictionary22_1.set("imageheight", "192");
                    tilesetDictionary22_1.set("name", "Solid");
                    tilesetDictionary22_1.set("tilewidth", "16");
                    tilesetDictionary22_1.set("tileheight", "16");
                    mapDictionary22.get("tilesets").add(tilesetDictionary22_1);
                    var tilesetDictionary22_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary22_2.set("firstgid", "380");
                    tilesetDictionary22_2.set("imagewidth", "128");
                    tilesetDictionary22_2.set("imageheight", "160");
                    tilesetDictionary22_2.set("name", "Actors");
                    tilesetDictionary22_2.set("tilewidth", "16");
                    tilesetDictionary22_2.set("tileheight", "16");
                    mapDictionary22.get("tilesets").add(tilesetDictionary22_2);
                    var tilesetDictionary22_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary22_3.set("firstgid", "460");
                    tilesetDictionary22_3.set("imagewidth", "128");
                    tilesetDictionary22_3.set("imageheight", "32");
                    tilesetDictionary22_3.set("name", "Spikes");
                    tilesetDictionary22_3.set("tilewidth", "16");
                    tilesetDictionary22_3.set("tileheight", "16");
                    mapDictionary22.get("tilesets").add(tilesetDictionary22_3);
                    var tilesetDictionary22_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary22_4.set("firstgid", "476");
                    tilesetDictionary22_4.set("imagewidth", "192");
                    tilesetDictionary22_4.set("imageheight", "80");
                    tilesetDictionary22_4.set("name", "Igloo");
                    tilesetDictionary22_4.set("tilewidth", "16");
                    tilesetDictionary22_4.set("tileheight", "16");
                    mapDictionary22.get("tilesets").add(tilesetDictionary22_4);
                    var tilesetDictionary22_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary22_5.set("firstgid", "536");
                    tilesetDictionary22_5.set("imagewidth", "80");
                    tilesetDictionary22_5.set("imageheight", "80");
                    tilesetDictionary22_5.set("name", "Signpost");
                    tilesetDictionary22_5.set("tilewidth", "16");
                    tilesetDictionary22_5.set("tileheight", "16");
                    mapDictionary22.get("tilesets").add(tilesetDictionary22_5);

                    mapDictionary22.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary22_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary22_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary22_0.set("width", "30");
                    layersDictionary22_0.set("height", "30");
                    layersDictionary22_0.set("name", "Background");
                    mapDictionary22.get("layers").add(layersDictionary22_0);
                    var layersDictionary22_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary22_1.set("data", "62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,11,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,1,0,0,0,0,0,0,0,0,0,0,393,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,393,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,464,464,0,0,464,464,0,464,464,0,0,464,464,464,464,464,60,62,0,0,0,0,0,0,0,0,0,0,0,0,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,41,62,0,0,0,0,1,0,0,0,0,0,0,0,465,465,465,465,465,465,465,465,465,465,465,465,465,465,465,465,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,393,0,464,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,4,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,464,464,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,3,3,4,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60");
                    layersDictionary22_1.set("width", "30");
                    layersDictionary22_1.set("height", "30");
                    layersDictionary22_1.set("name", "Foreground");
                    mapDictionary22.get("layers").add(layersDictionary22_1);
                    var layersDictionary22_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary22_2.set("data
                    layersDictionary22_2.set("width", "30");
                    layersDictionary22_2.set("height", "30");
                    layersDictionary22_2.set("name", "Solid");
                    mapDictionary22.get("layers").add(layersDictionary22_2);



                    var mapDictionary23 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level4D_Segment2", mapDictionary23);

                    mapDictionary23.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary23_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary23_0.set("firstgid", "1");
                    tilesetDictionary23_0.set("imagewidth", "464");
                    tilesetDictionary23_0.set("imageheight", "176");
                    tilesetDictionary23_0.set("name", "TsSnow");
                    tilesetDictionary23_0.set("tilewidth", "16");
                    tilesetDictionary23_0.set("tileheight", "16");
                    mapDictionary23.get("tilesets").add(tilesetDictionary23_0);
                    var tilesetDictionary23_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary23_1.set("firstgid", "320");
                    tilesetDictionary23_1.set("imagewidth", "80");
                    tilesetDictionary23_1.set("imageheight", "192");
                    tilesetDictionary23_1.set("name", "Solid");
                    tilesetDictionary23_1.set("tilewidth", "16");
                    tilesetDictionary23_1.set("tileheight", "16");
                    mapDictionary23.get("tilesets").add(tilesetDictionary23_1);
                    var tilesetDictionary23_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary23_2.set("firstgid", "380");
                    tilesetDictionary23_2.set("imagewidth", "128");
                    tilesetDictionary23_2.set("imageheight", "160");
                    tilesetDictionary23_2.set("name", "Actors");
                    tilesetDictionary23_2.set("tilewidth", "16");
                    tilesetDictionary23_2.set("tileheight", "16");
                    mapDictionary23.get("tilesets").add(tilesetDictionary23_2);
                    var tilesetDictionary23_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary23_3.set("firstgid", "460");
                    tilesetDictionary23_3.set("imagewidth", "128");
                    tilesetDictionary23_3.set("imageheight", "32");
                    tilesetDictionary23_3.set("name", "Spikes");
                    tilesetDictionary23_3.set("tilewidth", "16");
                    tilesetDictionary23_3.set("tileheight", "16");
                    mapDictionary23.get("tilesets").add(tilesetDictionary23_3);
                    var tilesetDictionary23_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary23_4.set("firstgid", "476");
                    tilesetDictionary23_4.set("imagewidth", "192");
                    tilesetDictionary23_4.set("imageheight", "80");
                    tilesetDictionary23_4.set("name", "Igloo");
                    tilesetDictionary23_4.set("tilewidth", "16");
                    tilesetDictionary23_4.set("tileheight", "16");
                    mapDictionary23.get("tilesets").add(tilesetDictionary23_4);
                    var tilesetDictionary23_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary23_5.set("firstgid", "536");
                    tilesetDictionary23_5.set("imagewidth", "80");
                    tilesetDictionary23_5.set("imageheight", "80");
                    tilesetDictionary23_5.set("name", "Signpost");
                    tilesetDictionary23_5.set("tilewidth", "16");
                    tilesetDictionary23_5.set("tileheight", "16");
                    mapDictionary23.get("tilesets").add(tilesetDictionary23_5);

                    mapDictionary23.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary23_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary23_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary23_0.set("width", "30");
                    layersDictionary23_0.set("height", "30");
                    layersDictionary23_0.set("name", "Background");
                    mapDictionary23.get("layers").add(layersDictionary23_0);
                    var layersDictionary23_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary23_1.set("data", "62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,11,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,1,0,0,0,464,0,0,0,0,0,0,0,0,464,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,393,0,393,0,393,0,393,464,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,464,0,0,464,0,0,31,32,32,32,32,32,32,33,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,89,90,90,90,90,90,90,91,0,0,0,0,0,60,62,0,0,0,0,1,0,0,0,0,0,2,4,0,0,0,0,465,0,465,465,465,465,465,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,11,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,464,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,11,3,4,0,0,0,0,0,0,0,393,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,3,3,4,0,0,0,60,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60");
                    layersDictionary23_1.set("width", "30");
                    layersDictionary23_1.set("height", "30");
                    layersDictionary23_1.set("name", "Foreground");
                    mapDictionary23.get("layers").add(layersDictionary23_1);
                    var layersDictionary23_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary23_2.set("data", "320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,320,0,0,0,363,0,0,0,0,0,0,0,0,363,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,320,0,0,0,0,320,0,0,0,320,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,363,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,363,0,0,363,0,0,320,320,320,320,320,320,320,320,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,320,0,0,320,0,0,320,320,320,320,320,320,320,320,0,0,0,0,0,320,320,0,0,0,0,320,0,0,0,0,0,320,320,0,0,0,0,363,0,363,363,363,363,363,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,363,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320,320,320,320,320,0,0,0,320,320,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,320");
                    layersDictionary23_2.set("width", "30");
                    layersDictionary23_2.set("height", "30");
                    layersDictionary23_2.set("name", "Solid");
                    mapDictionary23.get("layers").add(layersDictionary23_2);



                    var mapDictionary24 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level4E_Finish", mapDictionary24);

                    mapDictionary24.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary24_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary24_0.set("firstgid", "1");
                    tilesetDictionary24_0.set("imagewidth", "464");
                    tilesetDictionary24_0.set("imageheight", "176");
                    tilesetDictionary24_0.set("name", "TsSnow");
                    tilesetDictionary24_0.set("tilewidth", "16");
                    tilesetDictionary24_0.set("tileheight", "16");
                    mapDictionary24.get("tilesets").add(tilesetDictionary24_0);
                    var tilesetDictionary24_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary24_1.set("firstgid", "320");
                    tilesetDictionary24_1.set("imagewidth", "80");
                    tilesetDictionary24_1.set("imageheight", "192");
                    tilesetDictionary24_1.set("name", "Solid");
                    tilesetDictionary24_1.set("tilewidth", "16");
                    tilesetDictionary24_1.set("tileheight", "16");
                    mapDictionary24.get("tilesets").add(tilesetDictionary24_1);
                    var tilesetDictionary24_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary24_2.set("firstgid", "380");
                    tilesetDictionary24_2.set("imagewidth", "128");
                    tilesetDictionary24_2.set("imageheight", "160");
                    tilesetDictionary24_2.set("name", "Actors");
                    tilesetDictionary24_2.set("tilewidth", "16");
                    tilesetDictionary24_2.set("tileheight", "16");
                    mapDictionary24.get("tilesets").add(tilesetDictionary24_2);
                    var tilesetDictionary24_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary24_3.set("firstgid", "460");
                    tilesetDictionary24_3.set("imagewidth", "128");
                    tilesetDictionary24_3.set("imageheight", "32");
                    tilesetDictionary24_3.set("name", "Spikes");
                    tilesetDictionary24_3.set("tilewidth", "16");
                    tilesetDictionary24_3.set("tileheight", "16");
                    mapDictionary24.get("tilesets").add(tilesetDictionary24_3);
                    var tilesetDictionary24_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary24_4.set("firstgid", "476");
                    tilesetDictionary24_4.set("imagewidth", "192");
                    tilesetDictionary24_4.set("imageheight", "80");
                    tilesetDictionary24_4.set("name", "Igloo");
                    tilesetDictionary24_4.set("tilewidth", "16");
                    tilesetDictionary24_4.set("tileheight", "16");
                    mapDictionary24.get("tilesets").add(tilesetDictionary24_4);
                    var tilesetDictionary24_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary24_5.set("firstgid", "536");
                    tilesetDictionary24_5.set("imagewidth", "80");
                    tilesetDictionary24_5.set("imageheight", "80");
                    tilesetDictionary24_5.set("name", "Signpost");
                    tilesetDictionary24_5.set("tilewidth", "16");
                    tilesetDictionary24_5.set("tileheight", "16");
                    mapDictionary24.get("tilesets").add(tilesetDictionary24_5);

                    mapDictionary24.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary24_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary24_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,495,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,507,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,519,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary24_0.set("width", "30");
                    layersDictionary24_0.set("height", "35");
                    layersDictionary24_0.set("name", "Background");
                    mapDictionary24.get("layers").add(layersDictionary24_0);
                    var layersDictionary24_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary24_1.set("data", "62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,477,478,479,479,480,481,0,0,0,0,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,488,489,490,491,492,492,493,0,0,0,0,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,500,501,502,503,504,516,505,0,0,0,0,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,500,513,514,515,516,516,517,0,0,0,0,62,0,0,0,0,0,0,0,0,0,31,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,62,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,31,32,97,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,31,32,32,97,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,0,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,62,0,0,0,2,92,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,68");
                    layersDictionary24_1.set("width", "30");
                    layersDictionary24_1.set("height", "35");
                    layersDictionary24_1.set("name", "Foreground");
                    mapDictionary24.get("layers").add(layersDictionary24_1);
                    var layersDictionary24_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary24_2.set("data
                    layersDictionary24_2.set("width", "30");
                    layersDictionary24_2.set("height", "35");
                    layersDictionary24_2.set("name", "Solid");
                    mapDictionary24.get("layers").add(layersDictionary24_2);



                    var mapDictionary25 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level5A_Start", mapDictionary25);

                    mapDictionary25.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary25_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary25_0.set("firstgid", "1");
                    tilesetDictionary25_0.set("imagewidth", "464");
                    tilesetDictionary25_0.set("imageheight", "176");
                    tilesetDictionary25_0.set("name", "TsSnow");
                    tilesetDictionary25_0.set("tilewidth", "16");
                    tilesetDictionary25_0.set("tileheight", "16");
                    mapDictionary25.get("tilesets").add(tilesetDictionary25_0);
                    var tilesetDictionary25_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary25_1.set("firstgid", "320");
                    tilesetDictionary25_1.set("imagewidth", "80");
                    tilesetDictionary25_1.set("imageheight", "192");
                    tilesetDictionary25_1.set("name", "Solid");
                    tilesetDictionary25_1.set("tilewidth", "16");
                    tilesetDictionary25_1.set("tileheight", "16");
                    mapDictionary25.get("tilesets").add(tilesetDictionary25_1);
                    var tilesetDictionary25_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary25_2.set("firstgid", "380");
                    tilesetDictionary25_2.set("imagewidth", "128");
                    tilesetDictionary25_2.set("imageheight", "160");
                    tilesetDictionary25_2.set("name", "Actors");
                    tilesetDictionary25_2.set("tilewidth", "16");
                    tilesetDictionary25_2.set("tileheight", "16");
                    mapDictionary25.get("tilesets").add(tilesetDictionary25_2);
                    var tilesetDictionary25_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary25_3.set("firstgid", "460");
                    tilesetDictionary25_3.set("imagewidth", "128");
                    tilesetDictionary25_3.set("imageheight", "32");
                    tilesetDictionary25_3.set("name", "Spikes");
                    tilesetDictionary25_3.set("tilewidth", "16");
                    tilesetDictionary25_3.set("tileheight", "16");
                    mapDictionary25.get("tilesets").add(tilesetDictionary25_3);
                    var tilesetDictionary25_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary25_4.set("firstgid", "476");
                    tilesetDictionary25_4.set("imagewidth", "192");
                    tilesetDictionary25_4.set("imageheight", "80");
                    tilesetDictionary25_4.set("name", "Igloo");
                    tilesetDictionary25_4.set("tilewidth", "16");
                    tilesetDictionary25_4.set("tileheight", "16");
                    mapDictionary25.get("tilesets").add(tilesetDictionary25_4);
                    var tilesetDictionary25_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary25_5.set("firstgid", "536");
                    tilesetDictionary25_5.set("imagewidth", "80");
                    tilesetDictionary25_5.set("imageheight", "80");
                    tilesetDictionary25_5.set("name", "Signpost");
                    tilesetDictionary25_5.set("tilewidth", "16");
                    tilesetDictionary25_5.set("tileheight", "16");
                    mapDictionary25.get("tilesets").add(tilesetDictionary25_5);

                    mapDictionary25.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary25_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary25_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,536,537,538,0,0,0,0,536,537,538,536,537,538,536,537,538,536,537,538,536,537,538,0,0,0,0,0,0,0,0,541,549,543,0,0,0,0,541,539,543,541,539,543,541,539,543,541,539,543,541,539,543,0,0,0,0,0,0,0,0,546,547,548,0,0,0,0,546,547,548,546,547,548,546,547,548,546,547,548,546,547,548,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary25_0.set("width", "30");
                    layersDictionary25_0.set("height", "14");
                    layersDictionary25_0.set("name", "Background");
                    mapDictionary25.get("layers").add(layersDictionary25_0);
                    var layersDictionary25_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary25_1.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,380,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,64,3,3,3,3,3,3,3,3,3,4,0,0,61,61,61,61,61,61,67,90,90,90,90,90,90,90,90,90,90,91,0,0,0,0,0,0,0,0,0,0,0,0,61,67,90,90,90,90,91,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary25_1.set("width", "30");
                    layersDictionary25_1.set("height", "14");
                    layersDictionary25_1.set("name", "Foreground");
                    mapDictionary25.get("layers").add(layersDictionary25_1);
                    var layersDictionary25_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary25_2.set("data
                    layersDictionary25_2.set("width", "30");
                    layersDictionary25_2.set("height", "14");
                    layersDictionary25_2.set("name", "Solid");
                    mapDictionary25.get("layers").add(layersDictionary25_2);



                    var mapDictionary26 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level5B_Fragment1", mapDictionary26);

                    mapDictionary26.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary26_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary26_0.set("firstgid", "1");
                    tilesetDictionary26_0.set("imagewidth", "464");
                    tilesetDictionary26_0.set("imageheight", "176");
                    tilesetDictionary26_0.set("name", "TsSnow");
                    tilesetDictionary26_0.set("tilewidth", "16");
                    tilesetDictionary26_0.set("tileheight", "16");
                    mapDictionary26.get("tilesets").add(tilesetDictionary26_0);
                    var tilesetDictionary26_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary26_1.set("firstgid", "320");
                    tilesetDictionary26_1.set("imagewidth", "80");
                    tilesetDictionary26_1.set("imageheight", "192");
                    tilesetDictionary26_1.set("name", "Solid");
                    tilesetDictionary26_1.set("tilewidth", "16");
                    tilesetDictionary26_1.set("tileheight", "16");
                    mapDictionary26.get("tilesets").add(tilesetDictionary26_1);
                    var tilesetDictionary26_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary26_2.set("firstgid", "380");
                    tilesetDictionary26_2.set("imagewidth", "128");
                    tilesetDictionary26_2.set("imageheight", "160");
                    tilesetDictionary26_2.set("name", "Actors");
                    tilesetDictionary26_2.set("tilewidth", "16");
                    tilesetDictionary26_2.set("tileheight", "16");
                    mapDictionary26.get("tilesets").add(tilesetDictionary26_2);
                    var tilesetDictionary26_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary26_3.set("firstgid", "460");
                    tilesetDictionary26_3.set("imagewidth", "128");
                    tilesetDictionary26_3.set("imageheight", "32");
                    tilesetDictionary26_3.set("name", "Spikes");
                    tilesetDictionary26_3.set("tilewidth", "16");
                    tilesetDictionary26_3.set("tileheight", "16");
                    mapDictionary26.get("tilesets").add(tilesetDictionary26_3);
                    var tilesetDictionary26_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary26_4.set("firstgid", "476");
                    tilesetDictionary26_4.set("imagewidth", "192");
                    tilesetDictionary26_4.set("imageheight", "80");
                    tilesetDictionary26_4.set("name", "Igloo");
                    tilesetDictionary26_4.set("tilewidth", "16");
                    tilesetDictionary26_4.set("tileheight", "16");
                    mapDictionary26.get("tilesets").add(tilesetDictionary26_4);
                    var tilesetDictionary26_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary26_5.set("firstgid", "536");
                    tilesetDictionary26_5.set("imagewidth", "80");
                    tilesetDictionary26_5.set("imageheight", "80");
                    tilesetDictionary26_5.set("name", "Signpost");
                    tilesetDictionary26_5.set("tilewidth", "16");
                    tilesetDictionary26_5.set("tileheight", "16");
                    mapDictionary26.get("tilesets").add(tilesetDictionary26_5);

                    mapDictionary26.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary26_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary26_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary26_0.set("width", "5");
                    layersDictionary26_0.set("height", "3");
                    layersDictionary26_0.set("name", "Background");
                    mapDictionary26.get("layers").add(layersDictionary26_0);
                    var layersDictionary26_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary26_1.set("data", "0,0,464,0,0,2,3,3,3,4,465,465,465,465,465");
                    layersDictionary26_1.set("width", "5");
                    layersDictionary26_1.set("height", "3");
                    layersDictionary26_1.set("name", "Foreground");
                    mapDictionary26.get("layers").add(layersDictionary26_1);
                    var layersDictionary26_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary26_2.set("data", "0,0,363,0,0,320,320,320,320,320,363,363,363,363,363");
                    layersDictionary26_2.set("width", "5");
                    layersDictionary26_2.set("height", "3");
                    layersDictionary26_2.set("name", "Solid");
                    mapDictionary26.get("layers").add(layersDictionary26_2);



                    var mapDictionary27 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level5B_Fragment10", mapDictionary27);

                    mapDictionary27.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary27_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary27_0.set("firstgid", "1");
                    tilesetDictionary27_0.set("imagewidth", "464");
                    tilesetDictionary27_0.set("imageheight", "176");
                    tilesetDictionary27_0.set("name", "TsSnow");
                    tilesetDictionary27_0.set("tilewidth", "16");
                    tilesetDictionary27_0.set("tileheight", "16");
                    mapDictionary27.get("tilesets").add(tilesetDictionary27_0);
                    var tilesetDictionary27_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary27_1.set("firstgid", "320");
                    tilesetDictionary27_1.set("imagewidth", "80");
                    tilesetDictionary27_1.set("imageheight", "192");
                    tilesetDictionary27_1.set("name", "Solid");
                    tilesetDictionary27_1.set("tilewidth", "16");
                    tilesetDictionary27_1.set("tileheight", "16");
                    mapDictionary27.get("tilesets").add(tilesetDictionary27_1);
                    var tilesetDictionary27_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary27_2.set("firstgid", "380");
                    tilesetDictionary27_2.set("imagewidth", "128");
                    tilesetDictionary27_2.set("imageheight", "160");
                    tilesetDictionary27_2.set("name", "Actors");
                    tilesetDictionary27_2.set("tilewidth", "16");
                    tilesetDictionary27_2.set("tileheight", "16");
                    mapDictionary27.get("tilesets").add(tilesetDictionary27_2);
                    var tilesetDictionary27_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary27_3.set("firstgid", "460");
                    tilesetDictionary27_3.set("imagewidth", "128");
                    tilesetDictionary27_3.set("imageheight", "32");
                    tilesetDictionary27_3.set("name", "Spikes");
                    tilesetDictionary27_3.set("tilewidth", "16");
                    tilesetDictionary27_3.set("tileheight", "16");
                    mapDictionary27.get("tilesets").add(tilesetDictionary27_3);
                    var tilesetDictionary27_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary27_4.set("firstgid", "476");
                    tilesetDictionary27_4.set("imagewidth", "192");
                    tilesetDictionary27_4.set("imageheight", "80");
                    tilesetDictionary27_4.set("name", "Igloo");
                    tilesetDictionary27_4.set("tilewidth", "16");
                    tilesetDictionary27_4.set("tileheight", "16");
                    mapDictionary27.get("tilesets").add(tilesetDictionary27_4);
                    var tilesetDictionary27_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary27_5.set("firstgid", "536");
                    tilesetDictionary27_5.set("imagewidth", "80");
                    tilesetDictionary27_5.set("imageheight", "80");
                    tilesetDictionary27_5.set("name", "Signpost");
                    tilesetDictionary27_5.set("tilewidth", "16");
                    tilesetDictionary27_5.set("tileheight", "16");
                    mapDictionary27.get("tilesets").add(tilesetDictionary27_5);

                    mapDictionary27.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary27_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary27_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary27_0.set("width", "4");
                    layersDictionary27_0.set("height", "3");
                    layersDictionary27_0.set("name", "Background");
                    mapDictionary27.get("layers").add(layersDictionary27_0);
                    var layersDictionary27_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary27_1.set("data", "0,0,0,0,31,32,32,33,89,90,90,91");
                    layersDictionary27_1.set("width", "4");
                    layersDictionary27_1.set("height", "3");
                    layersDictionary27_1.set("name", "Foreground");
                    mapDictionary27.get("layers").add(layersDictionary27_1);
                    var layersDictionary27_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary27_2.set("data", "0,0,0,0,320,320,320,320,320,320,320,320");
                    layersDictionary27_2.set("width", "4");
                    layersDictionary27_2.set("height", "3");
                    layersDictionary27_2.set("name", "Solid");
                    mapDictionary27.get("layers").add(layersDictionary27_2);



                    var mapDictionary28 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level5B_Fragment11", mapDictionary28);

                    mapDictionary28.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary28_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary28_0.set("firstgid", "1");
                    tilesetDictionary28_0.set("imagewidth", "464");
                    tilesetDictionary28_0.set("imageheight", "176");
                    tilesetDictionary28_0.set("name", "TsSnow");
                    tilesetDictionary28_0.set("tilewidth", "16");
                    tilesetDictionary28_0.set("tileheight", "16");
                    mapDictionary28.get("tilesets").add(tilesetDictionary28_0);
                    var tilesetDictionary28_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary28_1.set("firstgid", "320");
                    tilesetDictionary28_1.set("imagewidth", "80");
                    tilesetDictionary28_1.set("imageheight", "192");
                    tilesetDictionary28_1.set("name", "Solid");
                    tilesetDictionary28_1.set("tilewidth", "16");
                    tilesetDictionary28_1.set("tileheight", "16");
                    mapDictionary28.get("tilesets").add(tilesetDictionary28_1);
                    var tilesetDictionary28_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary28_2.set("firstgid", "380");
                    tilesetDictionary28_2.set("imagewidth", "128");
                    tilesetDictionary28_2.set("imageheight", "160");
                    tilesetDictionary28_2.set("name", "Actors");
                    tilesetDictionary28_2.set("tilewidth", "16");
                    tilesetDictionary28_2.set("tileheight", "16");
                    mapDictionary28.get("tilesets").add(tilesetDictionary28_2);
                    var tilesetDictionary28_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary28_3.set("firstgid", "460");
                    tilesetDictionary28_3.set("imagewidth", "128");
                    tilesetDictionary28_3.set("imageheight", "32");
                    tilesetDictionary28_3.set("name", "Spikes");
                    tilesetDictionary28_3.set("tilewidth", "16");
                    tilesetDictionary28_3.set("tileheight", "16");
                    mapDictionary28.get("tilesets").add(tilesetDictionary28_3);
                    var tilesetDictionary28_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary28_4.set("firstgid", "476");
                    tilesetDictionary28_4.set("imagewidth", "192");
                    tilesetDictionary28_4.set("imageheight", "80");
                    tilesetDictionary28_4.set("name", "Igloo");
                    tilesetDictionary28_4.set("tilewidth", "16");
                    tilesetDictionary28_4.set("tileheight", "16");
                    mapDictionary28.get("tilesets").add(tilesetDictionary28_4);
                    var tilesetDictionary28_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary28_5.set("firstgid", "536");
                    tilesetDictionary28_5.set("imagewidth", "80");
                    tilesetDictionary28_5.set("imageheight", "80");
                    tilesetDictionary28_5.set("name", "Signpost");
                    tilesetDictionary28_5.set("tilewidth", "16");
                    tilesetDictionary28_5.set("tileheight", "16");
                    mapDictionary28.get("tilesets").add(tilesetDictionary28_5);

                    mapDictionary28.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary28_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary28_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary28_0.set("width", "4");
                    layersDictionary28_0.set("height", "3");
                    layersDictionary28_0.set("name", "Background");
                    mapDictionary28.get("layers").add(layersDictionary28_0);
                    var layersDictionary28_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary28_1.set("data", "0,0,0,0,1,0,447,1,465,2,4,0");
                    layersDictionary28_1.set("width", "4");
                    layersDictionary28_1.set("height", "3");
                    layersDictionary28_1.set("name", "Foreground");
                    mapDictionary28.get("layers").add(layersDictionary28_1);
                    var layersDictionary28_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary28_2.set("data", "0,0,0,0,320,0,0,320,363,320,320,0");
                    layersDictionary28_2.set("width", "4");
                    layersDictionary28_2.set("height", "3");
                    layersDictionary28_2.set("name", "Solid");
                    mapDictionary28.get("layers").add(layersDictionary28_2);



                    var mapDictionary29 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level5B_Fragment12", mapDictionary29);

                    mapDictionary29.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary29_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary29_0.set("firstgid", "1");
                    tilesetDictionary29_0.set("imagewidth", "464");
                    tilesetDictionary29_0.set("imageheight", "176");
                    tilesetDictionary29_0.set("name", "TsSnow");
                    tilesetDictionary29_0.set("tilewidth", "16");
                    tilesetDictionary29_0.set("tileheight", "16");
                    mapDictionary29.get("tilesets").add(tilesetDictionary29_0);
                    var tilesetDictionary29_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary29_1.set("firstgid", "320");
                    tilesetDictionary29_1.set("imagewidth", "80");
                    tilesetDictionary29_1.set("imageheight", "192");
                    tilesetDictionary29_1.set("name", "Solid");
                    tilesetDictionary29_1.set("tilewidth", "16");
                    tilesetDictionary29_1.set("tileheight", "16");
                    mapDictionary29.get("tilesets").add(tilesetDictionary29_1);
                    var tilesetDictionary29_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary29_2.set("firstgid", "380");
                    tilesetDictionary29_2.set("imagewidth", "128");
                    tilesetDictionary29_2.set("imageheight", "160");
                    tilesetDictionary29_2.set("name", "Actors");
                    tilesetDictionary29_2.set("tilewidth", "16");
                    tilesetDictionary29_2.set("tileheight", "16");
                    mapDictionary29.get("tilesets").add(tilesetDictionary29_2);
                    var tilesetDictionary29_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary29_3.set("firstgid", "460");
                    tilesetDictionary29_3.set("imagewidth", "128");
                    tilesetDictionary29_3.set("imageheight", "32");
                    tilesetDictionary29_3.set("name", "Spikes");
                    tilesetDictionary29_3.set("tilewidth", "16");
                    tilesetDictionary29_3.set("tileheight", "16");
                    mapDictionary29.get("tilesets").add(tilesetDictionary29_3);
                    var tilesetDictionary29_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary29_4.set("firstgid", "476");
                    tilesetDictionary29_4.set("imagewidth", "192");
                    tilesetDictionary29_4.set("imageheight", "80");
                    tilesetDictionary29_4.set("name", "Igloo");
                    tilesetDictionary29_4.set("tilewidth", "16");
                    tilesetDictionary29_4.set("tileheight", "16");
                    mapDictionary29.get("tilesets").add(tilesetDictionary29_4);
                    var tilesetDictionary29_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary29_5.set("firstgid", "536");
                    tilesetDictionary29_5.set("imagewidth", "80");
                    tilesetDictionary29_5.set("imageheight", "80");
                    tilesetDictionary29_5.set("name", "Signpost");
                    tilesetDictionary29_5.set("tilewidth", "16");
                    tilesetDictionary29_5.set("tileheight", "16");
                    mapDictionary29.get("tilesets").add(tilesetDictionary29_5);

                    mapDictionary29.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary29_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary29_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary29_0.set("width", "4");
                    layersDictionary29_0.set("height", "3");
                    layersDictionary29_0.set("name", "Background");
                    mapDictionary29.get("layers").add(layersDictionary29_0);
                    var layersDictionary29_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary29_1.set("data", "0,31,33,393,2,92,94,4,0,465,0,465");
                    layersDictionary29_1.set("width", "4");
                    layersDictionary29_1.set("height", "3");
                    layersDictionary29_1.set("name", "Foreground");
                    mapDictionary29.get("layers").add(layersDictionary29_1);
                    var layersDictionary29_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary29_2.set("data", "0,320,320,0,320,320,320,320,0,363,0,363");
                    layersDictionary29_2.set("width", "4");
                    layersDictionary29_2.set("height", "3");
                    layersDictionary29_2.set("name", "Solid");
                    mapDictionary29.get("layers").add(layersDictionary29_2);



                    var mapDictionary30 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level5B_Fragment2", mapDictionary30);

                    mapDictionary30.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary30_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary30_0.set("firstgid", "1");
                    tilesetDictionary30_0.set("imagewidth", "464");
                    tilesetDictionary30_0.set("imageheight", "176");
                    tilesetDictionary30_0.set("name", "TsSnow");
                    tilesetDictionary30_0.set("tilewidth", "16");
                    tilesetDictionary30_0.set("tileheight", "16");
                    mapDictionary30.get("tilesets").add(tilesetDictionary30_0);
                    var tilesetDictionary30_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary30_1.set("firstgid", "320");
                    tilesetDictionary30_1.set("imagewidth", "80");
                    tilesetDictionary30_1.set("imageheight", "192");
                    tilesetDictionary30_1.set("name", "Solid");
                    tilesetDictionary30_1.set("tilewidth", "16");
                    tilesetDictionary30_1.set("tileheight", "16");
                    mapDictionary30.get("tilesets").add(tilesetDictionary30_1);
                    var tilesetDictionary30_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary30_2.set("firstgid", "380");
                    tilesetDictionary30_2.set("imagewidth", "128");
                    tilesetDictionary30_2.set("imageheight", "160");
                    tilesetDictionary30_2.set("name", "Actors");
                    tilesetDictionary30_2.set("tilewidth", "16");
                    tilesetDictionary30_2.set("tileheight", "16");
                    mapDictionary30.get("tilesets").add(tilesetDictionary30_2);
                    var tilesetDictionary30_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary30_3.set("firstgid", "460");
                    tilesetDictionary30_3.set("imagewidth", "128");
                    tilesetDictionary30_3.set("imageheight", "32");
                    tilesetDictionary30_3.set("name", "Spikes");
                    tilesetDictionary30_3.set("tilewidth", "16");
                    tilesetDictionary30_3.set("tileheight", "16");
                    mapDictionary30.get("tilesets").add(tilesetDictionary30_3);
                    var tilesetDictionary30_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary30_4.set("firstgid", "476");
                    tilesetDictionary30_4.set("imagewidth", "192");
                    tilesetDictionary30_4.set("imageheight", "80");
                    tilesetDictionary30_4.set("name", "Igloo");
                    tilesetDictionary30_4.set("tilewidth", "16");
                    tilesetDictionary30_4.set("tileheight", "16");
                    mapDictionary30.get("tilesets").add(tilesetDictionary30_4);
                    var tilesetDictionary30_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary30_5.set("firstgid", "536");
                    tilesetDictionary30_5.set("imagewidth", "80");
                    tilesetDictionary30_5.set("imageheight", "80");
                    tilesetDictionary30_5.set("name", "Signpost");
                    tilesetDictionary30_5.set("tilewidth", "16");
                    tilesetDictionary30_5.set("tileheight", "16");
                    mapDictionary30.get("tilesets").add(tilesetDictionary30_5);

                    mapDictionary30.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary30_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary30_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary30_0.set("width", "5");
                    layersDictionary30_0.set("height", "3");
                    layersDictionary30_0.set("name", "Background");
                    mapDictionary30.get("layers").add(layersDictionary30_0);
                    var layersDictionary30_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary30_1.set("data", "0,393,0,0,393,2,3,3,3,4,0,465,465,0,0");
                    layersDictionary30_1.set("width", "5");
                    layersDictionary30_1.set("height", "3");
                    layersDictionary30_1.set("name", "Foreground");
                    mapDictionary30.get("layers").add(layersDictionary30_1);
                    var layersDictionary30_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary30_2.set("data", "0,0,0,0,0,320,320,320,320,320,0,363,363,0,0");
                    layersDictionary30_2.set("width", "5");
                    layersDictionary30_2.set("height", "3");
                    layersDictionary30_2.set("name", "Solid");
                    mapDictionary30.get("layers").add(layersDictionary30_2);



                    var mapDictionary31 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level5B_Fragment3", mapDictionary31);

                    mapDictionary31.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary31_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary31_0.set("firstgid", "1");
                    tilesetDictionary31_0.set("imagewidth", "464");
                    tilesetDictionary31_0.set("imageheight", "176");
                    tilesetDictionary31_0.set("name", "TsSnow");
                    tilesetDictionary31_0.set("tilewidth", "16");
                    tilesetDictionary31_0.set("tileheight", "16");
                    mapDictionary31.get("tilesets").add(tilesetDictionary31_0);
                    var tilesetDictionary31_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary31_1.set("firstgid", "320");
                    tilesetDictionary31_1.set("imagewidth", "80");
                    tilesetDictionary31_1.set("imageheight", "192");
                    tilesetDictionary31_1.set("name", "Solid");
                    tilesetDictionary31_1.set("tilewidth", "16");
                    tilesetDictionary31_1.set("tileheight", "16");
                    mapDictionary31.get("tilesets").add(tilesetDictionary31_1);
                    var tilesetDictionary31_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary31_2.set("firstgid", "380");
                    tilesetDictionary31_2.set("imagewidth", "128");
                    tilesetDictionary31_2.set("imageheight", "160");
                    tilesetDictionary31_2.set("name", "Actors");
                    tilesetDictionary31_2.set("tilewidth", "16");
                    tilesetDictionary31_2.set("tileheight", "16");
                    mapDictionary31.get("tilesets").add(tilesetDictionary31_2);
                    var tilesetDictionary31_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary31_3.set("firstgid", "460");
                    tilesetDictionary31_3.set("imagewidth", "128");
                    tilesetDictionary31_3.set("imageheight", "32");
                    tilesetDictionary31_3.set("name", "Spikes");
                    tilesetDictionary31_3.set("tilewidth", "16");
                    tilesetDictionary31_3.set("tileheight", "16");
                    mapDictionary31.get("tilesets").add(tilesetDictionary31_3);
                    var tilesetDictionary31_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary31_4.set("firstgid", "476");
                    tilesetDictionary31_4.set("imagewidth", "192");
                    tilesetDictionary31_4.set("imageheight", "80");
                    tilesetDictionary31_4.set("name", "Igloo");
                    tilesetDictionary31_4.set("tilewidth", "16");
                    tilesetDictionary31_4.set("tileheight", "16");
                    mapDictionary31.get("tilesets").add(tilesetDictionary31_4);
                    var tilesetDictionary31_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary31_5.set("firstgid", "536");
                    tilesetDictionary31_5.set("imagewidth", "80");
                    tilesetDictionary31_5.set("imageheight", "80");
                    tilesetDictionary31_5.set("name", "Signpost");
                    tilesetDictionary31_5.set("tilewidth", "16");
                    tilesetDictionary31_5.set("tileheight", "16");
                    mapDictionary31.get("tilesets").add(tilesetDictionary31_5);

                    mapDictionary31.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary31_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary31_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary31_0.set("width", "5");
                    layersDictionary31_0.set("height", "3");
                    layersDictionary31_0.set("name", "Background");
                    mapDictionary31.get("layers").add(layersDictionary31_0);
                    var layersDictionary31_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary31_1.set("data", "0,0,0,0,0,1,0,0,2,4,0,0,0,0,0");
                    layersDictionary31_1.set("width", "5");
                    layersDictionary31_1.set("height", "3");
                    layersDictionary31_1.set("name", "Foreground");
                    mapDictionary31.get("layers").add(layersDictionary31_1);
                    var layersDictionary31_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary31_2.set("data", "0,0,0,0,0,320,0,0,320,320,0,0,0,0,0");
                    layersDictionary31_2.set("width", "5");
                    layersDictionary31_2.set("height", "3");
                    layersDictionary31_2.set("name", "Solid");
                    mapDictionary31.get("layers").add(layersDictionary31_2);



                    var mapDictionary32 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level5B_Fragment4", mapDictionary32);

                    mapDictionary32.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary32_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary32_0.set("firstgid", "1");
                    tilesetDictionary32_0.set("imagewidth", "464");
                    tilesetDictionary32_0.set("imageheight", "176");
                    tilesetDictionary32_0.set("name", "TsSnow");
                    tilesetDictionary32_0.set("tilewidth", "16");
                    tilesetDictionary32_0.set("tileheight", "16");
                    mapDictionary32.get("tilesets").add(tilesetDictionary32_0);
                    var tilesetDictionary32_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary32_1.set("firstgid", "320");
                    tilesetDictionary32_1.set("imagewidth", "80");
                    tilesetDictionary32_1.set("imageheight", "192");
                    tilesetDictionary32_1.set("name", "Solid");
                    tilesetDictionary32_1.set("tilewidth", "16");
                    tilesetDictionary32_1.set("tileheight", "16");
                    mapDictionary32.get("tilesets").add(tilesetDictionary32_1);
                    var tilesetDictionary32_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary32_2.set("firstgid", "380");
                    tilesetDictionary32_2.set("imagewidth", "128");
                    tilesetDictionary32_2.set("imageheight", "160");
                    tilesetDictionary32_2.set("name", "Actors");
                    tilesetDictionary32_2.set("tilewidth", "16");
                    tilesetDictionary32_2.set("tileheight", "16");
                    mapDictionary32.get("tilesets").add(tilesetDictionary32_2);
                    var tilesetDictionary32_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary32_3.set("firstgid", "460");
                    tilesetDictionary32_3.set("imagewidth", "128");
                    tilesetDictionary32_3.set("imageheight", "32");
                    tilesetDictionary32_3.set("name", "Spikes");
                    tilesetDictionary32_3.set("tilewidth", "16");
                    tilesetDictionary32_3.set("tileheight", "16");
                    mapDictionary32.get("tilesets").add(tilesetDictionary32_3);
                    var tilesetDictionary32_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary32_4.set("firstgid", "476");
                    tilesetDictionary32_4.set("imagewidth", "192");
                    tilesetDictionary32_4.set("imageheight", "80");
                    tilesetDictionary32_4.set("name", "Igloo");
                    tilesetDictionary32_4.set("tilewidth", "16");
                    tilesetDictionary32_4.set("tileheight", "16");
                    mapDictionary32.get("tilesets").add(tilesetDictionary32_4);
                    var tilesetDictionary32_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary32_5.set("firstgid", "536");
                    tilesetDictionary32_5.set("imagewidth", "80");
                    tilesetDictionary32_5.set("imageheight", "80");
                    tilesetDictionary32_5.set("name", "Signpost");
                    tilesetDictionary32_5.set("tilewidth", "16");
                    tilesetDictionary32_5.set("tileheight", "16");
                    mapDictionary32.get("tilesets").add(tilesetDictionary32_5);

                    mapDictionary32.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary32_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary32_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary32_0.set("width", "5");
                    layersDictionary32_0.set("height", "3");
                    layersDictionary32_0.set("name", "Background");
                    mapDictionary32.get("layers").add(layersDictionary32_0);
                    var layersDictionary32_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary32_1.set("data", "0,393,464,0,393,2,3,3,3,4,0,0,0,0,0");
                    layersDictionary32_1.set("width", "5");
                    layersDictionary32_1.set("height", "3");
                    layersDictionary32_1.set("name", "Foreground");
                    mapDictionary32.get("layers").add(layersDictionary32_1);
                    var layersDictionary32_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary32_2.set("data", "0,0,363,0,0,320,320,320,320,320,0,0,0,0,0");
                    layersDictionary32_2.set("width", "5");
                    layersDictionary32_2.set("height", "3");
                    layersDictionary32_2.set("name", "Solid");
                    mapDictionary32.get("layers").add(layersDictionary32_2);



                    var mapDictionary33 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level5B_Fragment5", mapDictionary33);

                    mapDictionary33.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary33_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary33_0.set("firstgid", "1");
                    tilesetDictionary33_0.set("imagewidth", "464");
                    tilesetDictionary33_0.set("imageheight", "176");
                    tilesetDictionary33_0.set("name", "TsSnow");
                    tilesetDictionary33_0.set("tilewidth", "16");
                    tilesetDictionary33_0.set("tileheight", "16");
                    mapDictionary33.get("tilesets").add(tilesetDictionary33_0);
                    var tilesetDictionary33_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary33_1.set("firstgid", "320");
                    tilesetDictionary33_1.set("imagewidth", "80");
                    tilesetDictionary33_1.set("imageheight", "192");
                    tilesetDictionary33_1.set("name", "Solid");
                    tilesetDictionary33_1.set("tilewidth", "16");
                    tilesetDictionary33_1.set("tileheight", "16");
                    mapDictionary33.get("tilesets").add(tilesetDictionary33_1);
                    var tilesetDictionary33_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary33_2.set("firstgid", "380");
                    tilesetDictionary33_2.set("imagewidth", "128");
                    tilesetDictionary33_2.set("imageheight", "160");
                    tilesetDictionary33_2.set("name", "Actors");
                    tilesetDictionary33_2.set("tilewidth", "16");
                    tilesetDictionary33_2.set("tileheight", "16");
                    mapDictionary33.get("tilesets").add(tilesetDictionary33_2);
                    var tilesetDictionary33_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary33_3.set("firstgid", "460");
                    tilesetDictionary33_3.set("imagewidth", "128");
                    tilesetDictionary33_3.set("imageheight", "32");
                    tilesetDictionary33_3.set("name", "Spikes");
                    tilesetDictionary33_3.set("tilewidth", "16");
                    tilesetDictionary33_3.set("tileheight", "16");
                    mapDictionary33.get("tilesets").add(tilesetDictionary33_3);
                    var tilesetDictionary33_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary33_4.set("firstgid", "476");
                    tilesetDictionary33_4.set("imagewidth", "192");
                    tilesetDictionary33_4.set("imageheight", "80");
                    tilesetDictionary33_4.set("name", "Igloo");
                    tilesetDictionary33_4.set("tilewidth", "16");
                    tilesetDictionary33_4.set("tileheight", "16");
                    mapDictionary33.get("tilesets").add(tilesetDictionary33_4);
                    var tilesetDictionary33_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary33_5.set("firstgid", "536");
                    tilesetDictionary33_5.set("imagewidth", "80");
                    tilesetDictionary33_5.set("imageheight", "80");
                    tilesetDictionary33_5.set("name", "Signpost");
                    tilesetDictionary33_5.set("tilewidth", "16");
                    tilesetDictionary33_5.set("tileheight", "16");
                    mapDictionary33.get("tilesets").add(tilesetDictionary33_5);

                    mapDictionary33.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary33_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary33_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary33_0.set("width", "5");
                    layersDictionary33_0.set("height", "3");
                    layersDictionary33_0.set("name", "Background");
                    mapDictionary33.get("layers").add(layersDictionary33_0);
                    var layersDictionary33_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary33_1.set("data", "393,0,0,393,0,2,4,0,2,4,465,0,0,465,465");
                    layersDictionary33_1.set("width", "5");
                    layersDictionary33_1.set("height", "3");
                    layersDictionary33_1.set("name", "Foreground");
                    mapDictionary33.get("layers").add(layersDictionary33_1);
                    var layersDictionary33_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary33_2.set("data", "0,0,0,0,0,320,320,0,320,320,363,0,0,363,363");
                    layersDictionary33_2.set("width", "5");
                    layersDictionary33_2.set("height", "3");
                    layersDictionary33_2.set("name", "Solid");
                    mapDictionary33.get("layers").add(layersDictionary33_2);



                    var mapDictionary34 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level5B_Fragment6", mapDictionary34);

                    mapDictionary34.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary34_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary34_0.set("firstgid", "1");
                    tilesetDictionary34_0.set("imagewidth", "464");
                    tilesetDictionary34_0.set("imageheight", "176");
                    tilesetDictionary34_0.set("name", "TsSnow");
                    tilesetDictionary34_0.set("tilewidth", "16");
                    tilesetDictionary34_0.set("tileheight", "16");
                    mapDictionary34.get("tilesets").add(tilesetDictionary34_0);
                    var tilesetDictionary34_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary34_1.set("firstgid", "320");
                    tilesetDictionary34_1.set("imagewidth", "80");
                    tilesetDictionary34_1.set("imageheight", "192");
                    tilesetDictionary34_1.set("name", "Solid");
                    tilesetDictionary34_1.set("tilewidth", "16");
                    tilesetDictionary34_1.set("tileheight", "16");
                    mapDictionary34.get("tilesets").add(tilesetDictionary34_1);
                    var tilesetDictionary34_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary34_2.set("firstgid", "380");
                    tilesetDictionary34_2.set("imagewidth", "128");
                    tilesetDictionary34_2.set("imageheight", "160");
                    tilesetDictionary34_2.set("name", "Actors");
                    tilesetDictionary34_2.set("tilewidth", "16");
                    tilesetDictionary34_2.set("tileheight", "16");
                    mapDictionary34.get("tilesets").add(tilesetDictionary34_2);
                    var tilesetDictionary34_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary34_3.set("firstgid", "460");
                    tilesetDictionary34_3.set("imagewidth", "128");
                    tilesetDictionary34_3.set("imageheight", "32");
                    tilesetDictionary34_3.set("name", "Spikes");
                    tilesetDictionary34_3.set("tilewidth", "16");
                    tilesetDictionary34_3.set("tileheight", "16");
                    mapDictionary34.get("tilesets").add(tilesetDictionary34_3);
                    var tilesetDictionary34_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary34_4.set("firstgid", "476");
                    tilesetDictionary34_4.set("imagewidth", "192");
                    tilesetDictionary34_4.set("imageheight", "80");
                    tilesetDictionary34_4.set("name", "Igloo");
                    tilesetDictionary34_4.set("tilewidth", "16");
                    tilesetDictionary34_4.set("tileheight", "16");
                    mapDictionary34.get("tilesets").add(tilesetDictionary34_4);
                    var tilesetDictionary34_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary34_5.set("firstgid", "536");
                    tilesetDictionary34_5.set("imagewidth", "80");
                    tilesetDictionary34_5.set("imageheight", "80");
                    tilesetDictionary34_5.set("name", "Signpost");
                    tilesetDictionary34_5.set("tilewidth", "16");
                    tilesetDictionary34_5.set("tileheight", "16");
                    mapDictionary34.get("tilesets").add(tilesetDictionary34_5);

                    mapDictionary34.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary34_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary34_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary34_0.set("width", "5");
                    layersDictionary34_0.set("height", "3");
                    layersDictionary34_0.set("name", "Background");
                    mapDictionary34.get("layers").add(layersDictionary34_0);
                    var layersDictionary34_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary34_1.set("data", "0,0,0,0,0,1,464,464,464,1,0,2,3,4,0");
                    layersDictionary34_1.set("width", "5");
                    layersDictionary34_1.set("height", "3");
                    layersDictionary34_1.set("name", "Foreground");
                    mapDictionary34.get("layers").add(layersDictionary34_1);
                    var layersDictionary34_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary34_2.set("data", "0,0,0,0,0,320,363,363,363,320,0,320,320,320,0");
                    layersDictionary34_2.set("width", "5");
                    layersDictionary34_2.set("height", "3");
                    layersDictionary34_2.set("name", "Solid");
                    mapDictionary34.get("layers").add(layersDictionary34_2);



                    var mapDictionary35 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level5B_Fragment7", mapDictionary35);

                    mapDictionary35.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary35_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary35_0.set("firstgid", "1");
                    tilesetDictionary35_0.set("imagewidth", "464");
                    tilesetDictionary35_0.set("imageheight", "176");
                    tilesetDictionary35_0.set("name", "TsSnow");
                    tilesetDictionary35_0.set("tilewidth", "16");
                    tilesetDictionary35_0.set("tileheight", "16");
                    mapDictionary35.get("tilesets").add(tilesetDictionary35_0);
                    var tilesetDictionary35_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary35_1.set("firstgid", "320");
                    tilesetDictionary35_1.set("imagewidth", "80");
                    tilesetDictionary35_1.set("imageheight", "192");
                    tilesetDictionary35_1.set("name", "Solid");
                    tilesetDictionary35_1.set("tilewidth", "16");
                    tilesetDictionary35_1.set("tileheight", "16");
                    mapDictionary35.get("tilesets").add(tilesetDictionary35_1);
                    var tilesetDictionary35_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary35_2.set("firstgid", "380");
                    tilesetDictionary35_2.set("imagewidth", "128");
                    tilesetDictionary35_2.set("imageheight", "160");
                    tilesetDictionary35_2.set("name", "Actors");
                    tilesetDictionary35_2.set("tilewidth", "16");
                    tilesetDictionary35_2.set("tileheight", "16");
                    mapDictionary35.get("tilesets").add(tilesetDictionary35_2);
                    var tilesetDictionary35_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary35_3.set("firstgid", "460");
                    tilesetDictionary35_3.set("imagewidth", "128");
                    tilesetDictionary35_3.set("imageheight", "32");
                    tilesetDictionary35_3.set("name", "Spikes");
                    tilesetDictionary35_3.set("tilewidth", "16");
                    tilesetDictionary35_3.set("tileheight", "16");
                    mapDictionary35.get("tilesets").add(tilesetDictionary35_3);
                    var tilesetDictionary35_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary35_4.set("firstgid", "476");
                    tilesetDictionary35_4.set("imagewidth", "192");
                    tilesetDictionary35_4.set("imageheight", "80");
                    tilesetDictionary35_4.set("name", "Igloo");
                    tilesetDictionary35_4.set("tilewidth", "16");
                    tilesetDictionary35_4.set("tileheight", "16");
                    mapDictionary35.get("tilesets").add(tilesetDictionary35_4);
                    var tilesetDictionary35_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary35_5.set("firstgid", "536");
                    tilesetDictionary35_5.set("imagewidth", "80");
                    tilesetDictionary35_5.set("imageheight", "80");
                    tilesetDictionary35_5.set("name", "Signpost");
                    tilesetDictionary35_5.set("tilewidth", "16");
                    tilesetDictionary35_5.set("tileheight", "16");
                    mapDictionary35.get("tilesets").add(tilesetDictionary35_5);

                    mapDictionary35.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary35_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary35_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary35_0.set("width", "5");
                    layersDictionary35_0.set("height", "3");
                    layersDictionary35_0.set("name", "Background");
                    mapDictionary35.get("layers").add(layersDictionary35_0);
                    var layersDictionary35_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary35_1.set("data", "0,0,0,0,0,1,0,0,0,1,0,0,0,0,0");
                    layersDictionary35_1.set("width", "5");
                    layersDictionary35_1.set("height", "3");
                    layersDictionary35_1.set("name", "Foreground");
                    mapDictionary35.get("layers").add(layersDictionary35_1);
                    var layersDictionary35_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary35_2.set("data", "0,0,0,0,0,320,0,0,0,320,0,0,0,0,0");
                    layersDictionary35_2.set("width", "5");
                    layersDictionary35_2.set("height", "3");
                    layersDictionary35_2.set("name", "Solid");
                    mapDictionary35.get("layers").add(layersDictionary35_2);



                    var mapDictionary36 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level5B_Fragment8", mapDictionary36);

                    mapDictionary36.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary36_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary36_0.set("firstgid", "1");
                    tilesetDictionary36_0.set("imagewidth", "464");
                    tilesetDictionary36_0.set("imageheight", "176");
                    tilesetDictionary36_0.set("name", "TsSnow");
                    tilesetDictionary36_0.set("tilewidth", "16");
                    tilesetDictionary36_0.set("tileheight", "16");
                    mapDictionary36.get("tilesets").add(tilesetDictionary36_0);
                    var tilesetDictionary36_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary36_1.set("firstgid", "320");
                    tilesetDictionary36_1.set("imagewidth", "80");
                    tilesetDictionary36_1.set("imageheight", "192");
                    tilesetDictionary36_1.set("name", "Solid");
                    tilesetDictionary36_1.set("tilewidth", "16");
                    tilesetDictionary36_1.set("tileheight", "16");
                    mapDictionary36.get("tilesets").add(tilesetDictionary36_1);
                    var tilesetDictionary36_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary36_2.set("firstgid", "380");
                    tilesetDictionary36_2.set("imagewidth", "128");
                    tilesetDictionary36_2.set("imageheight", "160");
                    tilesetDictionary36_2.set("name", "Actors");
                    tilesetDictionary36_2.set("tilewidth", "16");
                    tilesetDictionary36_2.set("tileheight", "16");
                    mapDictionary36.get("tilesets").add(tilesetDictionary36_2);
                    var tilesetDictionary36_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary36_3.set("firstgid", "460");
                    tilesetDictionary36_3.set("imagewidth", "128");
                    tilesetDictionary36_3.set("imageheight", "32");
                    tilesetDictionary36_3.set("name", "Spikes");
                    tilesetDictionary36_3.set("tilewidth", "16");
                    tilesetDictionary36_3.set("tileheight", "16");
                    mapDictionary36.get("tilesets").add(tilesetDictionary36_3);
                    var tilesetDictionary36_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary36_4.set("firstgid", "476");
                    tilesetDictionary36_4.set("imagewidth", "192");
                    tilesetDictionary36_4.set("imageheight", "80");
                    tilesetDictionary36_4.set("name", "Igloo");
                    tilesetDictionary36_4.set("tilewidth", "16");
                    tilesetDictionary36_4.set("tileheight", "16");
                    mapDictionary36.get("tilesets").add(tilesetDictionary36_4);
                    var tilesetDictionary36_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary36_5.set("firstgid", "536");
                    tilesetDictionary36_5.set("imagewidth", "80");
                    tilesetDictionary36_5.set("imageheight", "80");
                    tilesetDictionary36_5.set("name", "Signpost");
                    tilesetDictionary36_5.set("tilewidth", "16");
                    tilesetDictionary36_5.set("tileheight", "16");
                    mapDictionary36.get("tilesets").add(tilesetDictionary36_5);

                    mapDictionary36.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary36_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary36_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary36_0.set("width", "5");
                    layersDictionary36_0.set("height", "3");
                    layersDictionary36_0.set("name", "Background");
                    mapDictionary36.get("layers").add(layersDictionary36_0);
                    var layersDictionary36_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary36_1.set("data", "0,0,0,0,0,1,0,0,393,30,0,0,2,3,35");
                    layersDictionary36_1.set("width", "5");
                    layersDictionary36_1.set("height", "3");
                    layersDictionary36_1.set("name", "Foreground");
                    mapDictionary36.get("layers").add(layersDictionary36_1);
                    var layersDictionary36_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary36_2.set("data", "0,0,0,0,0,320,0,0,0,320,0,0,320,320,320");
                    layersDictionary36_2.set("width", "5");
                    layersDictionary36_2.set("height", "3");
                    layersDictionary36_2.set("name", "Solid");
                    mapDictionary36.get("layers").add(layersDictionary36_2);



                    var mapDictionary37 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level5B_Fragment9", mapDictionary37);

                    mapDictionary37.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary37_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary37_0.set("firstgid", "1");
                    tilesetDictionary37_0.set("imagewidth", "464");
                    tilesetDictionary37_0.set("imageheight", "176");
                    tilesetDictionary37_0.set("name", "TsSnow");
                    tilesetDictionary37_0.set("tilewidth", "16");
                    tilesetDictionary37_0.set("tileheight", "16");
                    mapDictionary37.get("tilesets").add(tilesetDictionary37_0);
                    var tilesetDictionary37_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary37_1.set("firstgid", "320");
                    tilesetDictionary37_1.set("imagewidth", "80");
                    tilesetDictionary37_1.set("imageheight", "192");
                    tilesetDictionary37_1.set("name", "Solid");
                    tilesetDictionary37_1.set("tilewidth", "16");
                    tilesetDictionary37_1.set("tileheight", "16");
                    mapDictionary37.get("tilesets").add(tilesetDictionary37_1);
                    var tilesetDictionary37_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary37_2.set("firstgid", "380");
                    tilesetDictionary37_2.set("imagewidth", "128");
                    tilesetDictionary37_2.set("imageheight", "160");
                    tilesetDictionary37_2.set("name", "Actors");
                    tilesetDictionary37_2.set("tilewidth", "16");
                    tilesetDictionary37_2.set("tileheight", "16");
                    mapDictionary37.get("tilesets").add(tilesetDictionary37_2);
                    var tilesetDictionary37_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary37_3.set("firstgid", "460");
                    tilesetDictionary37_3.set("imagewidth", "128");
                    tilesetDictionary37_3.set("imageheight", "32");
                    tilesetDictionary37_3.set("name", "Spikes");
                    tilesetDictionary37_3.set("tilewidth", "16");
                    tilesetDictionary37_3.set("tileheight", "16");
                    mapDictionary37.get("tilesets").add(tilesetDictionary37_3);
                    var tilesetDictionary37_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary37_4.set("firstgid", "476");
                    tilesetDictionary37_4.set("imagewidth", "192");
                    tilesetDictionary37_4.set("imageheight", "80");
                    tilesetDictionary37_4.set("name", "Igloo");
                    tilesetDictionary37_4.set("tilewidth", "16");
                    tilesetDictionary37_4.set("tileheight", "16");
                    mapDictionary37.get("tilesets").add(tilesetDictionary37_4);
                    var tilesetDictionary37_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary37_5.set("firstgid", "536");
                    tilesetDictionary37_5.set("imagewidth", "80");
                    tilesetDictionary37_5.set("imageheight", "80");
                    tilesetDictionary37_5.set("name", "Signpost");
                    tilesetDictionary37_5.set("tilewidth", "16");
                    tilesetDictionary37_5.set("tileheight", "16");
                    mapDictionary37.get("tilesets").add(tilesetDictionary37_5);

                    mapDictionary37.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary37_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary37_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary37_0.set("width", "4");
                    layersDictionary37_0.set("height", "3");
                    layersDictionary37_0.set("name", "Background");
                    mapDictionary37.get("layers").add(layersDictionary37_0);
                    var layersDictionary37_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary37_1.set("data", "0,464,464,0,2,3,3,4,0,0,465,465");
                    layersDictionary37_1.set("width", "4");
                    layersDictionary37_1.set("height", "3");
                    layersDictionary37_1.set("name", "Foreground");
                    mapDictionary37.get("layers").add(layersDictionary37_1);
                    var layersDictionary37_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary37_2.set("data", "0,363,363,0,320,320,320,320,0,0,363,363");
                    layersDictionary37_2.set("width", "4");
                    layersDictionary37_2.set("height", "3");
                    layersDictionary37_2.set("name", "Solid");
                    mapDictionary37.get("layers").add(layersDictionary37_2);



                    var mapDictionary38 = new (System.Collections.Generic.Dictionary$2(System.String,System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))))();
                    dictionary.set("Level5C_Finish", mapDictionary38);

                    mapDictionary38.set("tilesets", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var tilesetDictionary38_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary38_0.set("firstgid", "1");
                    tilesetDictionary38_0.set("imagewidth", "464");
                    tilesetDictionary38_0.set("imageheight", "176");
                    tilesetDictionary38_0.set("name", "TsSnow");
                    tilesetDictionary38_0.set("tilewidth", "16");
                    tilesetDictionary38_0.set("tileheight", "16");
                    mapDictionary38.get("tilesets").add(tilesetDictionary38_0);
                    var tilesetDictionary38_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary38_1.set("firstgid", "320");
                    tilesetDictionary38_1.set("imagewidth", "80");
                    tilesetDictionary38_1.set("imageheight", "192");
                    tilesetDictionary38_1.set("name", "Solid");
                    tilesetDictionary38_1.set("tilewidth", "16");
                    tilesetDictionary38_1.set("tileheight", "16");
                    mapDictionary38.get("tilesets").add(tilesetDictionary38_1);
                    var tilesetDictionary38_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary38_2.set("firstgid", "380");
                    tilesetDictionary38_2.set("imagewidth", "128");
                    tilesetDictionary38_2.set("imageheight", "160");
                    tilesetDictionary38_2.set("name", "Actors");
                    tilesetDictionary38_2.set("tilewidth", "16");
                    tilesetDictionary38_2.set("tileheight", "16");
                    mapDictionary38.get("tilesets").add(tilesetDictionary38_2);
                    var tilesetDictionary38_3 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary38_3.set("firstgid", "460");
                    tilesetDictionary38_3.set("imagewidth", "128");
                    tilesetDictionary38_3.set("imageheight", "32");
                    tilesetDictionary38_3.set("name", "Spikes");
                    tilesetDictionary38_3.set("tilewidth", "16");
                    tilesetDictionary38_3.set("tileheight", "16");
                    mapDictionary38.get("tilesets").add(tilesetDictionary38_3);
                    var tilesetDictionary38_4 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary38_4.set("firstgid", "476");
                    tilesetDictionary38_4.set("imagewidth", "192");
                    tilesetDictionary38_4.set("imageheight", "80");
                    tilesetDictionary38_4.set("name", "Igloo");
                    tilesetDictionary38_4.set("tilewidth", "16");
                    tilesetDictionary38_4.set("tileheight", "16");
                    mapDictionary38.get("tilesets").add(tilesetDictionary38_4);
                    var tilesetDictionary38_5 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    tilesetDictionary38_5.set("firstgid", "536");
                    tilesetDictionary38_5.set("imagewidth", "80");
                    tilesetDictionary38_5.set("imageheight", "80");
                    tilesetDictionary38_5.set("name", "Signpost");
                    tilesetDictionary38_5.set("tilewidth", "16");
                    tilesetDictionary38_5.set("tileheight", "16");
                    mapDictionary38.get("tilesets").add(tilesetDictionary38_5);

                    mapDictionary38.set("layers", new (System.Collections.Generic.List$1(System.Collections.Generic.Dictionary$2(System.String,System.String))).ctor());
                    var layersDictionary38_0 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary38_0.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,495,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,507,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,519,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
                    layersDictionary38_0.set("width", "22");
                    layersDictionary38_0.set("height", "24");
                    layersDictionary38_0.set("name", "Background");
                    mapDictionary38.get("layers").add(layersDictionary38_0);
                    var layersDictionary38_1 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary38_1.set("data", "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,477,478,479,479,480,481,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,488,489,490,491,492,492,493,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,500,501,502,503,504,492,505,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,500,513,514,515,516,516,517,0,0,31,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,60,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61");
                    layersDictionary38_1.set("width", "22");
                    layersDictionary38_1.set("height", "24");
                    layersDictionary38_1.set("name", "Foreground");
                    mapDictionary38.get("layers").add(layersDictionary38_1);
                    var layersDictionary38_2 = new (System.Collections.Generic.Dictionary$2(System.String,System.String))();
                    layersDictionary38_2.set("data
                    layersDictionary38_2.set("width", "22");
                    layersDictionary38_2.set("height", "24");
                    layersDictionary38_2.set("name", "Solid");
                    mapDictionary38.get("layers").add(layersDictionary38_2);



                    return dictionary;
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.MapDataHelper", {
        statics: {
            methods: {
                GetStronglyTypedMapData: function (mapData) {
                    var $t;
                    var returnVal = new (System.Collections.Generic.Dictionary$2(System.String,TuxPlanetSpeedrunAnyPercentLibrary.MapDataHelper.Map))();

                    $t = Bridge.getEnumerator(mapData);
                    try {
                        while ($t.moveNext()) {
                            var kvp = $t.Current;
                            var mapName = kvp.key;
                            var data = kvp.value;

                            returnVal.set(mapName, TuxPlanetSpeedrunAnyPercentLibrary.MapDataHelper.GetStronglyTypedMapDataHelper(data));
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    return returnVal;
                },
                GetStronglyTypedMapDataHelper: function (mapData) {
                    var layers = System.Linq.Enumerable.from(mapData.get("layers")).select(function (x) {
                            return TuxPlanetSpeedrunAnyPercentLibrary.MapDataHelper.GetLayer(x);
                        }).toList(TuxPlanetSpeedrunAnyPercentLibrary.MapDataHelper.Layer);
                    var tilesets = System.Linq.Enumerable.from(mapData.get("tilesets")).select(function (x) {
                            return TuxPlanetSpeedrunAnyPercentLibrary.MapDataHelper.GetTileset(x);
                        }).toList(TuxPlanetSpeedrunAnyPercentLibrary.MapDataHelper.Tileset);

                    return new TuxPlanetSpeedrunAnyPercentLibrary.MapDataHelper.Map(layers, tilesets);
                },
                GetLayer: function (layerDictionary) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.MapDataHelper.Layer(System.Linq.Enumerable.from(System.String.split(layerDictionary.get("data"), [44].map(function (i) {{ return String.fromCharCode(i); }}))).select(function (x) {
                            return DTLibrary.StringUtil.ParseInt(x);
                        }).toList(System.Int32), DTLibrary.StringUtil.ParseInt(layerDictionary.get("width")), DTLibrary.StringUtil.ParseInt(layerDictionary.get("height")), layerDictionary.get("name"));
                },
                GetTileset: function (tilesetDictionary) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.MapDataHelper.Tileset(DTLibrary.StringUtil.ParseInt(tilesetDictionary.get("firstgid")), DTLibrary.StringUtil.ParseInt(tilesetDictionary.get("imagewidth")), DTLibrary.StringUtil.ParseInt(tilesetDictionary.get("imageheight")), tilesetDictionary.get("name"), DTLibrary.StringUtil.ParseInt(tilesetDictionary.get("tilewidth")), DTLibrary.StringUtil.ParseInt(tilesetDictionary.get("tileheight")));
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.MapDataHelper.Layer", {
        $kind: "nested class",
        fields: {
            Data: null,
            Width: 0,
            Height: 0,
            Name: null
        },
        ctors: {
            ctor: function (data, width, height, name) {
                this.$initialize();
                this.Data = new (System.Collections.Generic.List$1(System.Int32)).$ctor1(data);
                this.Width = width;
                this.Height = height;
                this.Name = name;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.MapDataHelper.Map", {
        $kind: "nested class",
        fields: {
            Layers: null,
            Tilesets: null
        },
        ctors: {
            ctor: function (layers, tilesets) {
                this.$initialize();
                this.Layers = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.MapDataHelper.Layer)).$ctor1(layers);
                this.Tilesets = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.MapDataHelper.Tileset)).$ctor1(tilesets);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.MapDataHelper.Tileset", {
        $kind: "nested class",
        fields: {
            FirstGid: 0,
            ImageWidth: 0,
            ImageHeight: 0,
            Name: null,
            TileWidth: 0,
            TileHeight: 0
        },
        ctors: {
            ctor: function (firstGid, imageWidth, imageHeight, name, tileWidth, tileHeight) {
                this.$initialize();
                this.FirstGid = firstGid;
                this.ImageWidth = imageWidth;
                this.ImageHeight = imageHeight;
                this.Name = name;
                this.TileWidth = tileWidth;
                this.TileHeight = tileHeight;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator", {
        statics: {
            methods: {
                GetTilemap: function (data, enemyIdGenerator, cutsceneName, scalingFactorScaled, gameMusic) {
                    var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8;
                    var tilesets = data.Tilesets;

                    var solidTileset = System.Linq.Enumerable.from(tilesets).single(function (x) {
                            return Bridge.referenceEquals(DTLibrary.StringUtil.ToUpperCaseCultureInvariant(x.Name), "SOLID");
                        });
                    var actorsTileset = System.Linq.Enumerable.from(tilesets).single(function (x) {
                            return Bridge.referenceEquals(DTLibrary.StringUtil.ToUpperCaseCultureInvariant(x.Name), "ACTORS");
                        });

                    var layers = data.Layers;

                    var solidLayer = System.Linq.Enumerable.from(layers).single(function (x) {
                            return Bridge.referenceEquals(DTLibrary.StringUtil.ToUpperCaseCultureInvariant(x.Name), "SOLID");
                        });
                    var foregroundLayer = System.Linq.Enumerable.from(layers).single(function (x) {
                            return Bridge.referenceEquals(DTLibrary.StringUtil.ToUpperCaseCultureInvariant(x.Name), "FOREGROUND");
                        });
                    var backgroundLayer = System.Linq.Enumerable.from(layers).single(function (x) {
                            return Bridge.referenceEquals(DTLibrary.StringUtil.ToUpperCaseCultureInvariant(x.Name), "BACKGROUND");
                        });

                    var numberOfTileColumns = solidLayer.Width;
                    var numberOfTileRows = solidLayer.Height;

                    var tuxLocation = null;

                    var backgroundSpritesArray = TuxPlanetSpeedrunAnyPercentLibrary.SpriteUtil.EmptySpriteArray(numberOfTileColumns, numberOfTileRows);
                    var foregroundSpritesArray = TuxPlanetSpeedrunAnyPercentLibrary.SpriteUtil.EmptySpriteArray(numberOfTileColumns, numberOfTileRows);
                    var isGroundArray = TuxPlanetSpeedrunAnyPercentLibrary.ArrayUtil.EmptyBoolArray(numberOfTileColumns, numberOfTileRows);
                    var isKillZoneArray = TuxPlanetSpeedrunAnyPercentLibrary.ArrayUtil.EmptyBoolArray(numberOfTileColumns, numberOfTileRows);
                    var isSpikesArray = TuxPlanetSpeedrunAnyPercentLibrary.ArrayUtil.EmptyBoolArray(numberOfTileColumns, numberOfTileRows);
                    var isEndOfLevelArray = TuxPlanetSpeedrunAnyPercentLibrary.ArrayUtil.EmptyBoolArray(numberOfTileColumns, numberOfTileRows);
                    var isCutsceneArray = TuxPlanetSpeedrunAnyPercentLibrary.ArrayUtil.EmptyBoolArray(numberOfTileColumns, numberOfTileRows);

                    var solidLayerData = solidLayer.Data;
                    var foregroundLayerData = foregroundLayer.Data;
                    var backgroundLayerData = backgroundLayer.Data;

                    var enemies = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Tilemap.EnemySpawnLocation)).ctor();

                    var tilesetsAfterActorsTileset = System.Linq.Enumerable.from(tilesets).where(function (x) {
                            return x.FirstGid > actorsTileset.FirstGid;
                        }).toList(TuxPlanetSpeedrunAnyPercentLibrary.MapDataHelper.Tileset);
                    var actorTilesetLastGid;
                    if (tilesetsAfterActorsTileset.Count === 0) {
                        actorTilesetLastGid = null;
                    } else {
                        actorTilesetLastGid = Bridge.Int.clip32(System.Linq.Enumerable.from(tilesetsAfterActorsTileset).orderBy(function (x) {
                                return x.FirstGid;
                            }).first().FirstGid - 1);
                    }

                    var gidToSpriteCache = new (System.Collections.Generic.Dictionary$2(System.Int32,TuxPlanetSpeedrunAnyPercentLibrary.Sprite))();

                    var dataIndex = 0;
                    for (var j = (numberOfTileRows - 1) | 0; j >= 0; j = (j - 1) | 0) {
                        for (var i = 0; i < numberOfTileColumns; i = (i + 1) | 0) {
                            var solidGid = System.Array.getItem(solidLayerData, dataIndex, System.Int32);
                            var foregroundGid = System.Array.getItem(foregroundLayerData, dataIndex, System.Int32);
                            var backgroundGid = System.Array.getItem(backgroundLayerData, dataIndex, System.Int32);
                            dataIndex = (dataIndex + 1) | 0;

                            if (backgroundGid !== 0) {
                                if (gidToSpriteCache.containsKey(backgroundGid)) {
                                    ($t = backgroundSpritesArray[System.Array.index(i, backgroundSpritesArray)])[System.Array.index(j, $t)] = gidToSpriteCache.get(backgroundGid);
                                } else {
                                    gidToSpriteCache.set(backgroundGid, TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetSprite(tilesets, backgroundGid, scalingFactorScaled));
                                    ($t1 = backgroundSpritesArray[System.Array.index(i, backgroundSpritesArray)])[System.Array.index(j, $t1)] = gidToSpriteCache.get(backgroundGid);
                                }
                            }

                            if (foregroundGid !== 0) {
                                if (foregroundGid >= actorsTileset.FirstGid && (actorTilesetLastGid == null || foregroundGid <= System.Nullable.getValue(actorTilesetLastGid))) {
                                    var actorGidNormalized = (foregroundGid - actorsTileset.FirstGid) | 0;
                                    if (actorGidNormalized === 0) {
                                        tuxLocation = { Item1: Bridge.Int.mul(Bridge.Int.mul(i, solidTileset.TileWidth), (((Bridge.Int.div(scalingFactorScaled, 128)) | 0))), Item2: ((Bridge.Int.mul(Bridge.Int.mul(j, solidTileset.TileHeight), (((Bridge.Int.div(scalingFactorScaled, 128)) | 0))) + Bridge.Int.mul(16, (((Bridge.Int.div(scalingFactorScaled, 128)) | 0)))) | 0) };
                                    } else {
                                        enemies.add(new TuxPlanetSpeedrunAnyPercentLibrary.Tilemap.EnemySpawnLocation(actorGidNormalized, i, j, enemyIdGenerator.GetNewId()));
                                    }
                                } else {
                                    if (gidToSpriteCache.containsKey(foregroundGid)) {
                                        ($t2 = foregroundSpritesArray[System.Array.index(i, foregroundSpritesArray)])[System.Array.index(j, $t2)] = gidToSpriteCache.get(foregroundGid);
                                    } else {
                                        gidToSpriteCache.set(foregroundGid, TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetSprite(tilesets, foregroundGid, scalingFactorScaled));
                                        ($t3 = foregroundSpritesArray[System.Array.index(i, foregroundSpritesArray)])[System.Array.index(j, $t3)] = gidToSpriteCache.get(foregroundGid);
                                    }
                                }
                            }

                            if (solidGid !== 0) {
                                var solidGidNormalized = (solidGid - solidTileset.FirstGid) | 0;

                                ($t4 = isGroundArray[System.Array.index(i, isGroundArray)])[System.Array.index(j, $t4)] = solidGidNormalized === 0;
                                ($t5 = isKillZoneArray[System.Array.index(i, isKillZoneArray)])[System.Array.index(j, $t5)] = solidGidNormalized === 41;
                                ($t6 = isSpikesArray[System.Array.index(i, isSpikesArray)])[System.Array.index(j, $t6)] = solidGidNormalized === 43;
                                ($t7 = isEndOfLevelArray[System.Array.index(i, isEndOfLevelArray)])[System.Array.index(j, $t7)] = solidGidNormalized === 37;
                                ($t8 = isCutsceneArray[System.Array.index(i, isCutsceneArray)])[System.Array.index(j, $t8)] = solidGidNormalized === 29;
                            }
                        }
                    }

                    return new TuxPlanetSpeedrunAnyPercentLibrary.Tilemap(backgroundSpritesArray, foregroundSpritesArray, isGroundArray, isKillZoneArray, isSpikesArray, isEndOfLevelArray, isCutsceneArray, TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.ComputeCheckpointArray(numberOfTileColumns, numberOfTileRows, solidLayerData, solidTileset, actorsTileset, scalingFactorScaled), ((Bridge.Int.div(Bridge.Int.mul(solidTileset.TileWidth, scalingFactorScaled), 128)) | 0), ((Bridge.Int.div(Bridge.Int.mul(solidTileset.TileHeight, scalingFactorScaled), 128)) | 0), enemies, cutsceneName, tuxLocation, gameMusic);
                },
                ComputeCheckpointArray: function (numberOfTileColumns, numberOfTileRows, solidLayerData, solidTileset, actorsTileset, scalingFactorScaled) {
                    var $t, $t1, $t2, $t3;
                    var checkpointArray = System.Array.init(numberOfTileColumns, null, System.Array.type(System.Tuple$2(System.Int32,System.Int32)));
                    var solidLayerGids = System.Array.init(numberOfTileColumns, null, System.Array.type(System.Int32));

                    for (var i = 0; i < numberOfTileColumns; i = (i + 1) | 0) {
                        checkpointArray[System.Array.index(i, checkpointArray)] = System.Array.init(numberOfTileRows, null, System.Tuple$2(System.Int32,System.Int32));
                        for (var j = 0; j < numberOfTileRows; j = (j + 1) | 0) {
                            ($t = checkpointArray[System.Array.index(i, checkpointArray)])[System.Array.index(j, $t)] = null;
                        }

                        solidLayerGids[System.Array.index(i, solidLayerGids)] = System.Array.init(numberOfTileRows, 0, System.Int32);
                        for (var j1 = 0; j1 < numberOfTileRows; j1 = (j1 + 1) | 0) {
                            ($t1 = solidLayerGids[System.Array.index(i, solidLayerGids)])[System.Array.index(j1, $t1)] = 0;
                        }
                    }

                    var dataIndex = 0;
                    for (var j2 = (numberOfTileRows - 1) | 0; j2 >= 0; j2 = (j2 - 1) | 0) {
                        for (var i1 = 0; i1 < numberOfTileColumns; i1 = (i1 + 1) | 0) {
                            var solidGid = System.Array.getItem(solidLayerData, dataIndex, System.Int32);
                            dataIndex = (dataIndex + 1) | 0;

                            ($t2 = solidLayerGids[System.Array.index(i1, solidLayerGids)])[System.Array.index(j2, $t2)] = solidGid;
                        }
                    }

                    for (var i2 = 0; i2 < solidLayerGids.length; i2 = (i2 + 1) | 0) {
                        for (var j3 = 0; j3 < solidLayerGids[System.Array.index(i2, solidLayerGids)].length; j3 = (j3 + 1) | 0) {
                            if (((($t3 = solidLayerGids[System.Array.index(i2, solidLayerGids)])[System.Array.index(j3, $t3)] - actorsTileset.FirstGid) | 0) === 72) {
                                TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.SetCheckpoint(checkpointArray, solidLayerGids, actorsTileset, { Item1: ((Bridge.Int.mul(Bridge.Int.mul(i2, solidTileset.TileWidth), (((Bridge.Int.div(scalingFactorScaled, 128)) | 0))) + ((Bridge.Int.div(Bridge.Int.mul(solidTileset.TileWidth, (((Bridge.Int.div(scalingFactorScaled, 128)) | 0))), 2)) | 0)) | 0), Item2: ((Bridge.Int.mul(Bridge.Int.mul(j3, solidTileset.TileHeight), (((Bridge.Int.div(scalingFactorScaled, 128)) | 0))) + Bridge.Int.mul(16, (((Bridge.Int.div(scalingFactorScaled, 128)) | 0)))) | 0) }, i2, j3);
                            }
                        }
                    }

                    return checkpointArray;
                },
                SetCheckpoint: function (checkpointArray, solidLayerGids, actorsTileset, checkpointDestination, i, j) {
                    var $t, $t1, $t2;
                    if (i < 0 || i >= checkpointArray.length) {
                        return;
                    }

                    if (j < 0 || j >= checkpointArray[System.Array.index(i, checkpointArray)].length) {
                        return;
                    }

                    var normalizedGid = (($t = solidLayerGids[System.Array.index(i, solidLayerGids)])[System.Array.index(j, $t)] - actorsTileset.FirstGid) | 0;

                    if (normalizedGid !== 72 && normalizedGid !== 32) {
                        return;
                    }

                    if (($t1 = checkpointArray[System.Array.index(i, checkpointArray)])[System.Array.index(j, $t1)] != null) {
                        return;
                    }

                    ($t2 = checkpointArray[System.Array.index(i, checkpointArray)])[System.Array.index(j, $t2)] = checkpointDestination;

                    TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.SetCheckpoint(checkpointArray, solidLayerGids, actorsTileset, checkpointDestination, i, ((j - 1) | 0));
                    TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.SetCheckpoint(checkpointArray, solidLayerGids, actorsTileset, checkpointDestination, i, ((j + 1) | 0));
                    TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.SetCheckpoint(checkpointArray, solidLayerGids, actorsTileset, checkpointDestination, ((i - 1) | 0), j);
                    TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.SetCheckpoint(checkpointArray, solidLayerGids, actorsTileset, checkpointDestination, ((i + 1) | 0), j);
                },
                GetSprite: function (tilesets, gid, scalingFactorScaled) {
                    var tilesetToGameImageMapping = new (System.Collections.Generic.Dictionary$2(System.String,TuxPlanetSpeedrunAnyPercentLibrary.GameImage))();
                    tilesetToGameImageMapping.set("Actors", TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Actors);
                    tilesetToGameImageMapping.set("Igloo", TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Igloo);
                    tilesetToGameImageMapping.set("Signpost", TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Signpost);
                    tilesetToGameImageMapping.set("Solid", TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Solid);
                    tilesetToGameImageMapping.set("Spikes", TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Spikes);
                    tilesetToGameImageMapping.set("TsSnow", TuxPlanetSpeedrunAnyPercentLibrary.GameImage.TilemapSnow);

                    var tileset = System.Linq.Enumerable.from(tilesets).where(function (x) {
                            return x.FirstGid <= gid;
                        }).orderByDescending(function (x) {
                        return x.FirstGid;
                    }).first();

                    var image = tilesetToGameImageMapping.get(tileset.Name);

                    var tilesetX = 0;
                    var tilesetY = 0;

                    gid = (gid - tileset.FirstGid) | 0;

                    var numSpritesInEachRow = (Bridge.Int.div(tileset.ImageWidth, tileset.TileWidth)) | 0;

                    while (gid >= numSpritesInEachRow) {
                        gid = (gid - numSpritesInEachRow) | 0;
                        tilesetY = (tilesetY + tileset.TileHeight) | 0;
                    }

                    while (gid > 0) {
                        gid = (gid - 1) | 0;
                        tilesetX = (tilesetX + tileset.TileWidth) | 0;
                    }

                    return new TuxPlanetSpeedrunAnyPercentLibrary.Sprite(image, tilesetX, tilesetY, tileset.TileWidth, tileset.TileHeight, scalingFactorScaled);
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.Move", {
        statics: {
            methods: {
                EmptyMove: function () {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.Move(false, false, false, false, false, false, false);
                }
            }
        },
        fields: {
            Jumped: false,
            Teleported: false,
            ArrowLeft: false,
            ArrowRight: false,
            ArrowUp: false,
            ArrowDown: false,
            Respawn: false
        },
        ctors: {
            ctor: function (jumped, teleported, arrowLeft, arrowRight, arrowUp, arrowDown, respawn) {
                this.$initialize();
                this.Jumped = jumped;
                this.Teleported = teleported;
                this.ArrowLeft = arrowLeft;
                this.ArrowRight = arrowRight;
                this.ArrowUp = arrowUp;
                this.ArrowDown = arrowDown;
                this.Respawn = respawn;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.MusicPlayer", {
        fields: {
            /**
             * The current music being played, or null if no music is playing.
             This may not be the same as intendedMusic since it takes a while
             to fade out an existing music and fade in a new one
             *
             * @instance
             * @private
             * @memberof TuxPlanetSpeedrunAnyPercentLibrary.MusicPlayer
             * @type ?TuxPlanetSpeedrunAnyPercentLibrary.GameMusic
             */
            currentMusic: null,
            /**
             * The intended music that should eventually play, or null if we should fade out all music
             *
             * @instance
             * @private
             * @memberof TuxPlanetSpeedrunAnyPercentLibrary.MusicPlayer
             * @type ?TuxPlanetSpeedrunAnyPercentLibrary.GameMusic
             */
            intendedMusic: null,
            /**
             * From 0 to 100 * 1024 (both inclusive)
             Normally, this value is 100 * 1024.
             However, when fading in/out, this value will decrease to represent the drop in music volume.
             *
             * @instance
             * @private
             * @memberof TuxPlanetSpeedrunAnyPercentLibrary.MusicPlayer
             * @type number
             */
            currentFadeInAndOutVolumeMillis: 0,
            /**
             * From 0 to 100.
             For this.currentMusic, the intended volume at which the music should be played.
             We allow this to be set since we might want to play a particular music at a different
             volume depending on circumstances (e.g. maybe the music should be played softer when
             the game is paused)
             *
             * @instance
             * @private
             * @memberof TuxPlanetSpeedrunAnyPercentLibrary.MusicPlayer
             * @type number
             */
            currentMusicVolume: 0,
            /**
             * From 0 to 100.
             For this.intendedMusic, the intended volume at which the music should be played.
             *
             * @instance
             * @private
             * @memberof TuxPlanetSpeedrunAnyPercentLibrary.MusicPlayer
             * @type number
             */
            intendedMusicVolume: 0,
            elapsedMicrosPerFrame: 0
        },
        ctors: {
            ctor: function (elapsedMicrosPerFrame) {
                this.$initialize();
                this.currentMusic = null;
                this.intendedMusic = null;
                this.currentFadeInAndOutVolumeMillis = 0;
                this.currentMusicVolume = 0;
                this.intendedMusicVolume = 0;

                this.elapsedMicrosPerFrame = elapsedMicrosPerFrame;
            }
        },
        methods: {
            DecreaseCurrentFadeInAndOutVolumeMillis: function () {
                this.currentFadeInAndOutVolumeMillis = (this.currentFadeInAndOutVolumeMillis - ((Bridge.Int.div(this.elapsedMicrosPerFrame, 2)) | 0)) | 0;
                if (this.currentFadeInAndOutVolumeMillis < 0) {
                    this.currentFadeInAndOutVolumeMillis = 0;
                }
            },
            IncreaseCurrentFadeInAndOutVolumeMillis: function () {
                this.currentFadeInAndOutVolumeMillis = (this.currentFadeInAndOutVolumeMillis + ((Bridge.Int.div(this.elapsedMicrosPerFrame, 2)) | 0)) | 0;
                if (this.currentFadeInAndOutVolumeMillis > 102400) {
                    this.currentFadeInAndOutVolumeMillis = 102400;
                }
            },
            ProcessFrame: function () {
                if (this.intendedMusic == null) {
                    if (this.currentMusic != null) {
                        this.DecreaseCurrentFadeInAndOutVolumeMillis();
                        if (this.currentFadeInAndOutVolumeMillis === 0) {
                            this.currentMusic = null;
                        }
                    }

                    return;
                }

                if (this.currentMusic == null) {
                    this.currentMusic = this.intendedMusic;
                    this.currentFadeInAndOutVolumeMillis = 0;
                    this.currentMusicVolume = this.intendedMusicVolume;
                    return;
                }

                if (System.Nullable.getValue(this.currentMusic) !== System.Nullable.getValue(this.intendedMusic)) {
                    this.DecreaseCurrentFadeInAndOutVolumeMillis();
                    if (this.currentFadeInAndOutVolumeMillis === 0) {
                        this.currentMusic = null;
                    }
                    return;
                }

                if (this.currentMusicVolume < this.intendedMusicVolume) {
                    var delta = (Bridge.Int.div(this.elapsedMicrosPerFrame, 5000)) | 0;
                    if (delta === 0) {
                        delta = 1;
                    }
                    this.currentMusicVolume = (this.currentMusicVolume + delta) | 0;
                    if (this.currentMusicVolume > this.intendedMusicVolume) {
                        this.currentMusicVolume = this.intendedMusicVolume;
                    }
                }

                if (this.currentMusicVolume > this.intendedMusicVolume) {
                    var delta1 = (Bridge.Int.div(this.elapsedMicrosPerFrame, 5000)) | 0;
                    if (delta1 === 0) {
                        delta1 = 1;
                    }
                    this.currentMusicVolume = (this.currentMusicVolume - delta1) | 0;
                    if (this.currentMusicVolume < this.intendedMusicVolume) {
                        this.currentMusicVolume = this.intendedMusicVolume;
                    }
                }

                this.IncreaseCurrentFadeInAndOutVolumeMillis();
            },
            SetMusic: function (music, volume) {
                this.intendedMusic = music;
                this.intendedMusicVolume = volume;
            },
            StopMusic: function () {
                this.intendedMusic = null;
            },
            RenderMusic: function (musicOutput, userVolume) {
                if (this.currentMusic != null) {
                    musicOutput.DTLibrary$IMusicOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$PlayMusic(System.Nullable.getValue(this.currentMusic), ((Bridge.Int.div(Bridge.Int.mul(((((Bridge.Int.div(Bridge.Int.mul(this.currentFadeInAndOutVolumeMillis, this.currentMusicVolume), 100)) | 0)) >> 10), userVolume), 100)) | 0));
                } else {
                    musicOutput.DTLibrary$IMusicOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$StopMusic();
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.MusicVolumePicker", {
        fields: {
            _xPos: 0,
            _yPos: 0,
            _currentVolume: 0,
            _unmuteVolume: 0,
            _isDraggingVolumeSlider: false,
            _color: 0
        },
        ctors: {
            ctor: function (xPos, yPos, initialVolume, color) {
                this.$initialize();
                this._xPos = xPos;
                this._yPos = yPos;

                this._currentVolume = initialVolume;
                this._unmuteVolume = this._currentVolume;

                this._isDraggingVolumeSlider = false;

                this._color = color;
            }
        },
        methods: {
            ProcessFrame: function (mouseInput, previousMouseInput) {
                var mouseX = mouseInput.DTLibrary$IMouse$GetX();
                var mouseY = mouseInput.DTLibrary$IMouse$GetY();

                if (mouseInput.DTLibrary$IMouse$IsLeftMouseButtonPressed() && !previousMouseInput.DTLibrary$IMouse$IsLeftMouseButtonPressed() && this._xPos <= mouseX && mouseX <= ((this._xPos + 40) | 0) && this._yPos <= mouseY && mouseY <= ((this._yPos + 50) | 0)) {
                    if (this._currentVolume === 0) {
                        this._currentVolume = this._unmuteVolume === 0 ? TuxPlanetSpeedrunAnyPercentLibrary.GlobalState.DEFAULT_VOLUME : this._unmuteVolume;
                        this._unmuteVolume = this._currentVolume;
                    } else {
                        this._unmuteVolume = this._currentVolume;
                        this._currentVolume = 0;
                    }
                }

                if (mouseInput.DTLibrary$IMouse$IsLeftMouseButtonPressed() && !previousMouseInput.DTLibrary$IMouse$IsLeftMouseButtonPressed() && ((this._xPos + 50) | 0) <= mouseX && mouseX <= ((this._xPos + 150) | 0) && ((this._yPos + 10) | 0) <= mouseY && mouseY <= ((this._yPos + 40) | 0)) {
                    this._isDraggingVolumeSlider = true;
                }

                if (this._isDraggingVolumeSlider && mouseInput.DTLibrary$IMouse$IsLeftMouseButtonPressed()) {
                    var volume = (mouseX - (((this._xPos + 50) | 0))) | 0;
                    if (volume < 0) {
                        volume = 0;
                    }
                    if (volume > 100) {
                        volume = 100;
                    }

                    this._currentVolume = volume;
                    this._unmuteVolume = this._currentVolume;
                }

                if (!mouseInput.DTLibrary$IMouse$IsLeftMouseButtonPressed()) {
                    this._isDraggingVolumeSlider = false;
                }
            },
            /**
             * Returns a number from 0 to 100 (both inclusive)
             *
             * @instance
             * @public
             * @this TuxPlanetSpeedrunAnyPercentLibrary.MusicVolumePicker
             * @memberof TuxPlanetSpeedrunAnyPercentLibrary.MusicVolumePicker
             * @return  {number}
             */
            GetCurrentMusicVolume: function () {
                return this._currentVolume;
            },
            Render: function (displayOutput) {
                var image = new TuxPlanetSpeedrunAnyPercentLibrary.GameImage();
                var color;

                switch (this._color) {
                    case TuxPlanetSpeedrunAnyPercentLibrary.SoundAndMusicVolumePicker.Color.Black: 
                        image = this._currentVolume > 0 ? TuxPlanetSpeedrunAnyPercentLibrary.GameImage.MusicOn_Black : TuxPlanetSpeedrunAnyPercentLibrary.GameImage.MusicOff_Black;
                        color = DTLibrary.DTColor.Black();
                        break;
                    case TuxPlanetSpeedrunAnyPercentLibrary.SoundAndMusicVolumePicker.Color.White: 
                        image = this._currentVolume > 0 ? TuxPlanetSpeedrunAnyPercentLibrary.GameImage.MusicOn_White : TuxPlanetSpeedrunAnyPercentLibrary.GameImage.MusicOff_White;
                        color = DTLibrary.DTColor.White();
                        break;
                    default: 
                        throw new System.Exception();
                }

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImage(image, this._xPos, this._yPos);

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle(((this._xPos + 50) | 0), ((this._yPos + 10) | 0), 101, 31, color, false);

                if (this._currentVolume > 0) {
                    displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle(((this._xPos + 50) | 0), ((this._yPos + 10) | 0), this._currentVolume, 31, color, true);
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.Overworld", {
        statics: {
            methods: {
                /**
                 * Can possibly throw DTDeserializationException
                 *
                 * @static
                 * @public
                 * @this TuxPlanetSpeedrunAnyPercentLibrary.Overworld
                 * @memberof TuxPlanetSpeedrunAnyPercentLibrary.Overworld
                 * @param   {DTLibrary.ByteList.Iterator}                     iterator
                 * @return  {TuxPlanetSpeedrunAnyPercentLibrary.Overworld}
                 */
                TryDeserialize: function (iterator) {
                    var windowWidth = iterator.TryPopInt();
                    var windowHeight = iterator.TryPopInt();

                    var tuxXIndex = iterator.TryPopInt();
                    var tuxYIndex = iterator.TryPopInt();
                    var tuxXMibi = iterator.TryPopInt();
                    var tuxYMibi = iterator.TryPopInt();

                    var elapsedMicros = iterator.TryPopInt();

                    var intSet = iterator.TryPopIntSet();

                    if (intSet == null) {
                        throw new DTLibrary.DTDeserializationException();
                    }

                    var completedLevels = new (System.Collections.Generic.HashSet$1(TuxPlanetSpeedrunAnyPercentLibrary.Level)).$ctor1(System.Linq.Enumerable.from(intSet).select(function (x) {
                            return TuxPlanetSpeedrunAnyPercentLibrary.LevelUtil.FromSerializableInt(x);
                        }));

                    var rngSeed = iterator.TryPopString();

                    var pathCount = iterator.TryPopInt();

                    var path = new (System.Collections.Generic.List$1(System.Tuple$2(System.Int32,System.Int32))).ctor();

                    for (var i = 0; i < pathCount; i = (i + 1) | 0) {
                        var x = iterator.TryPopInt();
                        var y = iterator.TryPopInt();
                        path.add({ Item1: x, Item2: y });
                    }

                    var reachableTilesCount = iterator.TryPopInt();

                    var reachableTiles = new (System.Collections.Generic.HashSet$1(System.Tuple$2(System.Int32,System.Int32))).$ctor3(new DTLibrary.IntTupleEqualityComparer());

                    for (var i1 = 0; i1 < reachableTilesCount; i1 = (i1 + 1) | 0) {
                        var x1 = iterator.TryPopInt();
                        var y1 = iterator.TryPopInt();
                        reachableTiles.add({ Item1: x1, Item2: y1 });
                    }

                    return new TuxPlanetSpeedrunAnyPercentLibrary.Overworld.$ctor1(windowWidth, windowHeight, TuxPlanetSpeedrunAnyPercentLibrary.OverworldMap.GenerateOverworldMap(windowWidth, windowHeight, rngSeed), completedLevels, reachableTiles, tuxXIndex, tuxYIndex, tuxXMibi, tuxYMibi, path, elapsedMicros);
                }
            }
        },
        fields: {
            tuxXIndex: 0,
            tuxYIndex: 0,
            tuxXMibi: 0,
            tuxYMibi: 0,
            path: null,
            completedLevels: null,
            reachableTiles: null,
            overworldMap: null,
            windowWidth: 0,
            windowHeight: 0,
            elapsedMicros: 0
        },
        ctors: {
            ctor: function (windowWidth, windowHeight, rngSeed, completedLevels) {
                this.$initialize();
                this.windowWidth = windowWidth;
                this.windowHeight = windowHeight;

                this.overworldMap = TuxPlanetSpeedrunAnyPercentLibrary.OverworldMap.GenerateOverworldMap(windowWidth, windowHeight, rngSeed);

                this.tuxXIndex = this.overworldMap.StartingLocation.Item1;
                this.tuxYIndex = this.overworldMap.StartingLocation.Item2;
                this.tuxXMibi = (((Bridge.Int.mul(this.tuxXIndex, TuxPlanetSpeedrunAnyPercentLibrary.OverworldMap.TILE_WIDTH_IN_PIXELS) + 24) | 0)) << 10;
                this.tuxYMibi = (((Bridge.Int.mul(this.tuxYIndex, TuxPlanetSpeedrunAnyPercentLibrary.OverworldMap.TILE_HEIGHT_IN_PIXELS) + 24) | 0)) << 10;
                this.path = new (System.Collections.Generic.List$1(System.Tuple$2(System.Int32,System.Int32))).ctor();
                this.completedLevels = new (System.Collections.Generic.HashSet$1(TuxPlanetSpeedrunAnyPercentLibrary.Level)).$ctor1(completedLevels);
                this.reachableTiles = TuxPlanetSpeedrunAnyPercentLibrary.OverworldUtil.GetReachableTiles(this.overworldMap.OverworldGameMap, System.Linq.Enumerable.from(completedLevels).toList(TuxPlanetSpeedrunAnyPercentLibrary.Level));

                this.elapsedMicros = 0;
            },
            $ctor1: function (windowWidth, windowHeight, overworldMap, completedLevels, reachableTiles, tuxXIndex, tuxYIndex, tuxXMibi, tuxYMibi, path, elapsedMicros) {
                this.$initialize();
                this.windowWidth = windowWidth;
                this.windowHeight = windowHeight;
                this.overworldMap = overworldMap;
                this.completedLevels = new (System.Collections.Generic.HashSet$1(TuxPlanetSpeedrunAnyPercentLibrary.Level)).$ctor1(completedLevels);
                this.reachableTiles = new (System.Collections.Generic.HashSet$1(System.Tuple$2(System.Int32,System.Int32))).$ctor2(reachableTiles, new DTLibrary.IntTupleEqualityComparer());
                this.tuxXIndex = tuxXIndex;
                this.tuxYIndex = tuxYIndex;
                this.tuxXMibi = tuxXMibi;
                this.tuxYMibi = tuxYMibi;
                this.path = new (System.Collections.Generic.List$1(System.Tuple$2(System.Int32,System.Int32))).$ctor1(path);

                this.elapsedMicros = elapsedMicros;
            }
        },
        methods: {
            CompleteLevel: function (level) {
                var newCompletedLevels = new (System.Collections.Generic.HashSet$1(TuxPlanetSpeedrunAnyPercentLibrary.Level)).$ctor1(this.completedLevels);

                newCompletedLevels.add(level);

                return new TuxPlanetSpeedrunAnyPercentLibrary.Overworld.$ctor1(this.windowWidth, this.windowHeight, this.overworldMap, newCompletedLevels, TuxPlanetSpeedrunAnyPercentLibrary.OverworldUtil.GetReachableTiles(this.overworldMap.OverworldGameMap, System.Linq.Enumerable.from(newCompletedLevels).toList(TuxPlanetSpeedrunAnyPercentLibrary.Level)), this.tuxXIndex, this.tuxYIndex, this.tuxXMibi, this.tuxYMibi, this.path, this.elapsedMicros);
            },
            ProcessFrame: function (keyboardInput, previousKeyboardInput, windowWidth, windowHeight, elapsedMicrosPerFrame) {
                var selectedLevel = null;

                var newPath = new (System.Collections.Generic.List$1(System.Tuple$2(System.Int32,System.Int32))).$ctor1(this.path);

                if (newPath.Count === 0) {
                    if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Z) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Z) || keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Space) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Space) || keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Enter) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Enter)) {
                        selectedLevel = this.overworldMap.GetLevel(this.tuxXIndex, this.tuxYIndex);
                    }

                    if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.RightArrow)) {
                        var p = TuxPlanetSpeedrunAnyPercentLibrary.OverworldUtil.GetPath(this.overworldMap.OverworldGameMap, System.Linq.Enumerable.from(this.reachableTiles).toList(System.Tuple$2(System.Int32,System.Int32)), { Item1: this.tuxXIndex, Item2: this.tuxYIndex }, { Item1: 1, Item2: 0 });

                        if (p.Count > 0) {
                            newPath = p;
                        }
                    }
                    if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.LeftArrow)) {
                        var p1 = TuxPlanetSpeedrunAnyPercentLibrary.OverworldUtil.GetPath(this.overworldMap.OverworldGameMap, System.Linq.Enumerable.from(this.reachableTiles).toList(System.Tuple$2(System.Int32,System.Int32)), { Item1: this.tuxXIndex, Item2: this.tuxYIndex }, { Item1: -1, Item2: 0 });

                        if (p1.Count > 0) {
                            newPath = p1;
                        }
                    }
                    if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.UpArrow)) {
                        var p2 = TuxPlanetSpeedrunAnyPercentLibrary.OverworldUtil.GetPath(this.overworldMap.OverworldGameMap, System.Linq.Enumerable.from(this.reachableTiles).toList(System.Tuple$2(System.Int32,System.Int32)), { Item1: this.tuxXIndex, Item2: this.tuxYIndex }, { Item1: 0, Item2: 1 });

                        if (p2.Count > 0) {
                            newPath = p2;
                        }
                    }
                    if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.DownArrow)) {
                        var p3 = TuxPlanetSpeedrunAnyPercentLibrary.OverworldUtil.GetPath(this.overworldMap.OverworldGameMap, System.Linq.Enumerable.from(this.reachableTiles).toList(System.Tuple$2(System.Int32,System.Int32)), { Item1: this.tuxXIndex, Item2: this.tuxYIndex }, { Item1: 0, Item2: -1 });

                        if (p3.Count > 0) {
                            newPath = p3;
                        }
                    }
                }

                var amountOfMibipixelsToWalk = (Bridge.Int.div(elapsedMicrosPerFrame, 3)) | 0;

                var newTuxXMibi = this.tuxXMibi;
                var newTuxYMibi = this.tuxYMibi;

                var newTuxXIndex = this.tuxXIndex;
                var newTuxYIndex = this.tuxYIndex;

                while (true) {
                    if (amountOfMibipixelsToWalk <= 0) {
                        break;
                    }

                    if (newPath.Count === 0) {
                        break;
                    }

                    var nextLocation = newPath.getItem(0);

                    var nextLocationXMibi = (((Bridge.Int.mul(nextLocation.Item1, TuxPlanetSpeedrunAnyPercentLibrary.OverworldMap.TILE_WIDTH_IN_PIXELS) + 24) | 0)) << 10;
                    var nextLocationYMibi = (((Bridge.Int.mul(nextLocation.Item2, TuxPlanetSpeedrunAnyPercentLibrary.OverworldMap.TILE_HEIGHT_IN_PIXELS) + 24) | 0)) << 10;

                    var deltaX = Math.abs(((newTuxXMibi - nextLocationXMibi) | 0));

                    if (deltaX > amountOfMibipixelsToWalk) {
                        var isMovingRight = nextLocationXMibi > newTuxXMibi;
                        newTuxXMibi = (newTuxXMibi + (isMovingRight ? amountOfMibipixelsToWalk : ((-amountOfMibipixelsToWalk) | 0))) | 0;
                        amountOfMibipixelsToWalk = 0;
                        continue;
                    }

                    newTuxXMibi = nextLocationXMibi;
                    amountOfMibipixelsToWalk = (amountOfMibipixelsToWalk - deltaX) | 0;

                    var deltaY = Math.abs(((newTuxYMibi - nextLocationYMibi) | 0));

                    if (deltaY > amountOfMibipixelsToWalk) {
                        var isMovingUp = nextLocationYMibi > newTuxYMibi;
                        newTuxYMibi = (newTuxYMibi + (isMovingUp ? amountOfMibipixelsToWalk : ((-amountOfMibipixelsToWalk) | 0))) | 0;
                        amountOfMibipixelsToWalk = 0;
                        continue;
                    }

                    newTuxYMibi = nextLocationYMibi;
                    amountOfMibipixelsToWalk = (amountOfMibipixelsToWalk - deltaY) | 0;

                    newTuxXIndex = newPath.getItem(0).Item1;
                    newTuxYIndex = newPath.getItem(0).Item2;

                    newPath = System.Linq.Enumerable.from(newPath).skip(1).toList(System.Tuple$2(System.Int32,System.Int32));
                }

                var newElapsedMicros = (this.elapsedMicros + elapsedMicrosPerFrame) | 0;
                if (newElapsedMicros > 2000000000) {
                    newElapsedMicros = 1;
                }

                return new TuxPlanetSpeedrunAnyPercentLibrary.Overworld.Result(new TuxPlanetSpeedrunAnyPercentLibrary.Overworld.$ctor1(this.windowWidth, this.windowHeight, this.overworldMap, this.completedLevels, this.reachableTiles, newTuxXIndex, newTuxYIndex, newTuxXMibi, newTuxYMibi, newPath, newElapsedMicros), selectedLevel);
            },
            Render: function (displayOutput) {
                var cameraXCenter = this.tuxXMibi >> 10;
                var cameraYCenter = this.tuxYMibi >> 10;

                if (cameraXCenter < ((Bridge.Int.div(this.windowWidth, 2)) | 0)) {
                    cameraXCenter = (Bridge.Int.div(this.windowWidth, 2)) | 0;
                }
                if (cameraXCenter > ((this.overworldMap.GetMapWidthInPixels() - ((Bridge.Int.div(this.windowWidth, 2)) | 0)) | 0)) {
                    cameraXCenter = (this.overworldMap.GetMapWidthInPixels() - ((Bridge.Int.div(this.windowWidth, 2)) | 0)) | 0;
                }
                if (cameraYCenter < ((Bridge.Int.div(this.windowHeight, 2)) | 0)) {
                    cameraYCenter = (Bridge.Int.div(this.windowHeight, 2)) | 0;
                }
                if (cameraYCenter > ((this.overworldMap.GetMapHeightInPixels() - ((Bridge.Int.div(this.windowHeight, 2)) | 0)) | 0)) {
                    cameraYCenter = (this.overworldMap.GetMapHeightInPixels() - ((Bridge.Int.div(this.windowHeight, 2)) | 0)) | 0;
                }

                var translatedDisplayOutput = new (DTLibrary.TranslatedDisplayOutput$2(TuxPlanetSpeedrunAnyPercentLibrary.GameImage,TuxPlanetSpeedrunAnyPercentLibrary.GameFont))(displayOutput, ((-(((cameraXCenter - ((Bridge.Int.div(this.windowWidth, 2)) | 0)) | 0))) | 0), ((-(((cameraYCenter - ((Bridge.Int.div(this.windowHeight, 2)) | 0)) | 0))) | 0));

                this.overworldMap.Render(translatedDisplayOutput, new (System.Collections.Generic.HashSet$1(TuxPlanetSpeedrunAnyPercentLibrary.Level)).$ctor1(this.completedLevels));

                translatedDisplayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(TuxPlanetSpeedrunAnyPercentLibrary.GameImage.TuxOverworld, System.Array.getCount(this.path, System.Tuple$2(System.Int32,System.Int32)) > 0 ? Bridge.Int.mul(((((Bridge.Int.div(this.elapsedMicros, 200000)) | 0)) % 4), 14) : 0, 0, 14, 17, (((this.tuxXMibi >> 10) - 21) | 0), (((((this.tuxYMibi >> 10) - 25) | 0) + 15) | 0), 0, 384);
            },
            Serialize: function (list) {
                var $t, $t1;
                list.AddInt(this.windowWidth);
                list.AddInt(this.windowHeight);

                list.AddInt(this.tuxXIndex);
                list.AddInt(this.tuxYIndex);
                list.AddInt(this.tuxXMibi);
                list.AddInt(this.tuxYMibi);

                list.AddInt(this.elapsedMicros);

                list.AddIntSet(new (System.Collections.Generic.HashSet$1(System.Int32)).$ctor1(System.Linq.Enumerable.from(this.completedLevels).select(function (x) {
                        return TuxPlanetSpeedrunAnyPercentLibrary.LevelUtil.ToSerializableInt(x);
                    })));

                list.AddString(this.overworldMap.RngSeed);

                list.AddInt(System.Array.getCount(this.path, System.Tuple$2(System.Int32,System.Int32)));

                $t = Bridge.getEnumerator(this.path, System.Tuple$2(System.Int32,System.Int32));
                try {
                    while ($t.moveNext()) {
                        var x = $t.Current;
                        list.AddInt(x.Item1);
                        list.AddInt(x.Item2);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }

                list.AddInt(this.reachableTiles.Count);

                $t1 = Bridge.getEnumerator(this.reachableTiles);
                try {
                    while ($t1.moveNext()) {
                        var x1 = $t1.Current;
                        list.AddInt(x1.Item1);
                        list.AddInt(x1.Item2);
                    }
                } finally {
                    if (Bridge.is($t1, System.IDisposable)) {
                        $t1.System$IDisposable$Dispose();
                    }
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.Overworld.Result", {
        $kind: "nested class",
        fields: {
            Overworld: null,
            SelectedLevel: null
        },
        ctors: {
            ctor: function (overworld, selectedLevel) {
                this.$initialize();
                this.Overworld = overworld;
                this.SelectedLevel = selectedLevel;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap", {
        statics: {
            methods: {
                GenerateOverworldGameMap: function (windowWidth, windowHeight, random) {
                    var tilemap = TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMapGenerator.GenerateOverworldGameMapTileArray(windowWidth, windowHeight, random);

                    return new TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap(tilemap);
                }
            }
        },
        fields: {
            Tilemap: null,
            StartingLocation: null
        },
        ctors: {
            ctor: function (tilemap) {
                var $t, $t1;
                this.$initialize();
                var list = new (System.Collections.Generic.List$1(System.Collections.Generic.IReadOnlyList$1(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile))).ctor();

                for (var i = 0; i < tilemap.length; i = (i + 1) | 0) {
                    list.add(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile)).$ctor1(tilemap[System.Array.index(i, tilemap)]));
                }

                this.Tilemap = list;
                this.StartingLocation = null;

                for (var i1 = 0; i1 < tilemap.length; i1 = (i1 + 1) | 0) {
                    for (var j = 0; j < tilemap[System.Array.index(i1, tilemap)].length; j = (j + 1) | 0) {
                        if (($t = tilemap[System.Array.index(i1, tilemap)])[System.Array.index(j, $t)].Type === TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.TileType.Level && System.Nullable.getValue(($t1 = tilemap[System.Array.index(i1, tilemap)])[System.Array.index(j, $t1)].Level) === TuxPlanetSpeedrunAnyPercentLibrary.Level.Level1) {
                            this.StartingLocation = { Item1: i1, Item2: j };
                            break;
                        }
                    }

                    if (this.StartingLocation != null) {
                        break;
                    }
                }

                if (this.StartingLocation == null) {
                    throw new System.Exception();
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile", {
        $kind: "nested class",
        fields: {
            Type: 0,
            Level: null
        },
        ctors: {
            ctor: function (type, level) {
                this.$initialize();
                this.Type = type;
                this.Level = level;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.TileType", {
        $kind: "nested enum",
        statics: {
            fields: {
                Path: 0,
                Level: 1,
                NonPath: 2
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMapGenerator", {
        statics: {
            methods: {
                GenerateOverworldGameMapTileArray: function (windowWidth, windowHeight, random) {
                    var $t, $t1, $t2, $t3, $t4, $t5, $t6, $t7;
                    var path = new (System.Collections.Generic.List$1(System.Tuple$2(System.Int32,System.Int32))).ctor();

                    path.add({ Item1: 0, Item2: 0 });

                    path = new (System.Collections.Generic.List$1(System.Tuple$2(System.Int32,System.Int32))).$ctor1(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMapGenerator.GeneratePathHelper(path, random));

                    var minX = null;
                    var minY = null;

                    $t = Bridge.getEnumerator(path);
                    try {
                        while ($t.moveNext()) {
                            var tile = $t.Current;
                            if (minX == null || System.Nullable.getValue(minX) > tile.Item1) {
                                minX = tile.Item1;
                            }
                            if (minY == null || System.Nullable.getValue(minY) > tile.Item2) {
                                minY = tile.Item2;
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    var padding = 2;

                    path = System.Linq.Enumerable.from(path).select(function (tile1) {
                            return { Item1: ((((tile1.Item1 - System.Nullable.getValue(minX)) | 0) + padding) | 0), Item2: ((((tile1.Item2 - System.Nullable.getValue(minY)) | 0) + padding) | 0) };
                        }).toList(System.Tuple$2(System.Int32,System.Int32));

                    var numberOfColumns = Math.max(((((System.Linq.Enumerable.from(path).select(function (tile1) {
                            return tile1.Item1;
                        }).max() + 1) | 0) + padding) | 0), ((((Bridge.Int.div(windowWidth, TuxPlanetSpeedrunAnyPercentLibrary.OverworldMap.TILE_WIDTH_IN_PIXELS)) | 0) + 1) | 0));
                    var numberOfRows = Math.max(((((System.Linq.Enumerable.from(path).select(function (tile1) {
                            return tile1.Item2;
                        }).max() + 1) | 0) + padding) | 0), ((((Bridge.Int.div(windowHeight, TuxPlanetSpeedrunAnyPercentLibrary.OverworldMap.TILE_HEIGHT_IN_PIXELS)) | 0) + 1) | 0));

                    var tilemap = System.Array.init(numberOfColumns, null, System.Array.type(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile));

                    for (var i = 0; i < tilemap.length; i = (i + 1) | 0) {
                        tilemap[System.Array.index(i, tilemap)] = System.Array.init(numberOfRows, null, TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile);

                        for (var j = 0; j < tilemap[System.Array.index(i, tilemap)].length; j = (j + 1) | 0) {
                            ($t1 = tilemap[System.Array.index(i, tilemap)])[System.Array.index(j, $t1)] = new TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.TileType.NonPath, null);
                        }
                    }

                    for (var i1 = 0; i1 < path.Count; i1 = (i1 + 1) | 0) {
                        ($t2 = tilemap[System.Array.index(path.getItem(i1).Item1, tilemap)])[System.Array.index(path.getItem(i1).Item2, $t2)] = new TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.TileType.Path, null);
                    }

                    var level1Index = 0;
                    var level2Index = (10 + random.DTLibrary$IDTRandom$NextInt(4)) | 0;

                    var level5Index = 49;
                    var level4Index = (35 + random.DTLibrary$IDTRandom$NextInt(4)) | 0;

                    var level3Index = (((((Bridge.Int.div((((level2Index + level4Index) | 0)), 2)) | 0) + random.DTLibrary$IDTRandom$NextInt(4)) | 0) - 2) | 0;

                    ($t3 = tilemap[System.Array.index(path.getItem(level1Index).Item1, tilemap)])[System.Array.index(path.getItem(level1Index).Item2, $t3)] = new TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.TileType.Level, TuxPlanetSpeedrunAnyPercentLibrary.Level.Level1);
                    ($t4 = tilemap[System.Array.index(path.getItem(level2Index).Item1, tilemap)])[System.Array.index(path.getItem(level2Index).Item2, $t4)] = new TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.TileType.Level, TuxPlanetSpeedrunAnyPercentLibrary.Level.Level2);
                    ($t5 = tilemap[System.Array.index(path.getItem(level3Index).Item1, tilemap)])[System.Array.index(path.getItem(level3Index).Item2, $t5)] = new TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.TileType.Level, TuxPlanetSpeedrunAnyPercentLibrary.Level.Level3);
                    ($t6 = tilemap[System.Array.index(path.getItem(level4Index).Item1, tilemap)])[System.Array.index(path.getItem(level4Index).Item2, $t6)] = new TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.TileType.Level, TuxPlanetSpeedrunAnyPercentLibrary.Level.Level4);
                    ($t7 = tilemap[System.Array.index(path.getItem(level5Index).Item1, tilemap)])[System.Array.index(path.getItem(level5Index).Item2, $t7)] = new TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.TileType.Level, TuxPlanetSpeedrunAnyPercentLibrary.Level.Level5);

                    return tilemap;
                },
                GeneratePathHelper: function (path, random) {
                    var $t, $t1;
                    if (System.Array.getCount(path, System.Tuple$2(System.Int32,System.Int32)) === 50) {
                        return new (System.Collections.Generic.List$1(System.Tuple$2(System.Int32,System.Int32))).$ctor1(path);
                    }

                    var x = System.Array.getItem(path, ((System.Array.getCount(path, System.Tuple$2(System.Int32,System.Int32)) - 1) | 0), System.Tuple$2(System.Int32,System.Int32)).Item1;
                    var y = System.Array.getItem(path, ((System.Array.getCount(path, System.Tuple$2(System.Int32,System.Int32)) - 1) | 0), System.Tuple$2(System.Int32,System.Int32)).Item2;

                    var occupiedSpaces = new (System.Collections.Generic.HashSet$1(System.Tuple$2(System.Int32,System.Int32))).$ctor2(path, new DTLibrary.IntTupleEqualityComparer());

                    var potentialNextSteps = function (_o1) {
                            _o1.add({ Item1: ((x - 1) | 0), Item2: y });
                            _o1.add({ Item1: ((x + 1) | 0), Item2: y });
                            _o1.add({ Item1: x, Item2: ((y - 1) | 0) });
                            _o1.add({ Item1: x, Item2: ((y + 1) | 0) });
                            return _o1;
                        }(new (System.Collections.Generic.List$1(System.Tuple$2(System.Int32,System.Int32))).ctor());
                    DTLibrary.ListUtil.Shuffle(System.Tuple$2(System.Int32,System.Int32), potentialNextSteps, random);

                    $t = Bridge.getEnumerator(potentialNextSteps);
                    try {
                        while ($t.moveNext()) {
                            var potentialNextStep = { v : $t.Current };
                            if (occupiedSpaces.contains(potentialNextStep.v)) {
                                continue;
                            }

                            var adjacentSpaces = (function ($me, potentialNextStep) {
                                    return function (_o2) {
                                        _o2.add({ Item1: ((potentialNextStep.v.Item1 - 1) | 0), Item2: ((potentialNextStep.v.Item2 - 1) | 0) });
                                        _o2.add({ Item1: ((potentialNextStep.v.Item1 - 1) | 0), Item2: potentialNextStep.v.Item2 });
                                        _o2.add({ Item1: ((potentialNextStep.v.Item1 - 1) | 0), Item2: ((potentialNextStep.v.Item2 + 1) | 0) });
                                        _o2.add({ Item1: potentialNextStep.v.Item1, Item2: ((potentialNextStep.v.Item2 - 1) | 0) });
                                        _o2.add({ Item1: potentialNextStep.v.Item1, Item2: ((potentialNextStep.v.Item2 + 1) | 0) });
                                        _o2.add({ Item1: ((potentialNextStep.v.Item1 + 1) | 0), Item2: ((potentialNextStep.v.Item2 - 1) | 0) });
                                        _o2.add({ Item1: ((potentialNextStep.v.Item1 + 1) | 0), Item2: potentialNextStep.v.Item2 });
                                        _o2.add({ Item1: ((potentialNextStep.v.Item1 + 1) | 0), Item2: ((potentialNextStep.v.Item2 + 1) | 0) });
                                        return _o2;
                                    };
                                })(this, potentialNextStep)(new (System.Collections.Generic.List$1(System.Tuple$2(System.Int32,System.Int32))).ctor());

                            var isTooClose = false;

                            $t1 = Bridge.getEnumerator(adjacentSpaces);
                            try {
                                while ($t1.moveNext()) {
                                    var adjacentSpace = $t1.Current;
                                    if (occupiedSpaces.contains(adjacentSpace)) {
                                        if (!Bridge.objectEquals(adjacentSpace, System.Array.getItem(path, ((System.Array.getCount(path, System.Tuple$2(System.Int32,System.Int32)) - 1) | 0), System.Tuple$2(System.Int32,System.Int32)))) {
                                            if (System.Array.getCount(path, System.Tuple$2(System.Int32,System.Int32)) > 1 && !Bridge.objectEquals(adjacentSpace, System.Array.getItem(path, ((System.Array.getCount(path, System.Tuple$2(System.Int32,System.Int32)) - 2) | 0), System.Tuple$2(System.Int32,System.Int32)))) {
                                                isTooClose = true;
                                                break;
                                            }
                                        }
                                    }
                                }
                            } finally {
                                if (Bridge.is($t1, System.IDisposable)) {
                                    $t1.System$IDisposable$Dispose();
                                }
                            }

                            if (isTooClose) {
                                continue;
                            }

                            var newList = new (System.Collections.Generic.List$1(System.Tuple$2(System.Int32,System.Int32))).$ctor1(path);
                            newList.add(potentialNextStep.v);

                            newList = TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMapGenerator.GeneratePathHelper(newList, random);

                            if (newList != null) {
                                return newList;
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    return null;
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.OverworldMap", {
        statics: {
            fields: {
                TILE_WIDTH_IN_PIXELS: 0,
                TILE_HEIGHT_IN_PIXELS: 0
            },
            ctors: {
                init: function () {
                    this.TILE_WIDTH_IN_PIXELS = 48;
                    this.TILE_HEIGHT_IN_PIXELS = 48;
                }
            },
            methods: {
                GenerateOverworldMap: function (windowWidth, windowHeight, rngSeed) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.OverworldMap(windowWidth, windowHeight, rngSeed);
                }
            }
        },
        fields: {
            OverworldGameMap: null,
            pathTilemap: null,
            backgroundTilemap: null,
            RngSeed: null
        },
        props: {
            StartingLocation: {
                get: function () {
                    return this.OverworldGameMap.StartingLocation;
                }
            }
        },
        ctors: {
            ctor: function (windowWidth, windowHeight, rngSeed) {
                this.$initialize();
                var random = new DTLibrary.DTDeterministicRandom.ctor();
                random.DeserializeFromString(rngSeed);

                this.OverworldGameMap = TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.GenerateOverworldGameMap(windowWidth, windowHeight, random);

                var result = TuxPlanetSpeedrunAnyPercentLibrary.OverworldMapGenerator.GenerateSpriteTilemap(this.OverworldGameMap, random);

                this.pathTilemap = TuxPlanetSpeedrunAnyPercentLibrary.ArrayUtil.ShallowCopyTArray(TuxPlanetSpeedrunAnyPercentLibrary.Sprite, result.PathTiles);
                this.backgroundTilemap = TuxPlanetSpeedrunAnyPercentLibrary.ArrayUtil.ShallowCopyTArray(TuxPlanetSpeedrunAnyPercentLibrary.Sprite, result.BackgroundTiles);

                this.RngSeed = rngSeed;
            }
        },
        methods: {
            GetTileType: function (i, j) {
                if (i < 0 || i >= System.Array.getCount(this.OverworldGameMap.Tilemap, System.Collections.Generic.IReadOnlyList$1(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile))) {
                    return TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.TileType.NonPath;
                }

                if (j < 0 || j >= System.Array.getCount(System.Array.getItem(this.OverworldGameMap.Tilemap, i, System.Collections.Generic.IReadOnlyList$1(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile)), TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile)) {
                    return TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.TileType.NonPath;
                }

                return System.Array.getItem(System.Array.getItem(this.OverworldGameMap.Tilemap, i, System.Collections.Generic.IReadOnlyList$1(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile)), j, TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile).Type;
            },
            GetLevel: function (i, j) {
                if (i < 0 || i >= System.Array.getCount(this.OverworldGameMap.Tilemap, System.Collections.Generic.IReadOnlyList$1(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile))) {
                    return null;
                }

                if (j < 0 || j >= System.Array.getCount(System.Array.getItem(this.OverworldGameMap.Tilemap, i, System.Collections.Generic.IReadOnlyList$1(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile)), TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile)) {
                    return null;
                }

                return System.Array.getItem(System.Array.getItem(this.OverworldGameMap.Tilemap, i, System.Collections.Generic.IReadOnlyList$1(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile)), j, TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile).Level;
            },
            GetMapWidthInPixels: function () {
                return Bridge.Int.mul(this.pathTilemap.length, TuxPlanetSpeedrunAnyPercentLibrary.OverworldMap.TILE_WIDTH_IN_PIXELS);
            },
            GetMapHeightInPixels: function () {
                return Bridge.Int.mul(this.pathTilemap[System.Array.index(0, this.pathTilemap)].length, TuxPlanetSpeedrunAnyPercentLibrary.OverworldMap.TILE_HEIGHT_IN_PIXELS);
            },
            Render: function (displayOutput, completedLevels) {
                var $t, $t1;
                var renderX = 0;

                for (var i = 0; i < this.pathTilemap.length; i = (i + 1) | 0) {
                    var renderY = 0;

                    for (var j = 0; j < this.pathTilemap[System.Array.index(i, this.pathTilemap)].length; j = (j + 1) | 0) {
                        var background = ($t = this.backgroundTilemap[System.Array.index(i, this.backgroundTilemap)])[System.Array.index(j, $t)];

                        if (background != null) {
                            displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(background.Image, background.X, background.Y, background.Width, background.Height, renderX, renderY, 0, background.ScalingFactorScaled);
                        }

                        var path = ($t1 = this.pathTilemap[System.Array.index(i, this.pathTilemap)])[System.Array.index(j, $t1)];

                        if (path != null) {
                            displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(path.Image, path.X, path.Y, path.Width, path.Height, renderX, renderY, 0, path.ScalingFactorScaled);
                        }

                        if (System.Array.getItem(System.Array.getItem(this.OverworldGameMap.Tilemap, i, System.Collections.Generic.IReadOnlyList$1(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile)), j, TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile).Type === TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.TileType.Level) {
                            var hasCompletedLevel = completedLevels.contains(System.Nullable.getValue(System.Array.getItem(System.Array.getItem(this.OverworldGameMap.Tilemap, i, System.Collections.Generic.IReadOnlyList$1(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile)), j, TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile).Level));

                            displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(TuxPlanetSpeedrunAnyPercentLibrary.GameImage.LevelIcons, hasCompletedLevel ? 16 : 0, 0, 16, 16, renderX, renderY, 0, 384);
                        }

                        renderY = (renderY + TuxPlanetSpeedrunAnyPercentLibrary.OverworldMap.TILE_HEIGHT_IN_PIXELS) | 0;
                    }

                    renderX = (renderX + TuxPlanetSpeedrunAnyPercentLibrary.OverworldMap.TILE_WIDTH_IN_PIXELS) | 0;
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.OverworldMapGenerator", {
        statics: {
            methods: {
                GenerateSpriteTilemap: function (map, random) {
                    var $t, $t1;
                    var numColumns = System.Array.getCount(map.Tilemap, System.Collections.Generic.IReadOnlyList$1(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile));
                    var numRows = System.Array.getCount(System.Array.getItem(map.Tilemap, 0, System.Collections.Generic.IReadOnlyList$1(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile)), TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile);

                    var pathTilemap = System.Array.init(numColumns, null, System.Array.type(TuxPlanetSpeedrunAnyPercentLibrary.Sprite));

                    for (var i = 0; i < numColumns; i = (i + 1) | 0) {
                        pathTilemap[System.Array.index(i, pathTilemap)] = System.Array.init(numRows, null, TuxPlanetSpeedrunAnyPercentLibrary.Sprite);

                        for (var j = 0; j < numRows; j = (j + 1) | 0) {
                            var spriteX;
                            var spriteY;

                            switch (System.Array.getItem(System.Array.getItem(map.Tilemap, i, System.Collections.Generic.IReadOnlyList$1(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile)), j, TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile).Type) {
                                case TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.TileType.Path: 
                                case TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.TileType.Level: 
                                    var pathOnLeft = i > 0 && System.Array.getItem(System.Array.getItem(map.Tilemap, ((i - 1) | 0), System.Collections.Generic.IReadOnlyList$1(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile)), j, TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile).Type !== TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.TileType.NonPath;
                                    var pathOnRight = i < ((numColumns - 1) | 0) && System.Array.getItem(System.Array.getItem(map.Tilemap, ((i + 1) | 0), System.Collections.Generic.IReadOnlyList$1(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile)), j, TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile).Type !== TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.TileType.NonPath;
                                    var pathOnBottom = j > 0 && System.Array.getItem(System.Array.getItem(map.Tilemap, i, System.Collections.Generic.IReadOnlyList$1(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile)), ((j - 1) | 0), TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile).Type !== TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.TileType.NonPath;
                                    var pathOnTop = j < ((numRows - 1) | 0) && System.Array.getItem(System.Array.getItem(map.Tilemap, i, System.Collections.Generic.IReadOnlyList$1(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile)), ((j + 1) | 0), TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile).Type !== TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.TileType.NonPath;
                                    if (!pathOnLeft && !pathOnRight && !pathOnBottom && !pathOnTop) {
                                        spriteX = 2;
                                        spriteY = 3;
                                    } else if (!pathOnLeft && !pathOnRight && !pathOnBottom && pathOnTop) {
                                        spriteX = 0;
                                        spriteY = 8;
                                    } else if (!pathOnLeft && !pathOnRight && pathOnBottom && !pathOnTop) {
                                        spriteX = 0;
                                        spriteY = 7;
                                    } else if (!pathOnLeft && !pathOnRight && pathOnBottom && pathOnTop) {
                                        spriteX = 2;
                                        spriteY = 4;
                                    } else if (!pathOnLeft && pathOnRight && !pathOnBottom && !pathOnTop) {
                                        spriteX = 1;
                                        spriteY = 7;
                                    } else if (!pathOnLeft && pathOnRight && !pathOnBottom && pathOnTop) {
                                        spriteX = 0;
                                        spriteY = 2;
                                    } else if (!pathOnLeft && pathOnRight && pathOnBottom && !pathOnTop) {
                                        spriteX = 0;
                                        spriteY = 0;
                                    } else if (!pathOnLeft && pathOnRight && pathOnBottom && pathOnTop) {
                                        spriteX = 0;
                                        spriteY = 1;
                                    } else if (pathOnLeft && !pathOnRight && !pathOnBottom && !pathOnTop) {
                                        spriteX = 2;
                                        spriteY = 7;
                                    } else if (pathOnLeft && !pathOnRight && !pathOnBottom && pathOnTop) {
                                        spriteX = 2;
                                        spriteY = 2;
                                    } else if (pathOnLeft && !pathOnRight && pathOnBottom && !pathOnTop) {
                                        spriteX = 2;
                                        spriteY = 0;
                                    } else if (pathOnLeft && !pathOnRight && pathOnBottom && pathOnTop) {
                                        spriteX = 2;
                                        spriteY = 1;
                                    } else if (pathOnLeft && pathOnRight && !pathOnBottom && !pathOnTop) {
                                        spriteX = 2;
                                        spriteY = 3;
                                    } else if (pathOnLeft && pathOnRight && !pathOnBottom && pathOnTop) {
                                        spriteX = 1;
                                        spriteY = 2;
                                    } else if (pathOnLeft && pathOnRight && pathOnBottom && !pathOnTop) {
                                        spriteX = 1;
                                        spriteY = 0;
                                    } else if (pathOnLeft && pathOnRight && pathOnBottom && pathOnTop) {
                                        spriteX = 1;
                                        spriteY = 1;
                                    } else {
                                        throw new System.Exception();
                                    }
                                    break;
                                case TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.TileType.NonPath: 
                                    spriteX = null;
                                    spriteY = null;
                                    break;
                                default: 
                                    throw new System.Exception();
                            }

                            if (spriteX != null) {
                                ($t = pathTilemap[System.Array.index(i, pathTilemap)])[System.Array.index(j, $t)] = new TuxPlanetSpeedrunAnyPercentLibrary.Sprite(TuxPlanetSpeedrunAnyPercentLibrary.GameImage.PathDirt, System.Nullable.getValue(spriteX) << 4, System.Nullable.getValue(spriteY) << 4, 16, 16, 384);
                            } else {
                                ($t1 = pathTilemap[System.Array.index(i, pathTilemap)])[System.Array.index(j, $t1)] = null;
                            }
                        }
                    }

                    return new TuxPlanetSpeedrunAnyPercentLibrary.OverworldMapGenerator.Result(pathTilemap, TuxPlanetSpeedrunAnyPercentLibrary.OverworldMapGenerator.GenerateBackgroundTiles(numColumns, numRows, random));
                },
                GenerateBackgroundTiles: function (numColumns, numRows, random) {
                    var $t;
                    var tilemap = System.Array.init(numColumns, null, System.Array.type(TuxPlanetSpeedrunAnyPercentLibrary.Sprite));

                    for (var i = 0; i < numColumns; i = (i + 1) | 0) {
                        tilemap[System.Array.index(i, tilemap)] = System.Array.init(numRows, null, TuxPlanetSpeedrunAnyPercentLibrary.Sprite);

                        for (var j = 0; j < numRows; j = (j + 1) | 0) {
                            ($t = tilemap[System.Array.index(i, tilemap)])[System.Array.index(j, $t)] = new TuxPlanetSpeedrunAnyPercentLibrary.Sprite(TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Snow, random.DTLibrary$IDTRandom$NextInt(3) << 4, 80, 16, 16, 384);
                        }
                    }

                    return tilemap;
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.OverworldMapGenerator.Result", {
        $kind: "nested class",
        fields: {
            PathTiles: null,
            BackgroundTiles: null
        },
        ctors: {
            ctor: function (pathTiles, backgroundTiles) {
                this.$initialize();
                this.PathTiles = pathTiles;
                this.BackgroundTiles = backgroundTiles;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.OverworldUtil", {
        statics: {
            methods: {
                GetPath: function (overworldGameMap, reachableTiles, currentLocation, directionOfTravel) {
                    var returnValue = new (System.Collections.Generic.List$1(System.Tuple$2(System.Int32,System.Int32))).ctor();

                    var nextTile = { Item1: ((currentLocation.Item1 + directionOfTravel.Item1) | 0), Item2: ((currentLocation.Item2 + directionOfTravel.Item2) | 0) };

                    if (!System.Linq.Enumerable.from(reachableTiles).contains(nextTile, new DTLibrary.IntTupleEqualityComparer())) {
                        return returnValue;
                    }

                    while (true) {
                        returnValue.add(nextTile);

                        if (System.Array.getItem(System.Array.getItem(overworldGameMap.Tilemap, nextTile.Item1, System.Collections.Generic.IReadOnlyList$1(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile)), nextTile.Item2, TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile).Type === TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.TileType.Level) {
                            break;
                        }

                        var possibleNextTiles = function (_o1) {
                                _o1.add({ Item1: ((nextTile.Item1 - 1) | 0), Item2: nextTile.Item2 });
                                _o1.add({ Item1: ((nextTile.Item1 + 1) | 0), Item2: nextTile.Item2 });
                                _o1.add({ Item1: nextTile.Item1, Item2: ((nextTile.Item2 - 1) | 0) });
                                _o1.add({ Item1: nextTile.Item1, Item2: ((nextTile.Item2 + 1) | 0) });
                                return _o1;
                            }(new (System.Collections.Generic.List$1(System.Tuple$2(System.Int32,System.Int32))).ctor());
                        possibleNextTiles = System.Linq.Enumerable.from(possibleNextTiles).where(function (x) {
                                return System.Linq.Enumerable.from(reachableTiles).contains(x, new DTLibrary.IntTupleEqualityComparer());
                            }).where(function (x) {
                            return !System.Linq.Enumerable.from(returnValue).contains(x, new DTLibrary.IntTupleEqualityComparer());
                        }).where(function (x) {
                            return !Bridge.objectEquals(x, currentLocation);
                        }).toList(System.Tuple$2(System.Int32,System.Int32));

                        if (possibleNextTiles.Count !== 1) {
                            break;
                        }

                        nextTile = possibleNextTiles.getItem(0);
                    }

                    return returnValue;
                },
                GetReachableTiles: function (overworldGameMap, completedLevels) {
                    var completedLevelsSet = new (System.Collections.Generic.HashSet$1(TuxPlanetSpeedrunAnyPercentLibrary.Level)).$ctor1(completedLevels);

                    var returnValue = new (System.Collections.Generic.HashSet$1(System.Tuple$2(System.Int32,System.Int32))).$ctor3(new DTLibrary.IntTupleEqualityComparer());

                    var toBeProcessed = new (System.Collections.Generic.Queue$1(System.Tuple$2(System.Int32,System.Int32))).ctor();
                    toBeProcessed.Enqueue(overworldGameMap.StartingLocation);

                    while (toBeProcessed.Count > 0) {
                        var location = toBeProcessed.Dequeue();
                        var x = location.Item1;
                        var y = location.Item2;

                        if (returnValue.contains(location)) {
                            continue;
                        }

                        if (x < 0 || x >= System.Array.getCount(overworldGameMap.Tilemap, System.Collections.Generic.IReadOnlyList$1(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile))) {
                            continue;
                        }
                        if (y < 0 || y >= System.Array.getCount(System.Array.getItem(overworldGameMap.Tilemap, 0, System.Collections.Generic.IReadOnlyList$1(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile)), TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile)) {
                            continue;
                        }

                        if (System.Array.getItem(System.Array.getItem(overworldGameMap.Tilemap, x, System.Collections.Generic.IReadOnlyList$1(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile)), y, TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile).Type === TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.TileType.NonPath) {
                            continue;
                        }

                        returnValue.add(location);

                        if (System.Array.getItem(System.Array.getItem(overworldGameMap.Tilemap, x, System.Collections.Generic.IReadOnlyList$1(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile)), y, TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile).Type === TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.TileType.Level && !completedLevelsSet.contains(System.Nullable.getValue(System.Array.getItem(System.Array.getItem(overworldGameMap.Tilemap, x, System.Collections.Generic.IReadOnlyList$1(TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile)), y, TuxPlanetSpeedrunAnyPercentLibrary.OverworldGameMap.Tile).Level))) {
                            continue;
                        }

                        toBeProcessed.Enqueue({ Item1: ((x - 1) | 0), Item2: y });
                        toBeProcessed.Enqueue({ Item1: ((x + 1) | 0), Item2: y });
                        toBeProcessed.Enqueue({ Item1: x, Item2: ((y - 1) | 0) });
                        toBeProcessed.Enqueue({ Item1: x, Item2: ((y + 1) | 0) });
                    }

                    return returnValue;
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.PauseMenuFrame.Option", {
        $kind: "nested enum",
        statics: {
            fields: {
                Continue: 0,
                RestartLevel: 1,
                BackToMapScreen: 2,
                BackToTitleScreen: 3
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.SaveAndLoadData", {
        fields: {
            sessionStateByteList: null,
            soundVolume: null,
            musicVolume: null,
            fileIO: null
        },
        ctors: {
            ctor: function (fileIO) {
                this.$initialize();
                this.fileIO = fileIO;

                this.sessionStateByteList = null;
                this.soundVolume = null;
                this.musicVolume = null;
            }
        },
        methods: {
            SaveData: function (sessionState, soundVolume, musicVolume) {
                this.SaveSessionState(sessionState);

                this.SaveSoundAndMusicVolume(soundVolume, musicVolume);
            },
            SaveSoundAndMusicVolume: function (soundVolume, musicVolume) {
                if (System.Nullable.hasValue(this.soundVolume) && System.Nullable.hasValue(this.musicVolume) && System.Nullable.getValue(this.soundVolume) === soundVolume && System.Nullable.getValue(this.musicVolume) === musicVolume) {
                    return;
                }

                this.soundVolume = soundVolume;
                this.musicVolume = musicVolume;

                var listBuilder = new DTLibrary.ByteList.Builder();

                listBuilder.AddInt(soundVolume);
                listBuilder.AddInt(musicVolume);

                this.fileIO.DTLibrary$IFileIO$PersistData(TuxPlanetSpeedrunAnyPercentLibrary.TuxPlanetSpeedrunAnyPercent.FILE_ID_FOR_SOUND_AND_MUSIC_VOLUME, listBuilder.ToByteList());
            },
            SaveSessionState: function (sessionState) {
                var listBuilder = new DTLibrary.ByteList.Builder();
                sessionState.SerializeEverythingExceptGameLogic(listBuilder);

                var byteList = listBuilder.ToByteList();

                if (this.sessionStateByteList != null && this.sessionStateByteList.equalsT(byteList)) {
                    return;
                }

                this.sessionStateByteList = byteList;

                this.fileIO.DTLibrary$IFileIO$PersistData(TuxPlanetSpeedrunAnyPercentLibrary.TuxPlanetSpeedrunAnyPercent.FILE_ID_FOR_SESSION_STATE, this.sessionStateByteList);
            },
            LoadSessionState: function (sessionState, windowWidth, windowHeight, mapInfo) {
                var list = this.fileIO.DTLibrary$IFileIO$FetchData(TuxPlanetSpeedrunAnyPercentLibrary.TuxPlanetSpeedrunAnyPercent.FILE_ID_FOR_SESSION_STATE);

                if (list == null) {
                    sessionState.ClearData(windowWidth, windowHeight);
                    return;
                }

                try {
                    var iterator = list.GetIterator();
                    sessionState.TryDeserializeEverythingExceptGameLogic(iterator);

                    if (iterator.HasNextByte()) {
                        throw new DTLibrary.DTDeserializationException();
                    }
                } catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    if (Bridge.is($e1, DTLibrary.DTDeserializationException)) {
                        sessionState.ClearData(windowWidth, windowHeight);
                    } else {
                        throw $e1;
                    }
                }
            },
            LoadSoundVolume: function () {
                var list = this.fileIO.DTLibrary$IFileIO$FetchData(TuxPlanetSpeedrunAnyPercentLibrary.TuxPlanetSpeedrunAnyPercent.FILE_ID_FOR_SOUND_AND_MUSIC_VOLUME);

                if (list == null) {
                    return null;
                }

                try {
                    var iterator = list.GetIterator();
                    var soundVolume = iterator.TryPopInt();
                    iterator.TryPopInt();
                    if (iterator.HasNextByte()) {
                        throw new DTLibrary.DTDeserializationException();
                    }

                    if (soundVolume >= 0 && soundVolume <= 100) {
                        return soundVolume;
                    }
                    return null;
                } catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    if (Bridge.is($e1, DTLibrary.DTDeserializationException)) {
                        return null;
                    } else {
                        throw $e1;
                    }
                }
            },
            LoadMusicVolume: function () {
                var list = this.fileIO.DTLibrary$IFileIO$FetchData(TuxPlanetSpeedrunAnyPercentLibrary.TuxPlanetSpeedrunAnyPercent.FILE_ID_FOR_SOUND_AND_MUSIC_VOLUME);

                if (list == null) {
                    return null;
                }

                try {
                    var iterator = list.GetIterator();

                    iterator.TryPopInt();
                    var musicVolume = iterator.TryPopInt();
                    if (iterator.HasNextByte()) {
                        throw new DTLibrary.DTDeserializationException();
                    }

                    if (musicVolume >= 0 && musicVolume <= 100) {
                        return musicVolume;
                    }
                    return null;
                } catch ($e1) {
                    $e1 = System.Exception.create($e1);
                    if (Bridge.is($e1, DTLibrary.DTDeserializationException)) {
                        return null;
                    } else {
                        throw $e1;
                    }
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.SessionState", {
        fields: {
            Overworld: null,
            GameLogic: null,
            CanUseSaveStates: false,
            CanUseTimeSlowdown: false,
            CanUseTeleport: false,
            HasWon: false,
            ElapsedMillis: 0,
            random: null,
            randomValuesUsedForGeneratingLevels: null
        },
        props: {
            CurrentLevel: {
                get: function () {
                    if (this.GameLogic == null) {
                        return null;
                    }
                    return this.GameLogic.Level;
                }
            }
        },
        ctors: {
            ctor: function (windowWidth, windowHeight) {
                this.$initialize();
                var random = new DTLibrary.DTDeterministicRandom.$ctor1(new System.Random.ctor().Next$1(10000000));

                this.Overworld = new TuxPlanetSpeedrunAnyPercentLibrary.Overworld.ctor(windowWidth, windowHeight, random.DTLibrary$IDTDeterministicRandom$SerializeToString(), new (System.Collections.Generic.HashSet$1(TuxPlanetSpeedrunAnyPercentLibrary.Level)).ctor());

                this.GameLogic = null;
                this.CanUseSaveStates = false;
                this.CanUseTimeSlowdown = false;
                this.CanUseTeleport = false;
                this.HasWon = false;
                this.ElapsedMillis = 0;
                this.random = random;
                this.randomValuesUsedForGeneratingLevels = new (System.Collections.Generic.Dictionary$2(TuxPlanetSpeedrunAnyPercentLibrary.Level,System.String))();
            }
        },
        methods: {
            ClearData: function (windowWidth, windowHeight) {
                this.random.DTLibrary$IDTRandom$NextBool();

                this.Overworld = new TuxPlanetSpeedrunAnyPercentLibrary.Overworld.ctor(windowWidth, windowHeight, this.random.DTLibrary$IDTDeterministicRandom$SerializeToString(), new (System.Collections.Generic.HashSet$1(TuxPlanetSpeedrunAnyPercentLibrary.Level)).ctor());

                this.GameLogic = null;
                this.CanUseSaveStates = false;
                this.CanUseTimeSlowdown = false;
                this.CanUseTeleport = false;
                this.HasWon = false;
                this.ElapsedMillis = 0;
                this.randomValuesUsedForGeneratingLevels = new (System.Collections.Generic.Dictionary$2(TuxPlanetSpeedrunAnyPercentLibrary.Level,System.String))();
            },
            AddRandomSeed: function (seed) {
                this.random.DTLibrary$IDTRandom$AddSeed(seed);
                this.random.DTLibrary$IDTRandom$NextBool();
            },
            HasStarted: function () {
                return this.ElapsedMillis > 0;
            },
            AddElapsedMillis: function (elapsedMillis) {
                this.ElapsedMillis = (this.ElapsedMillis + elapsedMillis) | 0;
            },
            SetOverworld: function (overworld) {
                this.Overworld = overworld;
            },
            CompleteLevel: function (level, canUseSaveStates, canUseTimeSlowdown, canUseTeleport) {
                this.Overworld = this.Overworld.CompleteLevel(level);
                if (canUseSaveStates) {
                    this.CanUseSaveStates = true;
                }
                if (canUseTimeSlowdown) {
                    this.CanUseTimeSlowdown = true;
                }
                if (canUseTeleport) {
                    this.CanUseTeleport = true;
                }

                this.GameLogic = null;
            },
            WinGame: function () {
                this.HasWon = true;
            },
            SetGameLogic: function (gameLogicState) {
                this.GameLogic = gameLogicState;
            },
            StartLevel: function (level, windowWidth, windowHeight, mapInfo) {
                this.random.DTLibrary$IDTRandom$NextBool();

                if (!this.randomValuesUsedForGeneratingLevels.containsKey(level)) {
                    this.randomValuesUsedForGeneratingLevels.set(level, this.random.DTLibrary$IDTDeterministicRandom$SerializeToString());
                }

                var rngForGeneratingLevel = new DTLibrary.DTDeterministicRandom.ctor();
                rngForGeneratingLevel.DeserializeFromString(this.randomValuesUsedForGeneratingLevels.get(level));

                this.GameLogic = new TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.$ctor1(level, windowWidth, windowHeight, this.CanUseSaveStates, this.CanUseTimeSlowdown, this.CanUseTeleport, mapInfo, rngForGeneratingLevel);
            },
            SerializeEverythingExceptGameLogic: function (list) {
                var $t;
                this.Overworld.Serialize(list);

                list.AddBool(this.CanUseSaveStates);
                list.AddBool(this.CanUseTimeSlowdown);
                list.AddBool(this.CanUseTeleport);

                list.AddBool(this.HasWon);
                list.AddInt(this.ElapsedMillis);

                list.AddInt(this.randomValuesUsedForGeneratingLevels.count);

                $t = Bridge.getEnumerator(System.Linq.Enumerable.from(this.randomValuesUsedForGeneratingLevels).orderBy(function (x) {
                        return TuxPlanetSpeedrunAnyPercentLibrary.LevelUtil.ToSerializableInt(x.key);
                    }).toList(System.Collections.Generic.KeyValuePair$2(TuxPlanetSpeedrunAnyPercentLibrary.Level,System.String)));
                try {
                    while ($t.moveNext()) {
                        var kvp = $t.Current;
                        var level = kvp.key;
                        var rngValue = kvp.value;

                        list.AddInt(TuxPlanetSpeedrunAnyPercentLibrary.LevelUtil.ToSerializableInt(level));
                        list.AddString(rngValue);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            },
            /**
             * Can possibly throw DTDeserializationException
             *
             * @instance
             * @public
             * @this TuxPlanetSpeedrunAnyPercentLibrary.SessionState
             * @memberof TuxPlanetSpeedrunAnyPercentLibrary.SessionState
             * @param   {DTLibrary.ByteList.Iterator}    iterator
             * @return  {void}
             */
            TryDeserializeEverythingExceptGameLogic: function (iterator) {
                this.Overworld = TuxPlanetSpeedrunAnyPercentLibrary.Overworld.TryDeserialize(iterator);

                this.CanUseSaveStates = iterator.TryPopBool();
                this.CanUseTimeSlowdown = iterator.TryPopBool();
                this.CanUseTeleport = iterator.TryPopBool();

                var hasWon = iterator.TryPopBool();
                this.HasWon = hasWon;

                var elapsedMillis = iterator.TryPopInt();
                this.ElapsedMillis = elapsedMillis;

                this.randomValuesUsedForGeneratingLevels = new (System.Collections.Generic.Dictionary$2(TuxPlanetSpeedrunAnyPercentLibrary.Level,System.String))();
                var numKeyValuePairs = iterator.TryPopInt();

                for (var i = 0; i < numKeyValuePairs; i = (i + 1) | 0) {
                    var level = iterator.TryPopInt();
                    var rngValue = iterator.TryPopString();

                    this.randomValuesUsedForGeneratingLevels.set(TuxPlanetSpeedrunAnyPercentLibrary.LevelUtil.FromSerializableInt(level), rngValue);
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.SoundAndMusicVolumePicker", {
        fields: {
            soundVolumePicker: null,
            musicVolumePicker: null
        },
        ctors: {
            ctor: function (xPos, yPos, initialSoundVolume, initialMusicVolume, elapsedMicrosPerFrame, color) {
                this.$initialize();
                this.soundVolumePicker = new TuxPlanetSpeedrunAnyPercentLibrary.SoundVolumePicker(xPos, ((yPos + 50) | 0), initialSoundVolume, color);
                this.musicVolumePicker = new TuxPlanetSpeedrunAnyPercentLibrary.MusicVolumePicker(xPos, yPos, initialMusicVolume, color);
            }
        },
        methods: {
            ProcessFrame: function (mouseInput, previousMouseInput) {
                this.soundVolumePicker.ProcessFrame(mouseInput, previousMouseInput);
                this.musicVolumePicker.ProcessFrame(mouseInput, previousMouseInput);
            },
            /**
             * Returns a number from 0 to 100 (both inclusive)
             *
             * @instance
             * @public
             * @this TuxPlanetSpeedrunAnyPercentLibrary.SoundAndMusicVolumePicker
             * @memberof TuxPlanetSpeedrunAnyPercentLibrary.SoundAndMusicVolumePicker
             * @return  {number}
             */
            GetCurrentSoundVolume: function () {
                return this.soundVolumePicker.GetCurrentSoundVolume();
            },
            /**
             * Returns a number from 0 to 100 (both inclusive)
             *
             * @instance
             * @public
             * @this TuxPlanetSpeedrunAnyPercentLibrary.SoundAndMusicVolumePicker
             * @memberof TuxPlanetSpeedrunAnyPercentLibrary.SoundAndMusicVolumePicker
             * @return  {number}
             */
            GetCurrentMusicVolume: function () {
                return this.musicVolumePicker.GetCurrentMusicVolume();
            },
            Render: function (displayOutput) {
                this.soundVolumePicker.Render(displayOutput);
                this.musicVolumePicker.Render(displayOutput);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.SoundAndMusicVolumePicker.Color", {
        $kind: "nested enum",
        statics: {
            fields: {
                Black: 0,
                White: 1
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.SoundVolumePicker", {
        fields: {
            _xPos: 0,
            _yPos: 0,
            _currentVolume: 0,
            _unmuteVolume: 0,
            _isDraggingVolumeSlider: false,
            _color: 0
        },
        ctors: {
            ctor: function (xPos, yPos, initialVolume, color) {
                this.$initialize();
                this._xPos = xPos;
                this._yPos = yPos;

                this._currentVolume = initialVolume;
                this._unmuteVolume = this._currentVolume;

                this._isDraggingVolumeSlider = false;

                this._color = color;
            }
        },
        methods: {
            ProcessFrame: function (mouseInput, previousMouseInput) {
                var mouseX = mouseInput.DTLibrary$IMouse$GetX();
                var mouseY = mouseInput.DTLibrary$IMouse$GetY();

                if (mouseInput.DTLibrary$IMouse$IsLeftMouseButtonPressed() && !previousMouseInput.DTLibrary$IMouse$IsLeftMouseButtonPressed() && this._xPos <= mouseX && mouseX <= ((this._xPos + 40) | 0) && this._yPos <= mouseY && mouseY <= ((this._yPos + 50) | 0)) {
                    if (this._currentVolume === 0) {
                        this._currentVolume = this._unmuteVolume === 0 ? TuxPlanetSpeedrunAnyPercentLibrary.GlobalState.DEFAULT_VOLUME : this._unmuteVolume;
                        this._unmuteVolume = this._currentVolume;
                    } else {
                        this._unmuteVolume = this._currentVolume;
                        this._currentVolume = 0;
                    }
                }

                if (mouseInput.DTLibrary$IMouse$IsLeftMouseButtonPressed() && !previousMouseInput.DTLibrary$IMouse$IsLeftMouseButtonPressed() && ((this._xPos + 50) | 0) <= mouseX && mouseX <= ((this._xPos + 150) | 0) && ((this._yPos + 10) | 0) <= mouseY && mouseY <= ((this._yPos + 40) | 0)) {
                    this._isDraggingVolumeSlider = true;
                }

                if (this._isDraggingVolumeSlider && mouseInput.DTLibrary$IMouse$IsLeftMouseButtonPressed()) {
                    var volume = (mouseX - (((this._xPos + 50) | 0))) | 0;
                    if (volume < 0) {
                        volume = 0;
                    }
                    if (volume > 100) {
                        volume = 100;
                    }

                    this._currentVolume = volume;
                    this._unmuteVolume = this._currentVolume;
                }

                if (!mouseInput.DTLibrary$IMouse$IsLeftMouseButtonPressed()) {
                    this._isDraggingVolumeSlider = false;
                }
            },
            /**
             * Returns a number from 0 to 100 (both inclusive)
             *
             * @instance
             * @public
             * @this TuxPlanetSpeedrunAnyPercentLibrary.SoundVolumePicker
             * @memberof TuxPlanetSpeedrunAnyPercentLibrary.SoundVolumePicker
             * @return  {number}
             */
            GetCurrentSoundVolume: function () {
                return this._currentVolume;
            },
            Render: function (displayOutput) {
                var image = new TuxPlanetSpeedrunAnyPercentLibrary.GameImage();
                var color;

                switch (this._color) {
                    case TuxPlanetSpeedrunAnyPercentLibrary.SoundAndMusicVolumePicker.Color.Black: 
                        image = this._currentVolume > 0 ? TuxPlanetSpeedrunAnyPercentLibrary.GameImage.SoundOn_Black : TuxPlanetSpeedrunAnyPercentLibrary.GameImage.SoundOff_Black;
                        color = DTLibrary.DTColor.Black();
                        break;
                    case TuxPlanetSpeedrunAnyPercentLibrary.SoundAndMusicVolumePicker.Color.White: 
                        image = this._currentVolume > 0 ? TuxPlanetSpeedrunAnyPercentLibrary.GameImage.SoundOn_White : TuxPlanetSpeedrunAnyPercentLibrary.GameImage.SoundOff_White;
                        color = DTLibrary.DTColor.White();
                        break;
                    default: 
                        throw new System.Exception();
                }

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImage(image, this._xPos, this._yPos);

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle(((this._xPos + 50) | 0), ((this._yPos + 10) | 0), 101, 31, color, false);

                if (this._currentVolume > 0) {
                    displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle(((this._xPos + 50) | 0), ((this._yPos + 10) | 0), this._currentVolume, 31, color, true);
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.Sprite", {
        fields: {
            Image: 0,
            X: 0,
            Y: 0,
            Width: 0,
            Height: 0,
            ScalingFactorScaled: 0
        },
        ctors: {
            ctor: function (image, x, y, width, height, scalingFactorScaled) {
                this.$initialize();
                this.Image = image;
                this.X = x;
                this.Y = y;
                this.Width = width;
                this.Height = height;
                this.ScalingFactorScaled = scalingFactorScaled;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.SpriteUtil", {
        statics: {
            methods: {
                CopySpriteArray: function (array) {
                    var $t, $t1;
                    var newArray = System.Array.init(array.length, null, System.Array.type(TuxPlanetSpeedrunAnyPercentLibrary.Sprite));

                    for (var i = 0; i < newArray.length; i = (i + 1) | 0) {
                        newArray[System.Array.index(i, newArray)] = System.Array.init(array[System.Array.index(i, array)].length, null, TuxPlanetSpeedrunAnyPercentLibrary.Sprite);
                        for (var j = 0; j < newArray[System.Array.index(i, newArray)].length; j = (j + 1) | 0) {
                            ($t = newArray[System.Array.index(i, newArray)])[System.Array.index(j, $t)] = ($t1 = array[System.Array.index(i, array)])[System.Array.index(j, $t1)];
                        }
                    }

                    return newArray;
                },
                EmptySpriteArray: function (length1, length2) {
                    var $t;
                    var array = System.Array.init(length1, null, System.Array.type(TuxPlanetSpeedrunAnyPercentLibrary.Sprite));

                    for (var i = 0; i < length1; i = (i + 1) | 0) {
                        array[System.Array.index(i, array)] = System.Array.init(length2, null, TuxPlanetSpeedrunAnyPercentLibrary.Sprite);
                        for (var j = 0; j < length2; j = (j + 1) | 0) {
                            ($t = array[System.Array.index(i, array)])[System.Array.index(j, $t)] = null;
                        }
                    }

                    return array;
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.Tilemap.EnemySpawnLocation", {
        $kind: "nested class",
        fields: {
            ActorId: 0,
            TileI: 0,
            TileJ: 0,
            EnemyId: null
        },
        ctors: {
            ctor: function (actorId, tileI, tileJ, enemyId) {
                this.$initialize();
                this.ActorId = actorId;
                this.TileI = tileI;
                this.TileJ = tileJ;
                this.EnemyId = enemyId;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.TitleScreenFrame.Option", {
        $kind: "nested enum",
        statics: {
            fields: {
                ContinueGame: 0,
                NewGame: 1,
                Quit: 2
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.TuxPlanetSpeedrunAnyPercent", {
        statics: {
            fields: {
                FILE_ID_FOR_GLOBAL_CONFIGURATION: 0,
                FILE_ID_FOR_SESSION_STATE: 0,
                FILE_ID_FOR_SOUND_AND_MUSIC_VOLUME: 0
            },
            ctors: {
                init: function () {
                    this.FILE_ID_FOR_GLOBAL_CONFIGURATION = 1;
                    this.FILE_ID_FOR_SESSION_STATE = 2;
                    this.FILE_ID_FOR_SOUND_AND_MUSIC_VOLUME = 3;
                }
            },
            methods: {
                GetFirstFrame: function (globalState) {
                    var frame = new TuxPlanetSpeedrunAnyPercentLibrary.InitialLoadingScreenFrame(globalState);
                    return frame;
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.TuxState", {
        statics: {
            fields: {
                JUMP_Y_SPEED: 0,
                JUMP_BUFFER_DURATION: 0,
                LAST_TIME_ON_GROUND_BUFFER_DURATION: 0,
                TELEPORT_DURATION: 0,
                TELEPORT_COOLDOWN: 0,
                FINISHED_LEVEL_ANIMATION_DURATION: 0,
                IS_DEAD_ANIMATION_DURATION: 0
            },
            ctors: {
                init: function () {
                    this.JUMP_Y_SPEED = 1100000;
                    this.JUMP_BUFFER_DURATION = 500000;
                    this.LAST_TIME_ON_GROUND_BUFFER_DURATION = 500000;
                    this.TELEPORT_DURATION = 150000;
                    this.TELEPORT_COOLDOWN = 10000;
                    this.FINISHED_LEVEL_ANIMATION_DURATION = 1500000;
                    this.IS_DEAD_ANIMATION_DURATION = 3000000;
                }
            },
            methods: {
                GetDefaultTuxState: function (x, y) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.TuxState(x << 10, y << 10, 0, 0, new (System.Collections.Generic.List$1(System.Boolean)).ctor(), false, null, null, null, null, false, 0, null, false, null, true);
                }
            }
        },
        fields: {
            XMibi: 0,
            YMibi: 0,
            XSpeedInMibipixelsPerSecond: 0,
            YSpeedInMibipixelsPerSecond: 0,
            PreviousJumps: null,
            IsOnGround: false,
            LastTimeOnGround: null,
            TeleportStartingLocation: null,
            TeleportInProgressElapsedMicros: null,
            TeleportCooldown: null,
            HasAlreadyUsedTeleport: false,
            SpriteElapsedMicros: 0,
            HasFinishedLevelElapsedMicros: null,
            IsStillHoldingJumpButton: false,
            IsDeadElapsedMicros: null,
            IsFacingRight: false
        },
        props: {
            HasFinishedLevel: {
                get: function () {
                    return this.HasFinishedLevelElapsedMicros != null;
                }
            },
            IsDead: {
                get: function () {
                    return this.IsDeadElapsedMicros != null;
                }
            }
        },
        ctors: {
            ctor: function (xMibi, yMibi, xSpeedInMibipixelsPerSecond, ySpeedInMibipixelsPerSecond, previousJumps, isOnGround, lastTimeOnGround, teleportStartingLocation, teleportInProgressElapsedMicros, teleportCooldown, hasAlreadyUsedTeleport, spriteElapsedMicros, hasFinishedLevelElapsedMicros, isStillHoldingJumpButton, isDeadElapsedMicros, isFacingRight) {
                this.$initialize();
                this.XMibi = xMibi;
                this.YMibi = yMibi;
                this.XSpeedInMibipixelsPerSecond = xSpeedInMibipixelsPerSecond;
                this.YSpeedInMibipixelsPerSecond = ySpeedInMibipixelsPerSecond;
                this.PreviousJumps = new (System.Collections.Generic.List$1(System.Boolean)).$ctor1(previousJumps);
                this.IsOnGround = isOnGround;
                this.LastTimeOnGround = lastTimeOnGround;
                this.TeleportStartingLocation = teleportStartingLocation;
                this.TeleportInProgressElapsedMicros = teleportInProgressElapsedMicros;
                this.TeleportCooldown = teleportCooldown;
                this.HasAlreadyUsedTeleport = hasAlreadyUsedTeleport;
                this.SpriteElapsedMicros = spriteElapsedMicros;
                this.HasFinishedLevelElapsedMicros = hasFinishedLevelElapsedMicros;
                this.IsStillHoldingJumpButton = isStillHoldingJumpButton;
                this.IsDeadElapsedMicros = isDeadElapsedMicros;
                this.IsFacingRight = isFacingRight;
            }
        },
        methods: {
            SetYSpeedInMibipixelsPerSecond: function (ySpeedInMibipixelsPerSecond) {
                return new TuxPlanetSpeedrunAnyPercentLibrary.TuxState(this.XMibi, this.YMibi, this.XSpeedInMibipixelsPerSecond, ySpeedInMibipixelsPerSecond, this.PreviousJumps, this.IsOnGround, this.LastTimeOnGround, this.TeleportStartingLocation, this.TeleportInProgressElapsedMicros, this.TeleportCooldown, this.HasAlreadyUsedTeleport, this.SpriteElapsedMicros, this.HasFinishedLevelElapsedMicros, this.IsStillHoldingJumpButton, this.IsDeadElapsedMicros, this.IsFacingRight);
            },
            SetLastTimeOnGround: function (lastTimeOnGround) {
                return new TuxPlanetSpeedrunAnyPercentLibrary.TuxState(this.XMibi, this.YMibi, this.XSpeedInMibipixelsPerSecond, this.YSpeedInMibipixelsPerSecond, this.PreviousJumps, this.IsOnGround, lastTimeOnGround, this.TeleportStartingLocation, this.TeleportInProgressElapsedMicros, this.TeleportCooldown, this.HasAlreadyUsedTeleport, this.SpriteElapsedMicros, this.HasFinishedLevelElapsedMicros, this.IsStillHoldingJumpButton, this.IsDeadElapsedMicros, this.IsFacingRight);
            },
            SetIsStillHoldingJumpButton: function (isStillHoldingJumpButton) {
                return new TuxPlanetSpeedrunAnyPercentLibrary.TuxState(this.XMibi, this.YMibi, this.XSpeedInMibipixelsPerSecond, this.YSpeedInMibipixelsPerSecond, this.PreviousJumps, this.IsOnGround, this.LastTimeOnGround, this.TeleportStartingLocation, this.TeleportInProgressElapsedMicros, this.TeleportCooldown, this.HasAlreadyUsedTeleport, this.SpriteElapsedMicros, this.HasFinishedLevelElapsedMicros, isStillHoldingJumpButton, this.IsDeadElapsedMicros, this.IsFacingRight);
            },
            SetHasAlreadyUsedTeleport: function (hasAlreadyUsedTeleport) {
                return new TuxPlanetSpeedrunAnyPercentLibrary.TuxState(this.XMibi, this.YMibi, this.XSpeedInMibipixelsPerSecond, this.YSpeedInMibipixelsPerSecond, this.PreviousJumps, this.IsOnGround, this.LastTimeOnGround, this.TeleportStartingLocation, this.TeleportInProgressElapsedMicros, this.TeleportCooldown, hasAlreadyUsedTeleport, this.SpriteElapsedMicros, this.HasFinishedLevelElapsedMicros, this.IsStillHoldingJumpButton, this.IsDeadElapsedMicros, this.IsFacingRight);
            },
            Kill: function () {
                return new TuxPlanetSpeedrunAnyPercentLibrary.TuxState(this.XMibi, this.YMibi, 0, 0, new (System.Collections.Generic.List$1(System.Boolean)).ctor(), false, null, null, null, null, true, 0, null, false, 0, this.IsFacingRight);
            },
            GetHitboxes: function () {
                return Bridge.fn.bind(this, function (_o1) {
                        _o1.add(new TuxPlanetSpeedrunAnyPercentLibrary.Hitbox((((this.XMibi >> 10) - 12) | 0), (((this.YMibi >> 10) - 48) | 0), 24, 72));
                        return _o1;
                    })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Hitbox)).ctor());
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.TuxStateProcessing", {
        statics: {
            fields: {
                SPRITE_MILLIS: 0
            },
            ctors: {
                init: function () {
                    this.SPRITE_MILLIS = 300;
                }
            },
            methods: {
                ProcessFrame_TuxDead: function (tuxState, move, elapsedMicrosPerFrame, soundOutput) {
                    if (System.Nullable.getValue(tuxState.IsDeadElapsedMicros) === 0) {
                        soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$PlaySound(TuxPlanetSpeedrunAnyPercentLibrary.GameSound.Die);
                    }

                    var newIsDeadElapsedMicros = (System.Nullable.getValue(tuxState.IsDeadElapsedMicros) + elapsedMicrosPerFrame) | 0;

                    return new TuxPlanetSpeedrunAnyPercentLibrary.TuxStateProcessing.Result(new TuxPlanetSpeedrunAnyPercentLibrary.TuxState(tuxState.XMibi, tuxState.YMibi, 0, 0, new (System.Collections.Generic.List$1(System.Boolean)).ctor(), false, null, null, null, null, true, ((tuxState.SpriteElapsedMicros + elapsedMicrosPerFrame) | 0), null, false, newIsDeadElapsedMicros, tuxState.IsFacingRight), false, newIsDeadElapsedMicros >= TuxPlanetSpeedrunAnyPercentLibrary.TuxState.IS_DEAD_ANIMATION_DURATION || move.Respawn, false);
                },
                GetMoveInfo: function (tuxState, move) {
                    if (tuxState.HasFinishedLevel) {
                        return new TuxPlanetSpeedrunAnyPercentLibrary.TuxStateProcessing.MoveInfo(true, false, false);
                    }

                    var isMovingRight = move.ArrowRight && !move.ArrowLeft;
                    var isMovingLeft = move.ArrowLeft && !move.ArrowRight;
                    var hasJumped = move.Jumped && (System.Array.getCount(tuxState.PreviousJumps, System.Boolean) === 0 || !System.Array.getItem(tuxState.PreviousJumps, 0, System.Boolean));

                    if (!hasJumped && move.Jumped) {
                        var previousMoveIndex = 0;

                        while (true) {
                            if (previousMoveIndex >= ((System.Array.getCount(tuxState.PreviousJumps, System.Boolean) - 1) | 0)) {
                                break;
                            }

                            if (System.Array.getItem(tuxState.PreviousJumps, previousMoveIndex, System.Boolean) && !System.Array.getItem(tuxState.PreviousJumps, ((previousMoveIndex + 1) | 0), System.Boolean)) {
                                hasJumped = true;
                                break;
                            }

                            previousMoveIndex = (previousMoveIndex + 1) | 0;
                        }
                    }

                    return new TuxPlanetSpeedrunAnyPercentLibrary.TuxStateProcessing.MoveInfo(isMovingRight, isMovingLeft, hasJumped);
                },
                ProcessFrame_TuxTeleport: function (tuxState, elapsedMicrosPerFrame) {
                    var newTeleportInProgressElapsedMicros = Bridge.Int.clip32(System.Nullable.getValue(tuxState.TeleportInProgressElapsedMicros) + elapsedMicrosPerFrame);
                    var hasFinishedTeleporting;

                    if (System.Nullable.getValue(newTeleportInProgressElapsedMicros) >= TuxPlanetSpeedrunAnyPercentLibrary.TuxState.TELEPORT_DURATION) {
                        hasFinishedTeleporting = true;
                    } else {
                        hasFinishedTeleporting = false;
                    }

                    return new TuxPlanetSpeedrunAnyPercentLibrary.TuxStateProcessing.Result(new TuxPlanetSpeedrunAnyPercentLibrary.TuxState(tuxState.XMibi, tuxState.YMibi, tuxState.XSpeedInMibipixelsPerSecond, tuxState.YSpeedInMibipixelsPerSecond, tuxState.PreviousJumps, tuxState.IsOnGround, tuxState.LastTimeOnGround, hasFinishedTeleporting ? null : tuxState.TeleportStartingLocation, hasFinishedTeleporting ? null : newTeleportInProgressElapsedMicros, hasFinishedTeleporting ? TuxPlanetSpeedrunAnyPercentLibrary.TuxState.TELEPORT_COOLDOWN : null, hasFinishedTeleporting ? true : false, tuxState.SpriteElapsedMicros, tuxState.HasFinishedLevelElapsedMicros, tuxState.IsStillHoldingJumpButton, tuxState.IsDeadElapsedMicros, tuxState.IsFacingRight), false, false, false);
                },
                IsTeleportable: function (tilemap, x, y) {
                    return !tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(x, y) && !tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsSpikes(x, y) && !tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsKillZone(x, y);
                },
                ProcessFrame: function (tuxState, move, previousMove, canUseTeleport, debugMode, debugKeyboardInput, debugPreviousKeyboardInput, displayProcessing, soundOutput, elapsedMicrosPerFrame, tilemap) {
                    if (tuxState.IsDead) {
                        return TuxPlanetSpeedrunAnyPercentLibrary.TuxStateProcessing.ProcessFrame_TuxDead(tuxState, move, elapsedMicrosPerFrame, soundOutput);
                    }

                    if (tuxState.TeleportInProgressElapsedMicros != null) {
                        return TuxPlanetSpeedrunAnyPercentLibrary.TuxStateProcessing.ProcessFrame_TuxTeleport(tuxState, elapsedMicrosPerFrame);
                    }

                    var moveInfo = TuxPlanetSpeedrunAnyPercentLibrary.TuxStateProcessing.GetMoveInfo(tuxState, move);

                    var isMovingRight = moveInfo.IsMovingRight;
                    var isMovingLeft = moveInfo.IsMovingLeft;
                    var hasJumped = moveInfo.HasJumped;

                    var tuxX = tuxState.XMibi >> 10;
                    var tuxY = tuxState.YMibi >> 10;

                    var newIsOnGround = tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(tuxX, ((((tuxY - 48) | 0) - 1) | 0)) && !tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(tuxX, ((tuxY - 48) | 0)) || tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(((tuxX - 12) | 0), ((((tuxY - 48) | 0) - 1) | 0)) && !tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(((tuxX - 12) | 0), ((tuxY - 48) | 0)) || tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(((tuxX + 12) | 0), ((((tuxY - 48) | 0) - 1) | 0)) && !tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(((tuxX + 12) | 0), ((tuxY - 48) | 0));

                    var newLastTimeOnGround;
                    if (newIsOnGround && tuxState.YSpeedInMibipixelsPerSecond <= 0) {
                        newLastTimeOnGround = 0;
                    } else {
                        if (tuxState.LastTimeOnGround == null) {
                            newLastTimeOnGround = null;
                        } else {
                            newLastTimeOnGround = Bridge.Int.clip32(System.Nullable.getValue(tuxState.LastTimeOnGround) + elapsedMicrosPerFrame);
                        }
                    }

                    var newXMibi = tuxState.XMibi;
                    var newYMibi = tuxState.YMibi;

                    var newXSpeedInMibipixelsPerSecond = tuxState.XSpeedInMibipixelsPerSecond;
                    var newYSpeedInMibipixelsPerSecond = tuxState.YSpeedInMibipixelsPerSecond;

                    var newPreviousJumps = new (System.Collections.Generic.List$1(System.Boolean)).ctor();
                    var numFramesToTrack = (((Bridge.Int.div(TuxPlanetSpeedrunAnyPercentLibrary.TuxState.JUMP_BUFFER_DURATION, elapsedMicrosPerFrame)) | 0) + 1) | 0;
                    if (System.Array.getCount(tuxState.PreviousJumps, System.Boolean) < numFramesToTrack) {
                        newPreviousJumps.add(move.Jumped);
                        newPreviousJumps.AddRange(tuxState.PreviousJumps);
                    } else {
                        newPreviousJumps.add(move.Jumped);
                        for (var i = 0; i < ((numFramesToTrack - 1) | 0); i = (i + 1) | 0) {
                            newPreviousJumps.add(System.Array.getItem(tuxState.PreviousJumps, i, System.Boolean));
                        }
                    }

                    var newHasFinishedLevelElapsedMicros = tuxState.HasFinishedLevelElapsedMicros;

                    if (System.Nullable.hasValue(newHasFinishedLevelElapsedMicros)) {
                        newHasFinishedLevelElapsedMicros = Bridge.Int.clip32(System.Nullable.getValue(newHasFinishedLevelElapsedMicros) + elapsedMicrosPerFrame);
                    } else {
                        if (tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsEndOfLevel(tuxX, tuxY)) {
                            soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$PlaySound(TuxPlanetSpeedrunAnyPercentLibrary.GameSound.JingleWin01);
                            newHasFinishedLevelElapsedMicros = 0;
                        } else {
                            if (debugMode && debugKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.One) && !debugPreviousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.One)) {
                                soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$PlaySound(TuxPlanetSpeedrunAnyPercentLibrary.GameSound.JingleWin01);
                                newHasFinishedLevelElapsedMicros = TuxPlanetSpeedrunAnyPercentLibrary.TuxState.FINISHED_LEVEL_ANIMATION_DURATION;
                            }
                        }
                    }

                    var newSpriteElapsedMicros = (tuxState.SpriteElapsedMicros + elapsedMicrosPerFrame) | 0;

                    if (newSpriteElapsedMicros >= 2000000000) {
                        newSpriteElapsedMicros = 0;
                    }

                    if (isMovingRight) {
                        newXSpeedInMibipixelsPerSecond = (newXSpeedInMibipixelsPerSecond + (Bridge.Int.mul(elapsedMicrosPerFrame, 3))) | 0;
                    }

                    if (isMovingLeft) {
                        newXSpeedInMibipixelsPerSecond = (newXSpeedInMibipixelsPerSecond - (Bridge.Int.mul(elapsedMicrosPerFrame, 3))) | 0;
                    }

                    if (!isMovingRight && !isMovingLeft) {
                        if (newXSpeedInMibipixelsPerSecond > 0) {
                            newXSpeedInMibipixelsPerSecond = (newXSpeedInMibipixelsPerSecond - (Bridge.Int.mul(elapsedMicrosPerFrame, 3))) | 0;
                            if (newXSpeedInMibipixelsPerSecond < 0) {
                                newXSpeedInMibipixelsPerSecond = 0;
                            }
                        }
                        if (newXSpeedInMibipixelsPerSecond < 0) {
                            newXSpeedInMibipixelsPerSecond = (newXSpeedInMibipixelsPerSecond + (Bridge.Int.mul(elapsedMicrosPerFrame, 3))) | 0;
                            if (newXSpeedInMibipixelsPerSecond > 0) {
                                newXSpeedInMibipixelsPerSecond = 0;
                            }
                        }
                    }

                    if (newXSpeedInMibipixelsPerSecond > 1000000) {
                        newXSpeedInMibipixelsPerSecond = 1000000;
                    }

                    if (newXSpeedInMibipixelsPerSecond < -1000000) {
                        newXSpeedInMibipixelsPerSecond = -1000000;
                    }

                    var newIsStillHoldingJumpButton = tuxState.IsStillHoldingJumpButton && move.Jumped;

                    if (hasJumped && System.Nullable.hasValue(tuxState.LastTimeOnGround) && System.Nullable.getValue(tuxState.LastTimeOnGround) <= TuxPlanetSpeedrunAnyPercentLibrary.TuxState.LAST_TIME_ON_GROUND_BUFFER_DURATION && tuxState.YSpeedInMibipixelsPerSecond <= 0) {
                        soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$PlaySound(TuxPlanetSpeedrunAnyPercentLibrary.GameSound.Jump);
                        newYSpeedInMibipixelsPerSecond = TuxPlanetSpeedrunAnyPercentLibrary.TuxState.JUMP_Y_SPEED;
                        newIsStillHoldingJumpButton = true;
                        newLastTimeOnGround = null;
                        newPreviousJumps = new (System.Collections.Generic.List$1(System.Boolean)).ctor();
                    }

                    if (!newIsStillHoldingJumpButton && tuxState.IsStillHoldingJumpButton) {
                        newYSpeedInMibipixelsPerSecond = (Bridge.Int.div(Bridge.Int.mul(newYSpeedInMibipixelsPerSecond, 2), 5)) | 0;
                    }

                    if (!tuxState.IsOnGround && newYSpeedInMibipixelsPerSecond >= -5000000) {
                        newYSpeedInMibipixelsPerSecond = (newYSpeedInMibipixelsPerSecond - (Bridge.Int.mul(elapsedMicrosPerFrame, 3))) | 0;
                    }

                    var proposedNewYMibi = System.Int64.clip32(System.Int64(newYMibi).add(System.Int64(newYSpeedInMibipixelsPerSecond).mul(System.Int64(elapsedMicrosPerFrame)).div(System.Int64(1024)).div(System.Int64(1024))));
                    if (newYSpeedInMibipixelsPerSecond > 0) {
                        while (true) {
                            if (tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(((Bridge.Int.div(newXMibi, 1024)) | 0), ((((Bridge.Int.div(proposedNewYMibi, 1024)) | 0) + 24) | 0)) || tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(((((Bridge.Int.div(newXMibi, 1024)) | 0) - 12) | 0), ((((Bridge.Int.div(proposedNewYMibi, 1024)) | 0) + 24) | 0)) || tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(((((Bridge.Int.div(newXMibi, 1024)) | 0) + 12) | 0), ((((Bridge.Int.div(proposedNewYMibi, 1024)) | 0) + 24) | 0))) {
                                newYSpeedInMibipixelsPerSecond = 0;
                                proposedNewYMibi = (proposedNewYMibi - 1024) | 0;
                                if (proposedNewYMibi <= newYMibi) {
                                    proposedNewYMibi = newYMibi;
                                    break;
                                }
                            } else {
                                break;
                            }
                        }
                    }
                    if (newYSpeedInMibipixelsPerSecond < 0) {
                        while (true) {
                            if (tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(((Bridge.Int.div(newXMibi, 1024)) | 0), ((((Bridge.Int.div(proposedNewYMibi, 1024)) | 0) - 48) | 0)) || tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(((((Bridge.Int.div(newXMibi, 1024)) | 0) - 12) | 0), ((((Bridge.Int.div(proposedNewYMibi, 1024)) | 0) - 48) | 0)) || tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(((((Bridge.Int.div(newXMibi, 1024)) | 0) + 12) | 0), ((((Bridge.Int.div(proposedNewYMibi, 1024)) | 0) - 48) | 0))) {
                                newYSpeedInMibipixelsPerSecond = 0;
                                proposedNewYMibi = (proposedNewYMibi + 1024) | 0;
                                if (proposedNewYMibi >= newYMibi) {
                                    proposedNewYMibi = newYMibi;
                                    break;
                                }
                            } else {
                                break;
                            }
                        }
                    }

                    newYMibi = proposedNewYMibi;

                    var proposedNewXMibi = System.Int64.clip32(System.Int64(newXMibi).add(System.Int64(newXSpeedInMibipixelsPerSecond).mul(System.Int64(elapsedMicrosPerFrame)).div(System.Int64(1024)).div(System.Int64(1024))));
                    if (newXSpeedInMibipixelsPerSecond > 0) {
                        while (true) {
                            if (tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(((((Bridge.Int.div(proposedNewXMibi, 1024)) | 0) + 12) | 0), ((((Bridge.Int.div(newYMibi, 1024)) | 0) - 48) | 0)) || tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(((((Bridge.Int.div(proposedNewXMibi, 1024)) | 0) + 12) | 0), ((Bridge.Int.div(newYMibi, 1024)) | 0)) || tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(((((Bridge.Int.div(proposedNewXMibi, 1024)) | 0) + 12) | 0), ((((Bridge.Int.div(newYMibi, 1024)) | 0) + 24) | 0))) {
                                newXSpeedInMibipixelsPerSecond = 0;
                                proposedNewXMibi = (proposedNewXMibi - 1024) | 0;
                                if (proposedNewXMibi <= newXMibi) {
                                    proposedNewXMibi = newXMibi;
                                    break;
                                }
                            } else {
                                break;
                            }
                        }
                    }
                    if (newXSpeedInMibipixelsPerSecond < 0) {
                        while (true) {
                            if (tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(((((Bridge.Int.div(proposedNewXMibi, 1024)) | 0) - 12) | 0), ((((Bridge.Int.div(newYMibi, 1024)) | 0) - 48) | 0)) || tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(((((Bridge.Int.div(proposedNewXMibi, 1024)) | 0) - 12) | 0), ((Bridge.Int.div(newYMibi, 1024)) | 0)) || tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(((((Bridge.Int.div(proposedNewXMibi, 1024)) | 0) - 12) | 0), ((((Bridge.Int.div(newYMibi, 1024)) | 0) + 24) | 0))) {
                                newXSpeedInMibipixelsPerSecond = 0;
                                proposedNewXMibi = (proposedNewXMibi + 1024) | 0;
                                if (proposedNewXMibi >= newXMibi) {
                                    proposedNewXMibi = newXMibi;
                                    break;
                                }
                            } else {
                                break;
                            }
                        }
                    }

                    newXMibi = proposedNewXMibi;

                    var newIsDeadElapsedMicros = null;

                    if (tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsKillZone((((tuxState.XMibi >> 10) - 12) | 0), (((tuxState.YMibi >> 10) - 48) | 0)) || tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsKillZone((((tuxState.XMibi >> 10) + 12) | 0), (((tuxState.YMibi >> 10) - 48) | 0)) || tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsKillZone((((tuxState.XMibi >> 10) - 12) | 0), (((tuxState.YMibi >> 10) + 24) | 0)) || tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsKillZone((((tuxState.XMibi >> 10) + 12) | 0), (((tuxState.YMibi >> 10) + 24) | 0))) {
                        newIsDeadElapsedMicros = 0;
                    }
                    if (tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsSpikes((((tuxState.XMibi >> 10) - 12) | 0), (((tuxState.YMibi >> 10) - 48) | 0)) || tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsSpikes((((tuxState.XMibi >> 10) + 12) | 0), (((tuxState.YMibi >> 10) - 48) | 0)) || tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsSpikes((((tuxState.XMibi >> 10) - 12) | 0), (((tuxState.YMibi >> 10) + 24) | 0)) || tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsSpikes((((tuxState.XMibi >> 10) + 12) | 0), (((tuxState.YMibi >> 10) + 24) | 0))) {
                        newIsDeadElapsedMicros = 0;
                    }

                    var newTeleportCooldown = tuxState.TeleportCooldown;
                    if (newTeleportCooldown != null) {
                        newTeleportCooldown = Bridge.Int.clip32(System.Nullable.getValue(newTeleportCooldown) - elapsedMicrosPerFrame);
                        if (System.Nullable.getValue(newTeleportCooldown) <= 0) {
                            newTeleportCooldown = null;
                        }
                    }

                    var newTeleportStartingLocation = null;
                    var newTeleportInProgressElapsedMicros = tuxState.TeleportInProgressElapsedMicros;
                    if (newIsDeadElapsedMicros == null && canUseTeleport && newHasFinishedLevelElapsedMicros == null && tuxState.TeleportCooldown == null && !tuxState.HasAlreadyUsedTeleport && move.Teleported && !previousMove.Teleported) {
                        soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$PlaySound(TuxPlanetSpeedrunAnyPercentLibrary.GameSound.Teleport);

                        newTeleportStartingLocation = { Item1: tuxState.XMibi, Item2: tuxState.YMibi };
                        newTeleportInProgressElapsedMicros = 0;

                        var deltaX;

                        if (move.ArrowRight && !move.ArrowLeft) {
                            deltaX = 1;
                        } else {
                            if (move.ArrowLeft && !move.ArrowRight) {
                                deltaX = -1;
                            } else {
                                deltaX = 0;
                            }
                        }

                        var deltaY;

                        if (move.ArrowUp && !move.ArrowDown) {
                            deltaY = 1;
                        } else {
                            if (move.ArrowDown && !move.ArrowUp) {
                                deltaY = -1;
                            } else {
                                deltaY = 0;
                            }
                        }

                        if (deltaX === 0 && deltaY === 0) {
                            deltaX = tuxState.IsFacingRight ? 1 : -1;
                        }

                        var interval = 100;

                        if (deltaX === 0 || deltaY === 0) {
                            interval = 141;
                        }

                        while (true) {
                            if (interval === 0) {
                                newTeleportStartingLocation = null;
                                newTeleportInProgressElapsedMicros = null;
                                newTeleportCooldown = TuxPlanetSpeedrunAnyPercentLibrary.TuxState.TELEPORT_COOLDOWN;
                                break;
                            }

                            proposedNewXMibi = (newXMibi + Bridge.Int.mul(Bridge.Int.mul(Bridge.Int.mul(deltaX, 1024), interval), 2)) | 0;
                            proposedNewYMibi = (newYMibi + Bridge.Int.mul(Bridge.Int.mul(Bridge.Int.mul(deltaY, 1024), interval), 2)) | 0;
                            interval = (interval - 1) | 0;

                            if (TuxPlanetSpeedrunAnyPercentLibrary.TuxStateProcessing.IsTeleportable(tilemap, ((((Bridge.Int.div(proposedNewXMibi, 1024)) | 0) - 12) | 0), ((((Bridge.Int.div(proposedNewYMibi, 1024)) | 0) - 48) | 0)) && TuxPlanetSpeedrunAnyPercentLibrary.TuxStateProcessing.IsTeleportable(tilemap, ((((Bridge.Int.div(proposedNewXMibi, 1024)) | 0) - 12) | 0), ((((Bridge.Int.div(proposedNewYMibi, 1024)) | 0) + 24) | 0)) && TuxPlanetSpeedrunAnyPercentLibrary.TuxStateProcessing.IsTeleportable(tilemap, ((((Bridge.Int.div(proposedNewXMibi, 1024)) | 0) + 12) | 0), ((((Bridge.Int.div(proposedNewYMibi, 1024)) | 0) - 48) | 0)) && TuxPlanetSpeedrunAnyPercentLibrary.TuxStateProcessing.IsTeleportable(tilemap, ((((Bridge.Int.div(proposedNewXMibi, 1024)) | 0) + 12) | 0), ((((Bridge.Int.div(proposedNewYMibi, 1024)) | 0) + 24) | 0))) {
                                newXMibi = proposedNewXMibi;
                                newYMibi = proposedNewYMibi;
                                newXSpeedInMibipixelsPerSecond = Bridge.Int.mul(Bridge.Int.mul(deltaX, 1024), (deltaX === 0 || deltaY === 0 ? 1448 : 1024));
                                newYSpeedInMibipixelsPerSecond = Bridge.Int.mul(Bridge.Int.mul(deltaY, 1024), (deltaX === 0 || deltaY === 0 ? 1448 : 1024));
                                newLastTimeOnGround = null;
                                break;
                            }
                        }
                    }

                    return new TuxPlanetSpeedrunAnyPercentLibrary.TuxStateProcessing.Result(new TuxPlanetSpeedrunAnyPercentLibrary.TuxState(newXMibi, newYMibi, newXSpeedInMibipixelsPerSecond, newYSpeedInMibipixelsPerSecond, newPreviousJumps, newIsOnGround, newLastTimeOnGround, newTeleportStartingLocation, newTeleportInProgressElapsedMicros, newTeleportCooldown, tuxState.HasAlreadyUsedTeleport ? !newIsOnGround : false, newSpriteElapsedMicros, newHasFinishedLevelElapsedMicros, newIsStillHoldingJumpButton, newIsDeadElapsedMicros, isMovingRight ? true : (isMovingLeft ? false : tuxState.IsFacingRight)), System.Nullable.hasValue(newHasFinishedLevelElapsedMicros) && System.Nullable.getValue(newHasFinishedLevelElapsedMicros) >= TuxPlanetSpeedrunAnyPercentLibrary.TuxState.FINISHED_LEVEL_ANIMATION_DURATION, false, System.Nullable.hasValue(newHasFinishedLevelElapsedMicros));
                },
                Render: function (tuxState, displayOutput, camera, windowWidth, windowHeight) {
                    var image = tuxState.IsFacingRight ? TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Tux : TuxPlanetSpeedrunAnyPercentLibrary.GameImage.TuxMirrored;

                    displayOutput = new (DTLibrary.TranslatedDisplayOutput$2(TuxPlanetSpeedrunAnyPercentLibrary.GameImage,TuxPlanetSpeedrunAnyPercentLibrary.GameFont))(displayOutput, ((-(((camera.X - ((Bridge.Int.div(windowWidth, 2)) | 0)) | 0))) | 0), ((-(((camera.Y - ((Bridge.Int.div(windowHeight, 2)) | 0)) | 0))) | 0));

                    if (tuxState.IsDead) {
                        var spriteNum = (((Bridge.Int.div(tuxState.SpriteElapsedMicros, (300000))) | 0)) % 2;


                        var initialDeadYVelocity = 450;
                        var acceleration = -800;
                        var time = (Bridge.Int.div(System.Nullable.getValue(tuxState.IsDeadElapsedMicros), 1000)) | 0;
                        var deadYOffset = (((Bridge.Int.div(((Bridge.Int.div(Bridge.Int.mul(((Bridge.Int.div(Bridge.Int.mul(acceleration, time), 1000)) | 0), time), 2)) | 0), 1000)) | 0) + ((Bridge.Int.div(Bridge.Int.mul(initialDeadYVelocity, time), 1000)) | 0)) | 0;

                        displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(image, ((64 + Bridge.Int.mul(spriteNum, 32)) | 0), 192, 32, 32, ((((Bridge.Int.div(tuxState.XMibi, 1024)) | 0) - 48) | 0), ((((((Bridge.Int.div(tuxState.YMibi, 1024)) | 0) - 48) | 0) + deadYOffset) | 0), 0, 384);
                    } else if (tuxState.TeleportInProgressElapsedMicros != null) {
                        var deltaX = System.Int64(tuxState.XMibi - tuxState.TeleportStartingLocation.Item1);
                        var deltaY = System.Int64(tuxState.YMibi - tuxState.TeleportStartingLocation.Item2);

                        for (var i = Math.max(0, ((System.Nullable.getValue(tuxState.TeleportInProgressElapsedMicros) - 50000) | 0)); i < System.Nullable.getValue(tuxState.TeleportInProgressElapsedMicros); i = (i + (5000)) | 0) {
                            var renderXMibi = System.Int64.clip32(System.Int64(tuxState.TeleportStartingLocation.Item1).add(deltaX.mul(System.Int64(i)).div(System.Int64(TuxPlanetSpeedrunAnyPercentLibrary.TuxState.TELEPORT_DURATION))));
                            var renderYMibi = System.Int64.clip32(System.Int64(tuxState.TeleportStartingLocation.Item2).add(deltaY.mul(System.Int64(i)).div(System.Int64(TuxPlanetSpeedrunAnyPercentLibrary.TuxState.TELEPORT_DURATION))));

                            var alpha = (Bridge.Int.div(Bridge.Int.mul((((i - (((System.Nullable.getValue(tuxState.TeleportInProgressElapsedMicros) - 50000) | 0))) | 0)), 170), 50000)) | 0;

                            if (alpha > 0 && alpha <= 255) {
                                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle((((renderXMibi >> 10) - 20) | 0), (((renderYMibi >> 10) - 20) | 0), 40, 40, new DTLibrary.DTColor.$ctor1(255, 255, 255, alpha), true);
                            }
                        }
                    } else {
                        var spriteNum1;

                        var tuxXSpeedNormalized = tuxState.IsFacingRight ? tuxState.XSpeedInMibipixelsPerSecond : ((-tuxState.XSpeedInMibipixelsPerSecond) | 0);

                        if (tuxXSpeedNormalized === 0 && tuxState.YSpeedInMibipixelsPerSecond === 0) {
                            spriteNum1 = (((Bridge.Int.div(tuxState.SpriteElapsedMicros, (300000))) | 0)) % 4;
                        } else {
                            if (tuxState.YSpeedInMibipixelsPerSecond === 0 && tuxXSpeedNormalized < 0) {
                                spriteNum1 = 4;
                            } else {
                                if (tuxState.YSpeedInMibipixelsPerSecond === 0 && tuxXSpeedNormalized < 10000) {
                                    spriteNum1 = (((((Bridge.Int.div(tuxState.SpriteElapsedMicros, (80000))) | 0)) % 8) + 8) | 0;
                                } else {
                                    if (tuxState.YSpeedInMibipixelsPerSecond === 0) {
                                        spriteNum1 = (((((Bridge.Int.div(tuxState.SpriteElapsedMicros, (80000))) | 0)) % 8) + 16) | 0;
                                    } else {
                                        if (tuxState.YSpeedInMibipixelsPerSecond > 0) {
                                            spriteNum1 = 33;
                                        } else {
                                            if (tuxState.YSpeedInMibipixelsPerSecond < 0) {
                                                spriteNum1 = 36;
                                            } else {
                                                spriteNum1 = 0;
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        var imageX = Bridge.Int.mul((spriteNum1 % 8), 32);
                        var imageY = Bridge.Int.mul(((Bridge.Int.div(spriteNum1, 8)) | 0), 32);

                        displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(image, imageX, imageY, 32, 32, ((((Bridge.Int.div(tuxState.XMibi, 1024)) | 0) - 48) | 0), ((((Bridge.Int.div(tuxState.YMibi, 1024)) | 0) - 48) | 0), 0, 384);
                    }
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.TuxStateProcessing.MoveInfo", {
        $kind: "nested class",
        fields: {
            IsMovingRight: false,
            IsMovingLeft: false,
            HasJumped: false
        },
        ctors: {
            ctor: function (isMovingRight, isMovingLeft, hasJumped) {
                this.$initialize();
                this.IsMovingRight = isMovingRight;
                this.IsMovingLeft = isMovingLeft;
                this.HasJumped = hasJumped;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.TuxStateProcessing.Result", {
        $kind: "nested class",
        fields: {
            TuxState: null,
            EndLevel: false,
            HasDied: false,
            ShouldStopMusic: false
        },
        ctors: {
            ctor: function (tuxState, endLevel, hasDied, shouldStopMusic) {
                this.$initialize();
                this.TuxState = tuxState;
                this.EndLevel = endLevel;
                this.HasDied = hasDied;
                this.ShouldStopMusic = shouldStopMusic;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.VersionInfo", {
        statics: {
            methods: {
                GetVersionInfo: function () {
                    var versionHistory = TuxPlanetSpeedrunAnyPercentLibrary.VersionInfo.GetVersionHistory();

                    return versionHistory.getItem(((versionHistory.Count - 1) | 0));
                },
                GetVersionHistory: function () {
                    var list = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.VersionInfo)).ctor();

                    list.add(new TuxPlanetSpeedrunAnyPercentLibrary.VersionInfo("1.00", "1204514613893229"));
                    list.add(new TuxPlanetSpeedrunAnyPercentLibrary.VersionInfo("1.01", "3012096945791874"));

                    return list;
                }
            }
        },
        fields: {
            Version: null,
            AlphanumericVersionGuid: null
        },
        ctors: {
            ctor: function (version, alphanumericVersionGuid) {
                this.$initialize();
                this.Version = version;
                this.AlphanumericVersionGuid = alphanumericVersionGuid;
            }
        }
    });

    Bridge.define("DTLibrary.ConsoleLogger", {
        inherits: [DTLibrary.IDTLogger],
        alias: [
            "Write", "DTLibrary$IDTLogger$Write",
            "WriteLine$1", "DTLibrary$IDTLogger$WriteLine$1",
            "WriteLine", "DTLibrary$IDTLogger$WriteLine"
        ],
        methods: {
            Write: function (str) {
                System.Console.Write(str);
            },
            WriteLine$1: function (str) {
                System.Console.WriteLine(str);
            },
            WriteLine: function () {
                System.Console.WriteLine();
            }
        }
    });

    /**
     * CopiedKeyboard is just an easy way to make a deep copy
     of an IKeyboard object.  Its constructor takes an IKeyboard
     object in order to create a copy of the keyboard.
     In general, making a copy of the IKeyboard object can
     be useful, since this copy is immutable and is guaranteed
     not to change.
     *
     * @public
     * @class DTLibrary.CopiedKeyboard
     * @implements  DTLibrary.IKeyboard
     */
    Bridge.define("DTLibrary.CopiedKeyboard", {
        inherits: [DTLibrary.IKeyboard],
        fields: {
            mapping: null
        },
        alias: ["IsPressed", "DTLibrary$IKeyboard$IsPressed"],
        ctors: {
            ctor: function (keyboard) {
                var $t;
                this.$initialize();
                this.mapping = new (System.Collections.Generic.Dictionary$2(DTLibrary.Key,System.Boolean))();
                $t = Bridge.getEnumerator(System.Enum.getValues(DTLibrary.Key));
                try {
                    while ($t.moveNext()) {
                        var key = Bridge.cast($t.Current, DTLibrary.Key);
                        this.mapping.set(key, keyboard.DTLibrary$IKeyboard$IsPressed(key));
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            }
        },
        methods: {
            IsPressed: function (key) {
                return this.mapping.get(key);
            }
        }
    });

    /**
     * CopiedMouse is just an easy way to make a deep copy
     of an IMouse object.  Its constructor takes an IMouse
     object in order to create a copy of the mouse.
     In general, making a copy of the IMouse object can
     be useful, since this copy is immutable and is guaranteed
     not to change.
     *
     * @public
     * @class DTLibrary.CopiedMouse
     * @implements  DTLibrary.IMouse
     */
    Bridge.define("DTLibrary.CopiedMouse", {
        inherits: [DTLibrary.IMouse],
        fields: {
            x: 0,
            y: 0,
            leftMouse: false,
            rightMouse: false
        },
        alias: [
            "GetX", "DTLibrary$IMouse$GetX",
            "GetY", "DTLibrary$IMouse$GetY",
            "IsLeftMouseButtonPressed", "DTLibrary$IMouse$IsLeftMouseButtonPressed",
            "IsRightMouseButtonPressed", "DTLibrary$IMouse$IsRightMouseButtonPressed"
        ],
        ctors: {
            ctor: function (mouse) {
                this.$initialize();
                this.x = mouse.DTLibrary$IMouse$GetX();
                this.y = mouse.DTLibrary$IMouse$GetY();
                this.leftMouse = mouse.DTLibrary$IMouse$IsLeftMouseButtonPressed();
                this.rightMouse = mouse.DTLibrary$IMouse$IsRightMouseButtonPressed();
            }
        },
        methods: {
            GetX: function () {
                return this.x;
            },
            GetY: function () {
                return this.y;
            },
            IsLeftMouseButtonPressed: function () {
                return this.leftMouse;
            },
            IsRightMouseButtonPressed: function () {
                return this.rightMouse;
            }
        }
    });

    Bridge.define("DTLibrary.DisplayLogger", {
        inherits: [DTLibrary.IDTLogger],
        statics: {
            fields: {
                NUMBER_OF_LINES_TO_LOG: 0
            },
            ctors: {
                init: function () {
                    this.NUMBER_OF_LINES_TO_LOG = 5;
                }
            }
        },
        fields: {
            lines: null,
            x: 0,
            y: 0
        },
        alias: [
            "Write", "DTLibrary$IDTLogger$Write",
            "WriteLine$1", "DTLibrary$IDTLogger$WriteLine$1",
            "WriteLine", "DTLibrary$IDTLogger$WriteLine"
        ],
        ctors: {
            ctor: function (x, y) {
                this.$initialize();
                this.x = x;
                this.y = y;
                this.lines = System.Array.init(6, null, System.String);
                for (var i = 0; i < this.lines.length; i = (i + 1) | 0) {
                    this.lines[System.Array.index(i, this.lines)] = "";
                }
            }
        },
        methods: {
            Render: function (ImageEnum, FontEnum, displayOutput, font, color) {
                var text = "";

                if (this.lines[System.Array.index(((this.lines.length - 1) | 0), this.lines)].length > 0) {
                    for (var i = 1; i < this.lines.length; i = (i + 1) | 0) {
                        text = (text || "") + (this.lines[System.Array.index(i, this.lines)] || "") + "\n";
                    }
                } else {
                    for (var i1 = 0; i1 < ((this.lines.length - 1) | 0); i1 = (i1 + 1) | 0) {
                        text = (text || "") + (this.lines[System.Array.index(i1, this.lines)] || "") + "\n";
                    }
                }

                displayOutput["DTLibrary$IDisplayOutput$2$" + Bridge.getTypeAlias(ImageEnum) + "$" + Bridge.getTypeAlias(FontEnum) + "$TryDrawText"](this.x, this.y, text, font, color);
            },
            Write: function (str) {
                while (true) {
                    var index = System.String.indexOf(str, String.fromCharCode(10));

                    if (index < 0) {
                        this.lines[System.Array.index(((this.lines.length - 1) | 0), this.lines)] = (this.lines[System.Array.index(((this.lines.length - 1) | 0), this.lines)] || "") + (str || "");
                        break;
                    }

                    var line = str.substr(0, index);
                    this.lines[System.Array.index(((this.lines.length - 1) | 0), this.lines)] = (this.lines[System.Array.index(((this.lines.length - 1) | 0), this.lines)] || "") + (line || "");

                    for (var i = 1; i < this.lines.length; i = (i + 1) | 0) {
                        this.lines[System.Array.index(((i - 1) | 0), this.lines)] = this.lines[System.Array.index(i, this.lines)];
                    }
                    this.lines[System.Array.index(((this.lines.length - 1) | 0), this.lines)] = "";

                    str = str.substr(((index + 1) | 0));
                }
            },
            WriteLine$1: function (str) {
                this.Write((str || "") + "\n");
            },
            WriteLine: function () {
                this.Write("\n");
            }
        }
    });

    /**
     * An interface that marks an implementation of IDTRandom as completely deterministic.
     Deterministic is defined to mean that the implementation will always
     return the same values given the same seed and sequence of function calls.
     This means that an instance of IDTDeterministicRandom must behave identically
     across a variety of dimensions.
     For instance:
     * Two instances on different computers (with the same seed and function calls)
       must return the same values.
     * Two instances being executed at different times (with the same seed and function calls)
       must return the same values.
     * Two instances being executed on different versions of C# (with the same seed and function calls)
       must return the same values.
     * Two instances being executed on different operating systems (with the same seed and function calls)
       must return the same values.
     *
     * @abstract
     * @public
     * @class DTLibrary.IDTDeterministicRandom
     * @implements  DTLibrary.IDTRandom
     */
    Bridge.define("DTLibrary.IDTDeterministicRandom", {
        inherits: [DTLibrary.IDTRandom],
        $kind: "interface"
    });

    Bridge.define("DTLibrary.DTDisplay$2", function (ImageEnum, FontEnum) { return {
        inherits: [DTLibrary.IDisplayProcessing$1(ImageEnum),DTLibrary.IDisplayOutput$2(ImageEnum,FontEnum),DTLibrary.IDisplayCleanup],
        alias: [
            "DrawImage", "DTLibrary$IDisplayOutput$2$" + Bridge.getTypeAlias(ImageEnum) + "$" + Bridge.getTypeAlias(FontEnum) + "$DrawImage",
            "DrawImageRotatedClockwise$2", "DTLibrary$IDisplayOutput$2$" + Bridge.getTypeAlias(ImageEnum) + "$" + Bridge.getTypeAlias(FontEnum) + "$DrawImageRotatedClockwise"
        ],
        methods: {
            DrawImage: function (image, x, y) {
                this.DrawImageRotatedClockwise$1(image, x, y, 0, 128);
            },
            DrawImageRotatedClockwise$2: function (image, x, y, degreesScaled) {
                this.DrawImageRotatedClockwise$1(image, x, y, degreesScaled, 128);
            }
        }
    }; });

    /**
     * An implementation of IDTRandom that simply
     uses the System.Random class.
     *
     * @public
     * @class DTLibrary.DTRandom
     * @implements  DTLibrary.IDTRandom
     */
    Bridge.define("DTLibrary.DTRandom", {
        inherits: [DTLibrary.IDTRandom],
        fields: {
            random: null
        },
        alias: [
            "AddSeed", "DTLibrary$IDTRandom$AddSeed",
            "NextInt", "DTLibrary$IDTRandom$NextInt",
            "NextBool", "DTLibrary$IDTRandom$NextBool"
        ],
        ctors: {
            ctor: function () {
                this.$initialize();
                this.random = new System.Random.ctor();
            }
        },
        methods: {
            AddSeed: function (i) {
                this.random = new System.Random.$ctor1(i);
            },
            NextInt: function (i) {
                return this.random.Next$1(i);
            },
            NextBool: function () {
                return this.NextInt(2) === 1;
            }
        }
    });

    /**
     * An implementation of IKeyboard that simply represents
     no input (i.e. no keys are pressed).
     *
     * @public
     * @class DTLibrary.EmptyKeyboard
     * @implements  DTLibrary.IKeyboard
     */
    Bridge.define("DTLibrary.EmptyKeyboard", {
        inherits: [DTLibrary.IKeyboard],
        alias: ["IsPressed", "DTLibrary$IKeyboard$IsPressed"],
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            IsPressed: function (key) {
                return false;
            }
        }
    });

    Bridge.define("DTLibrary.EmptyLogger", {
        inherits: [DTLibrary.IDTLogger],
        alias: [
            "Write", "DTLibrary$IDTLogger$Write",
            "WriteLine$1", "DTLibrary$IDTLogger$WriteLine$1",
            "WriteLine", "DTLibrary$IDTLogger$WriteLine"
        ],
        methods: {
            Write: function (str) { },
            WriteLine$1: function (str) { },
            WriteLine: function () { }
        }
    });

    /**
     * An implementation of IMouse that simply represents
     no input.
     *
     * @public
     * @class DTLibrary.EmptyMouse
     * @implements  DTLibrary.IMouse
     */
    Bridge.define("DTLibrary.EmptyMouse", {
        inherits: [DTLibrary.IMouse],
        alias: [
            "GetX", "DTLibrary$IMouse$GetX",
            "GetY", "DTLibrary$IMouse$GetY",
            "IsLeftMouseButtonPressed", "DTLibrary$IMouse$IsLeftMouseButtonPressed",
            "IsRightMouseButtonPressed", "DTLibrary$IMouse$IsRightMouseButtonPressed"
        ],
        ctors: {
            ctor: function () {
                this.$initialize();
            }
        },
        methods: {
            GetX: function () {
                return 0;
            },
            GetY: function () {
                return 0;
            },
            IsLeftMouseButtonPressed: function () {
                return false;
            },
            IsRightMouseButtonPressed: function () {
                return false;
            }
        }
    });

    Bridge.definei("DTLibrary.IMusic$1", function (MusicEnum) { return {
        inherits: [DTLibrary.IMusicOutput$1(MusicEnum),DTLibrary.IMusicProcessing,DTLibrary.IMusicCleanup],
        $kind: "interface"
    }; });

    Bridge.define("DTLibrary.SimpleTimer", {
        inherits: [DTLibrary.ITimer],
        alias: ["GetNumberOfMicroSeconds", "DTLibrary$ITimer$GetNumberOfMicroSeconds"],
        methods: {
            GetNumberOfMicroSeconds: function () {
                return System.DateTime.getTicks(System.DateTime.getNow()).div(System.Int64(10));
            }
        }
    });

    Bridge.define("DTLibrary.SimulatedMouse", {
        inherits: [DTLibrary.IMouse],
        fields: {
            x: 0,
            y: 0,
            isLeftMouseButtonPressed: false,
            isRightMouseButtonPressed: false
        },
        alias: [
            "GetX", "DTLibrary$IMouse$GetX",
            "GetY", "DTLibrary$IMouse$GetY",
            "IsLeftMouseButtonPressed", "DTLibrary$IMouse$IsLeftMouseButtonPressed",
            "IsRightMouseButtonPressed", "DTLibrary$IMouse$IsRightMouseButtonPressed"
        ],
        ctors: {
            ctor: function (x, y, isLeftMouseButtonPressed, isRightMouseButtonPressed) {
                this.$initialize();
                this.x = x;
                this.y = y;
                this.isLeftMouseButtonPressed = isLeftMouseButtonPressed;
                this.isRightMouseButtonPressed = isRightMouseButtonPressed;
            }
        },
        methods: {
            GetX: function () {
                return this.x;
            },
            GetY: function () {
                return this.y;
            },
            IsLeftMouseButtonPressed: function () {
                return this.isLeftMouseButtonPressed;
            },
            IsRightMouseButtonPressed: function () {
                return this.isRightMouseButtonPressed;
            }
        }
    });

    Bridge.define("DTLibrary.TranslatedDisplayOutput$2", function (ImageEnum, FontEnum) { return {
        inherits: [DTLibrary.IDisplayOutput$2(ImageEnum,FontEnum)],
        fields: {
            display: null,
            xOffsetInPixels: 0,
            yOffsetInPixels: 0
        },
        alias: [
            "DrawRectangle", "DTLibrary$IDisplayOutput$2$" + Bridge.getTypeAlias(ImageEnum) + "$" + Bridge.getTypeAlias(FontEnum) + "$DrawRectangle",
            "DrawText", "DTLibrary$IDisplayOutput$2$" + Bridge.getTypeAlias(ImageEnum) + "$" + Bridge.getTypeAlias(FontEnum) + "$DrawText",
            "TryDrawText", "DTLibrary$IDisplayOutput$2$" + Bridge.getTypeAlias(ImageEnum) + "$" + Bridge.getTypeAlias(FontEnum) + "$TryDrawText",
            "DrawInitialLoadingScreen", "DTLibrary$IDisplayOutput$2$" + Bridge.getTypeAlias(ImageEnum) + "$" + Bridge.getTypeAlias(FontEnum) + "$DrawInitialLoadingScreen",
            "DrawImage", "DTLibrary$IDisplayOutput$2$" + Bridge.getTypeAlias(ImageEnum) + "$" + Bridge.getTypeAlias(FontEnum) + "$DrawImage",
            "DrawImageRotatedClockwise$2", "DTLibrary$IDisplayOutput$2$" + Bridge.getTypeAlias(ImageEnum) + "$" + Bridge.getTypeAlias(FontEnum) + "$DrawImageRotatedClockwise",
            "DrawImageRotatedClockwise$1", "DTLibrary$IDisplayOutput$2$" + Bridge.getTypeAlias(ImageEnum) + "$" + Bridge.getTypeAlias(FontEnum) + "$DrawImageRotatedClockwise$1",
            "DrawImageRotatedClockwise", "DTLibrary$IDisplayOutput$2$" + Bridge.getTypeAlias(ImageEnum) + "$" + Bridge.getTypeAlias(FontEnum) + "$DrawImageRotatedClockwise$2",
            "GetWidth", "DTLibrary$IDisplayOutput$2$" + Bridge.getTypeAlias(ImageEnum) + "$" + Bridge.getTypeAlias(FontEnum) + "$GetWidth",
            "GetHeight", "DTLibrary$IDisplayOutput$2$" + Bridge.getTypeAlias(ImageEnum) + "$" + Bridge.getTypeAlias(FontEnum) + "$GetHeight"
        ],
        ctors: {
            ctor: function (display, xOffsetInPixels, yOffsetInPixels) {
                this.$initialize();
                this.display = display;
                this.xOffsetInPixels = xOffsetInPixels;
                this.yOffsetInPixels = yOffsetInPixels;
            }
        },
        methods: {
            DrawRectangle: function (x, y, width, height, color, fill) {
                this.display["DTLibrary$IDisplayOutput$2$" + Bridge.getTypeAlias(ImageEnum) + "$" + Bridge.getTypeAlias(FontEnum) + "$DrawRectangle"](((x + this.xOffsetInPixels) | 0), ((y + this.yOffsetInPixels) | 0), width, height, color, fill);
            },
            DrawText: function (x, y, text, font, color) {
                this.display["DTLibrary$IDisplayOutput$2$" + Bridge.getTypeAlias(ImageEnum) + "$" + Bridge.getTypeAlias(FontEnum) + "$DrawText"](((x + this.xOffsetInPixels) | 0), ((y + this.yOffsetInPixels) | 0), text, font, color);
            },
            TryDrawText: function (x, y, text, font, color) {
                this.display["DTLibrary$IDisplayOutput$2$" + Bridge.getTypeAlias(ImageEnum) + "$" + Bridge.getTypeAlias(FontEnum) + "$TryDrawText"](((x + this.xOffsetInPixels) | 0), ((y + this.yOffsetInPixels) | 0), text, font, color);
            },
            DrawInitialLoadingScreen: function () {
                this.display["DTLibrary$IDisplayOutput$2$" + Bridge.getTypeAlias(ImageEnum) + "$" + Bridge.getTypeAlias(FontEnum) + "$DrawInitialLoadingScreen"]();
            },
            DrawImage: function (image, x, y) {
                this.DrawImageRotatedClockwise$1(image, x, y, 0, 128);
            },
            DrawImageRotatedClockwise$2: function (image, x, y, degreesScaled) {
                this.DrawImageRotatedClockwise$1(image, x, y, degreesScaled, 128);
            },
            DrawImageRotatedClockwise$1: function (image, x, y, degreesScaled, scalingFactorScaled) {
                this.display["DTLibrary$IDisplayOutput$2$" + Bridge.getTypeAlias(ImageEnum) + "$" + Bridge.getTypeAlias(FontEnum) + "$DrawImageRotatedClockwise$1"](image, ((x + this.xOffsetInPixels) | 0), ((y + this.yOffsetInPixels) | 0), degreesScaled, scalingFactorScaled);
            },
            DrawImageRotatedClockwise: function (image, imageX, imageY, imageWidth, imageHeight, x, y, degreesScaled, scalingFactorScaled) {
                this.display["DTLibrary$IDisplayOutput$2$" + Bridge.getTypeAlias(ImageEnum) + "$" + Bridge.getTypeAlias(FontEnum) + "$DrawImageRotatedClockwise$2"](image, imageX, imageY, imageWidth, imageHeight, ((x + this.xOffsetInPixels) | 0), ((y + this.yOffsetInPixels) | 0), degreesScaled, scalingFactorScaled);
            },
            GetWidth: function (image) {
                return this.display["DTLibrary$IDisplayOutput$2$" + Bridge.getTypeAlias(ImageEnum) + "$" + Bridge.getTypeAlias(FontEnum) + "$GetWidth"](image);
            },
            GetHeight: function (image) {
                return this.display["DTLibrary$IDisplayOutput$2$" + Bridge.getTypeAlias(ImageEnum) + "$" + Bridge.getTypeAlias(FontEnum) + "$GetHeight"](image);
            }
        }
    }; });

    /**
     * An implementation of IMouse that takes an existing IMouse object (in the constructor)
     and creates an IMouse implementation that's simply the same mouse input, but translated
     by some offset.
     *
     * @public
     * @class DTLibrary.TranslatedMouse
     * @implements  DTLibrary.IMouse
     */
    Bridge.define("DTLibrary.TranslatedMouse", {
        inherits: [DTLibrary.IMouse],
        fields: {
            x: 0,
            y: 0,
            pressedLeft: false,
            pressedRight: false
        },
        alias: [
            "GetX", "DTLibrary$IMouse$GetX",
            "GetY", "DTLibrary$IMouse$GetY",
            "IsLeftMouseButtonPressed", "DTLibrary$IMouse$IsLeftMouseButtonPressed",
            "IsRightMouseButtonPressed", "DTLibrary$IMouse$IsRightMouseButtonPressed"
        ],
        ctors: {
            ctor: function (mouse, xOffset, yOffset) {
                this.$initialize();
                this.x = (mouse.DTLibrary$IMouse$GetX() + xOffset) | 0;
                this.y = (mouse.DTLibrary$IMouse$GetY() + yOffset) | 0;
                this.pressedLeft = mouse.DTLibrary$IMouse$IsLeftMouseButtonPressed();
                this.pressedRight = mouse.DTLibrary$IMouse$IsRightMouseButtonPressed();
            }
        },
        methods: {
            GetX: function () {
                return this.x;
            },
            GetY: function () {
                return this.y;
            },
            IsLeftMouseButtonPressed: function () {
                return this.pressedLeft;
            },
            IsRightMouseButtonPressed: function () {
                return this.pressedRight;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.GameImage", {
        $kind: "enum",
        statics: {
            fields: {
                SoundOn_Black: 0,
                SoundOff_Black: 1,
                MusicOn_Black: 2,
                MusicOff_Black: 3,
                SoundOn_White: 4,
                SoundOff_White: 5,
                MusicOn_White: 6,
                MusicOff_White: 7,
                TilemapSnow: 8,
                Tux: 9,
                TuxMirrored: 10,
                Konqi: 11,
                KonqiMirrored: 12,
                Blazeborn: 13,
                BlazebornMirrored: 14,
                Smartcap: 15,
                SmartcapMirrored: 16,
                BossHealth: 17,
                C4: 18,
                Coin: 19,
                EarthShell: 20,
                Igloo: 21,
                Actors: 22,
                Solid: 23,
                Spikes: 24,
                Signpost: 25,
                PathDirt: 26,
                Snow: 27,
                LevelIcons: 28,
                TuxOverworld: 29,
                OceanBackground: 30
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercent.BridgeFileIO", {
        inherits: [DTLibrary.IFileIO],
        alias: [
            "PersistData", "DTLibrary$IFileIO$PersistData",
            "FetchData", "DTLibrary$IFileIO$FetchData"
        ],
        ctors: {
            ctor: function () {
                this.$initialize();
                eval("\r\n\t\t\t\twindow.BridgeFileIOJavascript = ((function () {\r\n\t\t\t\t\t'use strict';\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar persistData = function (fileName, base64String) {\r\n\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\tlocalStorage.setItem(fileName, base64String);\r\n\t\t\t\t\t\t} catch (error) {\r\n\t\t\t\t\t\t\t// do nothing\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\tvar fetchData = function (fileName) {\r\n\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\tvar value = localStorage.getItem(fileName);\r\n\t\t\t\t\t\t\treturn value;\r\n\t\t\t\t\t\t} catch (error) {\r\n\t\t\t\t\t\t\treturn null;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar hasData = function (fileName) {\r\n\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\tvar value = localStorage.getItem(fileName);\r\n\t\t\t\t\t\t\treturn value !== null;\r\n\t\t\t\t\t\t} catch (error) {\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tpersistData: persistData,\r\n\t\t\t\t\t\tfetchData: fetchData,\r\n\t\t\t\t\t\thasData: hasData\r\n\t\t\t\t\t};\r\n\t\t\t\t})());\r\n\t\t\t");
            }
        },
        methods: {
            GetFileName: function (fileId) {
                var versionInfo = TuxPlanetSpeedrunAnyPercentLibrary.VersionInfo.GetVersionInfo();
                var alphanumericVersionGuid = versionInfo.AlphanumericVersionGuid;
                return "guid" + (alphanumericVersionGuid || "") + "_file" + (DTLibrary.StringUtil.ToStringCultureInvariant(fileId) || "");
            },
            PersistData: function (fileId, data) {
                var list = new (System.Collections.Generic.List$1(System.Byte)).ctor();

                var iterator = data.GetIterator();

                while (true) {
                    if (!iterator.HasNextByte()) {
                        break;
                    }

                    list.add(iterator.TryPop());
                }

                var array = System.Array.init(list.Count, 0, System.Byte);
                for (var i = 0; i < array.length; i = (i + 1) | 0) {
                    array[System.Array.index(i, array)] = list.getItem(i);
                }

                var base64String = System.Convert.toBase64String(array, null, null, null);

                window.BridgeFileIOJavascript.persistData(this.GetFileName(fileId), base64String);
            },
            FetchData: function (fileId) {
                var fileName = this.GetFileName(fileId);

                var hasData = eval("window.BridgeFileIOJavascript.hasData('" + (fileName || "") + "')");

                if (!hasData) {
                    return null;
                }

                var result = eval("window.BridgeFileIOJavascript.fetchData('" + (fileName || "") + "')");

                if (result == null) {
                    return null;
                }

                try {
                    var array = System.Convert.fromBase64String(result);
                    var byteList = new DTLibrary.ByteList.Builder();

                    for (var i = 0; i < array.length; i = (i + 1) | 0) {
                        byteList.Add(array[System.Array.index(i, array)]);
                    }

                    return byteList.ToByteList();
                } catch ($e1) {
                    $e1 = System.Exception.create($e1);
                }

                return null;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercent.BridgeKeyboard", {
        inherits: [DTLibrary.IKeyboard],
        alias: ["IsPressed", "DTLibrary$IKeyboard$IsPressed"],
        ctors: {
            ctor: function (disableArrowKeyScrolling) {
                this.$initialize();
                eval("\r\n\t\t\t\twindow.BridgeKeyboardJavascript = ((function () {\r\n\t\t\t\t\t'use strict';\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar keysBeingPressed = [];\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar disableArrowKeyScrolling = " + ((disableArrowKeyScrolling ? "true" : "false") || "") + ";\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar mapKeyToCanonicalKey = function (key) {\r\n\t\t\t\t\t\tif (key === 'A')\r\n\t\t\t\t\t\t\treturn 'a';\r\n\t\t\t\t\t\tif (key === 'B')\r\n\t\t\t\t\t\t\treturn 'b';\r\n\t\t\t\t\t\tif (key === 'C')\r\n\t\t\t\t\t\t\treturn 'c';\r\n\t\t\t\t\t\tif (key === 'D')\r\n\t\t\t\t\t\t\treturn 'd';\r\n\t\t\t\t\t\tif (key === 'E')\r\n\t\t\t\t\t\t\treturn 'e';\r\n\t\t\t\t\t\tif (key === 'F')\r\n\t\t\t\t\t\t\treturn 'f';\r\n\t\t\t\t\t\tif (key === 'G')\r\n\t\t\t\t\t\t\treturn 'g';\r\n\t\t\t\t\t\tif (key === 'H')\r\n\t\t\t\t\t\t\treturn 'h';\r\n\t\t\t\t\t\tif (key === 'I')\r\n\t\t\t\t\t\t\treturn 'i';\r\n\t\t\t\t\t\tif (key === 'J')\r\n\t\t\t\t\t\t\treturn 'j';\r\n\t\t\t\t\t\tif (key === 'K')\r\n\t\t\t\t\t\t\treturn 'k';\r\n\t\t\t\t\t\tif (key === 'L')\r\n\t\t\t\t\t\t\treturn 'l';\r\n\t\t\t\t\t\tif (key === 'M')\r\n\t\t\t\t\t\t\treturn 'm';\r\n\t\t\t\t\t\tif (key === 'N')\r\n\t\t\t\t\t\t\treturn 'n';\r\n\t\t\t\t\t\tif (key === 'O')\r\n\t\t\t\t\t\t\treturn 'o';\r\n\t\t\t\t\t\tif (key === 'P')\r\n\t\t\t\t\t\t\treturn 'p';\r\n\t\t\t\t\t\tif (key === 'Q')\r\n\t\t\t\t\t\t\treturn 'q';\r\n\t\t\t\t\t\tif (key === 'R')\r\n\t\t\t\t\t\t\treturn 'r';\r\n\t\t\t\t\t\tif (key === 'S')\r\n\t\t\t\t\t\t\treturn 's';\r\n\t\t\t\t\t\tif (key === 'T')\r\n\t\t\t\t\t\t\treturn 't';\r\n\t\t\t\t\t\tif (key === 'U')\r\n\t\t\t\t\t\t\treturn 'u';\r\n\t\t\t\t\t\tif (key === 'V')\r\n\t\t\t\t\t\t\treturn 'v';\r\n\t\t\t\t\t\tif (key === 'W')\r\n\t\t\t\t\t\t\treturn 'w';\r\n\t\t\t\t\t\tif (key === 'X')\r\n\t\t\t\t\t\t\treturn 'x';\r\n\t\t\t\t\t\tif (key === 'Y')\r\n\t\t\t\t\t\t\treturn 'y';\r\n\t\t\t\t\t\tif (key === 'Z')\r\n\t\t\t\t\t\t\treturn 'z';\r\n\t\t\t\t\t\tif (key === '!')\r\n\t\t\t\t\t\t\treturn '1';\r\n\t\t\t\t\t\tif (key === '@')\r\n\t\t\t\t\t\t\treturn '2';\r\n\t\t\t\t\t\tif (key === '#')\r\n\t\t\t\t\t\t\treturn '3';\r\n\t\t\t\t\t\tif (key === '$')\r\n\t\t\t\t\t\t\treturn '4';\r\n\t\t\t\t\t\tif (key === '%')\r\n\t\t\t\t\t\t\treturn '5';\r\n\t\t\t\t\t\tif (key === '^')\r\n\t\t\t\t\t\t\treturn '6';\r\n\t\t\t\t\t\tif (key === '&')\r\n\t\t\t\t\t\t\treturn '7';\r\n\t\t\t\t\t\tif (key === '*')\r\n\t\t\t\t\t\t\treturn '8';\r\n\t\t\t\t\t\tif (key === '(')\r\n\t\t\t\t\t\t\treturn '9';\r\n\t\t\t\t\t\tif (key === ')')\r\n\t\t\t\t\t\t\treturn '0';\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\treturn key;\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar keyDownHandler = function (e) {\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (disableArrowKeyScrolling) {\r\n\t\t\t\t\t\t\tif (e.key === 'ArrowRight' || e.key === 'ArrowLeft' || e.key === 'ArrowUp' || e.key === 'ArrowDown' || e.key === ' ')\r\n\t\t\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tvar key = mapKeyToCanonicalKey(e.key);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tfor (var i = 0; i < keysBeingPressed.length; i++) {\r\n\t\t\t\t\t\t\tif (keysBeingPressed[i] === key)\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tkeysBeingPressed.push(key);\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar keyUpHandler = function (e) {\r\n\t\t\t\t\t\tvar key = mapKeyToCanonicalKey(e.key);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tvar newArray = [];\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tfor (var i = 0; i < keysBeingPressed.length; i++) {\r\n\t\t\t\t\t\t\tif (keysBeingPressed[i] !== key)\r\n\t\t\t\t\t\t\t\tnewArray.push(keysBeingPressed[i]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tkeysBeingPressed = newArray;\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\r\n\t\t\t\t\tdocument.addEventListener('keydown', function (e) { keyDownHandler(e); }, false);\r\n\t\t\t\t\tdocument.addEventListener('keyup', function (e) { keyUpHandler(e); }, false);\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar isKeyPressed = function (k) {\r\n\t\t\t\t\t\tfor (var i = 0; i < keysBeingPressed.length; i++) {\r\n\t\t\t\t\t\t\tif (keysBeingPressed[i] === k)\r\n\t\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tisKeyPressed: isKeyPressed\r\n\t\t\t\t\t};\r\n\t\t\t\t})());\r\n\t\t\t");
            }
        },
        methods: {
            IsPressed: function (key) {
                var correspondingKeyCode;

                switch (key) {
                    case DTLibrary.Key.A: 
                        correspondingKeyCode = "a";
                        break;
                    case DTLibrary.Key.B: 
                        correspondingKeyCode = "b";
                        break;
                    case DTLibrary.Key.C: 
                        correspondingKeyCode = "c";
                        break;
                    case DTLibrary.Key.D: 
                        correspondingKeyCode = "d";
                        break;
                    case DTLibrary.Key.E: 
                        correspondingKeyCode = "e";
                        break;
                    case DTLibrary.Key.F: 
                        correspondingKeyCode = "f";
                        break;
                    case DTLibrary.Key.G: 
                        correspondingKeyCode = "g";
                        break;
                    case DTLibrary.Key.H: 
                        correspondingKeyCode = "h";
                        break;
                    case DTLibrary.Key.I: 
                        correspondingKeyCode = "i";
                        break;
                    case DTLibrary.Key.J: 
                        correspondingKeyCode = "j";
                        break;
                    case DTLibrary.Key.K: 
                        correspondingKeyCode = "k";
                        break;
                    case DTLibrary.Key.L: 
                        correspondingKeyCode = "l";
                        break;
                    case DTLibrary.Key.M: 
                        correspondingKeyCode = "m";
                        break;
                    case DTLibrary.Key.N: 
                        correspondingKeyCode = "n";
                        break;
                    case DTLibrary.Key.O: 
                        correspondingKeyCode = "o";
                        break;
                    case DTLibrary.Key.P: 
                        correspondingKeyCode = "p";
                        break;
                    case DTLibrary.Key.Q: 
                        correspondingKeyCode = "q";
                        break;
                    case DTLibrary.Key.R: 
                        correspondingKeyCode = "r";
                        break;
                    case DTLibrary.Key.S: 
                        correspondingKeyCode = "s";
                        break;
                    case DTLibrary.Key.T: 
                        correspondingKeyCode = "t";
                        break;
                    case DTLibrary.Key.U: 
                        correspondingKeyCode = "u";
                        break;
                    case DTLibrary.Key.V: 
                        correspondingKeyCode = "v";
                        break;
                    case DTLibrary.Key.W: 
                        correspondingKeyCode = "w";
                        break;
                    case DTLibrary.Key.X: 
                        correspondingKeyCode = "x";
                        break;
                    case DTLibrary.Key.Y: 
                        correspondingKeyCode = "y";
                        break;
                    case DTLibrary.Key.Z: 
                        correspondingKeyCode = "z";
                        break;
                    case DTLibrary.Key.Zero: 
                        correspondingKeyCode = "0";
                        break;
                    case DTLibrary.Key.One: 
                        correspondingKeyCode = "1";
                        break;
                    case DTLibrary.Key.Two: 
                        correspondingKeyCode = "2";
                        break;
                    case DTLibrary.Key.Three: 
                        correspondingKeyCode = "3";
                        break;
                    case DTLibrary.Key.Four: 
                        correspondingKeyCode = "4";
                        break;
                    case DTLibrary.Key.Five: 
                        correspondingKeyCode = "5";
                        break;
                    case DTLibrary.Key.Six: 
                        correspondingKeyCode = "6";
                        break;
                    case DTLibrary.Key.Seven: 
                        correspondingKeyCode = "7";
                        break;
                    case DTLibrary.Key.Eight: 
                        correspondingKeyCode = "8";
                        break;
                    case DTLibrary.Key.Nine: 
                        correspondingKeyCode = "9";
                        break;
                    case DTLibrary.Key.UpArrow: 
                        correspondingKeyCode = "ArrowUp";
                        break;
                    case DTLibrary.Key.DownArrow: 
                        correspondingKeyCode = "ArrowDown";
                        break;
                    case DTLibrary.Key.LeftArrow: 
                        correspondingKeyCode = "ArrowLeft";
                        break;
                    case DTLibrary.Key.RightArrow: 
                        correspondingKeyCode = "ArrowRight";
                        break;
                    case DTLibrary.Key.Delete: 
                        correspondingKeyCode = "Delete";
                        break;
                    case DTLibrary.Key.Backspace: 
                        correspondingKeyCode = "Backspace";
                        break;
                    case DTLibrary.Key.Enter: 
                        correspondingKeyCode = "Enter";
                        break;
                    case DTLibrary.Key.Shift: 
                        correspondingKeyCode = "Shift";
                        break;
                    case DTLibrary.Key.Space: 
                        correspondingKeyCode = " ";
                        break;
                    case DTLibrary.Key.Esc: 
                        correspondingKeyCode = "Escape";
                        break;
                    default: 
                        throw new System.Exception();
                }

                /* 
                				None of the keycodes need to be escaped
                				(but this would be necessary if we had a key
                				such as backslash)
                			*/
                var javascriptCode = "window.BridgeKeyboardJavascript.isKeyPressed('" + (correspondingKeyCode || "") + "')";

                var result = eval(javascriptCode);

                if (result) {
                    return true;
                }

                return false;

            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercent.BridgeMouse", {
        inherits: [DTLibrary.IMouse],
        alias: [
            "GetX", "DTLibrary$IMouse$GetX",
            "GetY", "DTLibrary$IMouse$GetY",
            "IsLeftMouseButtonPressed", "DTLibrary$IMouse$IsLeftMouseButtonPressed",
            "IsRightMouseButtonPressed", "DTLibrary$IMouse$IsRightMouseButtonPressed"
        ],
        ctors: {
            ctor: function () {
                this.$initialize();
                eval("\r\n\t\t\t\twindow.BridgeMouseJavascript = ((function () {\r\n\t\t\t\t\t'use strict';\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar mouseXPosition = 0;\r\n\t\t\t\t\tvar mouseYPosition = 0;\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar canvas = null;\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar mouseMoveHandler = function (e) {\r\n\t\t\t\t\t\r\n\t\t\t\t\t\tif (canvas === null) {\r\n\t\t\t\t\t\t\tcanvas = document.getElementById('bridgeCanvas');\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif (canvas === null)\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tvar xPosition = (e.pageX !== null && e.pageX !== undefined ? e.pageX : e.clientX) - canvas.offsetLeft;\r\n\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (xPosition < -5)\r\n\t\t\t\t\t\t\txPosition = -5;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (xPosition > canvas.width + 5)\r\n\t\t\t\t\t\t\txPosition = canvas.width + 5;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tvar yPosition = (e.pageY !== null && e.pageY !== undefined ? e.pageY : e.clientY) - canvas.offsetTop;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (yPosition < -5)\r\n\t\t\t\t\t\t\tyPosition = -5;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (yPosition > canvas.height + 5)\r\n\t\t\t\t\t\t\tyPosition = canvas.height + 5;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tmouseXPosition = xPosition;\r\n\t\t\t\t\t\tmouseYPosition = canvas.height - yPosition - 1;\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar isLeftMouseButtonPressed = false;\r\n\t\t\t\t\tvar isRightMouseButtonPressed = false;\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar checkMouseButtonHandler = function (e) {\r\n\t\t\t\t\t\tif ((e.buttons & 1) === 1)\r\n\t\t\t\t\t\t\tisLeftMouseButtonPressed = true;\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tisLeftMouseButtonPressed = false;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif ((e.buttons & 2) === 2)\r\n\t\t\t\t\t\t\tisRightMouseButtonPressed = true;\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tisRightMouseButtonPressed = false;\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\tvar disableContextMenu;\r\n\t\t\t\t\tdisableContextMenu = function () {\r\n\t\t\t\t\t\tif (canvas === null) {\r\n\t\t\t\t\t\t\tcanvas = document.getElementById('bridgeCanvas');\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif (canvas === null) {\r\n\t\t\t\t\t\t\t\tsetTimeout(disableContextMenu, 50);\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tcanvas.addEventListener('contextmenu', function (e) { e.preventDefault(); });\r\n\t\t\t\t\t};\r\n\t\t\t\t\tdisableContextMenu();\r\n\t\t\t\t\t\r\n\t\t\t\t\tdocument.addEventListener('mousemove', function (e) { mouseMoveHandler(e); checkMouseButtonHandler(e); }, false);\r\n\t\t\t\t\tdocument.addEventListener('mousedown', function (e) { checkMouseButtonHandler(e); }, false);\r\n\t\t\t\t\tdocument.addEventListener('mouseup', function (e) { checkMouseButtonHandler(e); }, false);\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tisLeftMouseButtonPressed: function () { return isLeftMouseButtonPressed; },\r\n\t\t\t\t\t\tisRightMouseButtonPressed: function () { return isRightMouseButtonPressed; },\r\n\t\t\t\t\t\tgetMouseX: function () { return Math.round(mouseXPosition); },\r\n\t\t\t\t\t\tgetMouseY: function () { return Math.round(mouseYPosition); }\r\n\t\t\t\t\t};\r\n\t\t\t\t})());\r\n\t\t\t");
            }
        },
        methods: {
            GetX: function () {
                return window.BridgeMouseJavascript.getMouseX();
            },
            GetY: function () {
                return window.BridgeMouseJavascript.getMouseY();
            },
            IsLeftMouseButtonPressed: function () {
                return window.BridgeMouseJavascript.isLeftMouseButtonPressed();
            },
            IsRightMouseButtonPressed: function () {
                return window.BridgeMouseJavascript.isRightMouseButtonPressed();
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.GameMusic", {
        $kind: "enum",
        statics: {
            fields: {
                Airship2: 0,
                Theme: 1,
                PeaceAtLast: 2,
                Chipdisko: 3,
                Jewels: 4
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.GameSound", {
        $kind: "enum",
        statics: {
            fields: {
                Click: 0,
                JingleWin01: 1,
                Die: 2,
                Squish: 3,
                Jump: 4,
                Teleport: 5
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.Background_Ocean", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.IBackground],
        alias: ["Render", "TuxPlanetSpeedrunAnyPercentLibrary$IBackground$Render"],
        methods: {
            Render: function (cameraX, cameraY, windowWidth, windowHeight, displayOutput) {
                var displacement = (Bridge.Int.div(((-cameraX) | 0), 8)) | 0;

                var image = TuxPlanetSpeedrunAnyPercentLibrary.GameImage.OceanBackground;

                var imageWidth = displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$GetWidth(image);
                var scalingFactor = 3;

                if (displacement >= 0) {
                    displacement = displacement % (Bridge.Int.mul(imageWidth, scalingFactor));
                } else {
                    var multiple = (Bridge.Int.div((((-displacement) | 0)), (Bridge.Int.mul(imageWidth, scalingFactor)))) | 0;
                    displacement = (displacement + Bridge.Int.mul(Bridge.Int.mul(multiple, imageWidth), scalingFactor)) | 0;
                    while (displacement >= Bridge.Int.mul(imageWidth, scalingFactor)) {
                        displacement = (displacement - Bridge.Int.mul(imageWidth, scalingFactor)) | 0;
                    }
                    while (displacement < 0) {
                        displacement = (displacement + Bridge.Int.mul(imageWidth, scalingFactor)) | 0;
                    }
                }

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$1(image, displacement, 0, 0, Bridge.Int.mul(scalingFactor, 128));

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$1(image, ((displacement - Bridge.Int.mul(imageWidth, scalingFactor)) | 0), 0, 0, Bridge.Int.mul(scalingFactor, 128));
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.BoundedTilemap", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.ITilemap],
        fields: {
            tilemap: null,
            width: 0,
            height: 0
        },
        alias: [
            "IsGround", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround",
            "IsSpikes", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsSpikes",
            "IsKillZone", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsKillZone",
            "IsEndOfLevel", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsEndOfLevel",
            "GetCutscene", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetCutscene",
            "GetCheckpoint", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetCheckpoint",
            "GetWidth", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetWidth",
            "GetHeight", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetHeight",
            "GetTuxLocation", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetTuxLocation",
            "GetEnemies", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetEnemies",
            "PlayMusic", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$PlayMusic",
            "RenderBackgroundTiles", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$RenderBackgroundTiles",
            "RenderForegroundTiles", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$RenderForegroundTiles"
        ],
        ctors: {
            ctor: function (tilemap) {
                this.$initialize();
                this.tilemap = tilemap;
                this.width = tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetWidth();
                this.height = tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetHeight();
            }
        },
        methods: {
            IsGround: function (x, y) {
                if (x < 0) {
                    return true;
                }
                if (x >= this.width) {
                    return true;
                }

                return this.tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(x, y);
            },
            IsSpikes: function (x, y) {
                return this.tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsSpikes(x, y);
            },
            IsKillZone: function (x, y) {
                if (y < 0) {
                    return true;
                }

                return this.tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsKillZone(x, y);
            },
            IsEndOfLevel: function (x, y) {
                return this.tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsEndOfLevel(x, y);
            },
            GetCutscene: function (x, y) {
                return this.tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetCutscene(x, y);
            },
            GetCheckpoint: function (x, y) {
                return this.tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetCheckpoint(x, y);
            },
            GetWidth: function () {
                return this.width;
            },
            GetHeight: function () {
                return this.height;
            },
            GetTuxLocation: function (xOffset, yOffset) {
                return this.tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetTuxLocation(xOffset, yOffset);
            },
            GetEnemies: function (xOffset, yOffset) {
                return this.tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetEnemies(xOffset, yOffset);
            },
            PlayMusic: function () {
                return this.tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$PlayMusic();
            },
            RenderBackgroundTiles: function (displayOutput, cameraX, cameraY, windowWidth, windowHeight) {
                this.tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$RenderBackgroundTiles(displayOutput, cameraX, cameraY, windowWidth, windowHeight);
            },
            RenderForegroundTiles: function (displayOutput, cameraX, cameraY, windowWidth, windowHeight) {
                this.tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$RenderForegroundTiles(displayOutput, cameraX, cameraY, windowWidth, windowHeight);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.ITilemap],
        statics: {
            methods: {
                NormalizeTilemaps: function (tilemaps) {
                    var $t;
                    var minX = null;
                    var minY = null;

                    $t = Bridge.getEnumerator(tilemaps);
                    try {
                        while ($t.moveNext()) {
                            var tilemap = $t.Current;
                            var tilemapMinX = tilemap.XOffset;

                            var tilemapMinY = tilemap.YOffset;

                            if (minX == null || System.Nullable.getValue(minX) > tilemapMinX) {
                                minX = tilemapMinX;
                            }

                            if (minY == null || System.Nullable.getValue(minY) > tilemapMinY) {
                                minY = tilemapMinY;
                            }
                        }
                    } finally {
                        if (Bridge.is($t, System.IDisposable)) {
                            $t.System$IDisposable$Dispose();
                        }
                    }

                    return System.Linq.Enumerable.from(tilemaps).select(function (t) {
                            return new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(t.Tilemap, ((t.XOffset - System.Nullable.getValue(minX)) | 0), ((t.YOffset - System.Nullable.getValue(minY)) | 0), t.AlwaysIncludeTilemap);
                        }).toList(TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset);
                }
            }
        },
        fields: {
            tilemaps: null,
            width: 0,
            height: 0
        },
        alias: [
            "PlayMusic", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$PlayMusic",
            "IsGround", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround",
            "IsSpikes", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsSpikes",
            "IsKillZone", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsKillZone",
            "IsEndOfLevel", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsEndOfLevel",
            "GetCutscene", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetCutscene",
            "GetCheckpoint", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetCheckpoint",
            "RenderBackgroundTiles", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$RenderBackgroundTiles",
            "RenderForegroundTiles", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$RenderForegroundTiles",
            "GetWidth", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetWidth",
            "GetHeight", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetHeight",
            "GetEnemies", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetEnemies",
            "GetTuxLocation", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetTuxLocation"
        ],
        ctors: {
            ctor: function (normalizedTilemaps, width, height) {
                this.$initialize();
                this.tilemaps = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset)).$ctor1(normalizedTilemaps);

                this.width = width;
                this.height = height;
            }
        },
        methods: {
            PlayMusic: function () {
                var $t;
                $t = Bridge.getEnumerator(this.tilemaps);
                try {
                    while ($t.moveNext()) {
                        var tilemap = $t.Current;
                        var music = tilemap.Tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$PlayMusic();

                        if (music != null) {
                            return System.Nullable.getValue(music);
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }

                return null;
            },
            IsGround: function (x, y) {
                for (var i = 0; i < this.tilemaps.Count; i = (i + 1) | 0) {
                    var tilemap = this.tilemaps.getItem(i);
                    if (tilemap.Tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(((x - tilemap.XOffset) | 0), ((y - tilemap.YOffset) | 0))) {
                        return true;
                    }
                }

                return false;
            },
            IsSpikes: function (x, y) {
                for (var i = 0; i < this.tilemaps.Count; i = (i + 1) | 0) {
                    var tilemap = this.tilemaps.getItem(i);
                    if (tilemap.Tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsSpikes(((x - tilemap.XOffset) | 0), ((y - tilemap.YOffset) | 0))) {
                        return true;
                    }
                }

                return false;
            },
            IsKillZone: function (x, y) {
                for (var i = 0; i < this.tilemaps.Count; i = (i + 1) | 0) {
                    var tilemap = this.tilemaps.getItem(i);
                    if (tilemap.Tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsKillZone(((x - tilemap.XOffset) | 0), ((y - tilemap.YOffset) | 0))) {
                        return true;
                    }
                }

                return false;
            },
            IsEndOfLevel: function (x, y) {
                for (var i = 0; i < this.tilemaps.Count; i = (i + 1) | 0) {
                    var tilemap = this.tilemaps.getItem(i);
                    if (tilemap.Tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsEndOfLevel(((x - tilemap.XOffset) | 0), ((y - tilemap.YOffset) | 0))) {
                        return true;
                    }
                }

                return false;
            },
            GetCutscene: function (x, y) {
                for (var i = 0; i < this.tilemaps.Count; i = (i + 1) | 0) {
                    var tilemap = this.tilemaps.getItem(i);
                    var cutscene = tilemap.Tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetCutscene(((x - tilemap.XOffset) | 0), ((y - tilemap.YOffset) | 0));

                    if (cutscene != null) {
                        return cutscene;
                    }
                }

                return null;
            },
            GetCheckpoint: function (x, y) {
                for (var i = 0; i < this.tilemaps.Count; i = (i + 1) | 0) {
                    var tilemap = this.tilemaps.getItem(i);
                    var checkpoint = tilemap.Tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetCheckpoint(((x - tilemap.XOffset) | 0), ((y - tilemap.YOffset) | 0));

                    if (checkpoint != null) {
                        return { Item1: ((checkpoint.Item1 + tilemap.XOffset) | 0), Item2: ((checkpoint.Item2 + tilemap.YOffset) | 0) };
                    }
                }

                return null;
            },
            RenderBackgroundTiles: function (displayOutput, cameraX, cameraY, windowWidth, windowHeight) {
                var $t;
                $t = Bridge.getEnumerator(this.tilemaps);
                try {
                    while ($t.moveNext()) {
                        var tilemap = $t.Current;
                        var translatedDisplayOutput = new (DTLibrary.TranslatedDisplayOutput$2(TuxPlanetSpeedrunAnyPercentLibrary.GameImage,TuxPlanetSpeedrunAnyPercentLibrary.GameFont))(displayOutput, tilemap.XOffset, tilemap.YOffset);

                        tilemap.Tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$RenderBackgroundTiles(translatedDisplayOutput, ((cameraX - tilemap.XOffset) | 0), ((cameraY - tilemap.YOffset) | 0), windowWidth, windowHeight);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            },
            RenderForegroundTiles: function (displayOutput, cameraX, cameraY, windowWidth, windowHeight) {
                var $t;
                $t = Bridge.getEnumerator(this.tilemaps);
                try {
                    while ($t.moveNext()) {
                        var tilemap = $t.Current;
                        var translatedDisplayOutput = new (DTLibrary.TranslatedDisplayOutput$2(TuxPlanetSpeedrunAnyPercentLibrary.GameImage,TuxPlanetSpeedrunAnyPercentLibrary.GameFont))(displayOutput, tilemap.XOffset, tilemap.YOffset);

                        tilemap.Tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$RenderForegroundTiles(translatedDisplayOutput, ((cameraX - tilemap.XOffset) | 0), ((cameraY - tilemap.YOffset) | 0), windowWidth, windowHeight);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }
            },
            GetWidth: function () {
                return this.width;
            },
            GetHeight: function () {
                return this.height;
            },
            GetEnemies: function (xOffset, yOffset) {
                var $t;
                var enemies = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor();

                $t = Bridge.getEnumerator(this.tilemaps);
                try {
                    while ($t.moveNext()) {
                        var tilemap = $t.Current;
                        var tilemapEnemies = tilemap.Tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetEnemies(((tilemap.XOffset + xOffset) | 0), ((tilemap.YOffset + yOffset) | 0));
                        enemies.AddRange(tilemapEnemies);
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }

                return enemies;
            },
            GetTuxLocation: function (xOffset, yOffset) {
                for (var i = 0; i < this.tilemaps.Count; i = (i + 1) | 0) {
                    var tilemap = this.tilemaps.getItem(i);
                    var tuxLocation = tilemap.Tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetTuxLocation(((xOffset + tilemap.XOffset) | 0), ((yOffset + tilemap.YOffset) | 0));

                    if (tuxLocation != null) {
                        return tuxLocation;
                    }
                }

                return null;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_SaveState", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.ICutscene],
        statics: {
            fields: {
                KONQI_DISAPPEAR_WAIT_TIME: 0
            },
            ctors: {
                init: function () {
                    this.KONQI_DISAPPEAR_WAIT_TIME = 500000;
                }
            },
            methods: {
                GetCutscene: function () {
                    var dialogues = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Dialogue)).ctor();

                    dialogues.add(TuxPlanetSpeedrunAnyPercentLibrary.Dialogue.GetDialogue(500, 460, 490, 40, "Hello. I'm Konqi! Nice to meet you!"));

                    dialogues.add(TuxPlanetSpeedrunAnyPercentLibrary.Dialogue.GetDialogue(10, 460, 172, 40, "Hello Konqi."));

                    dialogues.add(TuxPlanetSpeedrunAnyPercentLibrary.Dialogue.GetDialogue(500, 400, 490, 150, "These levels are so terribly \ndesigned. \n\nBut I have something that can \nhelp -- savestates!"));

                    dialogues.add(TuxPlanetSpeedrunAnyPercentLibrary.Dialogue.GetDialogue(500, 400, 490, 60, "Press S to create a new savestate \nand press A to load that savestate!"));

                    var dialogueList = new TuxPlanetSpeedrunAnyPercentLibrary.DialogueList(dialogues);

                    return new TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_SaveState(true, TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_SaveState.Status.A_Camera, 0, dialogueList);
                }
            }
        },
        fields: {
            isFirstFrame: false,
            status: 0,
            konqiDisappearElapsedMicros: 0,
            dialogueList: null
        },
        alias: [
            "GetCutsceneName", "TuxPlanetSpeedrunAnyPercentLibrary$ICutscene$GetCutsceneName",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$ICutscene$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$ICutscene$Render"
        ],
        ctors: {
            ctor: function (isFirstFrame, status, konqiDisappearElapsedMicros, dialogueList) {
                this.$initialize();
                this.isFirstFrame = isFirstFrame;
                this.status = status;
                this.konqiDisappearElapsedMicros = konqiDisappearElapsedMicros;
                this.dialogueList = dialogueList;
            }
        },
        methods: {
            GetCutsceneName: function () {
                return TuxPlanetSpeedrunAnyPercentLibrary.CutsceneProcessing.SAVESTATE_CUTSCENE;
            },
            ProcessFrame: function (move, tuxXMibi, tuxYMibi, cameraState, elapsedMicrosPerFrame, windowWidth, windowHeight, tilemap) {
                var newCameraState;
                var newDialogueList;
                var newStatus = new TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_SaveState.Status();
                var newKonqiDisappearElapsedMicros = this.konqiDisappearElapsedMicros;
                var newEnemies = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor();

                switch (this.status) {
                    case TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_SaveState.Status.A_Camera: 
                        {
                            var destinationCameraState = TuxPlanetSpeedrunAnyPercentLibrary.CameraState.GetCameraState((((tuxXMibi >> 10) + 440) | 0), tuxYMibi >> 10);

                            newDialogueList = this.dialogueList;

                            if (cameraState.X >= destinationCameraState.X && Math.abs(((cameraState.Y - destinationCameraState.Y) | 0)) <= 25) {
                                newCameraState = cameraState;
                                newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_SaveState.Status.B_Dialogue;
                            } else {
                                newCameraState = TuxPlanetSpeedrunAnyPercentLibrary.CameraState.SmoothCameraState$2(cameraState, destinationCameraState, elapsedMicrosPerFrame, TuxPlanetSpeedrunAnyPercentLibrary.CameraState.CUTSCENE_CAMERA_SPEED);
                                newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_SaveState.Status.A_Camera;
                            }

                            break;
                        }
                    case TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_SaveState.Status.B_Dialogue: 
                        var dialogueListResult = this.dialogueList.ProcessFrame(move, elapsedMicrosPerFrame);
                        newCameraState = cameraState;
                        newDialogueList = dialogueListResult.DialogueList;
                        if (dialogueListResult.IsDone) {
                            newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_SaveState.Status.C_KonqiDisappear;
                            newEnemies.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemyRemoveKonqiCutscene("enemyRemoveKonqiCutscene_cutscene_savestate"));
                        } else {
                            newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_SaveState.Status.B_Dialogue;
                        }
                        break;
                    case TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_SaveState.Status.C_KonqiDisappear: 
                        newKonqiDisappearElapsedMicros = (newKonqiDisappearElapsedMicros + elapsedMicrosPerFrame) | 0;
                        newCameraState = cameraState;
                        newDialogueList = this.dialogueList;
                        if (newKonqiDisappearElapsedMicros >= TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_SaveState.KONQI_DISAPPEAR_WAIT_TIME) {
                            newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_SaveState.Status.D_Camera;
                        } else {
                            newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_SaveState.Status.C_KonqiDisappear;
                        }
                        break;
                    case TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_SaveState.Status.D_Camera: 
                        {
                            var destinationCameraState1 = TuxPlanetSpeedrunAnyPercentLibrary.CameraStateProcessing.ComputeCameraState(tuxXMibi, tuxYMibi, null, null, tilemap, windowWidth, windowHeight);

                            newDialogueList = this.dialogueList;
                            newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_SaveState.Status.D_Camera;

                            if (cameraState.X <= destinationCameraState1.X) {
                                return new TuxPlanetSpeedrunAnyPercentLibrary.CutsceneProcessing.Result(TuxPlanetSpeedrunAnyPercentLibrary.Move.EmptyMove(), cameraState, newEnemies, null, true, false, false);
                            } else {
                                newCameraState = TuxPlanetSpeedrunAnyPercentLibrary.CameraState.SmoothCameraState$2(cameraState, destinationCameraState1, elapsedMicrosPerFrame, TuxPlanetSpeedrunAnyPercentLibrary.CameraState.CUTSCENE_CAMERA_SPEED);
                            }

                            break;
                        }
                    default: 
                        throw new System.Exception();
                }

                return new TuxPlanetSpeedrunAnyPercentLibrary.CutsceneProcessing.Result(this.isFirstFrame ? new TuxPlanetSpeedrunAnyPercentLibrary.Move(false, false, false, true, false, false, false) : TuxPlanetSpeedrunAnyPercentLibrary.Move.EmptyMove(), newCameraState, newEnemies, new TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_SaveState(false, newStatus, newKonqiDisappearElapsedMicros, newDialogueList), this.status === TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_SaveState.Status.C_KonqiDisappear || this.status === TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_SaveState.Status.D_Camera, false, false);
            },
            Render: function (displayOutput, windowWidth, windowHeight) {
                if (this.status === TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_SaveState.Status.B_Dialogue) {
                    this.dialogueList.Render(displayOutput, windowWidth, windowHeight);
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_Teleport", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.ICutscene],
        statics: {
            fields: {
                KONQI_DISAPPEAR_WAIT_TIME: 0
            },
            ctors: {
                init: function () {
                    this.KONQI_DISAPPEAR_WAIT_TIME = 500000;
                }
            },
            methods: {
                GetCutscene: function () {
                    var dialogues = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Dialogue)).ctor();

                    dialogues.add(TuxPlanetSpeedrunAnyPercentLibrary.Dialogue.GetDialogue(500, 460, 490, 40, "Hello again!"));

                    dialogues.add(TuxPlanetSpeedrunAnyPercentLibrary.Dialogue.GetDialogue(10, 460, 172, 40, "Hi Konqi!"));

                    dialogues.add(TuxPlanetSpeedrunAnyPercentLibrary.Dialogue.GetDialogue(500, 400, 490, 60, "The terrain ahead is rough, but I \ncan grant you a new power!"));

                    dialogues.add(TuxPlanetSpeedrunAnyPercentLibrary.Dialogue.GetDialogue(500, 400, 490, 60, "Press X to do a short-range \nteleport!"));

                    var dialogueList = new TuxPlanetSpeedrunAnyPercentLibrary.DialogueList(dialogues);

                    return new TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_Teleport(true, TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_Teleport.Status.A_Camera, 0, dialogueList);
                }
            }
        },
        fields: {
            isFirstFrame: false,
            status: 0,
            konqiDisappearElapsedMicros: 0,
            dialogueList: null
        },
        alias: [
            "GetCutsceneName", "TuxPlanetSpeedrunAnyPercentLibrary$ICutscene$GetCutsceneName",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$ICutscene$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$ICutscene$Render"
        ],
        ctors: {
            ctor: function (isFirstFrame, status, konqiDisappearElapsedMicros, dialogueList) {
                this.$initialize();
                this.isFirstFrame = isFirstFrame;
                this.status = status;
                this.konqiDisappearElapsedMicros = konqiDisappearElapsedMicros;
                this.dialogueList = dialogueList;
            }
        },
        methods: {
            GetCutsceneName: function () {
                return TuxPlanetSpeedrunAnyPercentLibrary.CutsceneProcessing.TELEPORT_CUTSCENE;
            },
            ProcessFrame: function (move, tuxXMibi, tuxYMibi, cameraState, elapsedMicrosPerFrame, windowWidth, windowHeight, tilemap) {
                var newCameraState;
                var newDialogueList;
                var newStatus = new TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_Teleport.Status();
                var newKonqiDisappearElapsedMicros = this.konqiDisappearElapsedMicros;
                var newEnemies = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor();

                switch (this.status) {
                    case TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_Teleport.Status.A_Camera: 
                        {
                            var destinationCameraState = TuxPlanetSpeedrunAnyPercentLibrary.CameraState.GetCameraState(Math.min((((tuxXMibi >> 10) + 440) | 0), ((tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetWidth() - ((Bridge.Int.div(windowWidth, 2)) | 0)) | 0)), tuxYMibi >> 10);

                            newDialogueList = this.dialogueList;

                            if (cameraState.X >= destinationCameraState.X && Math.abs(((cameraState.Y - destinationCameraState.Y) | 0)) <= 25) {
                                newCameraState = cameraState;
                                newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_Teleport.Status.B_Dialogue;
                            } else {
                                newCameraState = TuxPlanetSpeedrunAnyPercentLibrary.CameraState.SmoothCameraState$2(cameraState, destinationCameraState, elapsedMicrosPerFrame, TuxPlanetSpeedrunAnyPercentLibrary.CameraState.CUTSCENE_CAMERA_SPEED);
                                newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_Teleport.Status.A_Camera;
                            }

                            break;
                        }
                    case TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_Teleport.Status.B_Dialogue: 
                        var dialogueListResult = this.dialogueList.ProcessFrame(move, elapsedMicrosPerFrame);
                        newCameraState = cameraState;
                        newDialogueList = dialogueListResult.DialogueList;
                        if (dialogueListResult.IsDone) {
                            newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_Teleport.Status.C_KonqiDisappear;
                            newEnemies.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemyRemoveKonqiCutscene("enemyRemoveKonqiCutscene_cutscene_teleport"));
                        } else {
                            newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_Teleport.Status.B_Dialogue;
                        }
                        break;
                    case TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_Teleport.Status.C_KonqiDisappear: 
                        newKonqiDisappearElapsedMicros = (newKonqiDisappearElapsedMicros + elapsedMicrosPerFrame) | 0;
                        newCameraState = cameraState;
                        newDialogueList = this.dialogueList;
                        if (newKonqiDisappearElapsedMicros >= TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_Teleport.KONQI_DISAPPEAR_WAIT_TIME) {
                            newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_Teleport.Status.D_Camera;
                        } else {
                            newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_Teleport.Status.C_KonqiDisappear;
                        }
                        break;
                    case TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_Teleport.Status.D_Camera: 
                        {
                            var destinationCameraState1 = TuxPlanetSpeedrunAnyPercentLibrary.CameraStateProcessing.ComputeCameraState(tuxXMibi, tuxYMibi, null, null, tilemap, windowWidth, windowHeight);

                            newDialogueList = this.dialogueList;
                            newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_Teleport.Status.D_Camera;

                            if (cameraState.X <= destinationCameraState1.X) {
                                return new TuxPlanetSpeedrunAnyPercentLibrary.CutsceneProcessing.Result(TuxPlanetSpeedrunAnyPercentLibrary.Move.EmptyMove(), cameraState, newEnemies, null, false, false, true);
                            } else {
                                newCameraState = TuxPlanetSpeedrunAnyPercentLibrary.CameraState.SmoothCameraState$2(cameraState, destinationCameraState1, elapsedMicrosPerFrame, TuxPlanetSpeedrunAnyPercentLibrary.CameraState.CUTSCENE_CAMERA_SPEED);
                            }

                            break;
                        }
                    default: 
                        throw new System.Exception();
                }

                return new TuxPlanetSpeedrunAnyPercentLibrary.CutsceneProcessing.Result(this.isFirstFrame ? new TuxPlanetSpeedrunAnyPercentLibrary.Move(false, false, false, true, false, false, false) : TuxPlanetSpeedrunAnyPercentLibrary.Move.EmptyMove(), newCameraState, newEnemies, new TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_Teleport(false, newStatus, newKonqiDisappearElapsedMicros, newDialogueList), false, false, this.status === TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_Teleport.Status.C_KonqiDisappear || this.status === TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_Teleport.Status.D_Camera);
            },
            Render: function (displayOutput, windowWidth, windowHeight) {
                if (this.status === TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_Teleport.Status.B_Dialogue) {
                    this.dialogueList.Render(displayOutput, windowWidth, windowHeight);
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_TimeSlowdown", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.ICutscene],
        statics: {
            fields: {
                KONQI_DISAPPEAR_WAIT_TIME: 0
            },
            ctors: {
                init: function () {
                    this.KONQI_DISAPPEAR_WAIT_TIME = 500000;
                }
            },
            methods: {
                GetCutscene: function () {
                    var dialogues = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Dialogue)).ctor();

                    dialogues.add(TuxPlanetSpeedrunAnyPercentLibrary.Dialogue.GetDialogue(500, 460, 490, 40, "Hello again!"));

                    dialogues.add(TuxPlanetSpeedrunAnyPercentLibrary.Dialogue.GetDialogue(10, 460, 172, 40, "Hello Konqi!"));

                    dialogues.add(TuxPlanetSpeedrunAnyPercentLibrary.Dialogue.GetDialogue(500, 400, 490, 60, "I've brought a new power that \nshould help -- time dilation!"));

                    dialogues.add(TuxPlanetSpeedrunAnyPercentLibrary.Dialogue.GetDialogue(500, 400, 490, 60, "Hold the left shift key to \nslow down time!"));

                    var dialogueList = new TuxPlanetSpeedrunAnyPercentLibrary.DialogueList(dialogues);

                    return new TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_TimeSlowdown(true, TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_TimeSlowdown.Status.A_Camera, 0, dialogueList);
                }
            }
        },
        fields: {
            isFirstFrame: false,
            status: 0,
            konqiDisappearElapsedMicros: 0,
            dialogueList: null
        },
        alias: [
            "GetCutsceneName", "TuxPlanetSpeedrunAnyPercentLibrary$ICutscene$GetCutsceneName",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$ICutscene$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$ICutscene$Render"
        ],
        ctors: {
            ctor: function (isFirstFrame, status, konqiDisappearElapsedMicros, dialogueList) {
                this.$initialize();
                this.isFirstFrame = isFirstFrame;
                this.status = status;
                this.konqiDisappearElapsedMicros = konqiDisappearElapsedMicros;
                this.dialogueList = dialogueList;
            }
        },
        methods: {
            GetCutsceneName: function () {
                return TuxPlanetSpeedrunAnyPercentLibrary.CutsceneProcessing.TIME_SLOWDOWN_CUTSCENE;
            },
            ProcessFrame: function (move, tuxXMibi, tuxYMibi, cameraState, elapsedMicrosPerFrame, windowWidth, windowHeight, tilemap) {
                var newCameraState;
                var newDialogueList;
                var newStatus = new TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_TimeSlowdown.Status();
                var newKonqiDisappearElapsedMicros = this.konqiDisappearElapsedMicros;
                var newEnemies = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor();

                switch (this.status) {
                    case TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_TimeSlowdown.Status.A_Camera: 
                        {
                            var destinationCameraState = TuxPlanetSpeedrunAnyPercentLibrary.CameraState.GetCameraState(Math.min((((tuxXMibi >> 10) + 440) | 0), ((tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetWidth() - ((Bridge.Int.div(windowWidth, 2)) | 0)) | 0)), tuxYMibi >> 10);

                            newDialogueList = this.dialogueList;

                            if (cameraState.X >= destinationCameraState.X && Math.abs(((cameraState.Y - destinationCameraState.Y) | 0)) <= 5) {
                                newCameraState = cameraState;
                                newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_TimeSlowdown.Status.B_Dialogue;
                            } else {
                                newCameraState = TuxPlanetSpeedrunAnyPercentLibrary.CameraState.SmoothCameraState$2(cameraState, destinationCameraState, elapsedMicrosPerFrame, TuxPlanetSpeedrunAnyPercentLibrary.CameraState.CUTSCENE_CAMERA_SPEED);
                                newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_TimeSlowdown.Status.A_Camera;
                            }

                            break;
                        }
                    case TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_TimeSlowdown.Status.B_Dialogue: 
                        var dialogueListResult = this.dialogueList.ProcessFrame(move, elapsedMicrosPerFrame);
                        newCameraState = cameraState;
                        newDialogueList = dialogueListResult.DialogueList;
                        if (dialogueListResult.IsDone) {
                            newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_TimeSlowdown.Status.C_KonqiDisappear;
                            newEnemies.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemyRemoveKonqiCutscene("enemyRemoveKonqiCutscene_cutscene_timeslowdown"));
                        } else {
                            newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_TimeSlowdown.Status.B_Dialogue;
                        }
                        break;
                    case TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_TimeSlowdown.Status.C_KonqiDisappear: 
                        newKonqiDisappearElapsedMicros = (newKonqiDisappearElapsedMicros + elapsedMicrosPerFrame) | 0;
                        newCameraState = cameraState;
                        newDialogueList = this.dialogueList;
                        if (newKonqiDisappearElapsedMicros >= TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_TimeSlowdown.KONQI_DISAPPEAR_WAIT_TIME) {
                            newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_TimeSlowdown.Status.D_Camera;
                        } else {
                            newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_TimeSlowdown.Status.C_KonqiDisappear;
                        }
                        break;
                    case TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_TimeSlowdown.Status.D_Camera: 
                        {
                            var destinationCameraState1 = TuxPlanetSpeedrunAnyPercentLibrary.CameraStateProcessing.ComputeCameraState(tuxXMibi, tuxYMibi, null, null, tilemap, windowWidth, windowHeight);

                            newDialogueList = this.dialogueList;
                            newStatus = TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_TimeSlowdown.Status.D_Camera;

                            if (cameraState.X <= destinationCameraState1.X) {
                                return new TuxPlanetSpeedrunAnyPercentLibrary.CutsceneProcessing.Result(TuxPlanetSpeedrunAnyPercentLibrary.Move.EmptyMove(), cameraState, newEnemies, null, false, true, false);
                            } else {
                                newCameraState = TuxPlanetSpeedrunAnyPercentLibrary.CameraState.SmoothCameraState$2(cameraState, destinationCameraState1, elapsedMicrosPerFrame, TuxPlanetSpeedrunAnyPercentLibrary.CameraState.CUTSCENE_CAMERA_SPEED);
                            }

                            break;
                        }
                    default: 
                        throw new System.Exception();
                }

                return new TuxPlanetSpeedrunAnyPercentLibrary.CutsceneProcessing.Result(this.isFirstFrame ? new TuxPlanetSpeedrunAnyPercentLibrary.Move(false, false, false, true, false, false, false) : TuxPlanetSpeedrunAnyPercentLibrary.Move.EmptyMove(), newCameraState, newEnemies, new TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_TimeSlowdown(false, newStatus, newKonqiDisappearElapsedMicros, newDialogueList), false, this.status === TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_TimeSlowdown.Status.C_KonqiDisappear || this.status === TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_TimeSlowdown.Status.D_Camera, false);
            },
            Render: function (displayOutput, windowWidth, windowHeight) {
                if (this.status === TuxPlanetSpeedrunAnyPercentLibrary.Cutscene_TimeSlowdown.Status.B_Dialogue) {
                    this.dialogueList.Render(displayOutput, windowWidth, windowHeight);
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemyBlazeborn", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.IEnemy],
        statics: {
            methods: {
                GetEnemyBlazeborn: function (xMibi, yMibi, isFacingRight, enemyId) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyBlazeborn(xMibi, yMibi, isFacingRight, 0, enemyId);
                },
                IsGroundOrSpike: function (tilemap, x, y) {
                    return tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(x, y) || tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsSpikes(x, y);
                }
            }
        },
        fields: {
            xMibi: 0,
            yMibi: 0,
            isFacingRight: false,
            elapsedMicros: 0,
            EnemyId: null
        },
        props: {
            IsKonqi: {
                get: function () {
                    return false;
                }
            },
            IsRemoveKonqi: {
                get: function () {
                    return false;
                }
            },
            ShouldAlwaysSpawnRegardlessOfCamera: {
                get: function () {
                    return false;
                }
            }
        },
        alias: [
            "EnemyId", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId",
            "IsKonqi", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$IsKonqi",
            "IsRemoveKonqi", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$IsRemoveKonqi",
            "ShouldAlwaysSpawnRegardlessOfCamera", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ShouldAlwaysSpawnRegardlessOfCamera",
            "GetKonqiLocation", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetKonqiLocation",
            "GetHitboxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetHitboxes",
            "GetDamageBoxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDamageBoxes",
            "GetDeadEnemy", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDeadEnemy",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$Render"
        ],
        ctors: {
            ctor: function (xMibi, yMibi, isFacingRight, elapsedMicros, enemyId) {
                this.$initialize();
                this.xMibi = xMibi;
                this.yMibi = yMibi;
                this.isFacingRight = isFacingRight;
                this.elapsedMicros = elapsedMicros;
                this.EnemyId = enemyId;
            }
        },
        methods: {
            GetKonqiLocation: function () {
                return null;
            },
            GetHitboxes: function () {
                return Bridge.fn.bind(this, function (_o1) {
                        _o1.add(new TuxPlanetSpeedrunAnyPercentLibrary.Hitbox((((this.xMibi >> 10) - 24) | 0), (((this.yMibi >> 10) - 24) | 0), 48, 42));
                        return _o1;
                    })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Hitbox)).ctor());
            },
            GetDamageBoxes: function () {
                return new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Hitbox)).ctor();
            },
            GetDeadEnemy: function () {
                return null;
            },
            ProcessFrame: function (cameraX, cameraY, windowWidth, windowHeight, elapsedMicrosPerFrame, tilemap) {
                var list = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor();

                var newElapsedMicros = (this.elapsedMicros + elapsedMicrosPerFrame) | 0;

                if (newElapsedMicros > 2000000000) {
                    newElapsedMicros = 0;
                }

                var newXMibi = this.xMibi;
                var newYMibi = this.yMibi;
                var newIsFacingRight = this.isFacingRight;

                if (this.isFacingRight) {
                    newXMibi = (newXMibi + (((Bridge.Int.div(Bridge.Int.mul(elapsedMicrosPerFrame, 180), 1000)) | 0))) | 0;
                } else {
                    newXMibi = (newXMibi - (((Bridge.Int.div(Bridge.Int.mul(elapsedMicrosPerFrame, 180), 1000)) | 0))) | 0;
                }

                if (newIsFacingRight) {
                    if (TuxPlanetSpeedrunAnyPercentLibrary.EnemyBlazeborn.IsGroundOrSpike(tilemap, (((newXMibi >> 10) + 24) | 0), newYMibi >> 10)) {
                        newIsFacingRight = false;
                    }
                    if (!TuxPlanetSpeedrunAnyPercentLibrary.EnemyBlazeborn.IsGroundOrSpike(tilemap, (((newXMibi >> 10) + 12) | 0), (((newYMibi >> 10) - 33) | 0))) {
                        newIsFacingRight = false;
                    }
                } else {
                    if (TuxPlanetSpeedrunAnyPercentLibrary.EnemyBlazeborn.IsGroundOrSpike(tilemap, (((newXMibi >> 10) - 24) | 0), newYMibi >> 10)) {
                        newIsFacingRight = true;
                    }
                    if (!TuxPlanetSpeedrunAnyPercentLibrary.EnemyBlazeborn.IsGroundOrSpike(tilemap, (((newXMibi >> 10) - 12) | 0), (((newYMibi >> 10) - 33) | 0))) {
                        newIsFacingRight = true;
                    }
                }

                var isOutOfBounds = (((newXMibi >> 10) + 24) | 0) < ((((cameraX - ((Bridge.Int.div(windowWidth, 2)) | 0)) | 0) - TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0) || (((newXMibi >> 10) - 24) | 0) > ((((cameraX + ((Bridge.Int.div(windowWidth, 2)) | 0)) | 0) + TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0) || (((newYMibi >> 10) + 24) | 0) < ((((cameraY - ((Bridge.Int.div(windowHeight, 2)) | 0)) | 0) - TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0) || (((newYMibi >> 10) - 24) | 0) > ((((cameraY + ((Bridge.Int.div(windowHeight, 2)) | 0)) | 0) + TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0);

                if (!isOutOfBounds) {
                    list.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemyBlazeborn(newXMibi, newYMibi, newIsFacingRight, newElapsedMicros, this.EnemyId));
                }

                return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(list, new (System.Collections.Generic.List$1(System.String)).ctor());
            },
            Render: function (displayOutput) {
                var image = this.isFacingRight ? TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Blazeborn : TuxPlanetSpeedrunAnyPercentLibrary.GameImage.BlazebornMirrored;

                var spriteNum = (Bridge.Int.div((this.elapsedMicros % 1000000), 250000)) | 0;

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(image, Bridge.Int.mul(spriteNum, 16), 0, 16, 16, (((this.xMibi >> 10) - 24) | 0), (((this.yMibi >> 10) - 24) | 0), 0, 384);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiCutscene", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.IEnemy],
        statics: {
            methods: {
                GetEnemyKonqiCutscene: function (xMibi, yMibi, enemyId) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiCutscene(xMibi >> 10, yMibi >> 10, 0, new (System.Collections.Generic.List$1(System.String)).ctor(), new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Hitbox)).ctor(), enemyId);
                }
            }
        },
        fields: {
            x: 0,
            y: 0,
            elapsedMicros: 0,
            emptyStringList: null,
            emptyHitboxList: null,
            EnemyId: null
        },
        props: {
            IsKonqi: {
                get: function () {
                    return true;
                }
            },
            IsRemoveKonqi: {
                get: function () {
                    return false;
                }
            },
            ShouldAlwaysSpawnRegardlessOfCamera: {
                get: function () {
                    return true;
                }
            }
        },
        alias: [
            "EnemyId", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId",
            "IsKonqi", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$IsKonqi",
            "IsRemoveKonqi", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$IsRemoveKonqi",
            "ShouldAlwaysSpawnRegardlessOfCamera", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ShouldAlwaysSpawnRegardlessOfCamera",
            "GetKonqiLocation", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetKonqiLocation",
            "GetHitboxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetHitboxes",
            "GetDamageBoxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDamageBoxes",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$Render",
            "GetDeadEnemy", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDeadEnemy"
        ],
        ctors: {
            ctor: function (x, y, elapsedMicros, emptyStringList, emptyHitboxList, enemyId) {
                this.$initialize();
                this.x = x;
                this.y = y;
                this.elapsedMicros = elapsedMicros;
                this.emptyStringList = emptyStringList;
                this.emptyHitboxList = emptyHitboxList;
                this.EnemyId = enemyId;
            }
        },
        methods: {
            GetKonqiLocation: function () {
                return { Item1: this.x, Item2: this.y };
            },
            GetHitboxes: function () {
                return this.emptyHitboxList;
            },
            GetDamageBoxes: function () {
                return this.emptyHitboxList;
            },
            ProcessFrame: function (cameraX, cameraY, windowWidth, windowHeight, elapsedMicrosPerFrame, tilemap) {
                var newElapsedMicros = (this.elapsedMicros + elapsedMicrosPerFrame) | 0;

                if (newElapsedMicros > 2000000000) {
                    newElapsedMicros = 1;
                }

                return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(Bridge.fn.bind(this, function (_o1) {
                        _o1.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiCutscene(this.x, this.y, newElapsedMicros, this.emptyStringList, this.emptyHitboxList, this.EnemyId));
                        return _o1;
                    })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor()), this.emptyStringList);
            },
            Render: function (displayOutput) {
                var spriteNum = (Bridge.Int.div((this.elapsedMicros % 1000000), 250000)) | 0;

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(TuxPlanetSpeedrunAnyPercentLibrary.GameImage.KonqiMirrored, Bridge.Int.mul(spriteNum, 32), 0, 32, 32, ((this.x - 48) | 0), ((this.y - 24) | 0), 0, 384);
            },
            GetDeadEnemy: function () {
                return null;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiDisappear", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.IEnemy],
        statics: {
            methods: {
                GetEnemyKonqiDisappear: function (xMibi, yMibi, enemyId) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiDisappear(xMibi, yMibi, 0, new (System.Collections.Generic.List$1(System.String)).ctor(), new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Hitbox)).ctor(), enemyId);
                }
            }
        },
        fields: {
            xMibi: 0,
            yMibi: 0,
            elapsedMicros: 0,
            emptyStringList: null,
            emptyHitboxList: null,
            EnemyId: null
        },
        props: {
            IsKonqi: {
                get: function () {
                    return false;
                }
            },
            IsRemoveKonqi: {
                get: function () {
                    return false;
                }
            },
            ShouldAlwaysSpawnRegardlessOfCamera: {
                get: function () {
                    return true;
                }
            }
        },
        alias: [
            "EnemyId", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId",
            "IsKonqi", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$IsKonqi",
            "IsRemoveKonqi", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$IsRemoveKonqi",
            "ShouldAlwaysSpawnRegardlessOfCamera", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ShouldAlwaysSpawnRegardlessOfCamera",
            "GetKonqiLocation", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetKonqiLocation",
            "GetHitboxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetHitboxes",
            "GetDamageBoxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDamageBoxes",
            "GetDeadEnemy", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDeadEnemy",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$Render"
        ],
        ctors: {
            ctor: function (xMibi, yMibi, elapsedMicros, emptyStringList, emptyHitboxList, enemyId) {
                this.$initialize();
                this.xMibi = xMibi;
                this.yMibi = yMibi;
                this.elapsedMicros = elapsedMicros;
                this.emptyStringList = emptyStringList;
                this.emptyHitboxList = emptyHitboxList;
                this.EnemyId = enemyId;
            }
        },
        methods: {
            GetKonqiLocation: function () {
                return null;
            },
            GetHitboxes: function () {
                return this.emptyHitboxList;
            },
            GetDamageBoxes: function () {
                return this.emptyHitboxList;
            },
            GetDeadEnemy: function () {
                return null;
            },
            ProcessFrame: function (cameraX, cameraY, windowWidth, windowHeight, elapsedMicrosPerFrame, tilemap) {
                if (this.elapsedMicros > 200000) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor(), this.emptyStringList);
                }

                return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(Bridge.fn.bind(this, function (_o1) {
                        _o1.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiDisappear(this.xMibi, this.yMibi, ((this.elapsedMicros + elapsedMicrosPerFrame) | 0), this.emptyStringList, this.emptyHitboxList, this.EnemyId));
                        return _o1;
                    })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor()), this.emptyStringList);
            },
            Render: function (displayOutput) {
                var distance = (Bridge.Int.div(this.elapsedMicros, (2000))) | 0;

                var color = new DTLibrary.DTColor.ctor(50, 168, 64);

                for (var i = 0; i < 46080; i = (i + 384) | 0) {
                    var deltaX = Bridge.Int.mul(DTLibrary.DTMath.CosineScaled(i), distance);
                    var deltaY = Bridge.Int.mul(DTLibrary.DTMath.SineScaled(i), distance);

                    var x = (((this.xMibi + deltaX) | 0)) >> 10;
                    var y = (((this.yMibi + deltaY) | 0)) >> 10;

                    displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle(((x - 2) | 0), ((y - 2) | 0), 5, 5, color, true);
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemyLevel5Spikes", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.IEnemy],
        statics: {
            methods: {
                GetEnemyLevel5Spikes: function (startingXMibi, yMibiBottom, heightInTiles, endingXMibi, enemyId) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyLevel5Spikes(startingXMibi, yMibiBottom, heightInTiles, endingXMibi, new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Hitbox)).ctor(), new (System.Collections.Generic.List$1(System.String)).ctor(), enemyId);
                }
            }
        },
        fields: {
            xMibi: 0,
            yMibiBottom: 0,
            heightInTiles: 0,
            endingXMibi: 0,
            emptyHitboxList: null,
            emptyStringList: null,
            EnemyId: null
        },
        props: {
            IsKonqi: {
                get: function () {
                    return false;
                }
            },
            IsRemoveKonqi: {
                get: function () {
                    return false;
                }
            },
            ShouldAlwaysSpawnRegardlessOfCamera: {
                get: function () {
                    return true;
                }
            }
        },
        alias: [
            "EnemyId", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId",
            "IsKonqi", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$IsKonqi",
            "IsRemoveKonqi", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$IsRemoveKonqi",
            "ShouldAlwaysSpawnRegardlessOfCamera", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ShouldAlwaysSpawnRegardlessOfCamera",
            "GetDeadEnemy", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDeadEnemy",
            "GetKonqiLocation", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetKonqiLocation",
            "GetHitboxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetHitboxes",
            "GetDamageBoxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDamageBoxes",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$Render"
        ],
        ctors: {
            ctor: function (xMibi, yMibiBottom, heightInTiles, endingXMibi, emptyHitboxList, emptyStringList, enemyId) {
                this.$initialize();
                this.xMibi = xMibi;
                this.yMibiBottom = yMibiBottom;
                this.heightInTiles = heightInTiles;
                this.endingXMibi = endingXMibi;
                this.emptyHitboxList = emptyHitboxList;
                this.emptyStringList = emptyStringList;
                this.EnemyId = enemyId;
            }
        },
        methods: {
            GetDeadEnemy: function () {
                return null;
            },
            GetKonqiLocation: function () {
                return null;
            },
            GetHitboxes: function () {
                return Bridge.fn.bind(this, function (_o1) {
                        _o1.add(new TuxPlanetSpeedrunAnyPercentLibrary.Hitbox((((this.xMibi >> 10) - 24) | 0), this.yMibiBottom >> 10, 48, Bridge.Int.mul(48, this.heightInTiles)));
                        return _o1;
                    })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Hitbox)).ctor());
            },
            GetDamageBoxes: function () {
                return this.emptyHitboxList;
            },
            ProcessFrame: function (cameraX, cameraY, windowWidth, windowHeight, elapsedMicrosPerFrame, tilemap) {
                var newXMibi = (this.xMibi + ((Bridge.Int.div(Bridge.Int.mul(elapsedMicrosPerFrame, 400), 1000)) | 0)) | 0;

                if (newXMibi > this.endingXMibi) {
                    newXMibi = this.endingXMibi;
                }

                return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(Bridge.fn.bind(this, function (_o1) {
                        _o1.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemyLevel5Spikes(newXMibi, this.yMibiBottom, this.heightInTiles, this.endingXMibi, this.emptyHitboxList, this.emptyStringList, this.EnemyId));
                        return _o1;
                    })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor()), this.emptyStringList);
            },
            Render: function (displayOutput) {
                var y = this.yMibiBottom >> 10;

                for (var i = 0; i < this.heightInTiles; i = (i + 1) | 0) {
                    displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Spikes, 112, 16, 16, 16, (((this.xMibi >> 10) - 24) | 0), y, 0, 384);

                    y = (y + (48)) | 0;
                }
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemyRemoveKonqiCutscene", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.IEnemy],
        fields: {
            EnemyId: null
        },
        props: {
            IsKonqi: {
                get: function () {
                    return false;
                }
            },
            IsRemoveKonqi: {
                get: function () {
                    return true;
                }
            },
            ShouldAlwaysSpawnRegardlessOfCamera: {
                get: function () {
                    return true;
                }
            }
        },
        alias: [
            "EnemyId", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId",
            "IsKonqi", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$IsKonqi",
            "IsRemoveKonqi", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$IsRemoveKonqi",
            "ShouldAlwaysSpawnRegardlessOfCamera", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ShouldAlwaysSpawnRegardlessOfCamera",
            "GetKonqiLocation", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetKonqiLocation",
            "GetHitboxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetHitboxes",
            "GetDamageBoxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDamageBoxes",
            "GetDeadEnemy", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDeadEnemy",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$Render"
        ],
        ctors: {
            ctor: function (enemyId) {
                this.$initialize();
                this.EnemyId = enemyId;
            }
        },
        methods: {
            GetKonqiLocation: function () {
                return null;
            },
            GetHitboxes: function () {
                return new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Hitbox)).ctor();
            },
            GetDamageBoxes: function () {
                return new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Hitbox)).ctor();
            },
            GetDeadEnemy: function () {
                return null;
            },
            ProcessFrame: function (cameraX, cameraY, windowWidth, windowHeight, elapsedMicrosPerFrame, tilemap) {
                return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(Bridge.fn.bind(this, function (_o1) {
                        _o1.add(this);
                        return _o1;
                    })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor()), new (System.Collections.Generic.List$1(System.String)).ctor());
            },
            Render: function (displayOutput) { }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemySmartcap", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.IEnemy],
        statics: {
            methods: {
                GetEnemySmartcap: function (xMibi, yMibi, isFacingRight, enemyId) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemySmartcap(xMibi, yMibi, isFacingRight, 0, enemyId);
                },
                IsGroundOrSpike: function (tilemap, x, y) {
                    return tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(x, y) || tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsSpikes(x, y);
                }
            }
        },
        fields: {
            xMibi: 0,
            yMibi: 0,
            isFacingRight: false,
            elapsedMicros: 0,
            EnemyId: null
        },
        props: {
            IsKonqi: {
                get: function () {
                    return false;
                }
            },
            IsRemoveKonqi: {
                get: function () {
                    return false;
                }
            },
            ShouldAlwaysSpawnRegardlessOfCamera: {
                get: function () {
                    return false;
                }
            }
        },
        alias: [
            "EnemyId", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId",
            "IsKonqi", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$IsKonqi",
            "IsRemoveKonqi", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$IsRemoveKonqi",
            "ShouldAlwaysSpawnRegardlessOfCamera", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ShouldAlwaysSpawnRegardlessOfCamera",
            "GetKonqiLocation", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetKonqiLocation",
            "GetHitboxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetHitboxes",
            "GetDamageBoxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDamageBoxes",
            "GetDeadEnemy", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDeadEnemy",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$Render"
        ],
        ctors: {
            ctor: function (xMibi, yMibi, isFacingRight, elapsedMicros, enemyId) {
                this.$initialize();
                this.xMibi = xMibi;
                this.yMibi = yMibi;
                this.isFacingRight = isFacingRight;
                this.elapsedMicros = elapsedMicros;
                this.EnemyId = enemyId;
            }
        },
        methods: {
            GetKonqiLocation: function () {
                return null;
            },
            GetHitboxes: function () {
                return Bridge.fn.bind(this, function (_o1) {
                        _o1.add(new TuxPlanetSpeedrunAnyPercentLibrary.Hitbox((((this.xMibi >> 10) - 24) | 0), (((this.yMibi >> 10) - 27) | 0), 48, 45));
                        return _o1;
                    })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Hitbox)).ctor());
            },
            GetDamageBoxes: function () {
                return Bridge.fn.bind(this, function (_o1) {
                        _o1.add(new TuxPlanetSpeedrunAnyPercentLibrary.Hitbox((((this.xMibi >> 10) - 24) | 0), (((this.yMibi >> 10) - 27) | 0), 48, 45));
                        return _o1;
                    })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Hitbox)).ctor());
            },
            GetDeadEnemy: function () {
                var enemyId = this.EnemyId;

                return TuxPlanetSpeedrunAnyPercentLibrary.EnemySmartcapDead.SpawnEnemySmartcapDead(this.xMibi, this.yMibi, this.isFacingRight, (enemyId || "") + "enemySmartcapDead");
            },
            ProcessFrame: function (cameraX, cameraY, windowWidth, windowHeight, elapsedMicrosPerFrame, tilemap) {
                var list = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor();

                var newElapsedMicros = (this.elapsedMicros + elapsedMicrosPerFrame) | 0;

                if (newElapsedMicros > 2000000000) {
                    newElapsedMicros = 0;
                }

                var newXMibi = this.xMibi;
                var newYMibi = this.yMibi;
                var newIsFacingRight = this.isFacingRight;

                if (this.isFacingRight) {
                    newXMibi = (newXMibi + (((Bridge.Int.div(Bridge.Int.mul(elapsedMicrosPerFrame, 90), 1000)) | 0))) | 0;
                } else {
                    newXMibi = (newXMibi - (((Bridge.Int.div(Bridge.Int.mul(elapsedMicrosPerFrame, 90), 1000)) | 0))) | 0;
                }

                if (newIsFacingRight) {
                    if (TuxPlanetSpeedrunAnyPercentLibrary.EnemySmartcap.IsGroundOrSpike(tilemap, (((newXMibi >> 10) + 24) | 0), newYMibi >> 10)) {
                        newIsFacingRight = false;
                    }
                    if (!TuxPlanetSpeedrunAnyPercentLibrary.EnemySmartcap.IsGroundOrSpike(tilemap, (((newXMibi >> 10) + 12) | 0), (((newYMibi >> 10) - 33) | 0))) {
                        newIsFacingRight = false;
                    }
                } else {
                    if (TuxPlanetSpeedrunAnyPercentLibrary.EnemySmartcap.IsGroundOrSpike(tilemap, (((newXMibi >> 10) - 24) | 0), newYMibi >> 10)) {
                        newIsFacingRight = true;
                    }
                    if (!TuxPlanetSpeedrunAnyPercentLibrary.EnemySmartcap.IsGroundOrSpike(tilemap, (((newXMibi >> 10) - 12) | 0), (((newYMibi >> 10) - 33) | 0))) {
                        newIsFacingRight = true;
                    }
                }

                var isOutOfBounds = (((newXMibi >> 10) + 24) | 0) < ((((cameraX - ((Bridge.Int.div(windowWidth, 2)) | 0)) | 0) - TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0) || (((newXMibi >> 10) - 24) | 0) > ((((cameraX + ((Bridge.Int.div(windowWidth, 2)) | 0)) | 0) + TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0) || (((newYMibi >> 10) + 27) | 0) < ((((cameraY - ((Bridge.Int.div(windowHeight, 2)) | 0)) | 0) - TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0) || (((newYMibi >> 10) - 27) | 0) > ((((cameraY + ((Bridge.Int.div(windowHeight, 2)) | 0)) | 0) + TuxPlanetSpeedrunAnyPercentLibrary.GameLogicState.MARGIN_FOR_ENEMY_DESPAWN_IN_PIXELS) | 0);

                if (!isOutOfBounds) {
                    list.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemySmartcap(newXMibi, newYMibi, newIsFacingRight, newElapsedMicros, this.EnemyId));
                }

                return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(list, new (System.Collections.Generic.List$1(System.String)).ctor());
            },
            Render: function (displayOutput) {
                var image = this.isFacingRight ? TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Smartcap : TuxPlanetSpeedrunAnyPercentLibrary.GameImage.SmartcapMirrored;

                var spriteNum = (Bridge.Int.div((this.elapsedMicros % 1000000), 250000)) | 0;

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(image, Bridge.Int.mul(spriteNum, 16), 0, 16, 18, (((this.xMibi >> 10) - 24) | 0), (((this.yMibi >> 10) - 27) | 0), 0, 384);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemySmartcapDead", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.IEnemy],
        statics: {
            fields: {
                DEAD_ANIMATION_DURATION: 0
            },
            ctors: {
                init: function () {
                    this.DEAD_ANIMATION_DURATION = 1000000;
                }
            },
            methods: {
                SpawnEnemySmartcapDead: function (xMibi, yMibi, isFacingRight, enemyId) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemySmartcapDead((((xMibi >> 10) - 24) | 0), (((yMibi >> 10) - 27) | 0), isFacingRight, 0, new (System.Collections.Generic.List$1(System.String)).ctor(), new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Hitbox)).ctor(), enemyId);
                }
            }
        },
        fields: {
            x: 0,
            y: 0,
            isFacingRight: false,
            elapsedMicros: 0,
            emptyStringList: null,
            emptyHitboxList: null,
            EnemyId: null
        },
        props: {
            IsKonqi: {
                get: function () {
                    return false;
                }
            },
            IsRemoveKonqi: {
                get: function () {
                    return false;
                }
            },
            ShouldAlwaysSpawnRegardlessOfCamera: {
                get: function () {
                    return false;
                }
            }
        },
        alias: [
            "EnemyId", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId",
            "IsKonqi", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$IsKonqi",
            "IsRemoveKonqi", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$IsRemoveKonqi",
            "ShouldAlwaysSpawnRegardlessOfCamera", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ShouldAlwaysSpawnRegardlessOfCamera",
            "GetKonqiLocation", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetKonqiLocation",
            "GetHitboxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetHitboxes",
            "GetDamageBoxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDamageBoxes",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$Render",
            "GetDeadEnemy", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDeadEnemy"
        ],
        ctors: {
            ctor: function (x, y, isFacingRight, elapsedMicros, emptyStringList, emptyHitboxList, enemyId) {
                this.$initialize();
                this.x = x;
                this.y = y;
                this.isFacingRight = isFacingRight;
                this.elapsedMicros = elapsedMicros;
                this.emptyStringList = emptyStringList;
                this.emptyHitboxList = emptyHitboxList;
                this.EnemyId = enemyId;
            }
        },
        methods: {
            GetKonqiLocation: function () {
                return null;
            },
            GetHitboxes: function () {
                return this.emptyHitboxList;
            },
            GetDamageBoxes: function () {
                return new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Hitbox)).ctor();
            },
            ProcessFrame: function (cameraX, cameraY, windowWidth, windowHeight, elapsedMicrosPerFrame, tilemap) {
                if (this.elapsedMicros > TuxPlanetSpeedrunAnyPercentLibrary.EnemySmartcapDead.DEAD_ANIMATION_DURATION) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor(), this.emptyStringList);
                }

                return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(Bridge.fn.bind(this, function (_o1) {
                        _o1.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemySmartcapDead(this.x, this.y, this.isFacingRight, ((this.elapsedMicros + elapsedMicrosPerFrame) | 0), this.emptyStringList, this.emptyHitboxList, this.EnemyId));
                        return _o1;
                    })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor()), this.emptyStringList);
            },
            Render: function (displayOutput) {
                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(this.isFacingRight ? TuxPlanetSpeedrunAnyPercentLibrary.GameImage.Smartcap : TuxPlanetSpeedrunAnyPercentLibrary.GameImage.SmartcapMirrored, 64, 0, 16, 18, this.x, this.y, 0, 384);
            },
            GetDeadEnemy: function () {
                return null;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.EnemySpawnHelper", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.IEnemy],
        fields: {
            enemyToSpawn: null,
            xMibi: 0,
            yMibi: 0,
            enemyWidth: 0,
            enemyHeight: 0,
            EnemyId: null
        },
        props: {
            IsKonqi: {
                get: function () {
                    return false;
                }
            },
            IsRemoveKonqi: {
                get: function () {
                    return false;
                }
            },
            ShouldAlwaysSpawnRegardlessOfCamera: {
                get: function () {
                    return false;
                }
            }
        },
        alias: [
            "EnemyId", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId",
            "IsKonqi", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$IsKonqi",
            "IsRemoveKonqi", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$IsRemoveKonqi",
            "ShouldAlwaysSpawnRegardlessOfCamera", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ShouldAlwaysSpawnRegardlessOfCamera",
            "GetKonqiLocation", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetKonqiLocation",
            "GetHitboxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetHitboxes",
            "GetDamageBoxes", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDamageBoxes",
            "GetDeadEnemy", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$GetDeadEnemy",
            "ProcessFrame", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ProcessFrame",
            "Render", "TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$Render"
        ],
        ctors: {
            ctor: function (enemyToSpawn, xMibi, yMibi, enemyWidth, enemyHeight) {
                this.$initialize();
                this.enemyToSpawn = enemyToSpawn;
                this.xMibi = xMibi;
                this.yMibi = yMibi;
                this.enemyWidth = enemyWidth;
                this.enemyHeight = enemyHeight;
                this.EnemyId = (enemyToSpawn.TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$EnemyId || "") + "_enemySpawnHelper";
            }
        },
        methods: {
            GetKonqiLocation: function () {
                return null;
            },
            GetHitboxes: function () {
                return new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Hitbox)).ctor();
            },
            GetDamageBoxes: function () {
                return new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Hitbox)).ctor();
            },
            GetDeadEnemy: function () {
                return null;
            },
            ProcessFrame: function (cameraX, cameraY, windowWidth, windowHeight, elapsedMicrosPerFrame, tilemap) {
                var halfWindowWidth = windowWidth >> 1;
                var halfWindowHeight = windowHeight >> 1;

                var halfEnemyWidth = this.enemyWidth >> 1;
                var halfEnemyHeight = this.enemyHeight >> 1;

                var isOutOfCameraViewX = (((this.xMibi >> 10) - halfEnemyWidth) | 0) > ((cameraX + halfWindowWidth) | 0) || (((this.xMibi >> 10) + halfEnemyWidth) | 0) < ((cameraX - halfWindowWidth) | 0);
                var isOutOfCameraViewY = (((this.yMibi >> 10) - halfEnemyHeight) | 0) > ((cameraY + halfWindowHeight) | 0) || (((this.yMibi >> 10) + halfEnemyHeight) | 0) < ((cameraY - halfWindowHeight) | 0);

                if (isOutOfCameraViewX || isOutOfCameraViewY || this.enemyToSpawn.TuxPlanetSpeedrunAnyPercentLibrary$IEnemy$ShouldAlwaysSpawnRegardlessOfCamera) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(Bridge.fn.bind(this, function (_o1) {
                            _o1.add(this.enemyToSpawn);
                            return _o1;
                        })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor()), new (System.Collections.Generic.List$1(System.String)).ctor());
                }

                return new TuxPlanetSpeedrunAnyPercentLibrary.EnemyProcessing.Result(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor(), new (System.Collections.Generic.List$1(System.String)).ctor());

            },
            Render: function (displayOutput) { }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.Level5Tilemap", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.ITilemap],
        fields: {
            mapTilemap: null,
            endingXMibi: 0
        },
        alias: [
            "IsGround", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround",
            "IsKillZone", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsKillZone",
            "IsSpikes", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsSpikes",
            "IsEndOfLevel", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsEndOfLevel",
            "GetCutscene", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetCutscene",
            "GetCheckpoint", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetCheckpoint",
            "GetWidth", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetWidth",
            "GetHeight", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetHeight",
            "GetTuxLocation", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetTuxLocation",
            "GetEnemies", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetEnemies",
            "PlayMusic", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$PlayMusic",
            "RenderBackgroundTiles", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$RenderBackgroundTiles",
            "RenderForegroundTiles", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$RenderForegroundTiles"
        ],
        ctors: {
            ctor: function (mapTilemap, endingXMibi) {
                this.$initialize();
                this.mapTilemap = mapTilemap;
                this.endingXMibi = endingXMibi;
            }
        },
        methods: {
            IsGround: function (x, y) {
                return this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(x, y);
            },
            IsKillZone: function (x, y) {
                return this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsKillZone(x, y);
            },
            IsSpikes: function (x, y) {
                return this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsSpikes(x, y);
            },
            IsEndOfLevel: function (x, y) {
                return this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsEndOfLevel(x, y);
            },
            GetCutscene: function (x, y) {
                return this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetCutscene(x, y);
            },
            GetCheckpoint: function (x, y) {
                return this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetCheckpoint(x, y);
            },
            GetWidth: function () {
                return this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetWidth();
            },
            GetHeight: function () {
                return this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetHeight();
            },
            GetTuxLocation: function (xOffset, yOffset) {
                return this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetTuxLocation(xOffset, yOffset);
            },
            GetEnemies: function (xOffset, yOffset) {
                var enemies = Bridge.fn.bind(this, function (_o1) {
                        _o1.add(TuxPlanetSpeedrunAnyPercentLibrary.EnemyLevel5Spikes.GetEnemyLevel5Spikes(((-147456 + (xOffset << 10)) | 0), yOffset << 10, 30, ((this.endingXMibi + (xOffset << 10)) | 0), "level5Spikes"));
                        return _o1;
                    })(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor());

                var mapTilemapEnemies = this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetEnemies(xOffset, yOffset);

                enemies.AddRange(mapTilemapEnemies);

                return enemies;
            },
            PlayMusic: function () {
                return this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$PlayMusic();
            },
            RenderBackgroundTiles: function (displayOutput, cameraX, cameraY, windowWidth, windowHeight) {
                this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$RenderBackgroundTiles(displayOutput, cameraX, cameraY, windowWidth, windowHeight);
            },
            RenderForegroundTiles: function (displayOutput, cameraX, cameraY, windowWidth, windowHeight) {
                this.mapTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$RenderForegroundTiles(displayOutput, cameraX, cameraY, windowWidth, windowHeight);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level1", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.ILevelConfiguration],
        statics: {
            methods: {
                ConstructUnnormalizedTilemaps: function (mapInfo, random) {
                    var gameMusic = TuxPlanetSpeedrunAnyPercentLibrary.LevelConfigurationHelper.GetRandomGameMusic(random);

                    var enemyIdGenerator = new TuxPlanetSpeedrunAnyPercentLibrary.EnemyIdGenerator();

                    var list = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset)).ctor();

                    var level1TilemapWithOffset = new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level1"), enemyIdGenerator, null, 384, gameMusic), 0, 0, false);

                    list.add(level1TilemapWithOffset);

                    return list;
                }
            }
        },
        fields: {
            normalizedTilemaps: null
        },
        alias: [
            "GetBackground", "TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetBackground",
            "GetTilemap", "TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetTilemap"
        ],
        ctors: {
            ctor: function (mapInfo, random) {
                this.$initialize();
                var unnormalizedTilemaps = TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level1.ConstructUnnormalizedTilemaps(mapInfo, random);

                this.normalizedTilemaps = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset)).$ctor1(TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.NormalizeTilemaps(unnormalizedTilemaps));
            }
        },
        methods: {
            GetBackground: function () {
                return new TuxPlanetSpeedrunAnyPercentLibrary.Background_Ocean();
            },
            GetTilemap: function (tuxX, tuxY, windowWidth, windowHeight) {
                return TuxPlanetSpeedrunAnyPercentLibrary.LevelConfigurationHelper.GetTilemap(this.normalizedTilemaps, tuxX, tuxY, windowWidth, windowHeight);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level2", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.ILevelConfiguration],
        statics: {
            methods: {
                ConstructUnnormalizedTilemaps: function (mapInfo, canAlreadyUseSaveStates, random) {
                    var gameMusic = TuxPlanetSpeedrunAnyPercentLibrary.LevelConfigurationHelper.GetRandomGameMusic(random);

                    var enemyIdGenerator = new TuxPlanetSpeedrunAnyPercentLibrary.EnemyIdGenerator();

                    var list = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset)).ctor();

                    var startTilemapWithOffset = new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level2A_Start"), enemyIdGenerator, null, 384, gameMusic), 0, 0, false);

                    list.add(startTilemapWithOffset);

                    var chooseAPath1TilemapA = TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level2B_Drop1"), enemyIdGenerator, null, 384, gameMusic);

                    var chooseAPath1TilemapB = TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level2B_Drop2"), enemyIdGenerator, null, 384, gameMusic);

                    var chooseAPath1TilemapWithOffset = new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(random.DTLibrary$IDTRandom$NextBool() ? chooseAPath1TilemapA : chooseAPath1TilemapB, 0, ((-chooseAPath1TilemapA.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetHeight()) | 0), false);

                    list.add(chooseAPath1TilemapWithOffset);

                    var level2bPlatformTilemap = TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level2B_Platform"), enemyIdGenerator, null, 384, gameMusic);

                    var level2bPlatformTilemapWithOffset = new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(level2bPlatformTilemap, 0, ((chooseAPath1TilemapWithOffset.YOffset - level2bPlatformTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetHeight()) | 0), false);

                    list.add(level2bPlatformTilemapWithOffset);

                    var chooseAPath2TilemapA = TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level2B_Drop1"), enemyIdGenerator, null, 384, gameMusic);

                    var chooseAPath2TilemapB = TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level2B_Drop2"), enemyIdGenerator, null, 384, gameMusic);

                    var chooseAPath2TilemapWithOffset = new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(random.DTLibrary$IDTRandom$NextBool() ? chooseAPath2TilemapA : chooseAPath2TilemapB, 0, ((level2bPlatformTilemapWithOffset.YOffset - chooseAPath2TilemapA.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetHeight()) | 0), false);

                    list.add(chooseAPath2TilemapWithOffset);

                    var level2cLowerFloorTilemap = TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level2C_LowerFloor"), enemyIdGenerator, null, 384, gameMusic);

                    var level2cLowerFloorTilemapWithOffset = new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(level2cLowerFloorTilemap, chooseAPath2TilemapWithOffset.XOffset, ((chooseAPath2TilemapWithOffset.YOffset - level2cLowerFloorTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetHeight()) | 0), false);

                    list.add(level2cLowerFloorTilemapWithOffset);

                    var cutsceneTilemap = TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level2D_Cutscene"), enemyIdGenerator, TuxPlanetSpeedrunAnyPercentLibrary.CutsceneProcessing.SAVESTATE_CUTSCENE, 384, gameMusic);

                    var cutsceneTilemapWithOffset = new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(canAlreadyUseSaveStates ? new TuxPlanetSpeedrunAnyPercentLibrary.NoCutsceneWrappedTilemap(cutsceneTilemap) : cutsceneTilemap, ((level2cLowerFloorTilemapWithOffset.XOffset + level2cLowerFloorTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetWidth()) | 0), level2cLowerFloorTilemapWithOffset.YOffset, false);

                    list.add(cutsceneTilemapWithOffset);

                    var level2eTilemap = TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level2E"), enemyIdGenerator, null, 384, gameMusic);

                    var level2eTilemapWithOffset = new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(level2eTilemap, ((cutsceneTilemapWithOffset.XOffset + cutsceneTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetWidth()) | 0), ((cutsceneTilemapWithOffset.YOffset + 960) | 0), false);

                    list.add(level2eTilemapWithOffset);

                    var level2fTilemapA = TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level2F_Drop1"), enemyIdGenerator, null, 384, gameMusic);
                    var level2fTilemapB = TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level2F_Drop2"), enemyIdGenerator, null, 384, gameMusic);
                    var level2fTilemapC = TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level2F_Drop3"), enemyIdGenerator, null, 384, gameMusic);
                    var level2fTilemapD = TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level2F_Drop4"), enemyIdGenerator, null, 384, gameMusic);

                    var level2fTilemapWithOffset = new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(random.DTLibrary$IDTRandom$NextBool() ? (random.DTLibrary$IDTRandom$NextBool() ? level2fTilemapA : level2fTilemapB) : (random.DTLibrary$IDTRandom$NextBool() ? level2fTilemapC : level2fTilemapD), level2eTilemapWithOffset.XOffset, ((level2eTilemapWithOffset.YOffset - level2fTilemapA.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetHeight()) | 0), false);

                    list.add(level2fTilemapWithOffset);

                    var level2fPlatformTilemap = TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level2F_Platform"), enemyIdGenerator, null, 384, gameMusic);

                    var level2fPlatformTilemapWithOffset = new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(level2fPlatformTilemap, level2fTilemapWithOffset.XOffset, ((level2fTilemapWithOffset.YOffset - level2fPlatformTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetHeight()) | 0), false);

                    list.add(level2fPlatformTilemapWithOffset);

                    var level2fTilemapA2 = TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level2F_Drop1"), enemyIdGenerator, null, 384, gameMusic);
                    var level2fTilemapB2 = TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level2F_Drop2"), enemyIdGenerator, null, 384, gameMusic);
                    var level2fTilemapC2 = TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level2F_Drop3"), enemyIdGenerator, null, 384, gameMusic);
                    var level2fTilemapD2 = TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level2F_Drop4"), enemyIdGenerator, null, 384, gameMusic);

                    var level2fTilemapWithOffset2 = new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(random.DTLibrary$IDTRandom$NextBool() ? (random.DTLibrary$IDTRandom$NextBool() ? level2fTilemapA2 : level2fTilemapB2) : (random.DTLibrary$IDTRandom$NextBool() ? level2fTilemapC2 : level2fTilemapD2), level2fPlatformTilemapWithOffset.XOffset, ((level2fPlatformTilemapWithOffset.YOffset - level2fTilemapA2.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetHeight()) | 0), false);

                    list.add(level2fTilemapWithOffset2);

                    var finishTilemap = TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level2G_Finish"), enemyIdGenerator, null, 384, gameMusic);

                    list.add(new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(finishTilemap, level2fTilemapWithOffset2.XOffset, ((level2fTilemapWithOffset2.YOffset - finishTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetHeight()) | 0), false));

                    return list;
                }
            }
        },
        fields: {
            normalizedTilemaps: null
        },
        alias: [
            "GetBackground", "TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetBackground",
            "GetTilemap", "TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetTilemap"
        ],
        ctors: {
            ctor: function (mapInfo, canAlreadyUseSaveStates, random) {
                this.$initialize();
                var unnormalizedTilemaps = TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level2.ConstructUnnormalizedTilemaps(mapInfo, canAlreadyUseSaveStates, random);

                if (canAlreadyUseSaveStates) {
                    unnormalizedTilemaps.add(new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(new TuxPlanetSpeedrunAnyPercentLibrary.SpawnRemoveKonqiTilemap(), 0, 0, true));
                }

                this.normalizedTilemaps = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset)).$ctor1(TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.NormalizeTilemaps(unnormalizedTilemaps));
            }
        },
        methods: {
            GetBackground: function () {
                return new TuxPlanetSpeedrunAnyPercentLibrary.Background_Ocean();
            },
            GetTilemap: function (tuxX, tuxY, windowWidth, windowHeight) {
                return TuxPlanetSpeedrunAnyPercentLibrary.LevelConfigurationHelper.GetTilemap(this.normalizedTilemaps, tuxX, tuxY, windowWidth, windowHeight);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level3", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.ILevelConfiguration],
        statics: {
            methods: {
                ConstructUnnormalizedTilemaps: function (mapInfo, canAlreadyUseTeleport, random) {
                    var gameMusic = TuxPlanetSpeedrunAnyPercentLibrary.LevelConfigurationHelper.GetRandomGameMusic(random);

                    var enemyIdGenerator = new TuxPlanetSpeedrunAnyPercentLibrary.EnemyIdGenerator();

                    var list = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset)).ctor();

                    var startTilemap = TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level3A_Start"), enemyIdGenerator, null, 384, gameMusic);

                    var startTilemapWithOffset = new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(startTilemap, 0, 0, false);

                    list.add(startTilemapWithOffset);

                    var dropTilemap = TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level3B_Drop"), enemyIdGenerator, null, 384, gameMusic);

                    var dropTilemapWithOffset = new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(dropTilemap, ((startTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetWidth() + Bridge.Int.mul(Bridge.Int.mul(random.DTLibrary$IDTRandom$NextInt(10), 16), 3)) | 0), -1440, false);

                    list.add(dropTilemapWithOffset);

                    var cutsceneTilemap = TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level3C_Cutscene"), enemyIdGenerator, TuxPlanetSpeedrunAnyPercentLibrary.CutsceneProcessing.TELEPORT_CUTSCENE, 384, gameMusic);

                    var cutsceneTilemapWithOffset = new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(canAlreadyUseTeleport ? new TuxPlanetSpeedrunAnyPercentLibrary.NoCutsceneWrappedTilemap(cutsceneTilemap) : cutsceneTilemap, ((((dropTilemapWithOffset.XOffset + dropTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetWidth()) | 0) + Bridge.Int.mul(Bridge.Int.mul(random.DTLibrary$IDTRandom$NextInt(10), 16), 3)) | 0), ((dropTilemapWithOffset.YOffset - 1440) | 0), false);

                    list.add(cutsceneTilemapWithOffset);

                    var finishTilemap = TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level3D_Finish"), enemyIdGenerator, null, 384, gameMusic);

                    var finishTilemapWithOffset = new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(finishTilemap, ((cutsceneTilemapWithOffset.XOffset + cutsceneTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetWidth()) | 0), ((cutsceneTilemapWithOffset.YOffset - 1392) | 0), false);

                    list.add(finishTilemapWithOffset);

                    return list;
                }
            }
        },
        fields: {
            normalizedTilemaps: null
        },
        alias: [
            "GetBackground", "TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetBackground",
            "GetTilemap", "TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetTilemap"
        ],
        ctors: {
            ctor: function (mapInfo, canAlreadyUseTeleport, random) {
                this.$initialize();
                var unnormalizedTilemaps = TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level3.ConstructUnnormalizedTilemaps(mapInfo, canAlreadyUseTeleport, random);

                if (canAlreadyUseTeleport) {
                    unnormalizedTilemaps.add(new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(new TuxPlanetSpeedrunAnyPercentLibrary.SpawnRemoveKonqiTilemap(), 0, 0, true));
                }

                this.normalizedTilemaps = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset)).$ctor1(TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.NormalizeTilemaps(unnormalizedTilemaps));
            }
        },
        methods: {
            GetBackground: function () {
                return new TuxPlanetSpeedrunAnyPercentLibrary.Background_Ocean();
            },
            GetTilemap: function (tuxX, tuxY, windowWidth, windowHeight) {
                return TuxPlanetSpeedrunAnyPercentLibrary.LevelConfigurationHelper.GetTilemap(this.normalizedTilemaps, tuxX, tuxY, windowWidth, windowHeight);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level4", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.ILevelConfiguration],
        statics: {
            methods: {
                ConstructUnnormalizedTilemaps: function (mapInfo, canAlreadyUseTimeSlowdown, random) {
                    var gameMusic = TuxPlanetSpeedrunAnyPercentLibrary.LevelConfigurationHelper.GetRandomGameMusic(random);

                    var enemyIdGenerator = new TuxPlanetSpeedrunAnyPercentLibrary.EnemyIdGenerator();

                    var list = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset)).ctor();

                    var startTilemap = TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level4A_Start"), enemyIdGenerator, null, 384, gameMusic);

                    var startTilemapWithOffset = new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(startTilemap, 0, 0, false);

                    list.add(startTilemapWithOffset);

                    var level4bTilemap1 = TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level4B_Segment1"), enemyIdGenerator, null, 384, gameMusic);

                    var level4bTilemap2 = TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level4B_Segment2"), enemyIdGenerator, null, 384, gameMusic);

                    var level4bTilemapWithOffset = new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(random.DTLibrary$IDTRandom$NextBool() ? level4bTilemap1 : level4bTilemap2, 0, startTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetHeight(), false);

                    list.add(level4bTilemapWithOffset);

                    var cutsceneTilemap = TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level4C_Cutscene"), enemyIdGenerator, TuxPlanetSpeedrunAnyPercentLibrary.CutsceneProcessing.TIME_SLOWDOWN_CUTSCENE, 384, gameMusic);

                    var cutsceneTilemapWithOffset = new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(canAlreadyUseTimeSlowdown ? new TuxPlanetSpeedrunAnyPercentLibrary.NoCutsceneWrappedTilemap(cutsceneTilemap) : cutsceneTilemap, 0, ((level4bTilemapWithOffset.YOffset + level4bTilemap1.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetHeight()) | 0), false);

                    list.add(cutsceneTilemapWithOffset);

                    var level4dTilemap1 = TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level4D_Segment1"), enemyIdGenerator, null, 384, gameMusic);

                    var level4dTilemap2 = TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level4D_Segment2"), enemyIdGenerator, null, 384, gameMusic);

                    var level4dTilemapWithOffset = new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(random.DTLibrary$IDTRandom$NextBool() ? level4dTilemap1 : level4dTilemap2, 0, ((cutsceneTilemapWithOffset.YOffset + cutsceneTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetHeight()) | 0), false);

                    list.add(level4dTilemapWithOffset);

                    var finishTilemap = TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level4E_Finish"), enemyIdGenerator, null, 384, gameMusic);

                    var finishTilemapWithOffset = new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(finishTilemap, 0, ((level4dTilemapWithOffset.YOffset + level4dTilemap1.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetHeight()) | 0), false);

                    list.add(finishTilemapWithOffset);

                    return list;
                }
            }
        },
        fields: {
            normalizedTilemaps: null
        },
        alias: [
            "GetBackground", "TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetBackground",
            "GetTilemap", "TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetTilemap"
        ],
        ctors: {
            ctor: function (mapInfo, canAlreadyUseTimeSlowdown, random) {
                this.$initialize();
                var unnormalizedTilemaps = TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level4.ConstructUnnormalizedTilemaps(mapInfo, canAlreadyUseTimeSlowdown, random);

                if (canAlreadyUseTimeSlowdown) {
                    unnormalizedTilemaps.add(new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(new TuxPlanetSpeedrunAnyPercentLibrary.SpawnRemoveKonqiTilemap(), 0, 0, true));
                }

                this.normalizedTilemaps = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset)).$ctor1(TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.NormalizeTilemaps(unnormalizedTilemaps));
            }
        },
        methods: {
            GetBackground: function () {
                return new TuxPlanetSpeedrunAnyPercentLibrary.Background_Ocean();
            },
            GetTilemap: function (tuxX, tuxY, windowWidth, windowHeight) {
                return TuxPlanetSpeedrunAnyPercentLibrary.LevelConfigurationHelper.GetTilemap(this.normalizedTilemaps, tuxX, tuxY, windowWidth, windowHeight);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level5", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.ILevelConfiguration],
        statics: {
            methods: {
                ConstructUnnormalizedTilemaps: function (mapInfo, random) {
                    var gameMusic = TuxPlanetSpeedrunAnyPercentLibrary.LevelConfigurationHelper.GetRandomGameMusic(random);

                    var enemyIdGenerator = new TuxPlanetSpeedrunAnyPercentLibrary.EnemyIdGenerator();

                    var list = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset)).ctor();

                    var startTilemap = new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level5A_Start"), enemyIdGenerator, null, 384, gameMusic), 0, 0, false);

                    list.add(startTilemap);

                    var xOffset = (startTilemap.Tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetWidth() + Bridge.Int.mul(Bridge.Int.mul((((3 + random.DTLibrary$IDTRandom$NextInt(5)) | 0)), 16), 3)) | 0;

                    var yOffset = 144;

                    while (true) {
                        if (xOffset >= 19200) {
                            break;
                        }

                        var numberOfFragmentTilemaps = 12;
                        var mapInfoName = "Level5B_Fragment" + (DTLibrary.StringUtil.ToStringCultureInvariant((((random.DTLibrary$IDTRandom$NextInt(numberOfFragmentTilemaps) + 1) | 0))) || "");

                        var fragmentTilemap = TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem(mapInfoName), enemyIdGenerator, null, 384, gameMusic);

                        var fragmentTilemapWithOffset = new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(fragmentTilemap, xOffset, yOffset, false);

                        list.add(fragmentTilemapWithOffset);

                        xOffset = (xOffset + (((fragmentTilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetWidth() + Bridge.Int.mul(Bridge.Int.mul((((3 + random.DTLibrary$IDTRandom$NextInt(5)) | 0)), 16), 3)) | 0))) | 0;

                        if (yOffset === 480) {
                            yOffset = (yOffset + (Bridge.Int.mul(Bridge.Int.mul((((random.DTLibrary$IDTRandom$NextInt(3) - 2) | 0)), 16), 3))) | 0;
                        } else {
                            if (yOffset === 0) {
                                yOffset = (yOffset + (Bridge.Int.mul(Bridge.Int.mul(random.DTLibrary$IDTRandom$NextInt(3), 16), 3))) | 0;
                            } else {
                                yOffset = (yOffset + (Bridge.Int.mul(Bridge.Int.mul((((random.DTLibrary$IDTRandom$NextInt(5) - 2) | 0)), 16), 3))) | 0;
                            }
                        }

                        if (yOffset > 480) {
                            yOffset = 480;
                        }

                        if (yOffset < 0) {
                            yOffset = 0;
                        }
                    }

                    var finishTilemap = new TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset(TuxPlanetSpeedrunAnyPercentLibrary.MapDataTilemapGenerator.GetTilemap(mapInfo.System$Collections$Generic$IReadOnlyDictionary$2$System$String$TuxPlanetSpeedrunAnyPercentLibrary$MapDataHelper$Map$getItem("Level5C_Finish"), enemyIdGenerator, null, 384, gameMusic), xOffset, 0, false);

                    list.add(finishTilemap);

                    var endingXMibi = Bridge.Int.mul((((finishTilemap.XOffset - 24) | 0)), 1024);

                    return { Item1: list, Item2: endingXMibi };
                }
            }
        },
        fields: {
            normalizedTilemaps: null,
            endingXMibi: 0
        },
        alias: [
            "GetBackground", "TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetBackground",
            "GetTilemap", "TuxPlanetSpeedrunAnyPercentLibrary$ILevelConfiguration$GetTilemap"
        ],
        ctors: {
            ctor: function (mapInfo, random) {
                this.$initialize();
                var result = TuxPlanetSpeedrunAnyPercentLibrary.LevelConfiguration_Level5.ConstructUnnormalizedTilemaps(mapInfo, random);

                var unnormalizedTilemaps = result.Item1;

                this.normalizedTilemaps = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.TilemapWithOffset)).$ctor1(TuxPlanetSpeedrunAnyPercentLibrary.CompositeTilemap.NormalizeTilemaps(unnormalizedTilemaps));

                this.endingXMibi = result.Item2;
            }
        },
        methods: {
            GetBackground: function () {
                return new TuxPlanetSpeedrunAnyPercentLibrary.Background_Ocean();
            },
            GetTilemap: function (tuxX, tuxY, windowWidth, windowHeight) {
                var tilemap = TuxPlanetSpeedrunAnyPercentLibrary.LevelConfigurationHelper.GetTilemap(this.normalizedTilemaps, tuxX, tuxY, windowWidth, windowHeight);

                return new TuxPlanetSpeedrunAnyPercentLibrary.Level5Tilemap(tilemap, this.endingXMibi);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.NoCutsceneWrappedTilemap", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.ITilemap],
        fields: {
            tilemap: null
        },
        alias: [
            "IsGround", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround",
            "IsKillZone", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsKillZone",
            "IsSpikes", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsSpikes",
            "IsEndOfLevel", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsEndOfLevel",
            "GetCutscene", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetCutscene",
            "GetCheckpoint", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetCheckpoint",
            "GetWidth", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetWidth",
            "GetHeight", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetHeight",
            "GetTuxLocation", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetTuxLocation",
            "GetEnemies", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetEnemies",
            "PlayMusic", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$PlayMusic",
            "RenderBackgroundTiles", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$RenderBackgroundTiles",
            "RenderForegroundTiles", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$RenderForegroundTiles"
        ],
        ctors: {
            ctor: function (tilemap) {
                this.$initialize();
                this.tilemap = tilemap;
            }
        },
        methods: {
            IsGround: function (x, y) {
                return this.tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround(x, y);
            },
            IsKillZone: function (x, y) {
                return this.tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsKillZone(x, y);
            },
            IsSpikes: function (x, y) {
                return this.tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsSpikes(x, y);
            },
            IsEndOfLevel: function (x, y) {
                return this.tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsEndOfLevel(x, y);
            },
            GetCutscene: function (x, y) {
                return null;
            },
            GetCheckpoint: function (x, y) {
                return this.tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetCheckpoint(x, y);
            },
            GetWidth: function () {
                return this.tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetWidth();
            },
            GetHeight: function () {
                return this.tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetHeight();
            },
            GetTuxLocation: function (xOffset, yOffset) {
                return this.tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetTuxLocation(xOffset, yOffset);
            },
            GetEnemies: function (xOffset, yOffset) {
                return this.tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetEnemies(xOffset, yOffset);
            },
            PlayMusic: function () {
                return this.tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$PlayMusic();
            },
            RenderBackgroundTiles: function (displayOutput, cameraX, cameraY, windowWidth, windowHeight) {
                this.tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$RenderBackgroundTiles(displayOutput, cameraX, cameraY, windowWidth, windowHeight);
            },
            RenderForegroundTiles: function (displayOutput, cameraX, cameraY, windowWidth, windowHeight) {
                this.tilemap.TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$RenderForegroundTiles(displayOutput, cameraX, cameraY, windowWidth, windowHeight);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.SpawnRemoveKonqiTilemap", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.ITilemap],
        fields: {
            removeKonqiEnemy: null
        },
        alias: [
            "IsGround", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround",
            "IsKillZone", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsKillZone",
            "IsSpikes", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsSpikes",
            "IsEndOfLevel", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsEndOfLevel",
            "GetCutscene", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetCutscene",
            "GetCheckpoint", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetCheckpoint",
            "GetWidth", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetWidth",
            "GetHeight", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetHeight",
            "GetTuxLocation", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetTuxLocation",
            "GetEnemies", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetEnemies",
            "PlayMusic", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$PlayMusic",
            "RenderBackgroundTiles", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$RenderBackgroundTiles",
            "RenderForegroundTiles", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$RenderForegroundTiles"
        ],
        ctors: {
            ctor: function () {
                this.$initialize();
                this.removeKonqiEnemy = function (_o1) {
                        _o1.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemyRemoveKonqiCutscene("SpawnRemoveKonqiTilemap_removeKonqi"));
                        return _o1;
                    }(new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor());
            }
        },
        methods: {
            IsGround: function (x, y) {
                return false;
            },
            IsKillZone: function (x, y) {
                return false;
            },
            IsSpikes: function (x, y) {
                return false;
            },
            IsEndOfLevel: function (x, y) {
                return false;
            },
            GetCutscene: function (x, y) {
                return null;
            },
            GetCheckpoint: function (x, y) {
                return null;
            },
            GetWidth: function () {
                return 100;
            },
            GetHeight: function () {
                return 100;
            },
            GetTuxLocation: function (xOffset, yOffset) {
                return null;
            },
            GetEnemies: function (xOffset, yOffset) {
                return this.removeKonqiEnemy;
            },
            PlayMusic: function () {
                return null;
            },
            RenderBackgroundTiles: function (displayOutput, cameraX, cameraY, windowWidth, windowHeight) { },
            RenderForegroundTiles: function (displayOutput, cameraX, cameraY, windowWidth, windowHeight) { }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.Tilemap", {
        inherits: [TuxPlanetSpeedrunAnyPercentLibrary.ITilemap],
        fields: {
            backgroundSpritesArray: null,
            foregroundSpritesArray: null,
            isGroundArray: null,
            isKillZoneArray: null,
            isSpikesArray: null,
            isEndOfLevelArray: null,
            isCutsceneArray: null,
            checkpointArray: null,
            tileWidth: 0,
            tileHeight: 0,
            tilemapWidth: 0,
            tilemapHeight: 0,
            enemies: null,
            cutsceneName: null,
            tuxLocation: null,
            gameMusic: 0
        },
        alias: [
            "IsGround", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsGround",
            "IsSpikes", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsSpikes",
            "IsKillZone", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsKillZone",
            "IsEndOfLevel", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$IsEndOfLevel",
            "GetCutscene", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetCutscene",
            "GetCheckpoint", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetCheckpoint",
            "GetWidth", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetWidth",
            "GetHeight", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetHeight",
            "RenderBackgroundTiles", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$RenderBackgroundTiles",
            "RenderForegroundTiles", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$RenderForegroundTiles",
            "GetEnemies", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetEnemies",
            "PlayMusic", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$PlayMusic",
            "GetTuxLocation", "TuxPlanetSpeedrunAnyPercentLibrary$ITilemap$GetTuxLocation"
        ],
        ctors: {
            ctor: function (backgroundSpritesArray, foregroundSpritesArray, isGroundArray, isKillZoneArray, isSpikesArray, isEndOfLevelArray, isCutsceneArray, checkpointArray, tileWidth, tileHeight, enemies, cutsceneName, tuxLocation, gameMusic) {
                this.$initialize();
                this.backgroundSpritesArray = TuxPlanetSpeedrunAnyPercentLibrary.SpriteUtil.CopySpriteArray(backgroundSpritesArray);
                this.foregroundSpritesArray = TuxPlanetSpeedrunAnyPercentLibrary.SpriteUtil.CopySpriteArray(foregroundSpritesArray);
                this.isGroundArray = TuxPlanetSpeedrunAnyPercentLibrary.ArrayUtil.CopyBoolArray(isGroundArray);
                this.isKillZoneArray = TuxPlanetSpeedrunAnyPercentLibrary.ArrayUtil.CopyBoolArray(isKillZoneArray);
                this.isSpikesArray = TuxPlanetSpeedrunAnyPercentLibrary.ArrayUtil.CopyBoolArray(isSpikesArray);
                this.isEndOfLevelArray = TuxPlanetSpeedrunAnyPercentLibrary.ArrayUtil.CopyBoolArray(isEndOfLevelArray);
                this.isCutsceneArray = TuxPlanetSpeedrunAnyPercentLibrary.ArrayUtil.CopyBoolArray(isCutsceneArray);
                this.checkpointArray = TuxPlanetSpeedrunAnyPercentLibrary.ArrayUtil.ShallowCopyTArray(System.Tuple$2(System.Int32,System.Int32), checkpointArray);
                this.tileWidth = tileWidth;
                this.tileHeight = tileHeight;
                this.tilemapWidth = Bridge.Int.mul(tileWidth, foregroundSpritesArray.length);
                this.tilemapHeight = Bridge.Int.mul(tileHeight, foregroundSpritesArray[System.Array.index(0, foregroundSpritesArray)].length);
                this.enemies = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.Tilemap.EnemySpawnLocation)).$ctor1(enemies);
                this.cutsceneName = cutsceneName;
                this.tuxLocation = tuxLocation;
                this.gameMusic = gameMusic;
            }
        },
        methods: {
            GetArrayValue: function (array, worldX, worldY) {
                var $t;
                if (worldX < 0 || worldY < 0) {
                    return false;
                }

                var arrayI = (Bridge.Int.div(worldX, this.tileWidth)) | 0;
                var arrayJ = (Bridge.Int.div(worldY, this.tileHeight)) | 0;

                if (arrayI < array.length) {
                    if (arrayJ < array[System.Array.index(arrayI, array)].length) {
                        return ($t = array[System.Array.index(arrayI, array)])[System.Array.index(arrayJ, $t)];
                    }
                }

                return false;
            },
            IsGround: function (x, y) {
                return this.GetArrayValue(this.isGroundArray, x, y);
            },
            IsSpikes: function (x, y) {
                return this.GetArrayValue(this.isSpikesArray, x, y);
            },
            IsKillZone: function (x, y) {
                return this.GetArrayValue(this.isKillZoneArray, x, y);
            },
            IsEndOfLevel: function (x, y) {
                return this.GetArrayValue(this.isEndOfLevelArray, x, y);
            },
            GetCutscene: function (x, y) {
                var isCutscene = this.GetArrayValue(this.isCutsceneArray, x, y);

                if (isCutscene) {
                    return this.cutsceneName;
                }

                return null;
            },
            GetCheckpoint: function (x, y) {
                var $t;
                if (x < 0 || y < 0) {
                    return null;
                }

                var arrayI = (Bridge.Int.div(x, this.tileWidth)) | 0;
                var arrayJ = (Bridge.Int.div(y, this.tileHeight)) | 0;

                if (arrayI < this.checkpointArray.length) {
                    if (arrayJ < this.checkpointArray[System.Array.index(arrayI, this.checkpointArray)].length) {
                        return ($t = this.checkpointArray[System.Array.index(arrayI, this.checkpointArray)])[System.Array.index(arrayJ, $t)];
                    }
                }

                return null;
            },
            GetWidth: function () {
                return this.tilemapWidth;
            },
            GetHeight: function () {
                return this.tilemapHeight;
            },
            RenderSprites: function (sprites, cameraX, cameraY, windowWidth, windowHeight, displayOutput) {
                var $t;
                var worldX = 0;

                var windowLeft = (cameraX - ((Bridge.Int.div(windowWidth, 2)) | 0)) | 0;
                var windowRight = (cameraX + ((Bridge.Int.div(windowWidth, 2)) | 0)) | 0;
                var windowBottom = (cameraY - ((Bridge.Int.div(windowHeight, 2)) | 0)) | 0;
                var windowTop = (cameraY + ((Bridge.Int.div(windowHeight, 2)) | 0)) | 0;

                for (var i = 0; i < sprites.length; i = (i + 1) | 0) {
                    if (windowLeft <= ((worldX + this.tileWidth) | 0) && worldX <= windowRight) {
                        var worldY = 0;

                        for (var j = 0; j < sprites[System.Array.index(i, sprites)].length; j = (j + 1) | 0) {
                            if (windowBottom <= ((worldY + this.tileHeight) | 0) && worldY <= windowTop) {
                                var sprite = ($t = sprites[System.Array.index(i, sprites)])[System.Array.index(j, $t)];

                                if (sprite != null) {
                                    displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2(sprite.Image, sprite.X, sprite.Y, sprite.Width, sprite.Height, worldX, worldY, 0, sprite.ScalingFactorScaled);
                                }
                            }

                            worldY = (worldY + this.tileHeight) | 0;
                        }
                    }

                    worldX = (worldX + this.tileWidth) | 0;
                }
            },
            RenderBackgroundTiles: function (displayOutput, cameraX, cameraY, windowWidth, windowHeight) {
                this.RenderSprites(this.backgroundSpritesArray, cameraX, cameraY, windowWidth, windowHeight, displayOutput);
            },
            RenderForegroundTiles: function (displayOutput, cameraX, cameraY, windowWidth, windowHeight) {
                this.RenderSprites(this.foregroundSpritesArray, cameraX, cameraY, windowWidth, windowHeight, displayOutput);
            },
            GetEnemies: function (xOffset, yOffset) {
                var $t;
                var list = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.IEnemy)).ctor();

                var halfTileWidth = this.tileWidth >> 1;
                var halfTileHeight = this.tileHeight >> 1;

                $t = Bridge.getEnumerator(this.enemies);
                try {
                    while ($t.moveNext()) {
                        var enemy = $t.Current;
                        if (enemy.ActorId === 13) {
                            var xMibi = (((((Bridge.Int.mul(enemy.TileI, this.tileWidth) + halfTileWidth) | 0) + xOffset) | 0)) << 10;
                            var yMibi = (((((((Bridge.Int.mul(enemy.TileJ, this.tileHeight) + halfTileHeight) | 0) + 3) | 0) + yOffset) | 0)) << 10;

                            var enemySmartcap = TuxPlanetSpeedrunAnyPercentLibrary.EnemySmartcap.GetEnemySmartcap(xMibi, yMibi, true, enemy.EnemyId);

                            list.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemySpawnHelper(enemySmartcap, xMibi, yMibi, 48, 54));
                        } else if (enemy.ActorId === 23) {
                            var xMibi1 = (((((Bridge.Int.mul(enemy.TileI, this.tileWidth) + halfTileWidth) | 0) + xOffset) | 0)) << 10;
                            var yMibi1 = (((((Bridge.Int.mul(enemy.TileJ, this.tileHeight) + halfTileHeight) | 0) + yOffset) | 0)) << 10;

                            var konqi = TuxPlanetSpeedrunAnyPercentLibrary.EnemyKonqiCutscene.GetEnemyKonqiCutscene(xMibi1, yMibi1, enemy.EnemyId);

                            list.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemySpawnHelper(konqi, xMibi1, yMibi1, 96, 96));
                        } else if (enemy.ActorId === 67) {
                            var xMibi2 = (((((Bridge.Int.mul(enemy.TileI, this.tileWidth) + halfTileWidth) | 0) + xOffset) | 0)) << 10;
                            var yMibi2 = (((((Bridge.Int.mul(enemy.TileJ, this.tileHeight) + halfTileHeight) | 0) + yOffset) | 0)) << 10;

                            var enemyBlazeborn = TuxPlanetSpeedrunAnyPercentLibrary.EnemyBlazeborn.GetEnemyBlazeborn(xMibi2, yMibi2, true, enemy.EnemyId);

                            list.add(new TuxPlanetSpeedrunAnyPercentLibrary.EnemySpawnHelper(enemyBlazeborn, xMibi2, yMibi2, 48, 48));
                        } else {
                            throw new System.Exception();
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }

                return list;
            },
            PlayMusic: function () {
                return this.gameMusic;
            },
            GetTuxLocation: function (xOffset, yOffset) {
                if (this.tuxLocation != null) {
                    return { Item1: ((this.tuxLocation.Item1 + xOffset) | 0), Item2: ((this.tuxLocation.Item2 + yOffset) | 0) };
                }

                return null;
            }
        }
    });

    /**
     * A relatively poor implementation of a random number generator.
     *
     * @public
     * @class DTLibrary.DTDeterministicRandom
     * @implements  DTLibrary.IDTDeterministicRandom
     */
    Bridge.define("DTLibrary.DTDeterministicRandom", {
        inherits: [DTLibrary.IDTDeterministicRandom],
        fields: {
            array: null,
            seed: 0,
            index: 0,
            numAddSeed: 0
        },
        alias: [
            "SerializeToString", "DTLibrary$IDTDeterministicRandom$SerializeToString",
            "DeserializeFromString", "DTLibrary$IDTDeterministicRandom$DeserializeFromString",
            "AddSeed", "DTLibrary$IDTRandom$AddSeed",
            "Reset", "DTLibrary$IDTDeterministicRandom$Reset",
            "NextInt", "DTLibrary$IDTRandom$NextInt",
            "NextBool", "DTLibrary$IDTRandom$NextBool"
        ],
        ctors: {
            init: function () {
                this.array = System.Array.init([
                    1793041919, 
                    602088110, 
                    1921897125, 
                    1534754668, 
                    534106591, 
                    926685869, 
                    1798754478, 
                    52490313, 
                    2084561434, 
                    463092902, 
                    1258950485, 
                    284989778, 
                    1590555155, 
                    980802917, 
                    557312298, 
                    1902239770, 
                    1383030646, 
                    505384064, 
                    1777321464, 
                    1119959183, 
                    1013563887, 
                    1621523487, 
                    1588747314, 
                    341335111, 
                    985588432, 
                    1040494445, 
                    1408851891, 
                    1318207611, 
                    345784467, 
                    1319292687, 
                    1476947364, 
                    1414171437, 
                    567932749, 
                    200223705, 
                    1545093434, 
                    2101558308, 
                    89003472, 
                    76749274, 
                    532827537, 
                    2035677224, 
                    2074528768, 
                    2003633901, 
                    820191715, 
                    232753075, 
                    628379766, 
                    2133718820, 
                    281944640, 
                    668546757, 
                    1341287059, 
                    1440909200, 
                    1330429851, 
                    116765651, 
                    192136109, 
                    1149020890, 
                    673209788, 
                    171518432, 
                    1160824443, 
                    1580562014, 
                    549166236, 
                    1641095793, 
                    1665317625, 
                    480546867, 
                    1854189493, 
                    765268747, 
                    1133629185, 
                    1992262695, 
                    1864540676, 
                    1390331450, 
                    1583193130, 
                    603237637, 
                    1813236298, 
                    1306281372, 
                    2120040174, 
                    1889127887, 
                    1192914062, 
                    1157413633, 
                    801331772, 
                    1355994239, 
                    1860438992, 
                    999353259, 
                    758549805, 
                    740305134, 
                    2124404199, 
                    1052358914, 
                    2136346483, 
                    1360181713, 
                    1222035328, 
                    1566395506, 
                    1674497564, 
                    1373575002, 
                    940733865, 
                    655925105, 
                    1675066685, 
                    1039215391, 
                    370359599, 
                    1593981901, 
                    149444408, 
                    54922968, 
                    1246607537, 
                    783600718, 
                    269178144, 
                    1039096837, 
                    1232837274, 
                    738049422, 
                    1775156549, 
                    24148479, 
                    144209124, 
                    450491869, 
                    2103590475, 
                    1663279802, 
                    1517670307, 
                    1952313851, 
                    1867606669, 
                    1697296624, 
                    882545988, 
                    925012491, 
                    503626315, 
                    801830579, 
                    776405911, 
                    1920931119, 
                    770227367, 
                    298145170, 
                    1863317533, 
                    209618128, 
                    1809987419, 
                    1157311193, 
                    1778698334, 
                    1080824783, 
                    1518768288, 
                    1746415808, 
                    1007969225, 
                    746408804, 
                    109386702, 
                    1076838274, 
                    730175115, 
                    1866936615, 
                    1654951507, 
                    1386354777, 
                    1424686012, 
                    2112198004, 
                    1215972589, 
                    771543459, 
                    1610288678, 
                    11217762, 
                    2003388342, 
                    1135903661, 
                    935802083, 
                    2125253708, 
                    156669403, 
                    1592830755, 
                    1090355586, 
                    1495097476, 
                    1426000704, 
                    1473160065, 
                    13373351, 
                    2118516621, 
                    1323262951, 
                    1023219146, 
                    1075545650, 
                    617845356, 
                    392933792, 
                    1210867988, 
                    1079207228, 
                    357174667, 
                    655310577, 
                    771261503, 
                    1842927149, 
                    790768395, 
                    967121509, 
                    1163093020, 
                    1417544631, 
                    1264755185, 
                    1524628214, 
                    811691554, 
                    704958530, 
                    2146167555, 
                    835340139, 
                    1852099771, 
                    353713433, 
                    674083758, 
                    221509110, 
                    1800928273, 
                    924155380, 
                    2073421180, 
                    656060222, 
                    1660355396, 
                    1467891747, 
                    783710284, 
                    1063464923, 
                    759142141, 
                    543673664, 
                    631732361, 
                    310809127, 
                    806840656, 
                    1719264212, 
                    5104601, 
                    1839819878, 
                    1253114011, 
                    1503390832, 
                    1232126839, 
                    1440460159, 
                    145033688, 
                    1158132199, 
                    1141060030, 
                    175286124, 
                    1973084048, 
                    2117952909, 
                    614309150, 
                    768201535, 
                    14689443, 
                    1283176482, 
                    1618646827, 
                    669505713, 
                    401461892, 
                    396336246, 
                    739489166, 
                    286712608, 
                    1153269695, 
                    1848598092, 
                    1142438828, 
                    1450853403, 
                    1059216865, 
                    1874787119, 
                    207979368, 
                    619419356, 
                    785812270, 
                    953946058, 
                    717787558, 
                    1239910989, 
                    699853929, 
                    306347677, 
                    1729709775, 
                    348708939, 
                    1269070241, 
                    1381107246, 
                    76475422, 
                    642796074, 
                    1930578997, 
                    1898135056, 
                    830459821, 
                    1689886134, 
                    853582597, 
                    15508749, 
                    1048775480, 
                    1623449306, 
                    1072510484, 
                    2109710295, 
                    2056830882, 
                    410504410, 
                    979775046, 
                    1865875640, 
                    686550183, 
                    1551999566, 
                    360952004, 
                    1928757083, 
                    381243294, 
                    417730216, 
                    950152831, 
                    521640674, 
                    1536957501, 
                    1019137990, 
                    1400165351, 
                    1521881808, 
                    68347606, 
                    1855825413, 
                    1700950354, 
                    1269937888, 
                    1547919119, 
                    1167838293, 
                    319860824, 
                    96693092, 
                    503617258, 
                    1402618286, 
                    1018138271, 
                    1600036341, 
                    597270806, 
                    1043708116, 
                    826011639, 
                    732013709, 
                    1694392519, 
                    823585622, 
                    1044598823, 
                    307283148, 
                    260135943, 
                    981461936, 
                    1767281141, 
                    177710209, 
                    2135240582, 
                    1487796805, 
                    999863952, 
                    1806228853, 
                    1840126890, 
                    1408938323, 
                    361177555, 
                    1958805478, 
                    289720783, 
                    1479184436, 
                    2094644790, 
                    1340433714, 
                    2069982599, 
                    1950056243, 
                    561791176, 
                    888992589, 
                    90643586, 
                    883081954, 
                    1362258382, 
                    1431415544, 
                    533861295, 
                    908399310, 
                    1331486277, 
                    1485018825, 
                    1739202224, 
                    218139122, 
                    974731802, 
                    713371879, 
                    2122022814, 
                    1092882203, 
                    1261745865, 
                    1234369317, 
                    88544272, 
                    1523240145, 
                    1282180953, 
                    60122314, 
                    167974341, 
                    661115618, 
                    404049849, 
                    1242162582, 
                    1041440731, 
                    1206816440, 
                    1310315558, 
                    1265570017, 
                    1096546973, 
                    1633061572, 
                    809514757, 
                    1891819923, 
                    261794446, 
                    155606234, 
                    216639562, 
                    1524537636, 
                    1766687201, 
                    335865597, 
                    1791332561, 
                    1226841272, 
                    156310528, 
                    1662328774, 
                    67026629, 
                    1621987768, 
                    434206521, 
                    1795289323, 
                    1984266311, 
                    1344322227, 
                    217438571, 
                    860275473, 
                    1251889442, 
                    546742454, 
                    667875290, 
                    501668862, 
                    721018248, 
                    1577011615, 
                    479032105, 
                    120095800, 
                    389974813, 
                    1474528502, 
                    1745567399, 
                    65916260, 
                    388471852, 
                    106140652, 
                    1556108012, 
                    1230395526, 
                    451577433, 
                    1966416580, 
                    876242641, 
                    1884691876, 
                    1615165763, 
                    1900162322, 
                    1879391231, 
                    55339681, 
                    2051295433, 
                    653129214, 
                    594088989, 
                    929545728, 
                    807956061, 
                    1393635055, 
                    1370033776, 
                    2113476978, 
                    1048131446, 
                    236271500, 
                    381172130, 
                    262772303, 
                    1223944633, 
                    1907609231, 
                    1582071633, 
                    787111594, 
                    1045505531, 
                    1646591401, 
                    2093374431, 
                    316804059, 
                    1628757520, 
                    90394268, 
                    1273856922, 
                    2108369624, 
                    65879756, 
                    1351294642, 
                    1343711890, 
                    17849731, 
                    468079586, 
                    480230342, 
                    1392593357, 
                    1499210767, 
                    814834870, 
                    612535609, 
                    597857076, 
                    67889034, 
                    982922626, 
                    1696970024, 
                    1459623386, 
                    1143823405, 
                    104494726, 
                    1779574068, 
                    1165268461, 
                    152200352, 
                    1872452169, 
                    1293335709, 
                    6450893, 
                    691451849, 
                    384344947, 
                    89131047, 
                    839186345, 
                    2116058009, 
                    1954271538, 
                    1562587172, 
                    574065808, 
                    1960901165, 
                    1526755939, 
                    633203012, 
                    863665972, 
                    1604145066, 
                    49923165, 
                    1352184045, 
                    1645397392, 
                    567901104, 
                    991161790, 
                    1029445010, 
                    1595421080, 
                    611409024, 
                    1309752155, 
                    1514182599, 
                    1951672615, 
                    1496019154, 
                    186968015, 
                    949551026, 
                    212309333, 
                    1996667099, 
                    1072609454, 
                    1121656570, 
                    235917455, 
                    920027694, 
                    1344843749, 
                    652260041, 
                    1780988431, 
                    378948539, 
                    1788527644, 
                    1424018995, 
                    1692422876, 
                    1399731345, 
                    38469801, 
                    784439558, 
                    688616742, 
                    349719614, 
                    833304052, 
                    2002961967, 
                    1093900240, 
                    899794328, 
                    134176676, 
                    597367357, 
                    1308522209, 
                    843007159, 
                    1845398276, 
                    1542525516, 
                    1529183341, 
                    1017645995, 
                    284942079, 
                    1490650838, 
                    1929089994, 
                    1004720512, 
                    1350277839, 
                    724882356, 
                    888291711, 
                    405099369, 
                    397285557, 
                    2091121925, 
                    259301317, 
                    1545146771, 
                    1718679261, 
                    1266448853, 
                    926857107, 
                    1714626442, 
                    1484505781, 
                    195689735, 
                    572939223, 
                    525312597, 
                    825565857, 
                    1601953001, 
                    662715102, 
                    331489695, 
                    2003134433, 
                    1459998652, 
                    1862490423, 
                    475242097, 
                    1960618008, 
                    1540393943, 
                    1222113065, 
                    1949801880, 
                    1270560347, 
                    763342436, 
                    94006460, 
                    297876806, 
                    1642412648, 
                    687702364, 
                    49453506, 
                    1461071092, 
                    2043631494, 
                    283517373, 
                    2099917704, 
                    889665774, 
                    1743660650, 
                    1696237116, 
                    1328598714, 
                    1015211470, 
                    1817993897, 
                    1741379414, 
                    1505985025, 
                    1649708541, 
                    969586293, 
                    1003870744, 
                    192080138, 
                    830472725, 
                    827935736, 
                    1597600299, 
                    1149069726, 
                    2037762834, 
                    1009875580, 
                    413049614, 
                    591965008, 
                    1004375261, 
                    869008860, 
                    456983084, 
                    274586424, 
                    955336825, 
                    1172442393, 
                    628980301, 
                    72213794, 
                    796803417, 
                    146236229, 
                    1259351778, 
                    629164750, 
                    542048484, 
                    1649518944, 
                    1920532975, 
                    735312692, 
                    306897317, 
                    131399938, 
                    847278953, 
                    804731847, 
                    219238594, 
                    34408918, 
                    1719888171, 
                    980215587, 
                    266689603, 
                    571262298, 
                    1411017382, 
                    1617424717, 
                    44812349, 
                    1686116285, 
                    159174319, 
                    451195512, 
                    1630581880, 
                    1839036012, 
                    1095542443, 
                    20656914, 
                    1286677566, 
                    1421650692, 
                    373261889, 
                    1990252724, 
                    1189013596, 
                    1669165620, 
                    709181608, 
                    1503472312, 
                    1857718162, 
                    374705994, 
                    1797515301, 
                    1328437428, 
                    1054886408, 
                    862287607, 
                    842172409, 
                    1906362896, 
                    162596627, 
                    1755801414, 
                    372726414, 
                    969966343, 
                    1296604336, 
                    1624251144, 
                    7896821, 
                    384074527, 
                    1908908658, 
                    1159039231, 
                    27401445, 
                    1258170779, 
                    2134545557, 
                    808156266, 
                    1146066517, 
                    850496119, 
                    553976501, 
                    1899876061, 
                    1596118773, 
                    1032730272, 
                    1905621696, 
                    1004509876, 
                    1763201898, 
                    697556621, 
                    1472710957, 
                    216415859, 
                    1269981072, 
                    2039467256, 
                    921230644, 
                    82579954, 
                    562538309, 
                    1330008389, 
                    843943876, 
                    400295070, 
                    288598885, 
                    2022264113, 
                    1466309598, 
                    125576100, 
                    871536225, 
                    1809910069, 
                    1413753871, 
                    2136671009, 
                    81344066, 
                    29974365, 
                    1641764175, 
                    1598494476, 
                    1516410402, 
                    1049561896, 
                    1376123124, 
                    947019182, 
                    774460927, 
                    1302493994, 
                    1413652481, 
                    1956925784, 
                    741200, 
                    1305570398, 
                    2140083163, 
                    1822653440, 
                    1644739033, 
                    1080188477, 
                    354270072, 
                    115913212, 
                    1610327530, 
                    1826328704, 
                    596500922, 
                    844876703, 
                    414226903, 
                    1734250487, 
                    519557381, 
                    1271286051, 
                    1531670168, 
                    428400401, 
                    1028339836, 
                    1933692351, 
                    1766460048, 
                    1916434334, 
                    923165810, 
                    1733227533, 
                    1203276093, 
                    2021700128, 
                    847489104, 
                    220419176, 
                    663344132, 
                    2121695109, 
                    1455602674, 
                    1407527962, 
                    2063839555, 
                    1034501739, 
                    399553870, 
                    1130512134, 
                    2029664597, 
                    1791139805, 
                    628320714, 
                    1938831395, 
                    1455639997, 
                    1297840659, 
                    526343479, 
                    402499009, 
                    1580957090, 
                    796887472, 
                    1184267573, 
                    1929643562, 
                    530004515, 
                    104837073, 
                    1562832661, 
                    346060526, 
                    274154158, 
                    1627443777, 
                    190465736, 
                    231790513, 
                    382404588, 
                    406855630, 
                    619377347, 
                    1770522552, 
                    232699373, 
                    133850896, 
                    1600052727, 
                    1636116068, 
                    370726030, 
                    1336456607, 
                    928520795, 
                    1527208811, 
                    1334696617, 
                    1536528894, 
                    1389105101, 
                    1888014010, 
                    1947563334, 
                    1236992088, 
                    478052354, 
                    468619389, 
                    1390090855, 
                    520666801, 
                    152270443, 
                    406388621, 
                    837432555, 
                    1065329189, 
                    1837898308, 
                    558507059, 
                    558862448, 
                    1109542148, 
                    1133373804, 
                    436395778, 
                    844036003, 
                    167763357, 
                    748107546, 
                    1622808967, 
                    1171762458, 
                    1005281809, 
                    1706132022, 
                    1321789101, 
                    1845271579, 
                    1037711058, 
                    31772979, 
                    244500483, 
                    2015850324, 
                    1804542409, 
                    594946945, 
                    1140959268, 
                    863215619, 
                    1822302298, 
                    545980839, 
                    1184645717, 
                    1149391423, 
                    1869329994, 
                    989183305, 
                    2009221434, 
                    254585187, 
                    212988726, 
                    933089997, 
                    1314853831, 
                    443436235, 
                    1041545668, 
                    1077253620, 
                    1408667529, 
                    203082803, 
                    492125017, 
                    683172808, 
                    1166933260, 
                    788421348, 
                    1913779781, 
                    716251552, 
                    942281525, 
                    1678343713, 
                    1303746900, 
                    770831457, 
                    352379797, 
                    488893822, 
                    2055253607, 
                    538021944, 
                    1180373793, 
                    470382244, 
                    696939040, 
                    1842775087, 
                    884043797, 
                    563561309, 
                    2096211734, 
                    1434488002, 
                    1122189656, 
                    1326063699, 
                    886369759, 
                    1368223780, 
                    958773732, 
                    72191812, 
                    391278191, 
                    878352866, 
                    803725911, 
                    2107941085, 
                    770589097, 
                    41417680, 
                    1523725307, 
                    1121369601, 
                    1575497332, 
                    352537920, 
                    1096919485, 
                    1106050746, 
                    1751182961, 
                    1653785651, 
                    1993128170, 
                    1098498537, 
                    636803508, 
                    1520327612, 
                    346815227, 
                    1822450429, 
                    1900199851, 
                    844471587, 
                    1893980842, 
                    1346254228, 
                    193209823, 
                    845106220, 
                    254354716, 
                    1205120662, 
                    1708466799, 
                    1988353208, 
                    2049535236, 
                    545556001, 
                    1904961467, 
                    870089713, 
                    1287065522, 
                    425394034, 
                    2114589193, 
                    391922359, 
                    1865788372, 
                    2013835927, 
                    1161780284, 
                    59004192, 
                    1042368559, 
                    344401120, 
                    745855602, 
                    1925476698, 
                    959861995, 
                    442426083, 
                    1588843479, 
                    23691119, 
                    689260191, 
                    1513525794, 
                    1021408553, 
                    1283806950, 
                    319475608, 
                    1694290251, 
                    1131855671, 
                    1604955330, 
                    1914731262, 
                    2072966524, 
                    1934546611, 
                    318604645, 
                    1560386449, 
                    1734627771, 
                    450486331, 
                    551363484, 
                    1348572926, 
                    881093248, 
                    366720129, 
                    1567734136, 
                    1131392991, 
                    244881149, 
                    1802022887, 
                    480462947, 
                    660670145, 
                    1841195659, 
                    1949586675, 
                    1549579722, 
                    600398626, 
                    415216772, 
                    2032727872, 
                    1959412280, 
                    1763760830, 
                    1684775680, 
                    1299093017, 
                    536009442, 
                    1671631095, 
                    621154517, 
                    550614105, 
                    1740258918, 
                    1441022010, 
                    509633863, 
                    624674744, 
                    1940305495, 
                    79289316, 
                    843175639, 
                    646101390, 
                    1455224435, 
                    2041398436, 
                    194492118, 
                    576903772, 
                    78768747, 
                    75705954, 
                    21109343, 
                    1039781775, 
                    444379042, 
                    1858986554, 
                    540945606, 
                    623136805, 
                    625763596, 
                    1892187223, 
                    1729759596, 
                    1004556704, 
                    1499514490, 
                    40238652, 
                    2122617978, 
                    702327462, 
                    2023094416, 
                    435534754, 
                    2061960536, 
                    1027216036, 
                    727418409, 
                    330479143, 
                    773944858, 
                    126712126, 
                    621759128, 
                    1767690052, 
                    2009201039, 
                    401173631, 
                    1964978153, 
                    1195094269, 
                    494362240, 
                    1655664933, 
                    405906508, 
                    1985796647, 
                    1953959125, 
                    1883706326, 
                    1742651487, 
                    644993905, 
                    854713975, 
                    824506535, 
                    1130685489, 
                    2145501359, 
                    2072334156, 
                    1995555342, 
                    1858746061, 
                    1652560806, 
                    1272643901, 
                    1900066843, 
                    104154985, 
                    140848177, 
                    770490621, 
                    1019689681, 
                    2126921547, 
                    1314759729, 
                    1996969010, 
                    1895773251, 
                    1449244743, 
                    2041880864, 
                    418022647, 
                    824172637, 
                    1997269162, 
                    139771975, 
                    805642299, 
                    1578152974, 
                    1397824983, 
                    74094663, 
                    598650196, 
                    1661201490, 
                    233763174, 
                    238911652, 
                    1107159622, 
                    1378100511, 
                    1728304426, 
                    1237454001, 
                    2044014194, 
                    729400697, 
                    405628634, 
                    925873163, 
                    415449712, 
                    1116681969, 
                    495046151, 
                    109134196, 
                    297018646, 
                    1824129976, 
                    424603648, 
                    1622156206, 
                    1676227033, 
                    1238630426, 
                    2136311284, 
                    58185874, 
                    434461583, 
                    1848254270, 
                    226971258, 
                    30541338, 
                    974721020, 
                    990913514, 
                    1339859060, 
                    494181182, 
                    597730359, 
                    1784651398, 
                    1053910610, 
                    1758926058, 
                    1666303669, 
                    2012726980, 
                    1181172202, 
                    1539873757, 
                    1438868902, 
                    889467546, 
                    1418229182, 
                    1267568313, 
                    1490144617, 
                    523371580, 
                    1626431152, 
                    1448824325, 
                    329126486, 
                    1888134966, 
                    1990236976, 
                    1128995970, 
                    1153549326, 
                    1923152424, 
                    545351277, 
                    1507503417, 
                    1672373853, 
                    175577300, 
                    1951933716, 
                    1406388999, 
                    1151129253, 
                    1697763088, 
                    262732981, 
                    1053100680, 
                    1537025284, 
                    2058931099, 
                    328142804, 
                    778281961, 
                    62771359, 
                    883603740, 
                    590314174, 
                    431775313, 
                    642957774, 
                    1032213538, 
                    183287304, 
                    786759487, 
                    1967884891, 
                    868742971, 
                    715524904, 
                    2058573650, 
                    221823118, 
                    925630580, 
                    1848898499, 
                    1234069701, 
                    1148160185, 
                    210863090, 
                    1488115503, 
                    822061582, 
                    1239300121, 
                    1693890840, 
                    86552205, 
                    1490726369, 
                    60793264, 
                    1922266850, 
                    388744504, 
                    1888589461, 
                    626734565, 
                    365128502, 
                    1878026676, 
                    1578697165, 
                    195228776, 
                    848149191, 
                    1386052966, 
                    1593006393, 
                    1297820792, 
                    1558461663, 
                    486038196, 
                    121335788, 
                    1739865120, 
                    1906075437, 
                    1687102173, 
                    803630882, 
                    1607536043, 
                    2040843713, 
                    1184565881, 
                    225498673, 
                    1996348236, 
                    1176146927, 
                    2052424142, 
                    1326162194, 
                    570815596, 
                    1653564869, 
                    1686465487, 
                    516364166, 
                    797051535, 
                    1247071452, 
                    370982049, 
                    868174571, 
                    643469034, 
                    442181490, 
                    160024922, 
                    1602756389, 
                    1138199942, 
                    1284311386, 
                    1863344874, 
                    1521157574, 
                    1687061261, 
                    255892106, 
                    2083732556, 
                    1737182169, 
                    1872308541, 
                    1366779715, 
                    1229680109, 
                    1480708331, 
                    6788667, 
                    1430404970, 
                    2030673973, 
                    167433198, 
                    737700969, 
                    163245831, 
                    2039724872, 
                    1598071285, 
                    460188007, 
                    551864482, 
                    1007881569, 
                    689147554, 
                    1309167351, 
                    869688800, 
                    795954858, 
                    50749340, 
                    1187479614, 
                    1765347272, 
                    1625350401, 
                    1297683630, 
                    1746050515, 
                    84345784, 
                    1812914587, 
                    323224657, 
                    177498839, 
                    1810891954, 
                    685921059, 
                    1740456130, 
                    1239898018, 
                    315241973, 
                    1601337300, 
                    1351519528, 
                    423884760, 
                    205757156, 
                    509575499, 
                    1514130212, 
                    1363881126, 
                    203548851, 
                    130473602, 
                    480223203, 
                    549940265, 
                    709437284, 
                    1142568382, 
                    586335460, 
                    276429817, 
                    1174197320, 
                    211990223, 
                    817372461, 
                    1607420895, 
                    2032983216, 
                    549702555, 
                    106961269, 
                    1888912961, 
                    2079480126, 
                    1882141463, 
                    2069926530, 
                    1764974030, 
                    1707449316, 
                    2137418006, 
                    1074292662, 
                    1624808419, 
                    299268742, 
                    358173267, 
                    144946034, 
                    1098010829, 
                    1803845688, 
                    265262794, 
                    1103410195, 
                    360113301, 
                    1429308293, 
                    834351861, 
                    983930763, 
                    1634873670, 
                    1145127198, 
                    747743365, 
                    1036613231, 
                    1089261049, 
                    1226579127, 
                    46794840, 
                    1150785166, 
                    1598901731, 
                    2016032245, 
                    133035235, 
                    1354398449, 
                    1913023065, 
                    1494376031, 
                    1610090214, 
                    491888281, 
                    471099340, 
                    587132616, 
                    1896639829, 
                    1803915457, 
                    213614492, 
                    1203664587, 
                    1002898431, 
                    250671523, 
                    351264017, 
                    997622348, 
                    1635808278, 
                    620067776, 
                    908934526, 
                    1256063675, 
                    457259160, 
                    178112602, 
                    1198631355, 
                    1713255439, 
                    619571246, 
                    743785763, 
                    1331736761, 
                    845528232, 
                    980665481, 
                    538394903, 
                    1660654476, 
                    986632840, 
                    1622874578, 
                    1756259821, 
                    166233507, 
                    1151258465, 
                    379406616, 
                    1751118445, 
                    193755474, 
                    1920858160, 
                    632310855, 
                    1920464332, 
                    1680152111, 
                    1177920051, 
                    770316271, 
                    431209083, 
                    142228767, 
                    497071842, 
                    685349214, 
                    91638701, 
                    1738254496, 
                    1574210711, 
                    241850640, 
                    342838056, 
                    1558773085, 
                    2102406280, 
                    155767094, 
                    199767626, 
                    874804785, 
                    866304451, 
                    1307635167, 
                    1773054755, 
                    1753950782, 
                    1358244926, 
                    143260981, 
                    1374465299, 
                    1728273656, 
                    1394122257, 
                    84438016, 
                    1347489199, 
                    618215732, 
                    2032173480, 
                    426312302, 
                    1135560013, 
                    623752820, 
                    684278475, 
                    645444138, 
                    20711304, 
                    942939168, 
                    188362163, 
                    601556996, 
                    834664919, 
                    160179018, 
                    889026780, 
                    947624054, 
                    86443765, 
                    744782200, 
                    1280036522, 
                    197486736, 
                    211310874, 
                    995491371, 
                    179638990, 
                    876313660, 
                    1474934670, 
                    613222993, 
                    1006739747, 
                    166513550, 
                    321907185, 
                    1034659070, 
                    1543334619, 
                    850419074, 
                    895590157, 
                    412633826, 
                    1485343662, 
                    1620906616, 
                    1853564663, 
                    1147898409, 
                    1253774274, 
                    1866568883, 
                    874494610, 
                    1456962142, 
                    135055790, 
                    1404312105, 
                    686442622, 
                    264747455, 
                    472970248, 
                    1612875737, 
                    864924002, 
                    410620872, 
                    56817216, 
                    629683099, 
                    448237134, 
                    1196635521, 
                    2020610789, 
                    351997828, 
                    438576742, 
                    1155859820, 
                    1098861279, 
                    522337020, 
                    1764496720, 
                    517764925, 
                    323536953, 
                    1133535881, 
                    1547088196, 
                    1485426736, 
                    1853450486, 
                    422031093, 
                    822319003, 
                    1415603811, 
                    1241543038, 
                    1086029003, 
                    1638491573, 
                    1560951286, 
                    1470475773, 
                    901832379, 
                    860435581, 
                    922810532, 
                    189871038, 
                    1210187215, 
                    140252745, 
                    1541347657, 
                    1449073195, 
                    2058769960, 
                    977841854, 
                    913651520, 
                    402181940, 
                    1846438283, 
                    539506684, 
                    1133345834, 
                    1182329874, 
                    697704843, 
                    49037130, 
                    731437254, 
                    102072163, 
                    356729685, 
                    1133425189, 
                    1149003556, 
                    2004707556, 
                    1348499533, 
                    558780616, 
                    50939155, 
                    790556734, 
                    1596803838, 
                    1316561481, 
                    1118271860, 
                    1138675173, 
                    1034769495, 
                    1873643395, 
                    1118778410, 
                    1639045894, 
                    1663249857, 
                    965988782, 
                    2036157711, 
                    382084275, 
                    223149063, 
                    1216175377, 
                    412250640, 
                    155694027, 
                    633436676, 
                    1083244796, 
                    7012203, 
                    2030008056, 
                    1836456816, 
                    233273937, 
                    543838195, 
                    1036991873, 
                    907054319, 
                    1458879123, 
                    1113746088, 
                    1915890837, 
                    1858915672, 
                    1065586623, 
                    988855152, 
                    651406599, 
                    89313590, 
                    750790923, 
                    1999753004, 
                    742208479, 
                    2007053641, 
                    1922459994, 
                    1514896092, 
                    2120278535, 
                    1568211921, 
                    1641783587, 
                    1666563664, 
                    1879199708, 
                    160363066, 
                    349352979, 
                    2026406747, 
                    1288037955, 
                    721174549, 
                    993309529, 
                    1371270880, 
                    265254737, 
                    551768413, 
                    168414746, 
                    1101583565, 
                    1363529901, 
                    772723286, 
                    81279987, 
                    231620854, 
                    1723374019, 
                    759897307, 
                    1350371220, 
                    1927613869, 
                    597663234, 
                    2124617277, 
                    1384751112, 
                    292770685, 
                    1619841787, 
                    1363906020, 
                    1817525808, 
                    296124033, 
                    858460329, 
                    1715832351, 
                    34217315, 
                    461796135, 
                    194673229, 
                    714193920, 
                    812122134, 
                    876628807, 
                    557701340, 
                    1579956023, 
                    1973191780, 
                    1194716288, 
                    865606143, 
                    1841799390, 
                    723600415, 
                    99638186, 
                    2068382491, 
                    1796691005, 
                    636223103, 
                    2116968840, 
                    1925773654, 
                    1690839140, 
                    1939005720, 
                    1360381228, 
                    217840701, 
                    1861653365, 
                    1068900430, 
                    1902066078, 
                    923095601, 
                    56582294, 
                    406564960, 
                    2071615582, 
                    1051132388, 
                    697185496, 
                    512810551, 
                    696906033, 
                    517551098, 
                    1854102258, 
                    906910336, 
                    649335981, 
                    2108084799, 
                    1352134827, 
                    1821403161, 
                    143417996, 
                    934189174, 
                    155654932, 
                    1062007726, 
                    903347491, 
                    1401016862, 
                    1285112926, 
                    371871841, 
                    1970634429, 
                    727682917, 
                    1848040615, 
                    517834026, 
                    1315104836, 
                    1924310278, 
                    821319734, 
                    243955434, 
                    480503511, 
                    1792777137, 
                    1057539703, 
                    2101016853, 
                    501119046, 
                    1173391063, 
                    2049059845, 
                    143583900, 
                    168420647, 
                    1328988839, 
                    26694382, 
                    1729570735, 
                    214280233, 
                    889780669, 
                    2134370769, 
                    8884041, 
                    573638827, 
                    2016919626, 
                    1795587724, 
                    426192054, 
                    62185769, 
                    799645639, 
                    165552939, 
                    501049216, 
                    1785466322, 
                    1832194100, 
                    583414178, 
                    1343932665, 
                    1350575420, 
                    179351470, 
                    1345189362, 
                    920079402, 
                    1843715011, 
                    1610146824, 
                    426406825, 
                    1004042491, 
                    1050545096, 
                    1398601621, 
                    1320284115, 
                    1117510580, 
                    1032612976, 
                    12071032, 
                    893587079, 
                    1721842299, 
                    1374322480, 
                    1703025838, 
                    157591608, 
                    1080853760, 
                    740795795, 
                    1839156574, 
                    2091678846, 
                    1445668857, 
                    128722554, 
                    395127680, 
                    181769665, 
                    1828341519, 
                    1627224198, 
                    556490487, 
                    315550531, 
                    816408593, 
                    589976885, 
                    705127180, 
                    940492127, 
                    2136552824, 
                    2131283124, 
                    1254098627, 
                    2033339371, 
                    751617056, 
                    463373844, 
                    1130328278, 
                    1105822592, 
                    1322520853, 
                    696635511, 
                    678077144, 
                    1541062725, 
                    50114737, 
                    2053542207, 
                    591194287, 
                    1274210383, 
                    82440484, 
                    1674602492, 
                    1650044065, 
                    603136870, 
                    1658902493, 
                    235156271, 
                    2047004152, 
                    791356848, 
                    1448587331, 
                    1428377159, 
                    745548953, 
                    1524301940, 
                    494054609, 
                    1083051090, 
                    503875522, 
                    527533695, 
                    327485796, 
                    1219062552, 
                    904517902, 
                    1738042822, 
                    120223853, 
                    1817170114, 
                    1553458199, 
                    617479916, 
                    1757951164, 
                    733333982, 
                    769157993, 
                    749033346, 
                    1598129057, 
                    1001548602, 
                    131654928, 
                    1922282959, 
                    1036029911, 
                    1429763751, 
                    233110047, 
                    1289289748, 
                    1087416467, 
                    101990310, 
                    1429073281, 
                    1901396553, 
                    84278972, 
                    462741779, 
                    584752040, 
                    1470723544, 
                    1865308538, 
                    1753509985, 
                    611767983, 
                    239469763, 
                    192759989, 
                    150543449, 
                    1213576929, 
                    978535832, 
                    1149024305, 
                    1000635112, 
                    1153986530, 
                    412754017, 
                    121144293, 
                    1032564149, 
                    992669353, 
                    925568511, 
                    1613481925, 
                    1297970806, 
                    1340711438, 
                    447038729, 
                    1296722231, 
                    970749641, 
                    488272029, 
                    1211774505, 
                    849941043, 
                    1362069421, 
                    1587600875, 
                    225495486, 
                    1937472918, 
                    1150604996, 
                    1653763850, 
                    1804965721, 
                    1232418074, 
                    82734655, 
                    899655025, 
                    4441179, 
                    121565999, 
                    529688230, 
                    556273357, 
                    1447585608, 
                    1935455320, 
                    1300602743, 
                    773258654, 
                    35394799, 
                    275777221, 
                    1967839677, 
                    1168145455, 
                    54852318, 
                    1256804604, 
                    503504770, 
                    287914628, 
                    933791813, 
                    1269513988, 
                    137713311, 
                    174001313, 
                    894558897, 
                    1265237956, 
                    1547477125, 
                    1537012367, 
                    978174215, 
                    710426221, 
                    988081443, 
                    1188546561, 
                    2145902956, 
                    1494354909, 
                    1496504456, 
                    1327819590, 
                    38409638, 
                    132909124, 
                    988228174, 
                    804002512, 
                    1083793695, 
                    741697449, 
                    2040609477, 
                    659067056, 
                    2143603135, 
                    197490987, 
                    452877230, 
                    935997284, 
                    1029585013, 
                    193923966, 
                    1532748557, 
                    1116174529, 
                    1433968148, 
                    862690368, 
                    719972037, 
                    535451733, 
                    1094704763, 
                    2056216989, 
                    5096128, 
                    886686870, 
                    721572521, 
                    1140159510, 
                    1725582789, 
                    737159387, 
                    947373877, 
                    112056182, 
                    774839345, 
                    688523537, 
                    926756412, 
                    640020087, 
                    1129735817, 
                    2069426841, 
                    268576430, 
                    1846985905, 
                    1351604580, 
                    192094364, 
                    1376388158, 
                    1626129902, 
                    177881825, 
                    697067910, 
                    812360726, 
                    611479841, 
                    507427354, 
                    784250249, 
                    1325161311, 
                    2019390561, 
                    1902062060, 
                    1283212588, 
                    774382872, 
                    961052723, 
                    233114827, 
                    129676296, 
                    127812996, 
                    101541304, 
                    82429991, 
                    2091117832, 
                    1163598307, 
                    1303450090, 
                    1859176826, 
                    2031546953, 
                    1570135289, 
                    1911837340, 
                    9240872, 
                    389564926, 
                    1211671796, 
                    1610805363, 
                    847598099, 
                    1734465890, 
                    1658569435, 
                    527877673, 
                    1306547222, 
                    1616058508, 
                    1878335164, 
                    1455511865, 
                    74326144, 
                    110092680, 
                    632732156, 
                    941332540, 
                    1559481723, 
                    1075466963, 
                    357477769, 
                    1639110404, 
                    2061624312, 
                    2113187336, 
                    406905260, 
                    1000059521, 
                    1941613845, 
                    167035126, 
                    1764555914, 
                    1407970395, 
                    1175979704, 
                    72938068, 
                    1914436723, 
                    293818519, 
                    1274416268, 
                    1048007033, 
                    602238969, 
                    117862428, 
                    1720062100, 
                    1861839595, 
                    1171792462, 
                    167596170, 
                    1772126800, 
                    246505199, 
                    1801989148, 
                    764539966, 
                    398824779, 
                    819784778, 
                    27215160, 
                    2119820958, 
                    1458385676, 
                    222265767, 
                    1891452014, 
                    783709863, 
                    1674069184, 
                    2078508532, 
                    1997696675, 
                    43537183, 
                    2130143313, 
                    211612275, 
                    1816675165, 
                    680562973, 
                    2117393623, 
                    250599040, 
                    1499381616, 
                    1233609154, 
                    1849105432, 
                    1584516645, 
                    181095597, 
                    1173802758, 
                    1655337358, 
                    514869728, 
                    1368754087, 
                    1845125775, 
                    2051158148, 
                    189881599, 
                    2014467251, 
                    1815119113, 
                    311198188, 
                    1789848941, 
                    601234742, 
                    1121829067, 
                    139819966, 
                    1792218603, 
                    2097068366, 
                    953713937, 
                    328969701, 
                    1130726860, 
                    767232982, 
                    1343391383, 
                    1197794005, 
                    558701786, 
                    135202762, 
                    1508449825, 
                    45164430, 
                    491229489, 
                    197686194, 
                    1521527760, 
                    894607230, 
                    568379994, 
                    1062918181, 
                    961791781, 
                    638689181, 
                    1000896049, 
                    464483600, 
                    943515948, 
                    1000995327, 
                    46326239, 
                    880035362, 
                    1484187585, 
                    64041281, 
                    182577562, 
                    1879822642, 
                    340294372, 
                    1757861180, 
                    694846098, 
                    540743007, 
                    325175020, 
                    301014321, 
                    545667679, 
                    904639453, 
                    718378572, 
                    817283663, 
                    985187861, 
                    2123492400, 
                    1096635572, 
                    379666966, 
                    2007787909, 
                    1799961345, 
                    1559928659, 
                    2139679052, 
                    492939491, 
                    920511883, 
                    1890301841, 
                    726930760, 
                    1786926608, 
                    483139886, 
                    1286407564, 
                    1327735003, 
                    1153552418, 
                    2100202257, 
                    282643462, 
                    250691498, 
                    1430529044, 
                    1279350102, 
                    1015216443, 
                    826362791, 
                    1942392037, 
                    1898072292, 
                    1497801979, 
                    2097970129, 
                    2019994821, 
                    1220513439, 
                    348939551, 
                    1811224188, 
                    344539609, 
                    144508118, 
                    1800984967, 
                    1024887296, 
                    1515331675, 
                    563848982, 
                    1140691065, 
                    393848541, 
                    1467590350, 
                    1491992180, 
                    1718585437, 
                    1409549326, 
                    2137004448, 
                    1760847259, 
                    2118418219, 
                    211706212, 
                    1401819090, 
                    1144923664, 
                    1294945550, 
                    592949069, 
                    621995991, 
                    467687074, 
                    1534238266, 
                    1853321406, 
                    1108275957, 
                    270272781, 
                    584758576, 
                    109715617, 
                    302159366, 
                    1609442177, 
                    119684231, 
                    1419909699, 
                    571572332, 
                    79077653, 
                    382391151, 
                    1642418490, 
                    829638566, 
                    261520268, 
                    1959886975, 
                    589703436, 
                    959511192, 
                    2036278568, 
                    930584795, 
                    2086020511, 
                    1708248312, 
                    1753150764, 
                    836841990, 
                    181544778, 
                    1927137720, 
                    1286095767, 
                    696151039, 
                    875071157, 
                    2073051536, 
                    1903474129, 
                    1189228197, 
                    2024336182, 
                    757753499, 
                    2095147208, 
                    2064094986, 
                    1245058894, 
                    2126574053, 
                    1030975448, 
                    91689175, 
                    2005631820, 
                    1372307949, 
                    298675738, 
                    837976994, 
                    2057926795, 
                    1378456108, 
                    475999729, 
                    1529551293, 
                    1140298822, 
                    1332520336, 
                    705242114, 
                    1780921524, 
                    733201070, 
                    1684585926, 
                    1595701402, 
                    145073094, 
                    1502608840, 
                    1580914438, 
                    403213798, 
                    330061544, 
                    1163547246, 
                    913291138, 
                    1392096721, 
                    1494341810, 
                    815581850, 
                    1037333103, 
                    505538616, 
                    884664991, 
                    881975005, 
                    344908929, 
                    714828081, 
                    610613030, 
                    2076019391, 
                    1944589393, 
                    1072436622, 
                    713712562, 
                    1409572574, 
                    915173770, 
                    926398842, 
                    950572317, 
                    1451137991, 
                    1904028121, 
                    1703335864, 
                    1690034468, 
                    1367809422, 
                    122552605, 
                    456027127, 
                    339750256, 
                    1309535744, 
                    1950074114, 
                    561486146, 
                    1811628103, 
                    1723360255, 
                    700913904, 
                    1075625576, 
                    1092340682, 
                    2127694875, 
                    951817575, 
                    22395144, 
                    1020593692, 
                    872917492, 
                    1738818385, 
                    647576288, 
                    795389893, 
                    617692255, 
                    94629084, 
                    1852385780, 
                    936095324, 
                    612149304, 
                    881988840, 
                    882984167, 
                    587435070, 
                    654515596, 
                    1600125128, 
                    1026407200, 
                    1407002772, 
                    1357438921, 
                    1849545900, 
                    126532388, 
                    693029245, 
                    581305976, 
                    165788360, 
                    1722612894, 
                    1079384538, 
                    1930906430, 
                    1050683625, 
                    1034736422, 
                    1375105487, 
                    868963817, 
                    2127579587, 
                    733501334, 
                    457754999, 
                    892778626, 
                    2053288797, 
                    77654825, 
                    1859803253, 
                    1256451833, 
                    907945971, 
                    1072342213, 
                    1273180338, 
                    417650472, 
                    1667415450, 
                    1875084599, 
                    427546904, 
                    1067089947, 
                    2121534723, 
                    1157112507, 
                    123235127, 
                    1821990351, 
                    1816106451, 
                    1882385408, 
                    278148975, 
                    825285187, 
                    1476849546, 
                    439287716, 
                    707129132, 
                    16205491, 
                    1715675397, 
                    1011967110, 
                    1714492277, 
                    1207376309, 
                    477280293, 
                    67131507, 
                    632053364, 
                    148487506, 
                    425229168, 
                    1842140091, 
                    748710446, 
                    1522470303, 
                    1314087594, 
                    150550939, 
                    449492950, 
                    777203687, 
                    1000835697, 
                    275378773, 
                    1061374173, 
                    438187408, 
                    1295065990, 
                    12294591, 
                    1956855354, 
                    2041054765, 
                    911501295, 
                    1700598783, 
                    1200341013, 
                    245194179, 
                    455352359, 
                    1779953459, 
                    1563412727, 
                    1614001081, 
                    1518009340, 
                    1843597762, 
                    1688260083, 
                    2043462508, 
                    1505333583, 
                    65804029, 
                    2087853826, 
                    1600283943, 
                    1243031235, 
                    279059398, 
                    641860779, 
                    279394632, 
                    408402061, 
                    748248471, 
                    507902757, 
                    1665555512, 
                    1432892458, 
                    1648428935, 
                    1971933137, 
                    1201470773, 
                    1525397190, 
                    268941724, 
                    868623148, 
                    1703380806, 
                    1202595403, 
                    1820921159, 
                    295875014, 
                    924165157, 
                    1014274141, 
                    386859185, 
                    1840618794, 
                    792759356, 
                    278727364, 
                    1282193012, 
                    4460963, 
                    1617973479, 
                    609774503, 
                    553514089, 
                    1419353751, 
                    935031668, 
                    335008594, 
                    1608573877, 
                    1342639820, 
                    1016006592, 
                    1517917459, 
                    1677460722, 
                    1632652704, 
                    163252824, 
                    1192696026, 
                    1682269148, 
                    959785368, 
                    954407071, 
                    1955503969, 
                    361941954, 
                    88603891, 
                    1249067616, 
                    974974614, 
                    2132362924, 
                    840867105, 
                    1831896071, 
                    1917412662, 
                    1163688669, 
                    586009802, 
                    856172050, 
                    585924251, 
                    1996585070, 
                    667268, 
                    1273692696, 
                    743787508, 
                    1037412925, 
                    1055781009, 
                    879378369, 
                    229075184, 
                    1036901469, 
                    866462179, 
                    2064306960, 
                    1073785551, 
                    2000100203, 
                    185463347, 
                    1672618328, 
                    188268455, 
                    132622190, 
                    1878952778, 
                    1479488640, 
                    1574557464, 
                    886211723, 
                    984739034, 
                    2064269057, 
                    1193589121, 
                    902876994, 
                    642998865, 
                    624895226, 
                    1860130631, 
                    1734941327, 
                    1165102653, 
                    1318803572, 
                    1022564075, 
                    486467770, 
                    430082341, 
                    1668816036, 
                    1676793454, 
                    358960008, 
                    1566948963, 
                    155283101, 
                    626488139, 
                    80406999, 
                    725331887, 
                    918602500, 
                    1642963422, 
                    171780578, 
                    175282065, 
                    1122358058, 
                    1946899577, 
                    1315732424, 
                    1643627616, 
                    1784790472, 
                    1432219538, 
                    1254004809, 
                    1429098233, 
                    1847196175, 
                    1011846036, 
                    83881858, 
                    80103575, 
                    1988394161, 
                    394414060, 
                    430885783, 
                    1166731385, 
                    641617504, 
                    2019282463, 
                    1695142254, 
                    1041742885, 
                    587317781, 
                    1570017862, 
                    664130958, 
                    2143308521, 
                    1976792094, 
                    713156874, 
                    1723669677, 
                    853000501, 
                    1494150465, 
                    160879836, 
                    66136534, 
                    421305635, 
                    1021808543, 
                    727594929, 
                    1668124454, 
                    825479296, 
                    544398207, 
                    91313711, 
                    1527795828, 
                    2034067681, 
                    1916042913, 
                    1204853184, 
                    730369813, 
                    656970000, 
                    1592911596, 
                    278856433, 
                    1726038449, 
                    1908352688, 
                    195602356, 
                    1061159261, 
                    83714383, 
                    1046803684, 
                    2095304815, 
                    1277521340, 
                    1735447931, 
                    1699823843, 
                    1282768619, 
                    1319907550, 
                    1814319169, 
                    1071633598, 
                    1856033508, 
                    401004308, 
                    2082431415, 
                    1686316339, 
                    945709502, 
                    1810059870, 
                    1205778679, 
                    1260799232, 
                    873773253, 
                    1752890134, 
                    622333178, 
                    550303793, 
                    491486635, 
                    1808558220, 
                    1273183619, 
                    1529948244, 
                    839648049, 
                    7160958, 
                    550396925, 
                    1697935661, 
                    1134602072, 
                    1962800636, 
                    657398145, 
                    432991204, 
                    77165453, 
                    1166816497, 
                    473484467, 
                    1891770850, 
                    1139630645, 
                    2115784258, 
                    1690194324, 
                    1371974304, 
                    424478189, 
                    456162230, 
                    178034173, 
                    1515038605, 
                    1269905416, 
                    1191537121, 
                    1858744145, 
                    1930335373, 
                    1220561401, 
                    465239217, 
                    1034579435, 
                    590195869, 
                    438826083, 
                    1680894237, 
                    555317049, 
                    286746595, 
                    4337721, 
                    205499687, 
                    860175794, 
                    1275607661, 
                    769510625, 
                    116383508, 
                    2084515173, 
                    2040716519, 
                    1891089810, 
                    1649440211, 
                    1609150886, 
                    1926376652, 
                    1336575403, 
                    1461491476, 
                    121168587, 
                    905472642, 
                    62695810, 
                    1397842521, 
                    125825604, 
                    35324405, 
                    1630524047, 
                    1905628661, 
                    260042828, 
                    1795594575, 
                    295900460, 
                    767545199, 
                    477374260, 
                    669362855, 
                    928221201, 
                    67202276, 
                    2141648768, 
                    543754863, 
                    611499448, 
                    186737872, 
                    1887433129, 
                    934130958, 
                    1255608464, 
                    414586663, 
                    602463679, 
                    308094681, 
                    519130704, 
                    284801301, 
                    1771432442, 
                    1767948852, 
                    1729869882, 
                    2079851140, 
                    593759970, 
                    1906553572, 
                    344070630, 
                    129106793, 
                    527500059, 
                    1188467209, 
                    1555068633, 
                    519992644, 
                    803706195, 
                    246192707, 
                    2092940506, 
                    1212064866, 
                    979707201, 
                    1965426, 
                    1786492895, 
                    1415152318, 
                    1112495318, 
                    1823887534, 
                    1655275090, 
                    1065396023, 
                    1314877204, 
                    1149837531, 
                    1721541994, 
                    1334521276, 
                    1797347825, 
                    1795592794, 
                    795378842, 
                    1965214570, 
                    1663677348, 
                    1345722746, 
                    134196219, 
                    639577623, 
                    65724693, 
                    363532967, 
                    173785229, 
                    718304335, 
                    325292225, 
                    799114408, 
                    1687185864, 
                    953181559, 
                    1136169877, 
                    91506804, 
                    1530515324, 
                    1641240422, 
                    988674099, 
                    43543598, 
                    1582363109, 
                    600498253, 
                    669085433, 
                    1251462033, 
                    1319789630, 
                    2095028555, 
                    112673762, 
                    664473859, 
                    764973936, 
                    1591406086, 
                    185011578, 
                    1157033001, 
                    479242615, 
                    879390912, 
                    393088367, 
                    1737337710, 
                    1003798943, 
                    1605467096, 
                    111996488, 
                    1453362883, 
                    1146340173, 
                    616174234, 
                    1975663844, 
                    1068188560, 
                    1089860093, 
                    313380910, 
                    136701670, 
                    702093531, 
                    2076709793, 
                    1223370400, 
                    1766805854, 
                    80301572, 
                    345847177, 
                    1753804227, 
                    213229685, 
                    194880589, 
                    1296129137, 
                    412215315, 
                    25933116, 
                    186651311, 
                    526903861, 
                    1548734481, 
                    1746042678, 
                    729862790, 
                    533292757, 
                    1315742871, 
                    319871793, 
                    807794952, 
                    560093192, 
                    1546315814, 
                    1235191508, 
                    2072531875, 
                    1529243934, 
                    1682794863, 
                    1044687072, 
                    966188875, 
                    772318056, 
                    1748380520, 
                    161601940, 
                    1006408720, 
                    1958326885, 
                    1558063878, 
                    735247713, 
                    1689087183, 
                    1972083879, 
                    104710006, 
                    811185824, 
                    872922035, 
                    666161227, 
                    198207778, 
                    441208573, 
                    591583628, 
                    1579533980, 
                    2072828824, 
                    926459022, 
                    1745089339, 
                    1017615203, 
                    1245801054, 
                    534895803, 
                    1921600869, 
                    2140992764, 
                    1476390365, 
                    142000339, 
                    530393979, 
                    2135662539, 
                    1841757626, 
                    698541285, 
                    810535961, 
                    709117155, 
                    1394524457, 
                    1570046180, 
                    1695232264, 
                    250613375, 
                    1167008043, 
                    375808073, 
                    1116323630, 
                    813486768, 
                    56955495, 
                    905262558, 
                    428582751, 
                    504557047, 
                    1594433405, 
                    141633725, 
                    361885414, 
                    1105107241, 
                    643607880, 
                    492997895, 
                    1603898757, 
                    756335841, 
                    1447081380, 
                    2096057319, 
                    1674000649, 
                    1213484717, 
                    387484718, 
                    1012899603, 
                    481936520, 
                    1416063539, 
                    204853734, 
                    1700908291, 
                    130326253, 
                    1553652368, 
                    649863, 
                    163804880, 
                    1419120417, 
                    775645245, 
                    893459956, 
                    340970253, 
                    412525937, 
                    1697020751, 
                    1957619039, 
                    931602571, 
                    960659708, 
                    340538496, 
                    106313052, 
                    1417043822, 
                    546559359, 
                    1334756640, 
                    1927598572, 
                    1572770385, 
                    1492054659, 
                    1348759731, 
                    1242126175, 
                    54200120, 
                    1409519422, 
                    1445950785, 
                    2043529178, 
                    481747547, 
                    2010612304, 
                    154108440, 
                    2041355200, 
                    1847743738, 
                    608633034, 
                    503530851, 
                    774936305, 
                    1022414030, 
                    503907184, 
                    1430628525, 
                    869996955, 
                    1733723816, 
                    211647285, 
                    302637627, 
                    80471958, 
                    2054361653, 
                    946200449, 
                    515478809, 
                    1135397611, 
                    1333462153, 
                    1107171665, 
                    1117924543, 
                    466340244, 
                    1294663527, 
                    1635948614, 
                    779566996, 
                    208853632, 
                    929050169, 
                    311526193, 
                    2093933390, 
                    901769105, 
                    2120653279, 
                    879599714, 
                    411712409, 
                    477841596, 
                    258417497, 
                    1803149198, 
                    109875301, 
                    322969537, 
                    457128857, 
                    1713085838, 
                    1231382669, 
                    913136638, 
                    1263414481, 
                    464759685, 
                    193874756, 
                    1361123100, 
                    1189417032, 
                    1268287773, 
                    1335248169, 
                    1255483318, 
                    894040613, 
                    310553174, 
                    710067025, 
                    1522059529, 
                    892687761, 
                    1835251843, 
                    746691673, 
                    211795124, 
                    1976549685, 
                    294677219, 
                    1993369783, 
                    710887837, 
                    557457441, 
                    528859420, 
                    896827323, 
                    854124102, 
                    1947418523, 
                    1972279678, 
                    1969538108, 
                    251212455, 
                    836325148, 
                    192509272, 
                    678268754, 
                    1767859962, 
                    2023272643, 
                    204787905, 
                    1350409410, 
                    829903842, 
                    1442073858, 
                    1565927543, 
                    1166920247, 
                    1808246043, 
                    1123761671, 
                    838450072, 
                    7728492, 
                    1810100105, 
                    169532689, 
                    1037136527, 
                    1732637482, 
                    570649301, 
                    1056457525, 
                    2045563824, 
                    493903499, 
                    162451638, 
                    1867199702, 
                    520494832, 
                    355679197, 
                    734555061, 
                    1715416009, 
                    1487234301, 
                    1561188224, 
                    1364621001, 
                    1446233312, 
                    1084035714, 
                    419158170, 
                    701531341, 
                    1779768067, 
                    1089690710, 
                    1646270533, 
                    687899856, 
                    484842433, 
                    2064271478, 
                    917204913, 
                    410622142, 
                    1275240619, 
                    185123740, 
                    1734609813, 
                    1866491016, 
                    521130928, 
                    1234210865, 
                    684591413, 
                    910281996, 
                    239642196, 
                    1398888807, 
                    1342238577, 
                    938244971, 
                    1846089420, 
                    515817116, 
                    2048143907, 
                    1502777811, 
                    1996592355, 
                    615854349, 
                    1261971480, 
                    2102323204, 
                    4739319, 
                    1949782893, 
                    362012731, 
                    39725957, 
                    419291902, 
                    1453680798, 
                    30332038, 
                    1227325626, 
                    1538349641, 
                    1044737626, 
                    85806868, 
                    1139669694, 
                    1128358911, 
                    83281357, 
                    1034694666, 
                    1682075962, 
                    933368666, 
                    636671828, 
                    213424133, 
                    481205144, 
                    802642888, 
                    650906228, 
                    1124978805, 
                    47344505, 
                    1889280784, 
                    1628396846, 
                    1002925568, 
                    1263950951, 
                    1189030450, 
                    143492722, 
                    838791148, 
                    2016471731, 
                    802299998, 
                    962365356, 
                    405882823, 
                    1472941373, 
                    1970594656, 
                    1694883856, 
                    1447199114, 
                    1214933777, 
                    1203878827, 
                    1604749434, 
                    1519416002, 
                    1342388217, 
                    1313081939, 
                    202568883, 
                    1957369707, 
                    1762808063, 
                    1628606097, 
                    366067945, 
                    569409145, 
                    1359920527, 
                    402430216, 
                    780766336, 
                    1299680316, 
                    1501316738, 
                    824804088, 
                    314668226, 
                    297928820, 
                    938378703, 
                    450755230, 
                    913864734, 
                    38295176, 
                    1394856919, 
                    205946478, 
                    216818784, 
                    337369696, 
                    165993555, 
                    1824882181, 
                    1709236940, 
                    1858964953, 
                    1385968457, 
                    1336956361, 
                    1145974003, 
                    1424809964, 
                    1345377101, 
                    1278973873, 
                    1930074235, 
                    881746213, 
                    1686711901, 
                    1818510786, 
                    1387601152, 
                    1782828501, 
                    822962505, 
                    1721567224, 
                    1626354268, 
                    1614041515, 
                    21533662, 
                    1810168687, 
                    1052049732, 
                    648137285, 
                    1655926430, 
                    1396955036, 
                    508820411, 
                    764178547, 
                    290014093, 
                    1566454258, 
                    124559083, 
                    1136441739, 
                    1096263155, 
                    2012682834, 
                    1791376152, 
                    2085409529, 
                    2066852804, 
                    654586639, 
                    1330924335, 
                    22964166, 
                    1403939860, 
                    1503440019, 
                    2101786862, 
                    222342865, 
                    1042213500, 
                    1580405660, 
                    758700566, 
                    1267351564, 
                    1210637725, 
                    1278519880, 
                    1362816318, 
                    1820773342, 
                    727075857, 
                    750260916, 
                    315836034, 
                    503308515, 
                    772832449, 
                    1061099655, 
                    203038523, 
                    2136497068, 
                    828135950, 
                    381795456, 
                    1134795871, 
                    1926406490, 
                    1154414790, 
                    793632496, 
                    1932966705, 
                    1821512714, 
                    27134634, 
                    1449675270, 
                    1863459344, 
                    168375866, 
                    390642889, 
                    1603390102, 
                    210101655, 
                    665577290, 
                    1855865472, 
                    829706867, 
                    1753407432, 
                    75520770, 
                    638254470, 
                    1388952494, 
                    1701024469, 
                    1158977860, 
                    203637940, 
                    451269388, 
                    409365882, 
                    346002239, 
                    1696846800, 
                    1288067637, 
                    1312577080, 
                    1005753149, 
                    451548116, 
                    1341910914, 
                    1342311863, 
                    1022144404, 
                    368644148, 
                    175380372, 
                    1215411722, 
                    248581004, 
                    1794922602, 
                    1084671499, 
                    1240216930, 
                    1908446102, 
                    1562544183, 
                    1194440452, 
                    1430130453, 
                    1271169402, 
                    540159261, 
                    1797742391, 
                    794926690, 
                    2090609229, 
                    1455175870, 
                    127517753, 
                    1498242598, 
                    1586667103, 
                    828254634, 
                    2123301658, 
                    1722768550, 
                    703145402, 
                    384266614, 
                    1586964466, 
                    124665914, 
                    886550644, 
                    137098190, 
                    857706195, 
                    1864311397, 
                    1196215622, 
                    261078239, 
                    1335440898, 
                    296933142, 
                    1680485100, 
                    1761778792, 
                    1504826428, 
                    428081815, 
                    1701066618, 
                    148735564, 
                    1940062014, 
                    1743917324, 
                    1156681135, 
                    1168622582, 
                    1285680127, 
                    1953326625, 
                    2046588056, 
                    493140947, 
                    1369451498, 
                    1698060926, 
                    324030363, 
                    1991151963, 
                    1903128407, 
                    193889770, 
                    392826137, 
                    600095469, 
                    512266320, 
                    2011798037, 
                    207958136, 
                    960005585, 
                    353666286, 
                    1771347912, 
                    704837988, 
                    1477612702, 
                    233914831, 
                    1010091163, 
                    1352202010, 
                    1500809249, 
                    1261925237, 
                    328830437, 
                    2097833089, 
                    1846919585, 
                    1944659627, 
                    1437931539, 
                    1035676267, 
                    379384334, 
                    566087415, 
                    1682006467, 
                    1246070134, 
                    1781121488, 
                    225561505, 
                    393409697, 
                    915130339, 
                    1307128916, 
                    1540281034, 
                    1352547306, 
                    505433479, 
                    1141551128, 
                    2051590652, 
                    1080389631, 
                    1249512472, 
                    1640512038, 
                    220123679, 
                    741061033, 
                    1942552925, 
                    168714102, 
                    1039079336, 
                    1826552080, 
                    934707751, 
                    275588964, 
                    601124615, 
                    545778807, 
                    1378699357, 
                    1040621061, 
                    1747711484, 
                    624594425, 
                    46492336, 
                    465196868, 
                    1305697150, 
                    13441803, 
                    34008054, 
                    977743500, 
                    765727903, 
                    574320295, 
                    734444080, 
                    2107740236, 
                    856217573, 
                    1545192719, 
                    2084815315, 
                    1028851172, 
                    504657684, 
                    210650882, 
                    1596702244, 
                    181535606, 
                    1226801612, 
                    457321051, 
                    1626795906, 
                    1203598594, 
                    1642862261, 
                    866962165, 
                    1487788645, 
                    887018982, 
                    747298716, 
                    970481170, 
                    1179996873, 
                    1827266345, 
                    1162193987, 
                    2021992925, 
                    1706901079, 
                    915686609, 
                    1306054970, 
                    40236611, 
                    1983337625, 
                    2038148849, 
                    1046381577, 
                    271768972, 
                    874784135, 
                    1793287031, 
                    6616953, 
                    1982296336, 
                    1459980176, 
                    1641370264, 
                    1889220412, 
                    2053340226, 
                    1918414927, 
                    390473733, 
                    1096560210, 
                    1197163751, 
                    1961303096, 
                    1290390433, 
                    1145282166, 
                    990377389, 
                    969818254, 
                    438734985, 
                    673136805, 
                    1294472719, 
                    230444784, 
                    1942730380, 
                    1541807069, 
                    1054661382, 
                    945546249, 
                    981708295, 
                    1985775287, 
                    1169128706, 
                    1870279849, 
                    464421073, 
                    374796904, 
                    1706037042, 
                    1282637676, 
                    955032640, 
                    1730020563, 
                    1980992522, 
                    1196981641, 
                    1808049572, 
                    1554465636, 
                    1993902028, 
                    1145282217, 
                    841442137, 
                    1199549890, 
                    789523140, 
                    730706135, 
                    2112513883, 
                    60689829, 
                    416510646, 
                    1917888090, 
                    315677581, 
                    1217902004, 
                    1544602640, 
                    1365012044, 
                    1899392505, 
                    41324188, 
                    1079537402, 
                    251479962, 
                    1099439218, 
                    1036750087, 
                    478271881, 
                    1803078624, 
                    720091706, 
                    183060377, 
                    1453993854, 
                    15676829, 
                    1538006815, 
                    2062009722, 
                    1006270456, 
                    1707853517, 
                    1311773291, 
                    1940879395, 
                    1309252329, 
                    1031752996, 
                    826718424, 
                    149190502, 
                    1536486294, 
                    743180490, 
                    752283929, 
                    323955247, 
                    980516013, 
                    921018466, 
                    1569264641, 
                    1398724263, 
                    1554602268, 
                    1394002716, 
                    977677911, 
                    341024998, 
                    1530728818, 
                    913708452, 
                    650483161, 
                    1729512560, 
                    97542423, 
                    771299485, 
                    1076193755, 
                    190823404, 
                    425190511, 
                    658381760, 
                    1893039683, 
                    773846311, 
                    1340182967, 
                    50504161, 
                    1201903020, 
                    856140776, 
                    606114799, 
                    522281833, 
                    2056133322, 
                    512849644, 
                    538293620, 
                    1750202003, 
                    652321541, 
                    336356912, 
                    1646679680, 
                    775483971, 
                    56234074, 
                    1704737062, 
                    233813983, 
                    1468851090, 
                    775941756, 
                    59991138, 
                    1185482565, 
                    1196981817, 
                    531280904, 
                    92562004, 
                    1057370356, 
                    1729744378, 
                    1843336972, 
                    537952844, 
                    2103042888, 
                    635895020, 
                    1871483638, 
                    878104534, 
                    997624454, 
                    2125921265, 
                    1131255927, 
                    930011852, 
                    1866599093, 
                    713123865, 
                    792609464, 
                    1032320435, 
                    1485353041, 
                    464828267, 
                    1950215025, 
                    1928010462, 
                    261386911, 
                    314126249, 
                    82832880, 
                    1469542099, 
                    715065411, 
                    1518940340, 
                    2104493068, 
                    1103823068, 
                    2029923651, 
                    1833048545, 
                    1735847393, 
                    143201150, 
                    1666706904, 
                    1109341016, 
                    1946254067, 
                    1023854068, 
                    826428508, 
                    1518180478, 
                    557290403, 
                    2049882247, 
                    2026202012, 
                    1921700654, 
                    1486216105, 
                    1668242062, 
                    1791711691, 
                    1273705869, 
                    1985621616, 
                    1668173765, 
                    676241626, 
                    1891104968, 
                    722121744, 
                    720654298, 
                    1394250439, 
                    750754089, 
                    1978658740, 
                    743244107, 
                    1646911498, 
                    373794873, 
                    1970371080, 
                    584102548, 
                    678885599, 
                    767660570, 
                    995664530, 
                    1312059556, 
                    390073872, 
                    988054777, 
                    1410788595, 
                    757258077, 
                    914353445, 
                    1916239043, 
                    205891927, 
                    2114656210, 
                    2055021511, 
                    2047816425, 
                    2049292097, 
                    487169904, 
                    975393791, 
                    562074465, 
                    1825314055, 
                    1588843189, 
                    1680802371, 
                    436319303, 
                    427581442, 
                    138818683, 
                    1110926801, 
                    1015193095, 
                    896434358, 
                    915952815, 
                    1278165923, 
                    1203009960, 
                    1524426217, 
                    452633635, 
                    1695293045, 
                    2120671502, 
                    1370996648, 
                    1258541442, 
                    926036124, 
                    174156549, 
                    1278168190, 
                    803656914, 
                    2010400921, 
                    1228363539, 
                    753820320, 
                    907486230, 
                    1685213041, 
                    754949181, 
                    813116434, 
                    1493917661, 
                    848945639, 
                    1491488836, 
                    1915333963, 
                    1084837033, 
                    695964465, 
                    381527891, 
                    1050783824, 
                    242566296, 
                    340079128, 
                    856845847, 
                    201132755, 
                    1522364424, 
                    91620419, 
                    494835780, 
                    1626575801, 
                    1858827132, 
                    391812826, 
                    1900741939, 
                    419363165, 
                    2081833656, 
                    676819777, 
                    790750655, 
                    1708617427, 
                    801237242, 
                    1431389922, 
                    1021657141, 
                    1725925915, 
                    452438832, 
                    1829982630, 
                    1667578859, 
                    601089289, 
                    355977620, 
                    202076661, 
                    1550000344, 
                    67007176, 
                    1934160734, 
                    1435159644, 
                    439589184, 
                    1904152817, 
                    1313765154, 
                    1069887678, 
                    1128430352, 
                    918462314, 
                    69190277, 
                    2120507441, 
                    1903287413, 
                    712036495, 
                    1515565141, 
                    1749271385, 
                    1042476835, 
                    515673404, 
                    1931954749, 
                    335586016, 
                    878766425, 
                    817097884, 
                    58194984, 
                    1930355056, 
                    1114096721, 
                    1800930758, 
                    1821790971, 
                    803085623, 
                    598344992, 
                    560067313, 
                    819983916, 
                    255756558, 
                    1992638782, 
                    1320287763, 
                    689103722, 
                    427828604, 
                    1839898714, 
                    423667488, 
                    2099707289, 
                    2144072769, 
                    1253081658, 
                    1011945978, 
                    1695873072, 
                    2019771988, 
                    1639427150, 
                    828213448, 
                    1675586156, 
                    309620646, 
                    210360774, 
                    850651094, 
                    787505795, 
                    1151905455, 
                    816618187, 
                    20391604, 
                    1470793883, 
                    732902460, 
                    8812192, 
                    3805678, 
                    321062923, 
                    786142073, 
                    82361846, 
                    510679531, 
                    471542686, 
                    568363039, 
                    98478398, 
                    1960917366, 
                    127868659, 
                    582999650, 
                    22932773, 
                    1087736537, 
                    2056856318, 
                    618809347, 
                    563449762, 
                    1935365627, 
                    1229988005, 
                    2014304094, 
                    1268708459, 
                    185906643, 
                    290927906, 
                    285883273, 
                    125344602, 
                    1512170325, 
                    592724849, 
                    1895177545, 
                    1920045165, 
                    1815562108, 
                    1586622018, 
                    1972247178, 
                    1996977527, 
                    2103684909, 
                    419016412, 
                    1836093036, 
                    102604565, 
                    1313565216, 
                    2061710923, 
                    742402127, 
                    540403292, 
                    1127510033, 
                    1921293590, 
                    1825993431, 
                    700344789, 
                    1092586506, 
                    286687873, 
                    1270107884, 
                    941278423, 
                    168696448, 
                    588455693, 
                    1028736207, 
                    937887246, 
                    1603973436, 
                    1611677648, 
                    1970389196, 
                    1860361419, 
                    35179650, 
                    660797471, 
                    717675168, 
                    2065438329, 
                    723848788, 
                    795801521, 
                    430399937, 
                    374295348, 
                    303105128, 
                    733505770, 
                    66731511, 
                    668720125, 
                    220763282, 
                    516204782, 
                    1397368193, 
                    2021138351, 
                    487585878, 
                    1473900802, 
                    141198426, 
                    412096700, 
                    612418122, 
                    1733022131, 
                    1180241743, 
                    1225482452, 
                    1470100612, 
                    953899122, 
                    1751348717, 
                    1227106415, 
                    557885811, 
                    1034359932, 
                    393004091, 
                    492007261, 
                    596110863, 
                    2123215264, 
                    67424915, 
                    652767745, 
                    1344035755, 
                    824447445, 
                    1964038151, 
                    331708512, 
                    1490893653, 
                    1451698083, 
                    397239661, 
                    359080736, 
                    219956362, 
                    601387759, 
                    720515141, 
                    1799975313, 
                    1338571147, 
                    1155081503, 
                    450301368, 
                    130072634, 
                    1470479222, 
                    1558292496, 
                    1247943297, 
                    449641166, 
                    1628039375, 
                    1639676363, 
                    595337717, 
                    1917433313, 
                    1191936451, 
                    1350777169, 
                    1963893184, 
                    1416228843, 
                    340501679, 
                    1722207897, 
                    72609262, 
                    245031665, 
                    448779867, 
                    744600448, 
                    677102596, 
                    1810622080, 
                    1657346298, 
                    1956973561, 
                    1068686694, 
                    1308203686, 
                    1335782470, 
                    821161007, 
                    1005526090, 
                    868712853, 
                    233383981, 
                    2098857051, 
                    2036018915, 
                    1550287955, 
                    584058564, 
                    262931457, 
                    1169011686, 
                    1185302014, 
                    875271967, 
                    1765267396, 
                    1172212017, 
                    1851843039, 
                    229109728, 
                    46604838, 
                    1287255708, 
                    140116484, 
                    1635288546, 
                    1128494465, 
                    18579057, 
                    645232112, 
                    528778497, 
                    475483476, 
                    1351195446, 
                    593970699, 
                    477978907, 
                    787162935, 
                    620209983, 
                    1660989308, 
                    489605802, 
                    2087223258, 
                    1261342343, 
                    806878368, 
                    634150273, 
                    1874108511, 
                    1684049332, 
                    1240563047, 
                    1462241901, 
                    413605229, 
                    832170279, 
                    77570222, 
                    553196211, 
                    1034790895, 
                    1517243345, 
                    830996118, 
                    1719872078, 
                    972743204, 
                    1581512352, 
                    1610741460, 
                    669717853, 
                    928570210, 
                    1820398787, 
                    207288005, 
                    802581950, 
                    360293978, 
                    339934356, 
                    1905384152, 
                    747661605, 
                    1442048216, 
                    1072309048, 
                    1944379276, 
                    1790205121, 
                    1655506025, 
                    695696212, 
                    935532356, 
                    503925053, 
                    365333649, 
                    1217692766, 
                    502484864, 
                    510039153, 
                    46692661, 
                    825358230, 
                    1221683317, 
                    296324186, 
                    2088492482, 
                    92035901, 
                    1641471249, 
                    1105723778, 
                    520199328, 
                    1021582268, 
                    1652719350, 
                    1353134230, 
                    1156952170, 
                    991271455, 
                    1708519239, 
                    266824471, 
                    1054054338, 
                    4296418, 
                    273856295, 
                    1534174155, 
                    1926148827, 
                    492901442, 
                    20193685, 
                    1488779828, 
                    1035274650, 
                    434848748, 
                    1045173833, 
                    339094683, 
                    581710989, 
                    327071065, 
                    1354538429, 
                    1902534085, 
                    1079027488, 
                    1100702307, 
                    623025192, 
                    103211980, 
                    598715470, 
                    2058447466, 
                    861573115, 
                    268258077, 
                    845946754, 
                    799660374, 
                    227462277, 
                    420465948, 
                    1567073345, 
                    591245046, 
                    633252951, 
                    664234570, 
                    1134660620, 
                    668707885, 
                    1597354362, 
                    361037231, 
                    943836471, 
                    1115794356, 
                    731373973, 
                    1701274866, 
                    805164545, 
                    1880387136, 
                    1408533183, 
                    1653643734, 
                    1194345715, 
                    1302376566, 
                    524012789, 
                    193128263, 
                    1814527486, 
                    1897668912, 
                    274106742, 
                    56249863, 
                    368246263, 
                    1605307259, 
                    1815592648, 
                    1143090519, 
                    1290206950, 
                    5598218, 
                    688227401, 
                    1126488453, 
                    265439165, 
                    1747211384, 
                    2069190130, 
                    444029604, 
                    1949079444, 
                    380939263, 
                    1351917710, 
                    2060486751, 
                    877200350, 
                    993501198, 
                    958697614, 
                    2110716779, 
                    369328334, 
                    1069233973, 
                    1445531082, 
                    865811981, 
                    649914283, 
                    1355413028, 
                    1221396009, 
                    1691053835, 
                    275647585, 
                    34334014, 
                    753422109, 
                    1816888080, 
                    317138304, 
                    577003088, 
                    295988307, 
                    1676837008, 
                    1000598884, 
                    454263843, 
                    1218313928, 
                    938238253, 
                    427566955, 
                    1752369167, 
                    1435835701, 
                    1205436808, 
                    1958680653, 
                    964503579, 
                    1852047937, 
                    813406452, 
                    2097942503, 
                    611009685, 
                    1463411560, 
                    821026288, 
                    938971298, 
                    310873610, 
                    1834405176, 
                    1446495937, 
                    159776177, 
                    949780667, 
                    493176236, 
                    2082277569, 
                    931685856, 
                    1144657213, 
                    850840868, 
                    231105151, 
                    993789275, 
                    252302050, 
                    126891300, 
                    1372076356, 
                    84950956, 
                    1822564349, 
                    1059887867, 
                    422936507, 
                    1922670917, 
                    20459361, 
                    1683149824, 
                    764442814, 
                    1780881919, 
                    240094274, 
                    1054614975, 
                    1832894351, 
                    1650848738, 
                    407989557, 
                    1740594979, 
                    1812121547, 
                    718406101, 
                    2079879468, 
                    877916782, 
                    6264694, 
                    890081559, 
                    996976017, 
                    1517060831, 
                    50818217, 
                    2108571254, 
                    1283520006, 
                    6552397, 
                    1430393389, 
                    901528299, 
                    1204730550, 
                    211647533, 
                    1706378603, 
                    837612279, 
                    479971581, 
                    728455496, 
                    275378154, 
                    1698605465, 
                    1040475053, 
                    1045839018, 
                    918511937, 
                    775207433, 
                    1069962362, 
                    1813097665, 
                    2067165550, 
                    2042649339, 
                    807765532, 
                    431428831, 
                    523696299, 
                    1551545881, 
                    1186202968, 
                    1660182697, 
                    1061393454, 
                    1521868915, 
                    120626606, 
                    481994797, 
                    1235458586, 
                    305503518, 
                    1009069650, 
                    461848900, 
                    639150911, 
                    13906964, 
                    252756435, 
                    2010398162, 
                    576151369, 
                    28446741, 
                    1495720019, 
                    995282072, 
                    1170877157, 
                    1827017708, 
                    1465216825, 
                    113516082, 
                    1825414695, 
                    1034040450, 
                    2106888492, 
                    1378540908, 
                    1967602844, 
                    1331361999, 
                    1597378928, 
                    155652525, 
                    1300805722, 
                    852091175, 
                    1630339745, 
                    2026331155, 
                    1862808978, 
                    1692031500, 
                    1297737726, 
                    184509688, 
                    716985673, 
                    2145460431, 
                    1640480557, 
                    2117358283, 
                    689535815, 
                    578626153, 
                    406688107, 
                    904604973, 
                    522450998, 
                    1207047847, 
                    1236946296, 
                    2038718809, 
                    546929320, 
                    1959967107, 
                    1408035321, 
                    844162238, 
                    86329056, 
                    1072686886, 
                    1982251649, 
                    27353004, 
                    1562464070, 
                    889569345, 
                    661875600, 
                    2051580234, 
                    855608237, 
                    853417125, 
                    1308526825, 
                    1934543383, 
                    531050866, 
                    373908927, 
                    147589184, 
                    1031603516, 
                    878192662, 
                    1311210331, 
                    278296399, 
                    1172900373, 
                    186537151, 
                    1495342189, 
                    1571463914, 
                    1246788542, 
                    627352343, 
                    1202283519, 
                    856089910, 
                    760554997, 
                    94415703, 
                    1706143766, 
                    1756206852, 
                    1488322262, 
                    1591539501, 
                    786177507, 
                    1940002099, 
                    790122092, 
                    1857263498, 
                    1270384722, 
                    769529265, 
                    1974899975, 
                    1483584831, 
                    1736383970, 
                    1261750046, 
                    1983602337, 
                    1417582975, 
                    619628371, 
                    373554107, 
                    148542071, 
                    1059458663, 
                    205342780, 
                    1160526147, 
                    1383202636, 
                    1681670708, 
                    235134948, 
                    657625087, 
                    738470514, 
                    1648706619, 
                    735463107, 
                    1547484308, 
                    360180551, 
                    33479435, 
                    2048804250, 
                    1957164531, 
                    1296948118, 
                    1244693920, 
                    1967688210, 
                    343003882, 
                    1892357006, 
                    581390475, 
                    1504950739, 
                    1321823665, 
                    1755291587, 
                    541681066, 
                    450880071, 
                    1836799189, 
                    597636828, 
                    233592143, 
                    1735345224, 
                    1976689214, 
                    7723972, 
                    828729412, 
                    707547839, 
                    1848579981, 
                    2036556570, 
                    545617619, 
                    373004216, 
                    1954135201, 
                    1356404553, 
                    128552420, 
                    1201531585, 
                    1288899120, 
                    1121800391, 
                    1870384061, 
                    409348714, 
                    1941420540, 
                    1582264228, 
                    1926703086, 
                    2112285575, 
                    738908417, 
                    1597378412, 
                    276624489, 
                    628680748, 
                    1714635243, 
                    1701991571, 
                    1031002762, 
                    1552718207, 
                    841521570, 
                    1230790637, 
                    545819406, 
                    59988259, 
                    504878371, 
                    2060845042, 
                    906257540, 
                    1539760336, 
                    1678934786, 
                    1473415243, 
                    200224269, 
                    2068091608, 
                    751330499, 
                    871689704, 
                    13553009, 
                    1134082976, 
                    1763804586, 
                    1527342537, 
                    216051619, 
                    200023274, 
                    2032391173, 
                    132332352, 
                    656943178, 
                    254534961, 
                    818417389, 
                    268790215, 
                    996436807, 
                    379310802, 
                    1878583130, 
                    200048664, 
                    1140396243, 
                    146588410, 
                    1005553808, 
                    1140383059, 
                    1678966293, 
                    723344564, 
                    810585147, 
                    68564161, 
                    696653214, 
                    1375537725, 
                    215542851, 
                    330623725, 
                    877897575, 
                    468005297, 
                    1382039959, 
                    2006095125, 
                    1360955076, 
                    2014702360, 
                    1583825403, 
                    1290025160, 
                    1012359809, 
                    187292706, 
                    1485939952, 
                    830979488, 
                    1667810681, 
                    709189218, 
                    573847459, 
                    291284445, 
                    1389054517, 
                    236088156, 
                    1064408235, 
                    526946738, 
                    1808660853, 
                    1478886122, 
                    333019000, 
                    53635859, 
                    1062537800, 
                    1758431087, 
                    1340207058, 
                    1437692092, 
                    323497829, 
                    1695240425, 
                    830689323, 
                    987997541, 
                    2131964070, 
                    1701767448, 
                    1401918424, 
                    188937881, 
                    1019978649, 
                    959805911, 
                    1055318786, 
                    1129218094, 
                    942969046, 
                    588557970, 
                    1335172502, 
                    953103537, 
                    808132105, 
                    174574320, 
                    1620056025, 
                    969777075, 
                    149497105, 
                    519300702, 
                    826993291, 
                    460565058, 
                    311129490, 
                    1836079760, 
                    669446519, 
                    1546495100, 
                    134986297, 
                    1328404100, 
                    943557325, 
                    1750007636, 
                    674495302, 
                    146133311, 
                    966527331, 
                    1464603031, 
                    1504087030, 
                    497942411, 
                    846499065, 
                    2113526880, 
                    1454754441, 
                    384909578, 
                    1418789443, 
                    429248606, 
                    1328253017, 
                    2082673788, 
                    1731461339, 
                    1220102883, 
                    143713620, 
                    1527399110, 
                    1392987401, 
                    887963480, 
                    138375062, 
                    370429983, 
                    1288194987, 
                    1951680774, 
                    868247134, 
                    370124265, 
                    676868051, 
                    295884310, 
                    1032320929, 
                    2002906971, 
                    53951584, 
                    1839058196, 
                    16248586, 
                    1452794797, 
                    454722792, 
                    796835735, 
                    1769514286, 
                    2018053118, 
                    1596500154, 
                    310189694, 
                    1475558902, 
                    1654012792, 
                    1662506281, 
                    1912071174, 
                    1247994906, 
                    397744685, 
                    1279795688, 
                    375939349, 
                    104618421, 
                    1596827283, 
                    1402781480, 
                    755070834, 
                    2082900346, 
                    55593845, 
                    1611632574, 
                    304065319, 
                    1005421971, 
                    1162330204, 
                    596355897, 
                    1133962765, 
                    1968558007, 
                    550614755, 
                    1081205951, 
                    1599331117, 
                    330957994, 
                    1727214894, 
                    413000020, 
                    2022941867, 
                    1627950996, 
                    934625604, 
                    1598072244, 
                    273144149, 
                    2078382603, 
                    1082797707, 
                    1559888225, 
                    631845917, 
                    855407349, 
                    1523607460, 
                    703685868, 
                    470502449, 
                    1237812224, 
                    300928702, 
                    191265889, 
                    1582977293, 
                    600125491, 
                    1446364397, 
                    1903641497, 
                    2108138388, 
                    1988645870, 
                    150657473, 
                    1938897411, 
                    607184082, 
                    1421697221, 
                    462537389, 
                    489115334, 
                    924944147, 
                    572806841, 
                    63175164, 
                    1581113180, 
                    1668263659, 
                    2132228312, 
                    1404337468, 
                    895472000, 
                    1317476464, 
                    2146238686, 
                    1129637331, 
                    824171878, 
                    1000102639, 
                    643189267, 
                    979786657, 
                    1596141617, 
                    1629298158, 
                    458644336, 
                    125853448, 
                    2043634188, 
                    1667629305, 
                    359348866, 
                    1645712305, 
                    999205626, 
                    1032077244, 
                    1971057044, 
                    452345279, 
                    34295997, 
                    1477293523, 
                    1143211840, 
                    990888162, 
                    998930575, 
                    1615845214, 
                    593682373, 
                    634944078, 
                    59039076, 
                    792232185, 
                    2089977927, 
                    1182905856, 
                    485757784, 
                    1980958403, 
                    1552940349, 
                    1021273072, 
                    1584222254, 
                    1617971807, 
                    622192519, 
                    903538858, 
                    1464949121, 
                    1008859213, 
                    701999503, 
                    309599253, 
                    148539746, 
                    1295843773, 
                    566386848, 
                    968969676, 
                    565595281, 
                    1074578183, 
                    1211453185, 
                    549035936, 
                    1844690262, 
                    1679883033, 
                    1370041471, 
                    1565662124, 
                    174264624, 
                    1155350524, 
                    130706756, 
                    1355810311, 
                    406420266, 
                    8245189, 
                    920747581, 
                    803909432, 
                    1686803878, 
                    1423222127, 
                    1787579311, 
                    62675785, 
                    114688956, 
                    1485559441, 
                    61490051, 
                    1528717466, 
                    409884725, 
                    1067518186, 
                    1134879805, 
                    1172920431, 
                    775294020, 
                    833612587, 
                    842348416, 
                    1850570449, 
                    1049458366, 
                    1772196344, 
                    69348797, 
                    1131944540, 
                    1728262647, 
                    1540941991, 
                    1485699241, 
                    953358398, 
                    610916932, 
                    2134761872, 
                    847008448, 
                    428871730, 
                    1487265051, 
                    1413865855, 
                    497118592, 
                    1456703932, 
                    88111632, 
                    2045573718, 
                    770279022, 
                    872801266, 
                    1655748109, 
                    503711063, 
                    854280720, 
                    1227519487, 
                    1013088132, 
                    1830219366, 
                    139151211, 
                    777172076, 
                    545003228, 
                    197121040, 
                    790368104, 
                    1488135684, 
                    313002108, 
                    427619954, 
                    306351945, 
                    781707569, 
                    2086380039, 
                    1936286688, 
                    1223130432, 
                    145861887, 
                    2085006533, 
                    834220913, 
                    1599242500, 
                    127410731, 
                    638550993, 
                    1780101968, 
                    41452415, 
                    1143502517, 
                    570399594, 
                    1825659520, 
                    1084808799, 
                    877203949, 
                    63333565, 
                    2117030797, 
                    194822340, 
                    545747303, 
                    917915624, 
                    989312957, 
                    118856408, 
                    2045526928, 
                    1401790780, 
                    708527165, 
                    408355170, 
                    413795892, 
                    1344393768, 
                    1506356411, 
                    115869622, 
                    1059645097, 
                    1107513910, 
                    1862894670, 
                    1517807540, 
                    299308591, 
                    822443286, 
                    624417135, 
                    935278380, 
                    821527196, 
                    1051952210, 
                    726869989, 
                    588968494, 
                    1380469811, 
                    1788766951, 
                    1143132341, 
                    206772482, 
                    866827355, 
                    1259795888, 
                    2060647802, 
                    1424802119, 
                    343454958, 
                    232797614, 
                    1908088289, 
                    2011275592, 
                    1097067082, 
                    1817430280, 
                    1325087151, 
                    891554754, 
                    1376479368, 
                    425865743, 
                    1185446608, 
                    930500610, 
                    1279678229, 
                    1664232346, 
                    1129290965, 
                    35988607, 
                    854988571, 
                    307851980, 
                    785500208, 
                    54760663, 
                    1586400077, 
                    1181752417, 
                    1520778791, 
                    1641278740, 
                    191045635, 
                    400344463, 
                    885870244, 
                    256759977, 
                    258658439, 
                    501754683, 
                    1689011462, 
                    1301483651, 
                    1431229613, 
                    81554292, 
                    1919898311, 
                    826847483, 
                    1346909268, 
                    1999102725, 
                    420740458, 
                    629361958, 
                    1644839782, 
                    1880346028, 
                    1706282659, 
                    395661453, 
                    2013989249, 
                    1943853026, 
                    1456773912, 
                    1863721112, 
                    659475986, 
                    1107143734, 
                    1499267558, 
                    558975375, 
                    474295680, 
                    2005887139, 
                    1985885689, 
                    1309186188, 
                    859502470, 
                    266809549, 
                    1820229957, 
                    696722619, 
                    931560036, 
                    1068327174, 
                    632896315, 
                    874724685, 
                    884337928, 
                    2031446604, 
                    1646754644, 
                    1198123937, 
                    1891817682, 
                    302443482, 
                    836562986, 
                    1003369493, 
                    2034595169, 
                    156138250, 
                    557404528, 
                    1853537696, 
                    1622953405, 
                    1125117338, 
                    1774773138, 
                    394676256, 
                    1091054198, 
                    1169632779, 
                    1744767638, 
                    1298998352, 
                    1149970772, 
                    1130036087, 
                    827187971, 
                    1572826121, 
                    243152250, 
                    610712123, 
                    2114828660, 
                    1080099719, 
                    178872768, 
                    1871501486, 
                    1845285569, 
                    576512608, 
                    1247449713, 
                    831557974, 
                    1658807172, 
                    2130026292, 
                    297098382, 
                    258649975, 
                    2119387077, 
                    357032504, 
                    270580748, 
                    495898065, 
                    671863853, 
                    318157430, 
                    1448482611, 
                    132347993, 
                    1833716430, 
                    1881868779, 
                    639520058, 
                    1425553701, 
                    1753152068, 
                    1909410904, 
                    1471043183, 
                    1481381610, 
                    1872237560, 
                    1901785488, 
                    1204258633, 
                    73928523, 
                    954971687, 
                    1281105559, 
                    335098469, 
                    1903946914, 
                    824496725, 
                    163093683, 
                    458336328, 
                    2128375567, 
                    606087983, 
                    791395431, 
                    1613793813, 
                    1792230493, 
                    97577874, 
                    832404223, 
                    1197729349, 
                    1387735134, 
                    1028417604, 
                    654072707, 
                    458172234, 
                    509030541, 
                    124343510, 
                    110804257, 
                    924479340, 
                    232959881, 
                    440579661, 
                    900802714, 
                    118349418, 
                    2083358312, 
                    1252953072, 
                    1913551750, 
                    1106804061, 
                    1904505331, 
                    925767659, 
                    223169859, 
                    1451161935, 
                    838281518, 
                    21934035, 
                    514117481, 
                    1818884987, 
                    508770170, 
                    2007304749, 
                    1467590691, 
                    1673743657, 
                    1042320999, 
                    268074966, 
                    994773212, 
                    1327975827, 
                    920747845, 
                    711681555, 
                    83308049, 
                    452964006, 
                    1218164853, 
                    1443613254, 
                    695228092, 
                    2097068660, 
                    844167430, 
                    356626219, 
                    102138588, 
                    1463367253, 
                    2071177658, 
                    44744265, 
                    522461663, 
                    875422495, 
                    840019880, 
                    1832075017, 
                    1856772129, 
                    866462834, 
                    2021891662, 
                    1528725935, 
                    359447831, 
                    1365801099, 
                    514300123, 
                    982671367, 
                    2096885711, 
                    649209439, 
                    804236466, 
                    584544247, 
                    2029641988, 
                    2112368562, 
                    1593290096, 
                    1720310534, 
                    1345085220, 
                    1371676757, 
                    1169645023, 
                    1460587744, 
                    2036122855, 
                    460892077, 
                    230539567, 
                    273584846, 
                    606994505, 
                    481655299, 
                    2067279094, 
                    1198233875, 
                    1895190976, 
                    464025905, 
                    1484843086, 
                    592168196, 
                    833723777, 
                    1357729629, 
                    558786484, 
                    128310378, 
                    1453567812, 
                    1539505557, 
                    352233724, 
                    864990597, 
                    2086147530, 
                    235493486, 
                    1494211190, 
                    46018653, 
                    1292832194, 
                    259623183, 
                    474467878, 
                    137253673, 
                    2017560804, 
                    350867124, 
                    847142692, 
                    1298268553, 
                    1853261119, 
                    1526915783, 
                    1943435809, 
                    1395880052, 
                    635923267, 
                    1748306816, 
                    921731430, 
                    2025276179, 
                    1446005652, 
                    1463549895, 
                    1234964038, 
                    1632859806, 
                    1311850000, 
                    212068270, 
                    1898304117, 
                    671912359, 
                    1553582078, 
                    1464979718, 
                    266742722, 
                    1953063310, 
                    1019443033, 
                    304654426, 
                    1521923861, 
                    1800629369, 
                    1114164534, 
                    184520914, 
                    1128236299, 
                    347371322, 
                    7187421, 
                    1930025421, 
                    1328156718, 
                    1544323852, 
                    1764366860, 
                    186574533, 
                    886390724, 
                    1454291641, 
                    1561777467, 
                    1310390079, 
                    1639870758, 
                    1852744643, 
                    617774127, 
                    474441192, 
                    1566468592, 
                    622597635, 
                    1148013095, 
                    2008835031, 
                    881652300, 
                    1080763924, 
                    508802713, 
                    1950039166, 
                    731155242, 
                    552581086, 
                    84124402, 
                    1041563029, 
                    278825520, 
                    1548606693, 
                    4991922, 
                    142806440, 
                    281715518, 
                    451402353, 
                    620070517, 
                    574360108, 
                    2018088758, 
                    1663463878, 
                    135393177, 
                    1838123833, 
                    2015976593, 
                    1125275467, 
                    1473161193, 
                    444012476, 
                    1257618539, 
                    243191999, 
                    1972592607, 
                    561481726, 
                    1335289183, 
                    545001841, 
                    885669481, 
                    899326226, 
                    652616274, 
                    1252813150, 
                    1450352261, 
                    47472375, 
                    1986052256, 
                    204631902, 
                    1198870179, 
                    775575632, 
                    1460199450, 
                    722803831, 
                    2055232660, 
                    1485267678, 
                    1449299719, 
                    1418971027, 
                    1028674561, 
                    1188468405, 
                    1232674126, 
                    43414019, 
                    603836081, 
                    2050488361, 
                    487204458, 
                    1457372909, 
                    2140342085, 
                    1903860480, 
                    1755086378, 
                    64790237, 
                    692420627, 
                    487963243, 
                    727472126, 
                    1670126323, 
                    1853757493, 
                    1881307326, 
                    662937212, 
                    1253149343, 
                    1637673813, 
                    1176386015, 
                    1148533739, 
                    572598142, 
                    735791499, 
                    1813456856, 
                    464593699, 
                    1507301192, 
                    377924383, 
                    1293172762, 
                    1217526454, 
                    2135377162, 
                    1142196404, 
                    1986131159, 
                    1362001085, 
                    784124202, 
                    1476291247, 
                    1291875164, 
                    2088649407, 
                    982664767, 
                    412121768, 
                    1342727012, 
                    1259954712, 
                    1693975428, 
                    439869644, 
                    1921262019, 
                    1659694922, 
                    710906936, 
                    48103506, 
                    1937556774, 
                    1016529985, 
                    173925334, 
                    822330466, 
                    196150376, 
                    1928780861, 
                    1999772193, 
                    39934666, 
                    660075984, 
                    1455106167, 
                    937862872, 
                    1585894662, 
                    1127386913, 
                    1079448526, 
                    847169323, 
                    686334026, 
                    1767192863, 
                    1070077480, 
                    853773115, 
                    1273445805, 
                    2090831571, 
                    193835076, 
                    561882329, 
                    1940141566, 
                    1827756092, 
                    841027575, 
                    294946801, 
                    2063914950, 
                    1602041958, 
                    132728498, 
                    962013127, 
                    153761934, 
                    1901170410, 
                    1459197686, 
                    587851256, 
                    276642777, 
                    1043601120, 
                    1313046696, 
                    946046028, 
                    57350298, 
                    1509712539, 
                    744189536, 
                    816215263, 
                    1984252644, 
                    1150786535, 
                    1544253752, 
                    1432218502, 
                    263278486, 
                    412785389, 
                    1007641402, 
                    820160428, 
                    851184539, 
                    805921807, 
                    1584944778, 
                    104755582, 
                    1743721698, 
                    454647656, 
                    381267415, 
                    1142058021, 
                    1502606448, 
                    1633834060, 
                    2083340890, 
                    585376355, 
                    527347486, 
                    493093040, 
                    784100938, 
                    1832207899, 
                    1815672874, 
                    491597270, 
                    570526546, 
                    1790216553, 
                    454146167, 
                    124031452, 
                    796422817, 
                    1911216913, 
                    1346642035, 
                    1525103460, 
                    725113332, 
                    789355031, 
                    283502340, 
                    1556292720, 
                    31668315, 
                    1651129561, 
                    594400556, 
                    1460051717, 
                    110828588, 
                    1495323774, 
                    316225632, 
                    1354442104, 
                    991613205, 
                    1969478768, 
                    662333705, 
                    170988675, 
                    1590923227, 
                    570999885, 
                    1573855296, 
                    158813181, 
                    288867777, 
                    1491159604, 
                    366685597, 
                    1859529500, 
                    1764029275, 
                    1919164863, 
                    1989742490, 
                    1364908496, 
                    366014261, 
                    727153087, 
                    9498990, 
                    1821211512, 
                    905597194, 
                    218618238, 
                    1877017971, 
                    1739396031, 
                    858555681, 
                    2093797375, 
                    1602165745, 
                    432211329, 
                    2138459446, 
                    1214779416, 
                    382264452, 
                    1436260811, 
                    1515982267, 
                    461230770, 
                    1647467712, 
                    748531425, 
                    1127882848, 
                    283157492, 
                    680591872, 
                    225422932, 
                    337361617, 
                    1187828854, 
                    1236235683, 
                    1381437375, 
                    422669434, 
                    571456487, 
                    1939747092, 
                    259987099, 
                    1808870718, 
                    1376975707, 
                    1094037456, 
                    1531159148, 
                    1485824784, 
                    642497767, 
                    448844910, 
                    772994967, 
                    92460797, 
                    1070421321, 
                    1459916641, 
                    1644609499, 
                    1116317787, 
                    1141643967, 
                    167837382, 
                    1221572008, 
                    1108895152, 
                    1077908433, 
                    343547233, 
                    1302798505, 
                    271697151, 
                    1241211065, 
                    237025648, 
                    82856769, 
                    46561215, 
                    1931559705, 
                    1483849895, 
                    1865251987, 
                    1129866202, 
                    495580596, 
                    1316726597, 
                    287099194, 
                    154050283, 
                    1342178646, 
                    770824258, 
                    761483739, 
                    120741960, 
                    998588951, 
                    2097919674, 
                    873484500, 
                    12385860, 
                    874472745, 
                    656070628, 
                    57461527, 
                    970724498, 
                    1183466020, 
                    1256588792, 
                    1343201297, 
                    1019991472, 
                    14663675, 
                    272542223, 
                    1492244648, 
                    227909254, 
                    636948587, 
                    2135773595, 
                    567659653, 
                    1139950059, 
                    1011180687, 
                    1484597933, 
                    1701748726, 
                    1306131519, 
                    731076570, 
                    1790612412, 
                    1744363848, 
                    1901178371, 
                    1172817447, 
                    1490559216, 
                    1921622788, 
                    370819709, 
                    1553837290, 
                    1100830048, 
                    110306201, 
                    1127472406, 
                    1617546380, 
                    1290412645, 
                    1544708053, 
                    585140437, 
                    179564121, 
                    1259615918, 
                    1010578842, 
                    674970913, 
                    140648598, 
                    845260515, 
                    1115202527, 
                    223038373, 
                    1971965596, 
                    59189940, 
                    1664585343, 
                    1353888698, 
                    203164605, 
                    1769017327, 
                    1257044920, 
                    1661474665, 
                    396170948, 
                    1714836628, 
                    1428792937, 
                    1231343980, 
                    1059190427, 
                    303766803, 
                    1945390698, 
                    1840390451, 
                    1482449651, 
                    972381588, 
                    1613637829, 
                    1061317274, 
                    162236022, 
                    364772242, 
                    757846521, 
                    1494019589, 
                    591065542, 
                    2130002863, 
                    960385938, 
                    1899048416, 
                    474019091, 
                    1026777813, 
                    1165482921, 
                    2033299702, 
                    675409885, 
                    1521325475, 
                    2076696422, 
                    1113627507, 
                    1973457520, 
                    567734090, 
                    167655104, 
                    1932303610, 
                    1991268775, 
                    596315183, 
                    731301458, 
                    2050193399, 
                    2009103355, 
                    313364073, 
                    1673433657, 
                    2023280965, 
                    1461708867, 
                    1317672038, 
                    1340004909, 
                    1315750657, 
                    1379106333, 
                    53885253, 
                    60802351, 
                    1607193354, 
                    1448827066, 
                    170565754, 
                    762823156, 
                    220645389, 
                    808631389, 
                    1505480151, 
                    1187455574, 
                    1516876782, 
                    549353707, 
                    1542976882, 
                    555934095, 
                    1685348599, 
                    374554028, 
                    831763191, 
                    2014416578, 
                    914715561, 
                    804726484, 
                    1828817866, 
                    1217532146, 
                    1713404486, 
                    1780954431, 
                    855136769, 
                    1632399881, 
                    277701469, 
                    456569206, 
                    1084588620, 
                    437339549, 
                    1303830700, 
                    1834256551, 
                    1997215911, 
                    654193369, 
                    621524632, 
                    1460523124, 
                    469503068, 
                    1812284088, 
                    1802891766, 
                    1952394581, 
                    2094493362, 
                    1123672221, 
                    485788624, 
                    1556343256, 
                    1361908323, 
                    1500839692, 
                    466126473, 
                    1904913625, 
                    2135568705, 
                    1648726937, 
                    629945676, 
                    1450739107, 
                    425289348, 
                    511024173, 
                    1697772114, 
                    983836754, 
                    494881512, 
                    1973722570, 
                    593690297, 
                    685649520, 
                    485121687, 
                    1911559830, 
                    1871526416, 
                    1068140602, 
                    2031108521, 
                    1830103878, 
                    699621443, 
                    888783513, 
                    2081893110, 
                    224825475, 
                    2052534607, 
                    1166962750, 
                    211524812, 
                    1109804627, 
                    857716769, 
                    705145645, 
                    731743522, 
                    157061230, 
                    419046108, 
                    1501780724, 
                    1166273408, 
                    520271491, 
                    468484148, 
                    1583345330, 
                    1954877520, 
                    2000575240, 
                    1408967203, 
                    1486191738, 
                    1103904902, 
                    1785171525, 
                    965641612, 
                    643264145, 
                    1218593791, 
                    1117242246, 
                    1467272894, 
                    182933532, 
                    1399629452, 
                    1565131669, 
                    1672718382, 
                    1679288092, 
                    801218249, 
                    1724826607, 
                    1970504162, 
                    1910743230, 
                    1743675977, 
                    1610466573, 
                    1239214295, 
                    1462968368, 
                    1800791051, 
                    992626469, 
                    252093232, 
                    337820282, 
                    1554676462, 
                    1239393220, 
                    1666859759, 
                    2112333843, 
                    1443075682, 
                    288181086, 
                    1260746729, 
                    30533281, 
                    421136675, 
                    1360913352, 
                    1932362258, 
                    296721585, 
                    1406667510, 
                    1409270462, 
                    2095852606, 
                    1241766213, 
                    1790015380, 
                    674783237, 
                    1452999840, 
                    1314095500, 
                    631826495, 
                    887241663, 
                    700562475, 
                    1588930448, 
                    697250976, 
                    705224565, 
                    1987153000, 
                    344410947, 
                    761360945, 
                    2093482482, 
                    1832884334, 
                    111278433, 
                    1533078293, 
                    627821330, 
                    1236071330, 
                    2126684218, 
                    1597866134, 
                    1502422698, 
                    887341497, 
                    1111448366, 
                    304384940, 
                    1642185101, 
                    1258151417, 
                    1587788544, 
                    1939947996, 
                    1673782577, 
                    504075720, 
                    334405515, 
                    1662097614, 
                    2144931729, 
                    1820436635, 
                    1126007814, 
                    1687110276, 
                    1085481379, 
                    1853477434, 
                    667434799, 
                    538830745, 
                    77929311, 
                    1415082867, 
                    737851117, 
                    448511733, 
                    916335782, 
                    1416655983, 
                    475137840, 
                    1675512665, 
                    1821083825, 
                    911126939, 
                    778846180, 
                    173199132, 
                    2116652035, 
                    1791383726, 
                    287592682, 
                    1934925387, 
                    341551474, 
                    1009710560, 
                    1137125041, 
                    1776573893, 
                    1260257578, 
                    1796466099, 
                    1170952046, 
                    201148845, 
                    1652747485, 
                    829796980, 
                    763912863, 
                    273045847, 
                    706876520, 
                    571651804, 
                    447596914, 
                    921827543, 
                    568636531, 
                    1587853473, 
                    1519936823, 
                    87339831, 
                    149490380, 
                    662936633, 
                    1535532805, 
                    225529118, 
                    783013577, 
                    2059759526, 
                    118864171, 
                    762655638, 
                    1872713187, 
                    161206383, 
                    1692929226, 
                    353548003, 
                    1532843953, 
                    1338566074, 
                    1345558802, 
                    75770819, 
                    716352393, 
                    1038344553, 
                    1426056814, 
                    428946859, 
                    244130821, 
                    536702272, 
                    943247895, 
                    86538802, 
                    652743120, 
                    202091993, 
                    968636145, 
                    1249432021, 
                    463530025, 
                    2004502284, 
                    1752046248, 
                    528798562, 
                    271446903, 
                    200252851, 
                    1785435007, 
                    1826098488, 
                    1621661402, 
                    911595923, 
                    993560316, 
                    1347981699, 
                    1677601928, 
                    408296408, 
                    475919305, 
                    1491541102, 
                    1284351401, 
                    410364860, 
                    887685541, 
                    1515794093, 
                    1373576649, 
                    371826095, 
                    205475150, 
                    1677775625, 
                    161796659, 
                    1090989964, 
                    1990692657, 
                    1760271755, 
                    1867172385, 
                    1448994003, 
                    1720269645, 
                    580921584, 
                    1091123381, 
                    1016915797, 
                    299125613, 
                    2015694550, 
                    556643782, 
                    1164130664, 
                    82101100, 
                    1332591102, 
                    1700614714, 
                    1666943961, 
                    601593064, 
                    1952240117, 
                    44784237, 
                    78075115, 
                    898828578, 
                    1983318060, 
                    60782967, 
                    1599190440, 
                    949671048, 
                    242378260, 
                    1461890099, 
                    1600325699, 
                    2023339019, 
                    91703930, 
                    1799027134, 
                    74270623, 
                    367001903, 
                    1327940586, 
                    357043841, 
                    25163252, 
                    2106409750, 
                    172667399, 
                    1338809925, 
                    412638732, 
                    256858318, 
                    660686131, 
                    109170795, 
                    607708402, 
                    934897320, 
                    120220737, 
                    328263760, 
                    1702578086, 
                    1962663026, 
                    1854116335, 
                    1917716678, 
                    400718680, 
                    1632991388, 
                    83721544, 
                    192161386, 
                    7374597, 
                    1699488788, 
                    267981945, 
                    499322955, 
                    1477891385, 
                    1266515132, 
                    1638281329, 
                    1141060425, 
                    207421683, 
                    216667416, 
                    482373159, 
                    797128761, 
                    901644161, 
                    975547261, 
                    1675451462, 
                    1708017858, 
                    428925665, 
                    613430192, 
                    1779629152, 
                    1968700444, 
                    238142447, 
                    1874147265, 
                    1600558212, 
                    664293120, 
                    829450311, 
                    2061598147, 
                    1906795660, 
                    1785146320, 
                    169222684, 
                    321470899, 
                    1398308454, 
                    588762882, 
                    283280359, 
                    1135779200, 
                    349669244, 
                    473158111, 
                    1838427805, 
                    1820828091, 
                    2008402187, 
                    1293607247, 
                    766060636, 
                    1667109353, 
                    2049232759, 
                    391040986, 
                    452524161, 
                    1470575623, 
                    1574103246, 
                    727030825, 
                    287211564, 
                    146098477, 
                    1488791013, 
                    1934772135, 
                    2000845883, 
                    262504747, 
                    2101502586, 
                    280710979, 
                    98930576, 
                    1751172472, 
                    1817356291, 
                    1563776885, 
                    1507203119, 
                    2000618656, 
                    971837741, 
                    2033434431, 
                    965842609, 
                    2041093924, 
                    513848402, 
                    1913348608, 
                    625878017, 
                    1202293351, 
                    2017073700, 
                    755581221, 
                    752511652, 
                    486021905, 
                    1202639808, 
                    718516741, 
                    1972398153, 
                    1209517226, 
                    211768959, 
                    1506358335, 
                    487494901, 
                    1179764835, 
                    1497934756, 
                    23124207, 
                    980163533, 
                    1611019966, 
                    735400646, 
                    20775612, 
                    1181760261, 
                    68958265, 
                    374227535, 
                    87255333, 
                    3471800, 
                    444625302, 
                    1933887775, 
                    912925627, 
                    695271612, 
                    15798328, 
                    1572682024, 
                    558913884, 
                    956727221, 
                    1808238285, 
                    101152808, 
                    1232401860, 
                    276508424, 
                    733209792, 
                    1182260483, 
                    1514823978, 
                    1207348586, 
                    1382985845, 
                    455796473, 
                    1036896997, 
                    1539403513, 
                    310997956, 
                    1076281984, 
                    327438284, 
                    502683900, 
                    948713534, 
                    1053270898, 
                    1502306290, 
                    1305693278, 
                    493072790, 
                    731588347, 
                    556919752, 
                    828065816, 
                    1929818367, 
                    752109421, 
                    307886350, 
                    699617777, 
                    289714181, 
                    23245129, 
                    1956599825, 
                    1784318849, 
                    1800338722, 
                    549631114, 
                    826740263, 
                    1078612027, 
                    265532896, 
                    1894099430, 
                    246953741, 
                    428759483, 
                    1368060315, 
                    960910673, 
                    1946258063, 
                    1760645439, 
                    1484814185, 
                    695335467, 
                    1839957491, 
                    1515826965, 
                    1606449491, 
                    410241727, 
                    1894041725, 
                    1110011077, 
                    70375734, 
                    1400704253, 
                    463654431, 
                    1076649938, 
                    1691716703, 
                    404336044, 
                    494173704, 
                    2128584018, 
                    874374133, 
                    815206201, 
                    917634405, 
                    1359740716, 
                    646680295, 
                    1400061795, 
                    1886548438, 
                    1908850489, 
                    249541721, 
                    1396309904, 
                    237151004, 
                    1202097751, 
                    806317157, 
                    1073546807, 
                    2085116610, 
                    1679645764, 
                    932813931, 
                    943757960, 
                    1490735278, 
                    1234482900, 
                    1059635577, 
                    939543032, 
                    1240651933, 
                    2026956101, 
                    276687051, 
                    846588748, 
                    1713943115, 
                    399634469, 
                    85976683, 
                    1897573972, 
                    1534378971, 
                    2008680499, 
                    1399925726, 
                    265853370, 
                    1701868997, 
                    552854114, 
                    43276268, 
                    586517347, 
                    1113965144, 
                    84752390, 
                    956270676, 
                    2078590649, 
                    1266285244, 
                    210139587, 
                    173090723, 
                    691943974, 
                    303693920, 
                    1144312574, 
                    1463071290, 
                    931492314, 
                    143836007, 
                    747958743, 
                    1061084413, 
                    1407174451, 
                    1068948441, 
                    2082314748, 
                    1722037915, 
                    1038161951, 
                    1083053665, 
                    1947575194, 
                    1833602327, 
                    1486913969, 
                    1822873806, 
                    499451396, 
                    2009414580, 
                    375954152, 
                    1949655672, 
                    540463787, 
                    1519161457, 
                    1532262496, 
                    1636369496, 
                    346296584, 
                    1977276463, 
                    1405982888, 
                    278212224, 
                    1128528575, 
                    1820741435, 
                    1030512346, 
                    1853865378, 
                    1732226724, 
                    542894828, 
                    569630541, 
                    1084046826, 
                    1301968016, 
                    1753737965, 
                    786420228, 
                    947596086, 
                    2140234922, 
                    1344388576, 
                    1767037896, 
                    978299846, 
                    1152597964, 
                    1650947329, 
                    1313873597, 
                    398633710, 
                    1616840354, 
                    255716843, 
                    766833848, 
                    348208654, 
                    1944620218, 
                    889771949, 
                    1910713780, 
                    1772634764, 
                    2078292441, 
                    1442606465, 
                    1945023070, 
                    918165927, 
                    1802585172, 
                    1128962227, 
                    2087903513, 
                    261573313, 
                    691525569, 
                    1331780220, 
                    1498310588, 
                    1404680366, 
                    1263971786, 
                    402867143, 
                    520905790, 
                    893197078, 
                    1222994352, 
                    1575841713, 
                    1956904397, 
                    1343558858, 
                    1899607208, 
                    553962650, 
                    483771532, 
                    842832902, 
                    663402866, 
                    1007349178, 
                    808855517, 
                    872811732, 
                    1053907587, 
                    682303692, 
                    2056728807, 
                    842454775, 
                    779664695, 
                    944479424, 
                    1153238032, 
                    2006845198, 
                    1956198542, 
                    2015737948, 
                    1292494561, 
                    1011272695, 
                    1403968710, 
                    1505464583, 
                    286774277, 
                    1968301391, 
                    152636741, 
                    2056676878, 
                    1282145571, 
                    1213973211, 
                    1882294700, 
                    2021120417, 
                    1272697949, 
                    368778505, 
                    1080351199, 
                    567154922, 
                    2020511203, 
                    1524329791, 
                    958834933, 
                    1102190168, 
                    254763061, 
                    795235994, 
                    320106710, 
                    1215091781, 
                    1355149373, 
                    9221877, 
                    1422535060, 
                    655855813, 
                    625015671, 
                    319492362, 
                    1397112758, 
                    661544239, 
                    1084482183, 
                    1354740051, 
                    283347152, 
                    945631702, 
                    2087073795, 
                    394142625, 
                    267188373, 
                    662953788, 
                    690196161, 
                    754209635, 
                    1872687254, 
                    1742365953, 
                    1138000679, 
                    1180270817, 
                    1557089390, 
                    1687950302, 
                    1909587223, 
                    212509773, 
                    1071451868, 
                    1776391888, 
                    1048010265, 
                    854008374, 
                    1760974887, 
                    497258567, 
                    691165985, 
                    188876929, 
                    150315210, 
                    277552400, 
                    545766331, 
                    1644264575, 
                    1431661207, 
                    962653209, 
                    1964344100, 
                    1220750461, 
                    936638234, 
                    2065441545, 
                    85431353, 
                    134719497, 
                    627564774, 
                    1626368578, 
                    1257141418, 
                    295881145, 
                    411994007, 
                    1648037073, 
                    1070032387, 
                    725224404, 
                    77091102, 
                    174878556, 
                    599616134, 
                    1882068405, 
                    893752237, 
                    412505898, 
                    1395524141, 
                    1768204517, 
                    1761017621, 
                    230473809, 
                    1741248811, 
                    1933572232, 
                    254465717, 
                    1898196866, 
                    243827415, 
                    2137119620, 
                    117187457, 
                    1193415233, 
                    1470032075, 
                    910034045, 
                    1925505500, 
                    2064733865, 
                    243632583, 
                    1639131492, 
                    1602518949, 
                    1774867726, 
                    1732428646, 
                    1592566937, 
                    519250470, 
                    752129120, 
                    442014367, 
                    112937814, 
                    1574709827, 
                    2113425228, 
                    111785827, 
                    2122920301, 
                    1825419913, 
                    811181573, 
                    750512338, 
                    1019155309, 
                    1714612715, 
                    196139583, 
                    1607216487, 
                    706164425, 
                    324192734, 
                    299342768, 
                    2027737427, 
                    876851555, 
                    1382541163, 
                    1267505445, 
                    178693688, 
                    1366062421, 
                    178004998, 
                    159998342, 
                    947202551, 
                    159840884, 
                    2078729620, 
                    1107968289, 
                    279549456, 
                    1266368158, 
                    827560899, 
                    1950440851, 
                    1248954047, 
                    1008888501, 
                    1935943089, 
                    1628310997, 
                    358862405, 
                    288524136, 
                    1786411039, 
                    268390761, 
                    311699707, 
                    1453489531, 
                    442902895, 
                    450876766, 
                    1342904977, 
                    1729365917, 
                    457517378, 
                    1684951805, 
                    1314938758, 
                    1303176181, 
                    1894613946, 
                    855577091, 
                    210025774, 
                    1399228672, 
                    573435432, 
                    1223435593, 
                    2082416463, 
                    1414711485, 
                    1166222677, 
                    2099428590, 
                    44190681, 
                    717451624, 
                    531632117, 
                    1631627827, 
                    191594410, 
                    1911655511, 
                    1094669183, 
                    598327986, 
                    917704983, 
                    843365384, 
                    2087964010, 
                    1739213291, 
                    1237924163, 
                    1114150402, 
                    955805738, 
                    872687804, 
                    923159526, 
                    1874611879, 
                    964577012, 
                    1365320281, 
                    1849807153, 
                    393777815, 
                    1940513178, 
                    1123856922, 
                    1519237859, 
                    2119467455, 
                    1740415077, 
                    1997209022, 
                    435453069, 
                    712507496, 
                    1693378181, 
                    1091634567, 
                    1269785106, 
                    1834466096, 
                    224200080, 
                    1741731730, 
                    921857414, 
                    958758715, 
                    259282356, 
                    1578733113, 
                    634696734, 
                    2006673039, 
                    767246822, 
                    471573374, 
                    1362695818, 
                    155400655, 
                    1765136575, 
                    1243359019, 
                    443422934, 
                    1848231275, 
                    300276067, 
                    207804584, 
                    450134473, 
                    1948386043, 
                    249621437, 
                    1797896513, 
                    924422093, 
                    1555258842, 
                    112389968, 
                    219610602, 
                    171240434, 
                    1244943808, 
                    162874917, 
                    205197487, 
                    1297470850, 
                    996329443, 
                    469428185, 
                    1550941714, 
                    889950322, 
                    1361557655, 
                    2098314037, 
                    2111884458, 
                    1615329523, 
                    1533327546, 
                    730623547, 
                    1990617761, 
                    1774014640, 
                    1468939804, 
                    1908644751, 
                    1363837204, 
                    354330880, 
                    497056058, 
                    1553786088, 
                    734705441, 
                    412231429, 
                    1485573597, 
                    641500094, 
                    1468882710, 
                    1584844659, 
                    573787214, 
                    817309637, 
                    1514082219, 
                    846368747, 
                    39671754, 
                    1407492679, 
                    1537236573, 
                    1843798122, 
                    562049335, 
                    1321586171, 
                    366366375, 
                    1833456117, 
                    214194861, 
                    353408697, 
                    1229348926, 
                    1897400885, 
                    335875256, 
                    739958708, 
                    1064290574, 
                    1217762496, 
                    406487323, 
                    23881873, 
                    1602965936, 
                    1794097738, 
                    896036411, 
                    2012763369, 
                    1821668023, 
                    1838641367, 
                    1575653123, 
                    1940449705, 
                    1959380900, 
                    354829349, 
                    1148029122, 
                    2113580702, 
                    316163108, 
                    544248018, 
                    584231818, 
                    1265515711, 
                    1575657769, 
                    125834867, 
                    1340870621, 
                    146819639, 
                    1211965305, 
                    147353633, 
                    1542278376, 
                    1677864734, 
                    140136019, 
                    143647361, 
                    324437162, 
                    984788203, 
                    76356173, 
                    745614889, 
                    1724693167, 
                    251120214, 
                    1178357336, 
                    549905341, 
                    1361827348, 
                    1867468128, 
                    2097815983, 
                    174392032, 
                    1733308303, 
                    1846078853, 
                    268144999, 
                    769083277, 
                    1509688918, 
                    11537026, 
                    685426995, 
                    248097806, 
                    37245589, 
                    685100908, 
                    1313169067, 
                    1217843192, 
                    1311784586, 
                    938455707, 
                    2024375522, 
                    259667684, 
                    959400215, 
                    1455612303, 
                    251819362, 
                    1365655324, 
                    1872627350, 
                    1678020662, 
                    1514204205, 
                    590864920, 
                    1864093532, 
                    1213766011, 
                    777619829, 
                    896908908, 
                    935223366, 
                    1913741414, 
                    1329904317, 
                    864247337, 
                    1315183375, 
                    1401265737, 
                    540010211, 
                    1642275415, 
                    2026158287, 
                    442882028, 
                    785148362, 
                    1530741350, 
                    992437739, 
                    2039521860, 
                    106401772, 
                    1786819901, 
                    1819102783, 
                    1005996628, 
                    1581313950, 
                    786237460, 
                    374228339, 
                    918689652, 
                    1737988773, 
                    2053698692, 
                    1615648766, 
                    732160659, 
                    449248329, 
                    55287641, 
                    331874648, 
                    1824763726, 
                    1052473392, 
                    295922907, 
                    1381400844, 
                    1936001734, 
                    1460358087, 
                    270987822, 
                    1502680238, 
                    448921730, 
                    2050143464, 
                    2058002496, 
                    398445496, 
                    382100107, 
                    380993044, 
                    516518187, 
                    670463941, 
                    868561659, 
                    373217585, 
                    1980589137, 
                    1571618890, 
                    1874867951, 
                    919245784, 
                    858096904, 
                    1779935708, 
                    2138866016, 
                    522680569, 
                    16533714, 
                    175752641, 
                    1423689272, 
                    1396082218, 
                    583022716, 
                    952017408, 
                    484722570, 
                    1310400767, 
                    201394561, 
                    1537892283, 
                    489225455, 
                    149340506, 
                    1203919652, 
                    579163773, 
                    1982897597, 
                    284139663, 
                    1370181053, 
                    1103336811, 
                    1670795101, 
                    387791964, 
                    2139611879, 
                    537696608, 
                    1221470586, 
                    1383234751, 
                    747087107, 
                    358943074, 
                    616142839, 
                    631152398, 
                    604490344, 
                    905517942, 
                    194376488, 
                    663470846, 
                    1390018475, 
                    1413321165, 
                    1443824373, 
                    95235181, 
                    78990966, 
                    1200323159, 
                    1467120748, 
                    1105985088, 
                    2061206573, 
                    1219182987, 
                    179598483, 
                    1126109551, 
                    181238486, 
                    719221153, 
                    1316781580, 
                    1401425364, 
                    1736204940, 
                    1590728288, 
                    1696548378, 
                    1902243740, 
                    109140607, 
                    1751074052, 
                    530552337, 
                    1626320753, 
                    1101765702, 
                    40454521, 
                    648995111, 
                    224079642, 
                    335874569, 
                    2001053819, 
                    705910423, 
                    1443360266, 
                    1343515795, 
                    1973238256, 
                    906805678, 
                    1938082134, 
                    1282823047, 
                    1887662416, 
                    205148697, 
                    169857894, 
                    1783699710, 
                    564810013, 
                    474069038, 
                    920428892, 
                    358098125, 
                    95361035, 
                    1201996265, 
                    27865954, 
                    1189645141, 
                    1362201122, 
                    1042431105, 
                    1161245703, 
                    1356453211, 
                    439616395, 
                    554330239, 
                    1786428070, 
                    882768828, 
                    1964987267, 
                    1140953126, 
                    38536445, 
                    551328048, 
                    1243041106, 
                    770110519, 
                    60152754, 
                    513272564, 
                    883721864, 
                    1930077403, 
                    355483877, 
                    1959899122, 
                    1526183093, 
                    118602317, 
                    1996026171, 
                    1385579591, 
                    1526690484, 
                    118544030, 
                    1691814241, 
                    1277005014, 
                    1757607092, 
                    1268222628, 
                    1006404667, 
                    985941903, 
                    621129157, 
                    1181918148, 
                    1121157094, 
                    958622714, 
                    1692148367, 
                    86907055, 
                    903899400, 
                    1418908017, 
                    1267861255, 
                    1055313306, 
                    1465319427, 
                    746709290, 
                    166612252, 
                    1766013493, 
                    540658604, 
                    1942183141, 
                    413916284, 
                    407156328, 
                    1621859908, 
                    312767279, 
                    846512388, 
                    215450479, 
                    1810945695, 
                    1243598805, 
                    1193888581, 
                    1923149759, 
                    1977246374, 
                    321072365, 
                    1009999645, 
                    509423056, 
                    1272645383, 
                    696764639, 
                    134548459, 
                    1200078189, 
                    2077682538, 
                    61122958, 
                    1796437072, 
                    1249013687, 
                    968607844, 
                    796814809, 
                    1026178003, 
                    1084059507, 
                    692037867, 
                    470869787, 
                    800766537, 
                    1249316881, 
                    1218967339, 
                    1908160638, 
                    1725369073, 
                    1897114747, 
                    863088730, 
                    1350450764, 
                    1793846367, 
                    693637388, 
                    139429515, 
                    405678678, 
                    1518456100, 
                    2025041936, 
                    1912217780, 
                    1916482255, 
                    257144328, 
                    582827035, 
                    408908372, 
                    758438199, 
                    1930151570, 
                    768554788, 
                    612160831, 
                    1114017710, 
                    1835814602, 
                    479535646, 
                    145746069, 
                    1312386244, 
                    1586032131, 
                    825045099, 
                    1434072923, 
                    1909936528, 
                    1670896259, 
                    1340075908, 
                    442832268, 
                    2092055347, 
                    704182420, 
                    69085736, 
                    743186939, 
                    1260368545, 
                    1793817973, 
                    2069678266, 
                    1050401919, 
                    1588394718, 
                    1060648674, 
                    1672003860, 
                    690150505, 
                    1918878783, 
                    1484279554, 
                    1199609236, 
                    539670481, 
                    443350968, 
                    675151135, 
                    2081083315, 
                    688201864, 
                    32211749, 
                    637156050, 
                    104949629, 
                    72346036, 
                    1245833427, 
                    1751368678, 
                    1698186133, 
                    1911902280, 
                    968801268, 
                    1407048112, 
                    376976634, 
                    882266066, 
                    178380192, 
                    1582209668, 
                    1967646080, 
                    1212299835, 
                    188058592, 
                    1987123743, 
                    1296023474, 
                    1112103873, 
                    2007956951, 
                    1865636516, 
                    1171249760, 
                    53369036, 
                    163810742, 
                    1936868788, 
                    374350933, 
                    1975590337, 
                    386422895, 
                    285374618, 
                    990721955, 
                    1234785393, 
                    1737296591, 
                    651874044, 
                    410620519, 
                    1454899297, 
                    599232791, 
                    2144223347, 
                    1644837159, 
                    1656483514, 
                    95631840, 
                    157775986, 
                    81600651, 
                    181346606, 
                    683672040, 
                    789737794, 
                    511770313, 
                    336669115, 
                    1664117121, 
                    2134793048, 
                    351611889, 
                    603710872, 
                    1526611308, 
                    968979442, 
                    827728560, 
                    314058880, 
                    1613389937, 
                    51580593, 
                    2056018941, 
                    1456448286, 
                    1377017745, 
                    1870079443, 
                    1525479385, 
                    683426650, 
                    416326157, 
                    1289674888, 
                    1292453122, 
                    1673989795, 
                    1171589149, 
                    512746783, 
                    613067044, 
                    191318892, 
                    342286584, 
                    1787023607, 
                    1016472033, 
                    1850180965, 
                    1784035865, 
                    989903154, 
                    1517180643, 
                    1521556595, 
                    1425098475, 
                    37681818, 
                    311473216, 
                    399113494, 
                    2081246376, 
                    387011083, 
                    1855657732, 
                    768317149, 
                    1971629131, 
                    96561639, 
                    1988993007, 
                    547652198, 
                    88204406, 
                    188388873, 
                    279465769, 
                    373036044, 
                    779780248, 
                    1545657648, 
                    1912504096, 
                    1541480799, 
                    1644768319, 
                    985264165, 
                    1312563613, 
                    1151370338, 
                    1521726004, 
                    160292997, 
                    261424288, 
                    1887071348, 
                    2099991056, 
                    1125031242, 
                    677506662, 
                    623486783, 
                    681883597, 
                    534462346, 
                    31349811, 
                    1339335927, 
                    1558606227, 
                    1126365891, 
                    749663921, 
                    29315074, 
                    1581500803, 
                    524135973, 
                    1849844311, 
                    1075027510, 
                    671237423, 
                    65414846, 
                    103114486, 
                    153897711, 
                    1507557838, 
                    643435989, 
                    1070400717, 
                    238378217, 
                    1224882705, 
                    2123183491, 
                    2024271923, 
                    439834310, 
                    872601852, 
                    1307586525, 
                    1024871137, 
                    1920953379, 
                    125586795, 
                    2116070031, 
                    815809740, 
                    846597889, 
                    1566538624, 
                    1365506224, 
                    2013252248, 
                    1701225707, 
                    157039062, 
                    1087613489, 
                    961913464, 
                    1800898004, 
                    795993727, 
                    1883189022, 
                    2107463643, 
                    1120632346, 
                    1282903501, 
                    237536103, 
                    480132915, 
                    1456311158, 
                    57178511, 
                    107526577, 
                    379513510, 
                    1456555067, 
                    54630525, 
                    439128445, 
                    1546087725, 
                    706183753, 
                    657674070, 
                    1738999148, 
                    466734075, 
                    251019702, 
                    101494754, 
                    976194189, 
                    2051211926, 
                    1612914419, 
                    1855809880, 
                    1003246422, 
                    1655972533, 
                    1453214846, 
                    199646245, 
                    549372426, 
                    2144342296, 
                    419944349, 
                    1829006172, 
                    1416986360, 
                    1589868137, 
                    1489177330, 
                    15719848, 
                    903639577, 
                    1304414456, 
                    635065749, 
                    827453610, 
                    1716043626, 
                    1863774868, 
                    18060218, 
                    1736556521, 
                    1506738320, 
                    791967364, 
                    1127410179, 
                    1966902146, 
                    1307068495, 
                    1043551637, 
                    565523561, 
                    620879414, 
                    710893762, 
                    1699403250, 
                    1967283185, 
                    1979460743, 
                    494549224, 
                    1412306113, 
                    279657079, 
                    729047217, 
                    1174401716, 
                    1256664913, 
                    1655289732, 
                    110667928, 
                    2107052808, 
                    1775032542, 
                    785127812, 
                    996743955, 
                    56910395, 
                    690463905, 
                    1901518140, 
                    434584692, 
                    1979151973, 
                    1571049739, 
                    532934775, 
                    1259902968, 
                    2033151708, 
                    2023841545, 
                    349071560, 
                    211279058, 
                    528562354, 
                    1633796347, 
                    1040061397, 
                    1653304436, 
                    1578818735, 
                    1946548582, 
                    1118112410, 
                    1865066757, 
                    1770068599, 
                    1657200234, 
                    1668654271, 
                    1638817111, 
                    1024757377, 
                    2053502179, 
                    1800535541, 
                    459378713, 
                    208485136, 
                    2054875937, 
                    1776987360, 
                    1879189425, 
                    6839552, 
                    130666224, 
                    1909991751, 
                    616604590, 
                    1289517144, 
                    130938869, 
                    789211088, 
                    1287327670, 
                    1166468475, 
                    707380217, 
                    2093792682, 
                    618191326, 
                    1063234553, 
                    68378021, 
                    200484863, 
                    1688089016, 
                    216603516, 
                    1985296, 
                    679332840, 
                    160504226, 
                    656920132, 
                    1067544702, 
                    1374159003, 
                    547193808, 
                    1169293281, 
                    262701029, 
                    1557310962, 
                    2073133441, 
                    1917997845, 
                    73556062, 
                    1051417832, 
                    2125759418, 
                    246854185, 
                    617365782, 
                    204439506, 
                    397896130, 
                    1871288243, 
                    423456807, 
                    363787292, 
                    1447879866, 
                    1157337494, 
                    1978268387, 
                    698598282, 
                    1062688382, 
                    1710891199, 
                    1050462945, 
                    575582558, 
                    956379356, 
                    1853017316, 
                    112446525, 
                    242775197, 
                    206499840, 
                    1375543097, 
                    1616483134, 
                    1222269293, 
                    1086778497, 
                    903990868, 
                    1362797943, 
                    1594794956, 
                    1026816115, 
                    721111554, 
                    863561294, 
                    1516813472, 
                    1092912413, 
                    1803446032, 
                    2115516911, 
                    371337141, 
                    445868771, 
                    2011422162, 
                    1950072380, 
                    1964284420, 
                    1940630356, 
                    1785681651, 
                    1378936621, 
                    1150650379, 
                    826135392, 
                    368946420, 
                    311470621, 
                    983786256, 
                    118830336, 
                    1834602118, 
                    600931606, 
                    220116125, 
                    1805551320, 
                    1978264512, 
                    844917992, 
                    750216321, 
                    777854698, 
                    1542580136, 
                    1265144656, 
                    1641388909, 
                    508490300, 
                    976145498, 
                    1484454824, 
                    726768312, 
                    293776200, 
                    461454915, 
                    1753169516, 
                    1406725997, 
                    1742857935, 
                    679125804, 
                    129713787, 
                    1092440841, 
                    2050428583, 
                    295645752, 
                    449628488, 
                    568301836, 
                    2144090123, 
                    465832755, 
                    396133901, 
                    717832077, 
                    592520247, 
                    379011687, 
                    1475964620, 
                    1339697644, 
                    120179948, 
                    643445169, 
                    1858745799, 
                    1262131548, 
                    958528040, 
                    1365300590, 
                    1740966090, 
                    1050772282, 
                    746277506, 
                    308683471, 
                    1455794120, 
                    964484858, 
                    301226827, 
                    652168309, 
                    856874179, 
                    364680477, 
                    763260551, 
                    1052228271, 
                    1388411968, 
                    1587188179, 
                    1704888331, 
                    1655974412, 
                    317171189, 
                    1509905568, 
                    1528636024, 
                    276616156, 
                    753609845, 
                    312021943, 
                    1146446235, 
                    547312579, 
                    1048868662, 
                    129478613, 
                    1647664525, 
                    144757180, 
                    606588364, 
                    1797814678, 
                    750192763, 
                    491037968, 
                    448197957, 
                    377557345, 
                    1085643361, 
                    1226425152, 
                    346163335, 
                    1741745112, 
                    987335279, 
                    1632627277, 
                    267075009, 
                    1491921814, 
                    1756442223, 
                    31453424, 
                    2102055173, 
                    1687775623, 
                    1138083366, 
                    2036260088, 
                    1782292960, 
                    611689183, 
                    326273980, 
                    348840231, 
                    1880979171, 
                    681911884, 
                    611690745, 
                    1428944147, 
                    2051809694, 
                    198964927, 
                    1407298456, 
                    1326315507, 
                    1464303980, 
                    156469647, 
                    45579945, 
                    1206543148, 
                    1761971361, 
                    272222583, 
                    604030314, 
                    1010854623, 
                    501544818, 
                    478463179, 
                    1309811077, 
                    722909724, 
                    522570289, 
                    2043492394, 
                    9541147, 
                    1409171678, 
                    703063367, 
                    1114992811, 
                    592741053, 
                    1508576686, 
                    1138878894, 
                    1758888084, 
                    509947867, 
                    2142382828, 
                    1471540698, 
                    401352532, 
                    757542444, 
                    1913769720, 
                    1913350247, 
                    1804182861, 
                    1322099105, 
                    147198408, 
                    334446656, 
                    1808503419, 
                    168323297, 
                    110605362, 
                    1446341869, 
                    549899075, 
                    416965710, 
                    1829832590, 
                    1083745309, 
                    127228743, 
                    1534715270, 
                    1303829781, 
                    1449361753, 
                    1750847903, 
                    1973753589, 
                    1984970424, 
                    672370737, 
                    1350002714, 
                    725880780, 
                    936816883, 
                    1753707521, 
                    2046205417, 
                    187436613, 
                    1852899543, 
                    1794005427, 
                    50680764, 
                    1882486097, 
                    1360618829, 
                    1662163786, 
                    837744241, 
                    1244988023, 
                    844845604, 
                    1303847721, 
                    1162612669, 
                    388463068, 
                    861550517, 
                    1875169097, 
                    2046419432, 
                    2110313456, 
                    153164292, 
                    698027101, 
                    910392110, 
                    424831377, 
                    1011650151, 
                    224172814, 
                    1353601733, 
                    693021075, 
                    1868176442, 
                    575082590, 
                    920055667, 
                    1241398983, 
                    563347533, 
                    1078302081, 
                    385282222, 
                    540974534, 
                    435724886, 
                    1621066806, 
                    462907401, 
                    464083582, 
                    1395661105, 
                    814896625, 
                    1203830528, 
                    167668804, 
                    246001068, 
                    1029724367, 
                    689869666, 
                    2147465707, 
                    286749084, 
                    1362384835, 
                    1112203072, 
                    109801327, 
                    773434952, 
                    1387172905, 
                    572716488, 
                    238789782, 
                    843315411, 
                    1621374040, 
                    1323270109, 
                    1628726729, 
                    440403694, 
                    1505143336, 
                    14309655, 
                    785536239, 
                    742108119, 
                    1743828905, 
                    681640490, 
                    1914027170, 
                    918565499, 
                    621638135, 
                    2100221829, 
                    1387967358, 
                    1412261696, 
                    1582335850, 
                    714652351, 
                    1485751314, 
                    1641680220, 
                    742723306, 
                    178830309, 
                    2129409431, 
                    1681786795, 
                    1353619673, 
                    406271991, 
                    505791607, 
                    1610363165, 
                    810254340, 
                    467964031, 
                    1323658275, 
                    505585593, 
                    146492440, 
                    1845142770, 
                    961834493, 
                    297796697, 
                    981664319, 
                    23679888, 
                    2038001416, 
                    800586970, 
                    418294289, 
                    1573044332, 
                    649655810, 
                    348083877, 
                    923326143, 
                    1228900208, 
                    1812594596, 
                    1409646653, 
                    1871719361, 
                    845023278, 
                    1338582749, 
                    672520554, 
                    1234448821, 
                    744593209, 
                    100592105, 
                    1442543731, 
                    1341344325, 
                    2094423581, 
                    1234267668, 
                    1098871345, 
                    1656001695, 
                    1322656721, 
                    2079337426, 
                    1275864874, 
                    1505465862, 
                    1408441577, 
                    772073059, 
                    923979012, 
                    1138387336, 
                    1090170661, 
                    430597377, 
                    1558655962, 
                    824134582, 
                    685164344, 
                    1223385931, 
                    1317162621, 
                    1676658146, 
                    1781325554, 
                    758460652, 
                    124719465, 
                    741161042, 
                    1243628601, 
                    1886127451, 
                    2112714709, 
                    1276864929, 
                    651137721, 
                    1418620419, 
                    1549382878, 
                    1744550665, 
                    1666774409, 
                    1103936019, 
                    1034724385, 
                    936895867, 
                    939130071, 
                    1292068922, 
                    1243121215, 
                    1641190553, 
                    1521274583, 
                    990101662, 
                    1662368213, 
                    456827149, 
                    888615584, 
                    271259317, 
                    781548700, 
                    414425901, 
                    1927410434, 
                    1995869619, 
                    549284477, 
                    1668690925, 
                    930913131, 
                    1913369232, 
                    1707502418, 
                    1335962929, 
                    1109548203, 
                    357710303, 
                    412373094, 
                    1584012917, 
                    2114106364, 
                    2146483592, 
                    854328141, 
                    2137304805, 
                    1370173828, 
                    1326911994, 
                    1619096574, 
                    2133718289, 
                    1543356639, 
                    621760095, 
                    2032488158, 
                    1540579069, 
                    2127748363, 
                    1823455715, 
                    155383563, 
                    791223892, 
                    1243576086, 
                    1815375963, 
                    2000029105, 
                    972369284, 
                    1104578751, 
                    1698288808, 
                    1496938142, 
                    802751749, 
                    869335942, 
                    2028175600, 
                    813637534, 
                    1900888824, 
                    1543917248, 
                    1846245103, 
                    1974831311, 
                    581419768, 
                    879695828, 
                    1806591945, 
                    1674567836, 
                    1522274638, 
                    135773521, 
                    1672547055, 
                    1234136968, 
                    1709187237, 
                    799646390, 
                    795314058, 
                    1018552909, 
                    1305650339, 
                    2110865108, 
                    1156189055, 
                    1688426209, 
                    1254941063, 
                    1757985669, 
                    916278526, 
                    92386843, 
                    1441655887, 
                    505164845, 
                    1587487457, 
                    479434166, 
                    415817556, 
                    649545450, 
                    51576392, 
                    1267968863, 
                    1489481875, 
                    513274460, 
                    1865691397, 
                    589801041, 
                    1844595183, 
                    794412431, 
                    1451068390, 
                    660883241, 
                    321156418, 
                    148887879, 
                    780592572, 
                    655450371, 
                    1718512678, 
                    581238995, 
                    290841868, 
                    172722894, 
                    309264693, 
                    679735899, 
                    191287803, 
                    839370288, 
                    1860630534, 
                    339749391, 
                    1706180118, 
                    142903155, 
                    627638722, 
                    1753858260, 
                    533175424, 
                    76254923, 
                    1439692018, 
                    1327157779, 
                    1258750280, 
                    872729188, 
                    84197129, 
                    404578192, 
                    1892138740, 
                    1195912777, 
                    1081438640, 
                    205513017, 
                    1321441373, 
                    511237908, 
                    659796718, 
                    495305814, 
                    1367269791, 
                    1106053184, 
                    977393097, 
                    260828155, 
                    521357812, 
                    860416892, 
                    214322977, 
                    1414764563, 
                    170169473, 
                    1883565304, 
                    458257647, 
                    1359689751, 
                    1554821976, 
                    1149732484, 
                    954577989, 
                    1722788242, 
                    2109645966, 
                    90736923, 
                    261237007, 
                    1374813467, 
                    1368674870, 
                    1141482286, 
                    1037621246, 
                    2055347031, 
                    571253242, 
                    1313934486, 
                    836583902, 
                    1242412738, 
                    1238767901, 
                    103751676, 
                    1505778173, 
                    1827533542, 
                    179573570, 
                    1365324720, 
                    1119963247, 
                    600126934, 
                    1312993705, 
                    366810567, 
                    1232500448, 
                    1820242179, 
                    2009415593, 
                    24927455, 
                    1156988306, 
                    1522668623, 
                    414471541, 
                    871991025, 
                    997239863, 
                    742406256, 
                    241334788, 
                    1506134045, 
                    243350698, 
                    1230704450, 
                    250000901, 
                    1432466898, 
                    1274114591, 
                    225787505, 
                    68431938, 
                    1069529713, 
                    1837058560, 
                    1354906973, 
                    23832990, 
                    1119393886, 
                    175996662, 
                    66417797, 
                    377787131, 
                    778207752, 
                    1180116181, 
                    189497256, 
                    29769237, 
                    354451055, 
                    409794537, 
                    1742835399, 
                    1005720122, 
                    588478475, 
                    1512881521, 
                    1343747415, 
                    2131977627, 
                    1662436270, 
                    1640875490, 
                    1846745864, 
                    316694623, 
                    94177646, 
                    1001077950, 
                    1880117503, 
                    2007884625, 
                    275073723, 
                    1577532641, 
                    894590319, 
                    91210129, 
                    894175742, 
                    531694996, 
                    243463992, 
                    677235654, 
                    2025077122, 
                    1796409189, 
                    890021707, 
                    1996414440, 
                    1090570509, 
                    1144881492, 
                    1783747436, 
                    1839358491, 
                    807742607, 
                    712637019, 
                    2034367380, 
                    1096339508, 
                    647998946, 
                    224984328, 
                    1809006073, 
                    2067069024, 
                    2077850823, 
                    241293525, 
                    553479315, 
                    1576137870, 
                    2137796343, 
                    1038212350, 
                    2077138991, 
                    118315936, 
                    443362806, 
                    206016819, 
                    102713408, 
                    1348158758, 
                    285525862, 
                    98287127, 
                    1283077142, 
                    1970239706, 
                    166330545, 
                    1065599745, 
                    1128126647, 
                    939552933, 
                    622859814, 
                    1494816622, 
                    1041407118, 
                    517554778, 
                    2004611701, 
                    7387373, 
                    1656435663, 
                    1529024274, 
                    1114194217, 
                    783777995, 
                    1359885679, 
                    50089395, 
                    1916010215, 
                    975004942, 
                    160842953, 
                    652882217, 
                    2125699328, 
                    814809769, 
                    686922958, 
                    986864772, 
                    1866753845, 
                    771705771, 
                    1553051634, 
                    884553690, 
                    1042168084, 
                    435588678, 
                    1553832629, 
                    709455480, 
                    1577043524, 
                    64127674, 
                    930008963, 
                    1729882848, 
                    1244341328, 
                    869453140, 
                    1444209210, 
                    583034201, 
                    1347370054, 
                    35924537, 
                    1719009816, 
                    2130408970, 
                    1529260334, 
                    548114717, 
                    1151605366, 
                    1807068458, 
                    993614787, 
                    52624013, 
                    1579632190, 
                    1458004567, 
                    2084927821, 
                    630194925, 
                    1992024025, 
                    1499004423, 
                    378676787, 
                    141261875, 
                    1220282735, 
                    1998637690, 
                    2089248635, 
                    156853428, 
                    1622870341, 
                    1569023023, 
                    601038391, 
                    946980183, 
                    2099464397, 
                    1050066543, 
                    2001252679, 
                    1777486478, 
                    953231714, 
                    1046557075, 
                    1678279379, 
                    1725292399, 
                    1452995810, 
                    2089774791, 
                    1243283600, 
                    703997635, 
                    1605088085, 
                    1318639128, 
                    1767584052, 
                    1893466823, 
                    2038422550, 
                    989544071, 
                    1003440135, 
                    95828062, 
                    772011306, 
                    946848599, 
                    219587296, 
                    1578488187, 
                    1351206061, 
                    1103079453, 
                    1796654052, 
                    1593055167, 
                    641269213, 
                    1190516626, 
                    560537843, 
                    149986793, 
                    1529370579, 
                    582280151, 
                    596133967, 
                    101538823, 
                    1953299426, 
                    1363611956, 
                    1246875946, 
                    533075115, 
                    1927208835, 
                    359635422, 
                    1324682762, 
                    2049732881, 
                    255720823, 
                    1822162799, 
                    683657437, 
                    2049127254, 
                    231053638, 
                    195781812, 
                    265914525, 
                    633326270, 
                    565582888, 
                    505210329, 
                    174968877, 
                    1152615798, 
                    830479247, 
                    422764492, 
                    426280417, 
                    1997635908, 
                    1397386670, 
                    85224212, 
                    1084023186, 
                    262479184, 
                    1529236948, 
                    1093296807, 
                    1322110703, 
                    1022807934, 
                    722505161, 
                    1666045229, 
                    2087651044, 
                    674810594, 
                    1890151772, 
                    470365020, 
                    316102874, 
                    412375884, 
                    1769649484, 
                    317338062, 
                    1322767364, 
                    1676526909, 
                    419422016, 
                    1895010445, 
                    1362001529, 
                    445487401, 
                    924602101, 
                    2074695220, 
                    1731887552, 
                    1024160250, 
                    407311274, 
                    1591001816, 
                    1418543223, 
                    1530534934, 
                    937331539, 
                    1396723685, 
                    1283172092, 
                    1841984623, 
                    1423095883, 
                    1062203578, 
                    520495933, 
                    1309907663, 
                    500052096, 
                    1808333150, 
                    1326622093, 
                    712492056, 
                    255614415, 
                    1738587578, 
                    890658145, 
                    95217868, 
                    189107455, 
                    1910076640, 
                    1530449961, 
                    513141185, 
                    1247480775, 
                    897237155, 
                    1578213892, 
                    1649859872, 
                    870706330, 
                    638535785, 
                    1485360730, 
                    1602025375, 
                    1508892902, 
                    297950453, 
                    615496660, 
                    1278986992, 
                    247502006, 
                    557116110, 
                    1884962702, 
                    493428087, 
                    1334676575, 
                    621601898, 
                    1136763648, 
                    707445906, 
                    1944325776, 
                    12859701, 
                    1176474813, 
                    758572513, 
                    568388352, 
                    649509473, 
                    189872986, 
                    1333498170, 
                    1184037075, 
                    1636669684, 
                    835052795, 
                    644718281, 
                    60551855, 
                    905402038, 
                    283054159, 
                    40094384, 
                    1965993440, 
                    1780795867, 
                    971278293, 
                    784560098, 
                    1724326495, 
                    1065954205, 
                    1948498408, 
                    202101643, 
                    1192836490, 
                    47635101, 
                    464990050, 
                    1845981952, 
                    2001108523, 
                    397230058, 
                    908024940, 
                    1714989204, 
                    773312992, 
                    823004055, 
                    716299056, 
                    1234621074, 
                    1868245989, 
                    819641379, 
                    1081471520, 
                    221196857, 
                    448662799, 
                    151862560, 
                    417988300, 
                    2019706865, 
                    1610381305, 
                    2118262026, 
                    1218435137, 
                    1489583615, 
                    274061951, 
                    1844868318, 
                    674918294, 
                    1701364355, 
                    1797807252, 
                    352203550, 
                    1130603058, 
                    878371571, 
                    211844940, 
                    974373170, 
                    1713219670, 
                    520753251, 
                    184519423, 
                    491374681, 
                    1479873294, 
                    786807017, 
                    728644744, 
                    1267547238, 
                    2018888936, 
                    1385031447, 
                    189102982, 
                    1195916732, 
                    319332042, 
                    1146352061, 
                    699324347, 
                    750081436, 
                    335897299, 
                    1572463935, 
                    647965905, 
                    2076275190, 
                    739203985, 
                    1222058111, 
                    976683611, 
                    1122890082, 
                    1571920001, 
                    156240205, 
                    1869795411, 
                    1354144232, 
                    2064665599, 
                    421109442, 
                    1839884644, 
                    1985411132, 
                    1022776134, 
                    893872819, 
                    1253905356, 
                    560718269, 
                    36677434, 
                    2104771765, 
                    819472913, 
                    1778664930, 
                    1291062121, 
                    342834067, 
                    99373090, 
                    1980887337, 
                    1300480633, 
                    1225628866, 
                    1525536276, 
                    1676049880, 
                    1002040008, 
                    1047725816, 
                    16306251, 
                    1705622770, 
                    230405666, 
                    283053397, 
                    235169185, 
                    491161559, 
                    1691553287, 
                    1209112988, 
                    1066938327, 
                    1323633089, 
                    1064495253, 
                    1521984159, 
                    1350365286, 
                    1597779494, 
                    1692630450, 
                    351175497, 
                    173140598, 
                    1572942870, 
                    2039930352, 
                    138606078, 
                    713404002, 
                    378609181, 
                    752991022, 
                    1016784622, 
                    785213069, 
                    396369918, 
                    1122685021, 
                    1143279921, 
                    1969893096, 
                    346291135, 
                    778187576, 
                    193745531, 
                    352104224, 
                    1016939783, 
                    404803191, 
                    134261874, 
                    1755005466, 
                    739722737, 
                    658703634, 
                    762743797, 
                    1016648629, 
                    975048093, 
                    1037833438, 
                    1643323471, 
                    714169677, 
                    1916561609, 
                    1139952428, 
                    649077243, 
                    288256887, 
                    949305136, 
                    1052488268, 
                    2100077053, 
                    1783603175, 
                    863433930, 
                    334321814, 
                    1785180717, 
                    952631748, 
                    1361104691, 
                    1645323975, 
                    1986282914, 
                    1515960185, 
                    548273366, 
                    1386703539, 
                    720647192, 
                    545445513, 
                    870749722, 
                    1169879935, 
                    333425503, 
                    1192976303, 
                    1558368576, 
                    743653678, 
                    1580901508, 
                    914239236, 
                    1277186555, 
                    1269441096, 
                    1885839556, 
                    1488259390, 
                    1257151198, 
                    302614945, 
                    1016135107, 
                    1403901137, 
                    473607778, 
                    855023034, 
                    1020587960, 
                    1441286514, 
                    825594170, 
                    557626003, 
                    1636153941, 
                    682617969, 
                    767106121, 
                    1329113773, 
                    393900775, 
                    1241882409, 
                    819904367, 
                    1394267259, 
                    468375263, 
                    1735828201, 
                    317186246, 
                    1097877958, 
                    1990903602, 
                    746681674, 
                    806526925, 
                    1603584587, 
                    877371958, 
                    205651458, 
                    1619070407, 
                    1185837817, 
                    506416620, 
                    1741476481, 
                    595965905, 
                    296921327, 
                    1842964197, 
                    1058489746, 
                    629188868, 
                    582381777, 
                    1042352407, 
                    1840733979, 
                    366115579, 
                    1426844325, 
                    1867334990, 
                    313123719, 
                    1681209641, 
                    1798291181, 
                    425870182, 
                    229254803, 
                    349752903, 
                    339019099, 
                    94334869, 
                    2030402943, 
                    801065833, 
                    150011355, 
                    1171073144, 
                    159273240, 
                    459194990, 
                    269453433, 
                    597374212, 
                    1017506838, 
                    2125134723, 
                    814936502, 
                    1969699754, 
                    1787240000, 
                    51209383, 
                    2042161107, 
                    86652064, 
                    470184794, 
                    1633633223, 
                    1482894676, 
                    612693541, 
                    237522590, 
                    351914852, 
                    775124931, 
                    1369712622, 
                    1037825568, 
                    1378026615, 
                    1677779883, 
                    1212955680, 
                    1155719391, 
                    1177714405, 
                    648117155, 
                    2003382202, 
                    1280051308, 
                    1091502948, 
                    623497324, 
                    940410648, 
                    445954550, 
                    1273331830, 
                    1683690957, 
                    599294756, 
                    359735435, 
                    2132491212, 
                    24845569, 
                    1863082903, 
                    1698662724, 
                    1604628218, 
                    80094990, 
                    261914336, 
                    1786532181, 
                    1711639117, 
                    2103169035, 
                    743105227, 
                    1014341874, 
                    1873809205, 
                    2004295926, 
                    1678488091, 
                    25940902, 
                    927782380, 
                    133247576, 
                    928730272, 
                    928898754, 
                    1203981400, 
                    1589138468, 
                    1987276080, 
                    1477017568, 
                    959037947, 
                    689648446, 
                    695737052, 
                    1575195706, 
                    1101750459, 
                    1788181161, 
                    1344336611, 
                    2097425913, 
                    883599920, 
                    252958106, 
                    252515025, 
                    327069283, 
                    1059525675, 
                    1818533545, 
                    1580680997, 
                    1297931625, 
                    1415865547, 
                    1573907146, 
                    1591563921, 
                    1222029017, 
                    2052495575, 
                    989040328, 
                    1553725750, 
                    1234690669, 
                    1092492880, 
                    914469746, 
                    1665655817, 
                    1140084254, 
                    754960685, 
                    1817879649, 
                    1303237682, 
                    543352744, 
                    185053136, 
                    386065335, 
                    739624777, 
                    914979772, 
                    1531841585, 
                    834202277, 
                    684781722, 
                    2070941603, 
                    758832424, 
                    793162961, 
                    130741954, 
                    1620851099, 
                    1751780901, 
                    1351418808, 
                    1113898874, 
                    1256732482, 
                    700050226, 
                    1778282294, 
                    1660516854, 
                    1777557901, 
                    2145058194, 
                    765247063, 
                    1572005640, 
                    2117481266, 
                    1283406343, 
                    1608530030, 
                    482702826, 
                    187280713, 
                    122525344, 
                    204252357, 
                    1342465228, 
                    1213203918, 
                    1097204071, 
                    1856645928, 
                    142016147, 
                    673460340, 
                    1078908768, 
                    665701225, 
                    1913573687, 
                    581663270, 
                    889125424, 
                    1668105965, 
                    463196593, 
                    1259332614, 
                    858298374, 
                    2080358298, 
                    1630393415, 
                    1888557719, 
                    1948054519, 
                    408923335, 
                    440034028, 
                    1124162038, 
                    157362795, 
                    1673163428, 
                    545778197, 
                    1567289720, 
                    961543342, 
                    769627158, 
                    1779057076, 
                    2070795202, 
                    351499451, 
                    497501009, 
                    1948416259, 
                    554580067, 
                    1598181380, 
                    1065021683, 
                    523647028, 
                    2042618620, 
                    1209402661, 
                    440438534, 
                    177823714, 
                    34349001, 
                    2012192254, 
                    1078853584, 
                    888432477, 
                    476952229, 
                    302050470, 
                    312673026, 
                    1259182892, 
                    1350531692, 
                    2125620262, 
                    741628754, 
                    386709841, 
                    1861085656, 
                    1911701976, 
                    218303190, 
                    1055841123, 
                    1571524290, 
                    1310867731, 
                    722210074, 
                    1859400645, 
                    309281610, 
                    1034127796, 
                    1990262132, 
                    230163819, 
                    391624415, 
                    1867173353, 
                    2056100173, 
                    1808634881, 
                    1940760338, 
                    1556711270, 
                    1735258442, 
                    679155058, 
                    1507615985, 
                    231099621, 
                    405685027, 
                    1259453431, 
                    1225992858, 
                    784730951, 
                    68825968, 
                    1265239250, 
                    648870316, 
                    1657927913, 
                    428525384, 
                    2092658587, 
                    1757354344, 
                    110791168, 
                    87330603, 
                    790361738, 
                    1379878190, 
                    9180560, 
                    1099606385, 
                    731750889, 
                    487192587, 
                    728521536, 
                    2016025751, 
                    1147704852, 
                    21930122, 
                    848689765, 
                    496808062, 
                    757262523, 
                    393433944, 
                    651521792, 
                    1465906201, 
                    1941304069, 
                    390361820, 
                    62473696, 
                    1026577503, 
                    1629986035, 
                    1506016949, 
                    1106333406, 
                    1977331912, 
                    786793339, 
                    1242041763, 
                    1604454471, 
                    1210530329, 
                    798837344, 
                    605602412, 
                    2045087192, 
                    620293122, 
                    280833247, 
                    1779842750, 
                    1265738435, 
                    428756691, 
                    1931579778, 
                    457104885, 
                    1003507553, 
                    191962471, 
                    779094449, 
                    362557517, 
                    1405463822, 
                    1237523309, 
                    377303093, 
                    287922889, 
                    1459047092, 
                    871805306, 
                    2144832171, 
                    192021712, 
                    634704962, 
                    1702296767, 
                    1694880648, 
                    1231697312, 
                    604828215, 
                    1431828436, 
                    273544784, 
                    179332295, 
                    312813046, 
                    1637192773, 
                    1030221763, 
                    1665474854, 
                    1217188407, 
                    542102440, 
                    124326577, 
                    228396643, 
                    215974815, 
                    1124903420, 
                    1275179156, 
                    222765101, 
                    1681810070, 
                    1484199184, 
                    1534337914, 
                    2017994872, 
                    247483054, 
                    1267428518, 
                    100553127, 
                    2016293744, 
                    1600028819, 
                    498870450, 
                    1930478318, 
                    732649165, 
                    1213181805, 
                    606815632, 
                    2118381097, 
                    342790425, 
                    1072896121, 
                    1196619582, 
                    1175014535, 
                    1981393646, 
                    155211907, 
                    1752247483, 
                    144291839, 
                    1513798427, 
                    1309224355, 
                    1261103242, 
                    1292852757, 
                    863361382, 
                    1113196732, 
                    148906450, 
                    71948074, 
                    334143672, 
                    1744109797, 
                    1922067070, 
                    657695289, 
                    1297989425, 
                    167958853, 
                    1824369423, 
                    984214258, 
                    1484883344, 
                    1331275309, 
                    404734687, 
                    726787123, 
                    1961426243, 
                    1854198102, 
                    297572598, 
                    452293049, 
                    610372775, 
                    571204990, 
                    1929019799, 
                    1302984169, 
                    1166838880, 
                    2097372532, 
                    1441269157, 
                    67553194, 
                    2077046234, 
                    1339907345, 
                    20539487, 
                    708770517, 
                    1133863459, 
                    2122059408, 
                    1384675392, 
                    903097012, 
                    1451122369, 
                    426922376, 
                    1596334646, 
                    1136023015, 
                    1438598382, 
                    2096603990, 
                    820391672, 
                    174831572, 
                    1396010345, 
                    212405324, 
                    1837614838, 
                    650118337, 
                    1897960867, 
                    1025460360, 
                    330349243, 
                    1807083972, 
                    1011651757, 
                    808810193, 
                    682479982, 
                    292156392, 
                    1331660580, 
                    993405928, 
                    1052592841, 
                    384254787, 
                    302840640, 
                    1854513876, 
                    728132702, 
                    2105565727, 
                    147419366, 
                    1115598906, 
                    1997834446, 
                    1510307583, 
                    2094083564, 
                    1649121322, 
                    1423148401, 
                    1534503867, 
                    257863456, 
                    1309033230, 
                    1161178314, 
                    661252432, 
                    1898296965, 
                    1754188227, 
                    2054457471, 
                    954433556, 
                    259757694, 
                    791150820, 
                    317075974, 
                    1051585874, 
                    1009558102, 
                    360939162, 
                    1844602407, 
                    325053266, 
                    1439579426, 
                    1092519000, 
                    1718920079, 
                    457716441, 
                    1521813182, 
                    1212079859, 
                    833182375, 
                    1731568153, 
                    1368471288, 
                    862309592, 
                    27412206, 
                    280411439, 
                    362054525, 
                    327307255, 
                    703518420, 
                    248839545, 
                    1749795606, 
                    943329023, 
                    1549220516, 
                    1850102174, 
                    1795115526, 
                    21227550, 
                    541343074, 
                    1724956000, 
                    1086432104, 
                    98159285, 
                    124497093, 
                    1659173467, 
                    1537437902, 
                    1824030475, 
                    1096007625, 
                    1933963851, 
                    1418480146, 
                    1672781180, 
                    70728157, 
                    1001564564, 
                    2077684890, 
                    965431960, 
                    12690685, 
                    1193267244, 
                    475850855, 
                    1577093808, 
                    1440264791, 
                    1035987373, 
                    1726776021, 
                    1774046032, 
                    592379031, 
                    2079934086, 
                    87632400, 
                    68236429, 
                    1449273915, 
                    66229079, 
                    959202293, 
                    2141983880, 
                    677421387, 
                    1418351876, 
                    551175926, 
                    2141447726, 
                    1518767984, 
                    1423653897, 
                    1087582766, 
                    1321492555, 
                    194130251, 
                    1691924460, 
                    1913785614, 
                    240932002, 
                    1009414940, 
                    836756992, 
                    256579098, 
                    1849437503, 
                    318638302, 
                    784363646, 
                    930638338, 
                    355953272, 
                    1374251319, 
                    218021718, 
                    728446406, 
                    1652839348, 
                    2145663626, 
                    1459869719, 
                    1653263901, 
                    192046654, 
                    1571541067, 
                    1469201473, 
                    374756560, 
                    1029778546, 
                    974761558, 
                    1423979913, 
                    995359793, 
                    799859928, 
                    450388638, 
                    2083720811, 
                    1594147623, 
                    736520435, 
                    105684478, 
                    1301841947, 
                    1382963557, 
                    1895823978, 
                    1269685406, 
                    1485844019, 
                    764631092, 
                    1903105686, 
                    1823354988, 
                    385678544, 
                    1897081774, 
                    664910269, 
                    1283074388, 
                    603249021, 
                    767732561, 
                    459399669, 
                    689905470, 
                    1045820225, 
                    2143267747, 
                    58898265, 
                    1917873643, 
                    895536112, 
                    1897435135, 
                    872412425, 
                    1317167900, 
                    884007068, 
                    1413654091, 
                    1732918674, 
                    1988880846, 
                    1604202817, 
                    1399048865, 
                    382401138, 
                    1337699670, 
                    194117903, 
                    250268794, 
                    72409372, 
                    982541808, 
                    980106075, 
                    383153942, 
                    659819607, 
                    695238627, 
                    1897641862, 
                    516175313, 
                    1185862523, 
                    1719603346, 
                    1857329938, 
                    1894187805, 
                    371512537, 
                    656247352, 
                    535960124, 
                    109954458, 
                    1552052060, 
                    2087936711, 
                    1535249358, 
                    966130439, 
                    1357632013, 
                    1551890459, 
                    510551132, 
                    578656078, 
                    385678338, 
                    72189928, 
                    1179196065, 
                    2061708487, 
                    219152171, 
                    1134113326, 
                    1514680636, 
                    1474694246, 
                    1088956485, 
                    352980227, 
                    695323189, 
                    1624341508, 
                    1857283042, 
                    662666283, 
                    1483448140, 
                    1511143285, 
                    20231781, 
                    379360799, 
                    711572612, 
                    1300292726, 
                    1607321609, 
                    1137302910, 
                    1042141554, 
                    1076671322, 
                    1452920722, 
                    1494248359, 
                    1994480452, 
                    441948074, 
                    1949933959, 
                    1375471111, 
                    1040120428, 
                    668002560, 
                    471990676, 
                    401449997, 
                    2144959251, 
                    587629679, 
                    1663526209, 
                    1983417022, 
                    297023142, 
                    51749197, 
                    204922710, 
                    382635692, 
                    805231320, 
                    18532310, 
                    2108407810, 
                    1059102263, 
                    400155063, 
                    889385777, 
                    604488571, 
                    24106073, 
                    945898658, 
                    978271214, 
                    840317847, 
                    1357742053, 
                    1118818116, 
                    1395859075, 
                    1177532021, 
                    102524743, 
                    608787765, 
                    872387459, 
                    1287116521, 
                    1072732562, 
                    1672243934, 
                    1860969021, 
                    1460343446, 
                    27320629, 
                    1152350832, 
                    1455833045, 
                    665190679, 
                    895818461, 
                    1995100723, 
                    184298406, 
                    82337657, 
                    659823415, 
                    1095370016, 
                    1224685917, 
                    332071590, 
                    1023609244, 
                    1115747159, 
                    393818459, 
                    1094093296, 
                    1105094675, 
                    1984943150, 
                    1925827886, 
                    429572453, 
                    61849214, 
                    1975168360, 
                    1261732270, 
                    1430115528, 
                    749100176, 
                    1557581305, 
                    1561001466, 
                    1374629257, 
                    1572119330, 
                    912116323, 
                    1279673795, 
                    857875405, 
                    1091745946, 
                    705672511, 
                    2081087181, 
                    2054235078, 
                    1091805665, 
                    224195098, 
                    1856153757, 
                    176488997, 
                    761600252, 
                    895933557, 
                    180494432, 
                    262372037, 
                    2041615846, 
                    1063787485, 
                    153922777, 
                    1134261231, 
                    214969306, 
                    1925777810, 
                    182021846, 
                    1235273059, 
                    1893899695, 
                    1431396568, 
                    1398494232, 
                    199635916, 
                    2038102209, 
                    25717517, 
                    2063574150, 
                    1485720803, 
                    434099257, 
                    957152796, 
                    657701974, 
                    1895190739, 
                    1963179868, 
                    366810512, 
                    1387809291, 
                    317936733, 
                    1182143625, 
                    487067028, 
                    2287631, 
                    880899577, 
                    128789393, 
                    1749338889, 
                    1815455848, 
                    1313399304, 
                    1794673928, 
                    999360233, 
                    1535983329, 
                    1832796338, 
                    1403658528, 
                    426740235, 
                    1159659951, 
                    1793825167, 
                    730094477, 
                    44400736, 
                    1111459357, 
                    1807833025, 
                    1454661926, 
                    1881451265, 
                    16132869, 
                    1066088148, 
                    308104595, 
                    370432954, 
                    1889873387, 
                    1951931103, 
                    238231583, 
                    432787340, 
                    446675816, 
                    1674805334, 
                    1823461841, 
                    1983469691, 
                    2099601253, 
                    1875385925, 
                    1923490179, 
                    1448605916, 
                    1106483666, 
                    144560806, 
                    1763424367, 
                    85094928, 
                    552445635, 
                    1038741976, 
                    637217835, 
                    230777812, 
                    82062275, 
                    7359022, 
                    1944976492, 
                    1011360454, 
                    1165096262, 
                    1918779132, 
                    1402834802, 
                    1727459913, 
                    1010758454, 
                    1448176007, 
                    470934159, 
                    1083683130, 
                    572794982, 
                    1905840086, 
                    2006949149, 
                    2011008392, 
                    1075167721, 
                    1361886588, 
                    552684417, 
                    2008661642, 
                    9334497, 
                    1567672484, 
                    474622629, 
                    1431757673, 
                    2017818635, 
                    1428972208, 
                    1085400717, 
                    966898551, 
                    44408658, 
                    1369566998, 
                    1329005630, 
                    1124874540, 
                    428870313, 
                    77326783, 
                    288370679, 
                    1882514365, 
                    6954611, 
                    1374354776, 
                    1415174725, 
                    675380331, 
                    271970532, 
                    96001928, 
                    972711237, 
                    651425246, 
                    1404451766, 
                    839807049, 
                    875810934, 
                    1348127227, 
                    285095304, 
                    1899899622, 
                    1157410854, 
                    1338042694, 
                    486057559, 
                    776039840, 
                    221443315, 
                    661873438, 
                    1680220040, 
                    513218819, 
                    1141025466, 
                    1883607701, 
                    833378415, 
                    435936251, 
                    1683051255, 
                    1788675103, 
                    119170377, 
                    1493543266, 
                    654812817, 
                    495468199, 
                    1617469407, 
                    124434784, 
                    2004053781, 
                    1848296592, 
                    2094195510, 
                    2024787733, 
                    1736691110, 
                    2060816216, 
                    594961247, 
                    1970681030, 
                    27305907, 
                    1178011586, 
                    553161274, 
                    1884757137, 
                    681803247, 
                    291992683, 
                    212156144, 
                    2138446583, 
                    638816981, 
                    1800314120, 
                    2003367115, 
                    1773980888, 
                    202294325, 
                    1641219439, 
                    233329310, 
                    1679050671, 
                    1989485563, 
                    1983517928, 
                    560434320, 
                    1331519781, 
                    532254869, 
                    2058392147, 
                    184994232, 
                    380342735, 
                    1878141467, 
                    160660520, 
                    2043329488, 
                    1456597909, 
                    1391330831, 
                    608753473, 
                    1186832377, 
                    308110746, 
                    66912191, 
                    1857022657, 
                    485912912, 
                    2110497527, 
                    1330446427, 
                    1096104925, 
                    1901616651, 
                    1391058572, 
                    1576518959, 
                    128207441, 
                    854726285, 
                    1001982344, 
                    639584731, 
                    1990972166, 
                    2069624106, 
                    362834342, 
                    1614967282, 
                    415144839, 
                    35302170, 
                    1900656829, 
                    1500381896, 
                    1410925113, 
                    1438426161, 
                    116397407, 
                    993017354, 
                    172818539, 
                    6615670, 
                    521142727, 
                    396146842, 
                    903041882, 
                    747115752, 
                    30063508, 
                    613481743, 
                    1695256369, 
                    1707068697, 
                    492755315, 
                    1155306527, 
                    270315430, 
                    348604244, 
                    893380638, 
                    81901277, 
                    1316859395, 
                    1902484469, 
                    404047428, 
                    1203665862, 
                    1330495535, 
                    1888241651, 
                    2034652948, 
                    238520061, 
                    1680495146, 
                    1989114274, 
                    976185992, 
                    573451303, 
                    1433659195, 
                    955212497, 
                    803470725, 
                    418596496, 
                    369515505, 
                    1117480173, 
                    1157627888, 
                    1089489255, 
                    1380473924, 
                    994911730, 
                    673477077, 
                    1528575336, 
                    824662777, 
                    388500601, 
                    1091812009, 
                    283903469, 
                    1576868791, 
                    1355011462, 
                    1344651852, 
                    66540595, 
                    1289405179, 
                    1818755552, 
                    183522501, 
                    1655924291, 
                    1034378733, 
                    1060215192, 
                    1810005466, 
                    432060535, 
                    119446369, 
                    282622666, 
                    863135343, 
                    1061411255, 
                    1918413407, 
                    1604095852, 
                    1327306195, 
                    740043872, 
                    903597972, 
                    74158819, 
                    785791022, 
                    1300318904, 
                    1338460003, 
                    1951375030, 
                    848911000, 
                    321947665, 
                    1229007392, 
                    1022955739, 
                    379003085, 
                    941994934, 
                    796429642, 
                    1750749479, 
                    809134917, 
                    325483684, 
                    644462422, 
                    909645397, 
                    1431529771, 
                    1762387290, 
                    771689996, 
                    1295030081, 
                    1531701410, 
                    1456783960, 
                    1454958354, 
                    725567353, 
                    970042886, 
                    1097851258, 
                    131776387, 
                    1759549469, 
                    1757645576, 
                    1368050572, 
                    1208678053, 
                    351768137, 
                    1527789144, 
                    1502709972, 
                    569220440, 
                    44332948, 
                    875564239, 
                    1485513796, 
                    969844552, 
                    2009058483, 
                    426916899, 
                    11422994, 
                    681212107, 
                    868010532, 
                    1783114540, 
                    516180537, 
                    1620971396, 
                    537651659, 
                    416948833, 
                    1008768010, 
                    172566081, 
                    1712402552, 
                    2115837523, 
                    1756051538, 
                    689941056, 
                    1476490709, 
                    1992844197, 
                    612892650, 
                    981332144, 
                    1898543389, 
                    190171278, 
                    1616941570, 
                    1412793810, 
                    1158436160, 
                    1880800528, 
                    444661505, 
                    222960335, 
                    1453908592, 
                    1903746891, 
                    600129474, 
                    34081158, 
                    2093499622, 
                    792542738, 
                    910115160, 
                    868113182, 
                    1520278416, 
                    775571853, 
                    586947822, 
                    1089936460, 
                    453862349, 
                    1624363509, 
                    1741608375, 
                    1342600636, 
                    748877566, 
                    1195484491, 
                    1643759148, 
                    383414261, 
                    1919221253, 
                    812768916, 
                    1240213378, 
                    198972398, 
                    262671589, 
                    504181652, 
                    1218784810, 
                    1818887205, 
                    957458976, 
                    746112831, 
                    1670259594, 
                    1134693651, 
                    1338453035, 
                    293220202, 
                    167062804, 
                    781388415, 
                    1964303006, 
                    974686852, 
                    226550106, 
                    919859814, 
                    1205722363, 
                    887938356, 
                    1317146287, 
                    700918856, 
                    1405896375, 
                    1670439837, 
                    527469795, 
                    274179880, 
                    596046550, 
                    274340934, 
                    663916244, 
                    2110435316, 
                    237041380, 
                    61247244, 
                    451222729, 
                    641139676, 
                    663533513, 
                    401157076, 
                    1918893216, 
                    1589317970, 
                    1721241575, 
                    1238711602, 
                    2058137853, 
                    774165585, 
                    1252795906, 
                    1599737818, 
                    1898967072, 
                    160642147, 
                    1457300705, 
                    960219960, 
                    1525781277, 
                    1921674361, 
                    968934385, 
                    723899334, 
                    1325175545, 
                    1031282897, 
                    1643106276, 
                    539294522, 
                    940559670, 
                    739715399, 
                    2124195504, 
                    944604930, 
                    1222840655, 
                    683118042, 
                    82196587, 
                    1707307925, 
                    897652271, 
                    1277205791, 
                    1989481120, 
                    1673406775, 
                    117854902, 
                    1563145930, 
                    1203277283, 
                    784715783, 
                    1346101886, 
                    2114494408, 
                    977284150, 
                    542980702, 
                    1595606597, 
                    1953642204, 
                    1918956412, 
                    366827648, 
                    964362822, 
                    1783310237, 
                    896043304, 
                    889725530, 
                    1141500931, 
                    1660625693, 
                    883555346, 
                    1567423479, 
                    1145517047, 
                    124238991, 
                    1608081053, 
                    1179177817, 
                    1612606113, 
                    776636645, 
                    15870947, 
                    1375019811, 
                    691968998, 
                    1692971628, 
                    702085547, 
                    621761281, 
                    318644674, 
                    1931377577, 
                    842365058, 
                    2110118994, 
                    718397078, 
                    184218602, 
                    1525281095, 
                    1358164784, 
                    53998747, 
                    1100125574, 
                    1091171572, 
                    1134401113, 
                    968242634, 
                    1757367856, 
                    2127725755, 
                    1587014065, 
                    1934558385, 
                    1339954704, 
                    565806994, 
                    1384510225, 
                    393650445, 
                    422057641, 
                    527889728, 
                    2141099558, 
                    2102548524, 
                    24099466, 
                    1319593317, 
                    569465241, 
                    2098623461, 
                    1749747986, 
                    1998495351, 
                    2050118616, 
                    1251556657, 
                    1297195131, 
                    48182974, 
                    1180468892, 
                    940945179, 
                    933407957, 
                    171328452, 
                    957282329, 
                    135344598, 
                    1672874209, 
                    1513424732, 
                    45391473, 
                    1180551066, 
                    473679940, 
                    210935183, 
                    2002721904, 
                    796394537, 
                    576340529, 
                    1587945073, 
                    1499497941, 
                    1127164634, 
                    1465058969, 
                    228110836, 
                    2044070680, 
                    1403487849, 
                    848749147, 
                    7570470, 
                    694297612, 
                    1012108932, 
                    955815854, 
                    1407024970, 
                    451734408, 
                    1249113870, 
                    1188536603, 
                    2030328103, 
                    1818531150, 
                    1709184882, 
                    947256863, 
                    646068886, 
                    1001150428, 
                    1168626252, 
                    1756008312, 
                    1249165627, 
                    868259883, 
                    1056116556, 
                    482498255, 
                    960548492, 
                    1628868584, 
                    1960647930, 
                    1464355060, 
                    1920554351, 
                    1522282932, 
                    161802913, 
                    498997410, 
                    922953982, 
                    1933981335, 
                    1069084295, 
                    151595941, 
                    1924464690, 
                    92196032, 
                    925837487, 
                    1624514487, 
                    2092657044, 
                    1327012391, 
                    265849239, 
                    1061690324, 
                    943761250, 
                    2139498110, 
                    590835484, 
                    539887680, 
                    293537022, 
                    1996621321, 
                    2077755290, 
                    586794645, 
                    330871689, 
                    1518639969, 
                    215893342, 
                    1507334600, 
                    987954124, 
                    920989594, 
                    2035684302, 
                    526185533, 
                    881133329, 
                    1695237519, 
                    1182745150, 
                    2032225685, 
                    289931495, 
                    750116460, 
                    265582621, 
                    96346768, 
                    749446855, 
                    1557588941, 
                    1170275820, 
                    553872854, 
                    75312941, 
                    1691595412, 
                    1810834915, 
                    2069636883, 
                    602410644, 
                    2141909879, 
                    1686220652, 
                    968534029, 
                    1038033100, 
                    1420760250, 
                    1170818038, 
                    2071416677, 
                    1592011289, 
                    1722491915, 
                    168125721, 
                    1551797660, 
                    1718087993, 
                    1709233342, 
                    1311125464, 
                    1003475096, 
                    203995377, 
                    399651954, 
                    743381158, 
                    397419525, 
                    144267241, 
                    381107201, 
                    771758829, 
                    193644790, 
                    1873915489, 
                    494488716, 
                    1937924472, 
                    883431728, 
                    826345501, 
                    1523882436, 
                    511481704, 
                    786759924, 
                    1855288701, 
                    293740106, 
                    904923956, 
                    993527892, 
                    1382252589, 
                    1067150273, 
                    1635636080, 
                    1607856726, 
                    524419481, 
                    1258812120, 
                    440214396, 
                    714923227, 
                    581990739, 
                    861268608, 
                    525742422, 
                    1187697160, 
                    246463477, 
                    166800724, 
                    349877477, 
                    1823144634, 
                    948214254, 
                    1413415390, 
                    1925369642, 
                    221303443, 
                    1370151050, 
                    1492575862, 
                    1242102187, 
                    543544384, 
                    1630319425, 
                    287386310, 
                    1245071176, 
                    68128853, 
                    1211010211, 
                    1528849444, 
                    1843992606, 
                    1424347887, 
                    804309386, 
                    317597572, 
                    1768706154, 
                    1284328751, 
                    911499521, 
                    1283008079, 
                    2020483691, 
                    1032938768, 
                    2088376452, 
                    56835602, 
                    1759137698, 
                    1012646881, 
                    2116229941, 
                    750227312, 
                    636968251, 
                    659544777, 
                    1174004959, 
                    835820717, 
                    1986029317, 
                    441873311, 
                    515854111, 
                    683620513, 
                    1770860489, 
                    2037160374, 
                    1972531733, 
                    1092091696, 
                    2125020948, 
                    237033171, 
                    13740944, 
                    372085543, 
                    1651396663, 
                    1200624942, 
                    1164759649, 
                    1248878182, 
                    383387774, 
                    2076349552, 
                    545578217, 
                    1213032373, 
                    911645113, 
                    1812689822, 
                    1540415346, 
                    892430874, 
                    280410638, 
                    1313315448, 
                    1880921811, 
                    229455306, 
                    574798090, 
                    880092113, 
                    1797901706, 
                    585526399, 
                    1041607541, 
                    375189494, 
                    1690303774, 
                    1402119295, 
                    908493776, 
                    120688873, 
                    694220730, 
                    1879029427, 
                    1459280665, 
                    1966891472, 
                    1305470778, 
                    1783450520, 
                    1019197824, 
                    1716290909, 
                    552922586, 
                    558512756, 
                    1995370879, 
                    867351759, 
                    366839538, 
                    708102346, 
                    113966560, 
                    2108456233, 
                    2071659251, 
                    173339495, 
                    1048941612, 
                    1770906884, 
                    403209875, 
                    457545041, 
                    156238563, 
                    1743076427, 
                    517293606, 
                    1244928835, 
                    586615112, 
                    1575698192, 
                    1477961649, 
                    1276207169, 
                    1657804815, 
                    1910124001, 
                    340384406, 
                    262698901, 
                    1382128822, 
                    814032437, 
                    1901235355, 
                    1092237288, 
                    507219044, 
                    1904448473, 
                    2020716697, 
                    711603376, 
                    760392862, 
                    1322409055, 
                    381568074, 
                    1854929978, 
                    513252575, 
                    1089799360, 
                    471559839, 
                    1080634955, 
                    451013890, 
                    1516964279, 
                    353177683, 
                    1285070539, 
                    1864962645, 
                    236675689, 
                    1722790864, 
                    1863687885, 
                    1449597866, 
                    60541943, 
                    1196835408, 
                    1590983279, 
                    238329260, 
                    1424199064, 
                    1048191588, 
                    85246878, 
                    526967353, 
                    104140637, 
                    1473457171, 
                    1447417770, 
                    207220878, 
                    979421963, 
                    1813604098, 
                    1291976786, 
                    1897673834, 
                    1839090146, 
                    1844635826, 
                    981313155, 
                    1361508353, 
                    809847275, 
                    731676260, 
                    1644299399, 
                    1104138353, 
                    397326694, 
                    825193279, 
                    140840536, 
                    1556946318, 
                    1202797514, 
                    545219903, 
                    1145453133, 
                    1238725220, 
                    37547470, 
                    1790123069, 
                    446677101, 
                    707613065, 
                    429733418, 
                    473274116, 
                    1483677445, 
                    274217467, 
                    296321196, 
                    1327962625, 
                    409111938, 
                    1763825836, 
                    1171625716, 
                    873414077, 
                    1619075574, 
                    1850843828, 
                    1208684544, 
                    1534880352, 
                    25872499, 
                    539523510, 
                    741477709, 
                    502179532, 
                    639750591, 
                    1476349330, 
                    1700019656, 
                    486844926, 
                    1988486213, 
                    599005785, 
                    907351052, 
                    675784207, 
                    1471653486, 
                    1706404381, 
                    328004038, 
                    208692550, 
                    169673408, 
                    1336782541, 
                    1366926997, 
                    584363721, 
                    1467940416, 
                    1365816030, 
                    360958381, 
                    707095688, 
                    1065187157, 
                    1629368297, 
                    322564322, 
                    2027957210, 
                    2079996284, 
                    1671396264, 
                    1353601352, 
                    437480355, 
                    348261774, 
                    1815400809, 
                    519347404, 
                    605929623, 
                    497247511, 
                    1682851585, 
                    1150372478, 
                    1117811418, 
                    1155077056, 
                    2090372139, 
                    632271550, 
                    884671660, 
                    1514350062, 
                    1768020636, 
                    2003792786, 
                    850191204, 
                    1435821798, 
                    962933166, 
                    703740669, 
                    282293033, 
                    483916831, 
                    624320823, 
                    66939936, 
                    807540116, 
                    178565129, 
                    34382021, 
                    1584476022, 
                    1157865941, 
                    1153785008, 
                    1819546093, 
                    554332289, 
                    317089949, 
                    1392888080, 
                    469870697, 
                    327522433, 
                    1803736324, 
                    1187056977, 
                    1869558062, 
                    1858928686, 
                    634305470, 
                    186410063, 
                    249115579, 
                    1576770312, 
                    1525051924, 
                    733544480, 
                    1623770368, 
                    1340229273, 
                    1444650168, 
                    1773059158, 
                    1619856765, 
                    592135412, 
                    1117063118, 
                    967655595, 
                    1071308319, 
                    2101047171, 
                    1871424598, 
                    1748460873, 
                    1859290935, 
                    427364494, 
                    462865490, 
                    98375563, 
                    2139990184, 
                    2111510057, 
                    1483014610, 
                    1536039850, 
                    315181601, 
                    1639267227, 
                    1044479365, 
                    1440498203, 
                    200056462, 
                    1810617874, 
                    1713747383, 
                    1251488127, 
                    69435199, 
                    95882970, 
                    234801252, 
                    1195034158, 
                    689371659, 
                    73995636, 
                    702278408, 
                    841636395, 
                    139825854, 
                    1532290430, 
                    1681411890, 
                    1227410681, 
                    1584752818, 
                    1496918001, 
                    321579761, 
                    516307173, 
                    603581482, 
                    55275451, 
                    1475249689, 
                    1442193568, 
                    1396063196, 
                    535929907, 
                    193903526, 
                    285089169, 
                    93755702, 
                    2136495721, 
                    418362879, 
                    2131986788, 
                    295749908, 
                    4151965, 
                    1573002696, 
                    1956722538, 
                    1025871676, 
                    2013058638, 
                    898220396, 
                    975425349, 
                    1866245919, 
                    676390440, 
                    1059089214, 
                    1785295299, 
                    1872569733, 
                    1768712742, 
                    2106033356, 
                    607699754, 
                    430098167, 
                    255603929, 
                    2098770679, 
                    965747247, 
                    1317687466, 
                    528172192, 
                    836916721, 
                    144781011, 
                    335368185, 
                    271553815, 
                    2002908578, 
                    1680988939, 
                    2049463091, 
                    2097195730, 
                    1101278456, 
                    700359585, 
                    1803116404, 
                    717775267, 
                    545886487, 
                    135673889, 
                    2106771381, 
                    1872172999, 
                    201539005, 
                    1719177827, 
                    598697605, 
                    1493638059, 
                    797544901, 
                    2074674689, 
                    1143669884, 
                    1837438037, 
                    1717107482, 
                    1774834101, 
                    577380198, 
                    1733687419, 
                    2002474649, 
                    1985635420, 
                    37725042, 
                    1600099279, 
                    814299322, 
                    1915061363, 
                    1314718891, 
                    1428221685, 
                    1621354353, 
                    754317861, 
                    10150060, 
                    1364715104, 
                    1073445905, 
                    1916533836, 
                    1722595631, 
                    358729629, 
                    2129662542, 
                    1154794466, 
                    1222826255, 
                    1970359467, 
                    648412020, 
                    705408815, 
                    54064924, 
                    379592852, 
                    367049642, 
                    1971533054, 
                    1878110938, 
                    909725679, 
                    1148594774, 
                    645413795, 
                    701929980, 
                    228074477, 
                    1103608741, 
                    315775672, 
                    94721081, 
                    1263126683, 
                    662634543, 
                    203017125, 
                    2050959592, 
                    778308771, 
                    968438645, 
                    678549696, 
                    250818646, 
                    1594704791, 
                    1709027767, 
                    1381466148, 
                    420192154, 
                    1028494712, 
                    352079058, 
                    784940255, 
                    1855259142, 
                    562313016, 
                    552007846, 
                    754504378, 
                    1085275399, 
                    1297065834, 
                    1931570496, 
                    1805615837, 
                    1233049637, 
                    990249915, 
                    36950425, 
                    404993212, 
                    279626911, 
                    975940558, 
                    52387881, 
                    1929559230, 
                    261106363, 
                    757670233, 
                    1821812755, 
                    459468948, 
                    1843578733, 
                    1926645417, 
                    1251318521, 
                    444517484, 
                    1001920822, 
                    2117345971, 
                    454590169, 
                    606843780, 
                    818048732, 
                    1133067141, 
                    1551340900, 
                    849616226, 
                    557646621, 
                    363654519, 
                    937638300, 
                    139616964, 
                    1823550278, 
                    349104363, 
                    1377983920, 
                    945138894, 
                    1479039834, 
                    1004502353, 
                    1117451135, 
                    1060709677, 
                    741358346, 
                    563445433, 
                    398922785, 
                    1422361735, 
                    1542316910, 
                    1926952184, 
                    1120359785, 
                    1810005568, 
                    1354165604, 
                    2040093757, 
                    1088845169, 
                    2076097372, 
                    1458478142, 
                    107490362, 
                    1900067203, 
                    1115413075, 
                    842475665, 
                    1324726716, 
                    987567105, 
                    99982496, 
                    1586392662, 
                    1334817846, 
                    1994830238, 
                    2063456039, 
                    38302258, 
                    2060254564, 
                    106008952, 
                    2059485647, 
                    1527169960, 
                    876673861, 
                    1127912761, 
                    839076380, 
                    809194282, 
                    190608844, 
                    1850642785, 
                    438475389, 
                    1718423186, 
                    1179712081, 
                    1212010517, 
                    1038580195, 
                    12707356, 
                    1888818979, 
                    1642934269, 
                    665036511, 
                    1422292997, 
                    1009024575, 
                    828622469, 
                    1716059916, 
                    596520807, 
                    262570845, 
                    102663229, 
                    154313118, 
                    16935248, 
                    1017468639, 
                    1621800662, 
                    1554024147, 
                    716098842, 
                    482950393, 
                    1384059477, 
                    1629545993, 
                    1820943232, 
                    1208357785, 
                    282835608, 
                    477491743, 
                    912180996, 
                    249768789, 
                    1266903090, 
                    1267869298, 
                    404331224, 
                    1461591814, 
                    1544473536, 
                    1810247231, 
                    112716199, 
                    2096470557, 
                    87275140, 
                    1845057330, 
                    1839367224, 
                    1329793727, 
                    641163042, 
                    1176761330, 
                    1231632095, 
                    537432683, 
                    1462964840, 
                    1264599115, 
                    774010632, 
                    973599643, 
                    822141132, 
                    1939209290, 
                    716291829, 
                    296618638, 
                    1869860194, 
                    1235472793, 
                    1943136251, 
                    1729948171, 
                    1365120610, 
                    951833218, 
                    1605983371, 
                    1165442526, 
                    1900339162, 
                    1172524208, 
                    1889605132, 
                    1708236818, 
                    1311728692, 
                    1282412640, 
                    865580956, 
                    439899645, 
                    41596919, 
                    67948338, 
                    930193499, 
                    1924226979, 
                    1862140570, 
                    1533788762, 
                    1989270998, 
                    207298147, 
                    397913898, 
                    1283510549, 
                    1892876592, 
                    1165720140, 
                    1850964758, 
                    2086065000, 
                    1575111304, 
                    1475177447, 
                    551577469, 
                    107712586, 
                    1739215267, 
                    309000743, 
                    2014594627, 
                    530251675, 
                    731349947, 
                    1282925569, 
                    239073959, 
                    673924698, 
                    1576938212, 
                    1616122481, 
                    1434639845, 
                    1670878924, 
                    1373187638, 
                    180552200, 
                    399018159, 
                    334110987, 
                    932002724, 
                    754192794, 
                    1009015791, 
                    939548497, 
                    581961715, 
                    336071432, 
                    1393685442, 
                    1735838104, 
                    1332034273, 
                    81610061, 
                    1206440273, 
                    440263231, 
                    1461961415, 
                    1961757809, 
                    1744896551, 
                    414427685, 
                    1156659349, 
                    1204016106, 
                    1690681020, 
                    556580213, 
                    572788665, 
                    1658828891, 
                    1484082038, 
                    1794751577, 
                    1685153020, 
                    1188215872, 
                    2104334197, 
                    373148517, 
                    920141949, 
                    874518621, 
                    2057806558, 
                    1712324392, 
                    766701981, 
                    1516853771, 
                    1154062276, 
                    820918510, 
                    466161656, 
                    1759512619, 
                    1673234518, 
                    1403143835, 
                    1062798948, 
                    278756523, 
                    1345701049, 
                    649739886, 
                    76485296, 
                    1946294375, 
                    1359446930, 
                    1762664050, 
                    2018709577, 
                    1020212160, 
                    514219575, 
                    169171532, 
                    637354827, 
                    1989921593, 
                    1908805969, 
                    1420657480, 
                    1417594403, 
                    1361747861, 
                    1401879124, 
                    1541229490, 
                    379220882, 
                    1020536925, 
                    815696155, 
                    457515652, 
                    171287150, 
                    1641599528, 
                    1821044897, 
                    2092591291, 
                    807695533, 
                    923978041, 
                    2095749676, 
                    1544630377, 
                    1678265235, 
                    287537185, 
                    1641264912, 
                    294032142, 
                    313127842, 
                    834342152, 
                    1718266281, 
                    1886342292, 
                    1976252589, 
                    341670147, 
                    501922587, 
                    2047413436, 
                    360299046, 
                    1888635026, 
                    1074969565, 
                    924264035, 
                    1755531449, 
                    1880888443, 
                    1550807754, 
                    1251897442, 
                    357633495, 
                    132005028, 
                    1023922953, 
                    42262023, 
                    1610544015, 
                    888185397, 
                    478452736, 
                    582369415, 
                    125249478, 
                    1414339286, 
                    954968517, 
                    1094731536, 
                    1071946131, 
                    1117072845, 
                    638389944, 
                    349817642, 
                    348656681, 
                    1614773827, 
                    1107529638, 
                    583252251, 
                    1790965227, 
                    1663020479, 
                    1712460548, 
                    37550735, 
                    518614338, 
                    915766366, 
                    97216606, 
                    430135771, 
                    566629963, 
                    896780862, 
                    337059842, 
                    1074290737, 
                    1520653934, 
                    843852234, 
                    1186996882, 
                    1546260207, 
                    1411097879, 
                    1599002889, 
                    830971774, 
                    1572426092, 
                    355889416, 
                    1135896866, 
                    1761092814, 
                    561913303, 
                    1534185277, 
                    1554674698, 
                    975467305, 
                    1390709848, 
                    1250245082, 
                    725151923, 
                    575607354, 
                    140757622, 
                    773358805, 
                    967555503, 
                    1608415862, 
                    842096663, 
                    567028127, 
                    986372218, 
                    1671131332, 
                    694777649, 
                    790968791, 
                    48316965, 
                    15739452, 
                    1375952263, 
                    1077279444, 
                    2028161427, 
                    1721561249, 
                    228093897, 
                    2077559610, 
                    1239613384, 
                    1086203410, 
                    897137439, 
                    783802053, 
                    1682587193, 
                    227362835, 
                    655068361, 
                    2049411312, 
                    1150547245, 
                    650849105, 
                    1111423287, 
                    2087782708, 
                    853990405, 
                    1327374336, 
                    1988961687, 
                    321173508, 
                    196302220, 
                    300931932, 
                    553098431, 
                    1382920019, 
                    344900219, 
                    979232080, 
                    424725661, 
                    2075355204, 
                    136194125, 
                    781457301, 
                    307572451, 
                    1120157414, 
                    385140551, 
                    1632117506, 
                    1653507497, 
                    1980597096, 
                    747373408, 
                    1460633885, 
                    10631698, 
                    1786432160, 
                    1825953562, 
                    1504439216, 
                    1238255259, 
                    740192668, 
                    953347501, 
                    940168998, 
                    1563964529, 
                    335523113, 
                    559708045, 
                    754478588, 
                    2084462033, 
                    868426276, 
                    174261412, 
                    1054778755, 
                    880977224, 
                    1727229495, 
                    1168462818, 
                    992657525, 
                    1732659391, 
                    260381304, 
                    661477749, 
                    969265882, 
                    647607928, 
                    901129892, 
                    2067274031, 
                    1682394594, 
                    1664270761, 
                    1665913386, 
                    1144825255, 
                    1278309838, 
                    1340409300, 
                    1540840167, 
                    1316742638, 
                    202529527, 
                    642703593, 
                    839346651, 
                    1210160320, 
                    1960389410, 
                    429572518, 
                    1552214868, 
                    1562751198, 
                    89202548, 
                    1515647159, 
                    1529199184, 
                    844478915, 
                    1586629822, 
                    945896002, 
                    1477845443, 
                    751140282, 
                    2073761649, 
                    812134278, 
                    1902199530, 
                    1875458141, 
                    1897734041, 
                    1124954411, 
                    856687680, 
                    856831288, 
                    337125367, 
                    820402284, 
                    1418436554, 
                    1423381884, 
                    2045534790, 
                    1338181505, 
                    1428881854, 
                    1561552935, 
                    543621866, 
                    1699167285, 
                    2119215532, 
                    412075162, 
                    41630573, 
                    517069175, 
                    1355557055, 
                    563085007, 
                    180444523, 
                    845113753, 
                    572275201, 
                    1601102370, 
                    1265892391, 
                    56650977, 
                    480644209, 
                    736498592, 
                    186425318, 
                    914773104, 
                    1218547253, 
                    466175560, 
                    1585693417, 
                    1812865673, 
                    1566492244, 
                    1225058763, 
                    1933499560, 
                    2129999010, 
                    873034953, 
                    1139987126, 
                    1158619611, 
                    128832984, 
                    1664700055, 
                    898504690, 
                    86765305, 
                    2115129896, 
                    300857049, 
                    2034946184, 
                    974164117, 
                    1065770281, 
                    709509709, 
                    1556692474, 
                    1604060870, 
                    1339114523, 
                    1695013618, 
                    1052620288, 
                    552679210, 
                    1403068957, 
                    1738422544, 
                    280474390, 
                    339758075, 
                    681937962, 
                    1236956566, 
                    1130761686, 
                    119634252, 
                    962706294, 
                    2123343165, 
                    878239840, 
                    132675041, 
                    894156769, 
                    626059249, 
                    59115210, 
                    1791517869, 
                    215569929, 
                    1551949043, 
                    51611539, 
                    1327897345, 
                    1821254158, 
                    1514337065, 
                    1298246142, 
                    1903277575, 
                    593181672, 
                    1909818122, 
                    1268138684, 
                    205263395, 
                    1809338426, 
                    1009598337, 
                    246578894, 
                    117852055, 
                    513871956, 
                    672379553, 
                    530430603, 
                    391576466, 
                    592560563, 
                    800229051, 
                    476681649, 
                    1039360065, 
                    533938369, 
                    778870438, 
                    1271542658, 
                    2139270378, 
                    1570100856, 
                    1902271143, 
                    80007348, 
                    439711032, 
                    650394499, 
                    1912658252, 
                    1388490941, 
                    1934649127, 
                    1643402079, 
                    1872206590, 
                    878908699, 
                    2036215539, 
                    440176402, 
                    524680462, 
                    1894060050, 
                    919603487, 
                    2116301529, 
                    925498291, 
                    457779473, 
                    2100591604, 
                    1876764271, 
                    760387785, 
                    1766286732, 
                    221777216, 
                    95628646, 
                    1815022391, 
                    1198957306, 
                    1562824525, 
                    1075267394, 
                    1159735121, 
                    793958976, 
                    1042383720, 
                    242794407, 
                    1306459411, 
                    333176719, 
                    838394176, 
                    1829810774, 
                    828427652, 
                    1702352543, 
                    2044163821, 
                    1768591043, 
                    459413414, 
                    621933623, 
                    789149013, 
                    1940954501, 
                    641698711, 
                    2098883711, 
                    67880101, 
                    1053652648, 
                    1704561809, 
                    1070542183, 
                    1755923725, 
                    321090965, 
                    1318434701, 
                    262506107, 
                    809713071, 
                    135984411, 
                    2005713779, 
                    344082386, 
                    982855755, 
                    713700946, 
                    1973150063, 
                    859381733, 
                    483666958, 
                    1078247614, 
                    1984008626, 
                    1793421132, 
                    1281200638, 
                    191503743, 
                    1055665874, 
                    1237276360, 
                    1287873877, 
                    1370629395, 
                    561099299, 
                    332000561, 
                    1417350857, 
                    138454162, 
                    977137719, 
                    428306362, 
                    1601413582, 
                    1863622327, 
                    1131077205, 
                    509171877, 
                    1518189232, 
                    89192938, 
                    1185518898, 
                    721292755, 
                    1071843353, 
                    1043953304, 
                    1670947295, 
                    702409765, 
                    1971580642, 
                    484345266, 
                    719496788, 
                    1330462875, 
                    1942924627, 
                    1747515328, 
                    138266665, 
                    1858385046, 
                    2104429522, 
                    995761226, 
                    817683073, 
                    2023860005, 
                    2145470421, 
                    467285449, 
                    1930151953, 
                    385294330, 
                    1907475313, 
                    986434140, 
                    992638897, 
                    671258909, 
                    1306330339, 
                    1577407417, 
                    890152451, 
                    1266717075, 
                    1730107388, 
                    1463978186, 
                    1488676148, 
                    394474020, 
                    2040212363, 
                    1262715871, 
                    721577779, 
                    237247334, 
                    668040095, 
                    353256109, 
                    1413179365, 
                    803528611, 
                    651132607, 
                    1378120071, 
                    536559581, 
                    1817319176, 
                    187497, 
                    1266236320, 
                    471360487, 
                    605652356, 
                    1045939254, 
                    1254700847, 
                    511185103, 
                    1050903783, 
                    306524632, 
                    800224568, 
                    961301089, 
                    85409213, 
                    51314407, 
                    999688386, 
                    1543563073, 
                    394173225, 
                    1741676462, 
                    1600263360, 
                    1747839134, 
                    478946441, 
                    258839180, 
                    1891276292, 
                    1965656330, 
                    841713651, 
                    274183447, 
                    580435739, 
                    1355819910, 
                    1792214312, 
                    1201589731, 
                    1126623342, 
                    1881645370, 
                    529355242, 
                    449874559, 
                    1322803368, 
                    671071412, 
                    40094019, 
                    1106046930, 
                    284500095, 
                    220777821, 
                    475406541, 
                    952793083, 
                    437772365, 
                    87949388, 
                    1239987795, 
                    301414782, 
                    636168566, 
                    185932927, 
                    1815835356, 
                    957176683, 
                    1019006140, 
                    1209335796, 
                    1198352894, 
                    1777764584, 
                    57613140, 
                    1558479996, 
                    256394852, 
                    1448063637, 
                    1777130483, 
                    331468909, 
                    465503515, 
                    2046364584, 
                    866454438, 
                    1996797699, 
                    1327384937, 
                    1066062845, 
                    431945847, 
                    1783018301, 
                    875994686, 
                    328616974, 
                    1503469054, 
                    1435609942, 
                    1457176367, 
                    1379485539, 
                    1272432593, 
                    1673637005, 
                    1968550462, 
                    1803326904, 
                    725668535, 
                    540298869, 
                    1785498528, 
                    394502812, 
                    1687468201, 
                    835037629, 
                    182583591, 
                    2064771193, 
                    683292476, 
                    899074305, 
                    392261419, 
                    1911807019, 
                    414676560, 
                    739514029, 
                    1476400094, 
                    2100514833, 
                    1902757953, 
                    576525604, 
                    86338645, 
                    588458313, 
                    908048098, 
                    173924950, 
                    2016952582, 
                    1000633912, 
                    1457421888, 
                    1487218382, 
                    1601191276, 
                    1730879845, 
                    1899643076, 
                    1966351002, 
                    505331991, 
                    531459782, 
                    1737413181, 
                    600551595, 
                    722395102, 
                    1236831614, 
                    693454028, 
                    71000703, 
                    358896383, 
                    31416809, 
                    1814214108, 
                    1410097391, 
                    382770369, 
                    1680355189, 
                    1390756882, 
                    1111671314, 
                    2061424061, 
                    763955025, 
                    2106693495, 
                    1504145181, 
                    1624211233, 
                    695906989, 
                    1587298360, 
                    1380092149, 
                    895278806, 
                    551743585, 
                    670829934, 
                    784864616, 
                    1084564571, 
                    200249819, 
                    1381330000, 
                    599187393, 
                    165128117, 
                    864425121, 
                    393742314, 
                    2008285284, 
                    174393838, 
                    1961608612, 
                    17118927, 
                    239568480, 
                    1407060805, 
                    1831757250, 
                    217629221, 
                    54921836, 
                    921727852, 
                    1645434354, 
                    1938638228
                ], System.Int32);
            },
            ctor: function () {
                this.$initialize();
                this.seed = 0;
                this.index = 0;
                this.numAddSeed = 0;
            },
            $ctor1: function (seed) {
                this.$initialize();
                this.seed = seed;
                this.index = 0;
                this.numAddSeed = 0;
            }
        },
        methods: {
            SerializeToString: function () {
                var seedStr = DTLibrary.StringUtil.ToStringCultureInvariant(this.seed);
                var indexStr = DTLibrary.StringUtil.ToStringCultureInvariant(this.index);
                var numAddSeedStr = DTLibrary.StringUtil.ToStringCultureInvariant(this.numAddSeed);

                return (seedStr || "") + " " + (indexStr || "") + " " + (numAddSeedStr || "");
            },
            DeserializeFromString: function (str) {
                var array = System.String.split(str, [32].map(function (i) {{ return String.fromCharCode(i); }}));

                this.seed = DTLibrary.StringUtil.ParseInt(array[System.Array.index(0, array)]);
                this.index = DTLibrary.StringUtil.ParseInt(array[System.Array.index(1, array)]);
                this.numAddSeed = DTLibrary.StringUtil.ParseInt(array[System.Array.index(2, array)]);
            },
            AddSeed: function (i) {
                this.seed = ((this.seed + Bridge.Int.mul(17, i)) | 0);
                this.seed = this.seed ^ i;
                this.seed = ((this.seed + 1) | 0);

                this.numAddSeed = ((this.numAddSeed + 1) | 0);

                this.seed = ((((this.seed + this.numAddSeed) | 0) + Bridge.Int.mul(Bridge.Int.mul(this.numAddSeed, this.numAddSeed), 2)) | 0);
            },
            Reset: function () {
                this.seed = 0;
                this.index = 0;
                this.numAddSeed = 0;
            },
            NextInt: function (i) {
                if (i === 1) {
                    return 0;
                }

                var next = ((this.array[this.index] + this.seed) | 0);

                this.index = (this.index + 1) | 0;
                if (this.index === this.array.length) {
                    this.index = 0;
                    this.seed = ((this.seed + 1) | 0);
                }

                if (next < 0) {
                    next = ((-next) | 0);
                }

                if (next < 0) {
                    next = 0;
                }

                return next % i;
            },
            NextBool: function () {
                return this.NextInt(2) === 1;
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.GameFont", {
        $kind: "enum",
        statics: {
            fields: {
                DTSimpleFont12Pt: 0,
                DTSimpleFont14Pt: 1,
                DTSimpleFont16Pt: 2,
                DTSimpleFont18Pt: 3,
                DTSimpleFont20Pt: 4,
                DTSimpleFont32Pt: 5
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercent.BridgeMusic", {
        inherits: [DTLibrary.IMusic$1(TuxPlanetSpeedrunAnyPercentLibrary.GameMusic)],
        alias: [
            "LoadMusic", "DTLibrary$IMusicProcessing$LoadMusic",
            "PlayMusic", "DTLibrary$IMusicOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$PlayMusic",
            "StopMusic", "DTLibrary$IMusicOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$StopMusic",
            "DisposeMusic", "DTLibrary$IMusicCleanup$DisposeMusic"
        ],
        ctors: {
            ctor: function () {
                this.$initialize();
                eval("\r\n\t\t\t\twindow.BridgeMusicJavascript = ((function () {\r\n\t\t\t\t\t'use strict';\r\n\t\t\t\t\t\t\r\n\t\t\t\t\tvar musicDictionary = {};\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar numberOfAudioObjectsLoaded = 0;\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar loadMusic = function (musicNames) {\r\n\t\t\t\t\t\tvar musicNamesArray = musicNames.split(',');\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tvar numberOfAudioObjects = musicNamesArray.length;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tfor (var i = 0; i < musicNamesArray.length; i++) {\r\n\t\t\t\t\t\t\tvar musicName = musicNamesArray[i];\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif (musicDictionary[musicName])\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tvar musicPath = 'Data/Music/' + musicName + '?doNotCache=' + Date.now().toString();\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tvar audio = new Audio(musicPath);\r\n\t\t\t\t\t\t\taudio.addEventListener('canplaythrough', function () {\r\n\t\t\t\t\t\t\t\tnumberOfAudioObjectsLoaded++;\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\taudio.loop = true;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tmusicDictionary[musicName] = audio;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\treturn numberOfAudioObjects === numberOfAudioObjectsLoaded;\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar playMusic = function (musicName, volume) {\r\n\t\t\t\t\t\tvar music = musicDictionary[musicName];\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (volume > 1.0)\r\n\t\t\t\t\t\t\tvolume = 1.0;\r\n\t\t\t\t\t\tif (volume < 0.0)\r\n\t\t\t\t\t\t\tvolume = 0.0;\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\tfor (var m in musicDictionary) {\r\n\t\t\t\t\t\t\tvar audio = musicDictionary[m];\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif (audio === music) {\r\n\t\t\t\t\t\t\t\taudio.volume = volume;\r\n\t\t\t\t\t\t\t\tvar audioPromise = audio.play();\r\n\t\t\t\t\t\t\t\tif (audioPromise) {\r\n\t\t\t\t\t\t\t\t\taudioPromise.then(function () {}, function () {});\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\taudio.pause();\r\n\t\t\t\t\t\t\t\taudio.currentTime = 0;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar stopMusic = function () {\r\n\t\t\t\t\t\tfor (var musicName in musicDictionary) {\r\n\t\t\t\t\t\t\tvar audio = musicDictionary[musicName];\r\n\t\t\t\t\t\t\taudio.pause();\r\n\t\t\t\t\t\t\taudio.currentTime = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tloadMusic: loadMusic,\r\n\t\t\t\t\t\tplayMusic: playMusic,\r\n\t\t\t\t\t\tstopMusic: stopMusic\r\n\t\t\t\t\t};\r\n\t\t\t\t})());\r\n\t\t\t");
            }
        },
        methods: {
            LoadMusic: function () {
                var $t;
                var musicNames = "";
                var isFirst = true;
                $t = Bridge.getEnumerator(System.Enum.getValues(TuxPlanetSpeedrunAnyPercentLibrary.GameMusic));
                try {
                    while ($t.moveNext()) {
                        var gameMusic = Bridge.cast($t.Current, TuxPlanetSpeedrunAnyPercentLibrary.GameMusic);
                        if (isFirst) {
                            isFirst = false;
                        } else {
                            musicNames = (musicNames || "") + ",";
                        }
                        musicNames = (musicNames || "") + (TuxPlanetSpeedrunAnyPercentLibrary.GameMusicUtil.GetMusicFilename(gameMusic).DefaultFilename || "");
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }

                if (Bridge.referenceEquals(musicNames, "")) {
                    return true;
                }

                var result = eval("window.BridgeMusicJavascript.loadMusic('" + (musicNames || "") + "')");

                return result;
            },
            PlayMusic: function (music, volume) {
                var finalVolume = (TuxPlanetSpeedrunAnyPercentLibrary.GameMusicUtil.GetMusicVolume(music) / 100.0) * (volume / 100.0);
                if (finalVolume > 1.0) {
                    finalVolume = 1.0;
                }
                if (finalVolume < 0.0) {
                    finalVolume = 0.0;
                }

                window.BridgeMusicJavascript.playMusic(TuxPlanetSpeedrunAnyPercentLibrary.GameMusicUtil.GetMusicFilename(music).DefaultFilename, finalVolume);
            },
            StopMusic: function () {
                window.BridgeMusicJavascript.stopMusic();
            },
            DisposeMusic: function () { }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercent.BridgeSoundOutput", {
        inherits: [DTLibrary.ISoundOutput$1(TuxPlanetSpeedrunAnyPercentLibrary.GameSound)],
        fields: {
            desiredSoundVolume: 0,
            currentSoundVolume: 0,
            elapsedMicrosPerFrame: 0
        },
        alias: [
            "LoadSounds", "DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$LoadSounds",
            "SetSoundVolume", "DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$SetSoundVolume",
            "GetSoundVolume", "DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$GetSoundVolume",
            "ProcessFrame", "DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$ProcessFrame",
            "PlaySound", "DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$PlaySound",
            "DisposeSounds", "DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$DisposeSounds"
        ],
        ctors: {
            ctor: function (elapsedMicrosPerFrame) {
                this.$initialize();
                this.desiredSoundVolume = TuxPlanetSpeedrunAnyPercentLibrary.GlobalState.DEFAULT_VOLUME;
                this.currentSoundVolume = this.desiredSoundVolume;
                this.elapsedMicrosPerFrame = elapsedMicrosPerFrame;
                eval("\r\n\t\t\t\twindow.BridgeSoundOutputJavascript = ((function () {\r\n\t\t\t\t\t'use strict';\r\n\t\t\t\t\t\t\r\n\t\t\t\t\tvar soundDictionary = {};\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar numberOfAudioObjectsLoaded = 0;\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar loadSounds = function (soundNames) {\r\n\t\t\t\t\t\tvar soundNamesArray = soundNames.split(',');\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tvar numberOfAudioObjects = soundNamesArray.length * 10;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tfor (var i = 0; i < soundNamesArray.length; i++) {\r\n\t\t\t\t\t\t\tvar soundName = soundNamesArray[i];\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tif (soundDictionary[soundName])\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tsoundDictionary[soundName] = [];\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tvar soundPath = 'Data/Sound/' + soundName + '?doNotCache=' + Date.now().toString();\r\n\t\t\t\t\t\t\tfor (var j = 0; j < 10; j++) {\r\n\t\t\t\t\t\t\t\tvar audio = new Audio(soundPath);\r\n\t\t\t\t\t\t\t\taudio.addEventListener('canplaythrough', function () {\r\n\t\t\t\t\t\t\t\t\tnumberOfAudioObjectsLoaded++;\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tsoundDictionary[soundName].push(audio);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\treturn numberOfAudioObjects === numberOfAudioObjectsLoaded;\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\r\n\t\t\t\t\tvar playSound = function (soundName, volume) {\r\n\t\t\t\t\t\tvar sound = soundDictionary[soundName];\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif (volume > 1.0)\r\n\t\t\t\t\t\t\tvolume = 1.0;\r\n\t\t\t\t\t\tif (volume < 0.0)\r\n\t\t\t\t\t\t\tvolume = 0.0;\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tvar audio = sound[0];\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tfor (var i = 0; i < sound.length; i++) {\r\n\t\t\t\t\t\t\tif (i === sound.length - 1)\r\n\t\t\t\t\t\t\t\tsound[i] = audio;\r\n\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\tsound[i] = sound[i+1];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\taudio.volume = volume;\r\n\t\t\t\t\t\taudio.play();\r\n\t\t\t\t\t};\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tloadSounds: loadSounds,\r\n\t\t\t\t\t\tplaySound: playSound\r\n\t\t\t\t\t};\r\n\t\t\t\t})());\r\n\t\t\t");
            }
        },
        methods: {
            LoadSounds: function () {
                var $t;
                var soundNames = "";
                var isFirst = true;
                $t = Bridge.getEnumerator(System.Enum.getValues(TuxPlanetSpeedrunAnyPercentLibrary.GameSound));
                try {
                    while ($t.moveNext()) {
                        var gameSound = Bridge.cast($t.Current, TuxPlanetSpeedrunAnyPercentLibrary.GameSound);
                        if (isFirst) {
                            isFirst = false;
                        } else {
                            soundNames = (soundNames || "") + ",";
                        }

                        var soundFilename = TuxPlanetSpeedrunAnyPercentLibrary.GameSoundUtil.GetSoundFilename(gameSound).DefaultFilename;
                        soundNames = (soundNames || "") + (soundFilename || "");
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }

                if (Bridge.referenceEquals(soundNames, "")) {
                    return true;
                }

                var result = eval("window.BridgeSoundOutputJavascript.loadSounds('" + (soundNames || "") + "')");

                return result;
            },
            /**
             * Volume ranges from 0 to 100 (both inclusive)
             *
             * @instance
             * @public
             * @this TuxPlanetSpeedrunAnyPercent.BridgeSoundOutput
             * @memberof TuxPlanetSpeedrunAnyPercent.BridgeSoundOutput
             * @param   {number}    volume
             * @return  {void}
             */
            SetSoundVolume: function (volume) {
                if (volume < 0) {
                    throw new System.Exception();
                }

                if (volume > 100) {
                    throw new System.Exception();
                }

                this.desiredSoundVolume = volume;
            },
            GetSoundVolume: function () {
                return this.desiredSoundVolume;
            },
            ProcessFrame: function () {
                this.currentSoundVolume = DTLibrary.VolumeUtil.GetVolumeSmoothed(this.elapsedMicrosPerFrame, this.currentSoundVolume, this.desiredSoundVolume);
            },
            PlaySound: function (sound) {
                var finalVolume = (TuxPlanetSpeedrunAnyPercentLibrary.GameSoundUtil.GetSoundVolume(sound) / 100.0) * (this.currentSoundVolume / 100.0);
                if (finalVolume > 1.0) {
                    finalVolume = 1.0;
                }
                if (finalVolume < 0.0) {
                    finalVolume = 0.0;
                }

                if (finalVolume > 0.0) {
                    var soundFilename = TuxPlanetSpeedrunAnyPercentLibrary.GameSoundUtil.GetSoundFilename(sound).DefaultFilename;
                    window.BridgeSoundOutputJavascript.playSound(soundFilename, finalVolume);
                }
            },
            DisposeSounds: function () { }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercent.BridgeDisplay", {
        inherits: [DTLibrary.DTDisplay$2(TuxPlanetSpeedrunAnyPercentLibrary.GameImage,TuxPlanetSpeedrunAnyPercentLibrary.GameFont)],
        fields: {
            bridgeDisplayRectangle: null,
            bridgeDisplayImages: null,
            bridgeDisplayFont: null
        },
        alias: [
            "DrawInitialLoadingScreen", "DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawInitialLoadingScreen",
            "DrawRectangle", "DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle",
            "LoadImages", "DTLibrary$IDisplayProcessing$1$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$LoadImages",
            "DrawImageRotatedClockwise$1", "DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$1",
            "DrawImageRotatedClockwise", "DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawImageRotatedClockwise$2",
            "GetWidth", "DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$GetWidth",
            "GetWidth", "DTLibrary$IDisplayProcessing$1$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$GetWidth",
            "GetHeight", "DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$GetHeight",
            "GetHeight", "DTLibrary$IDisplayProcessing$1$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$GetHeight",
            "DrawText", "DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText",
            "TryDrawText", "DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TryDrawText",
            "DisposeImages", "DTLibrary$IDisplayCleanup$DisposeImages"
        ],
        ctors: {
            ctor: function (windowHeight) {
                this.$initialize();
                DTLibrary.DTDisplay$2(TuxPlanetSpeedrunAnyPercentLibrary.GameImage,TuxPlanetSpeedrunAnyPercentLibrary.GameFont).ctor.call(this);
                this.bridgeDisplayRectangle = new TuxPlanetSpeedrunAnyPercent.BridgeDisplayRectangle(windowHeight);
                this.bridgeDisplayImages = new TuxPlanetSpeedrunAnyPercent.BridgeDisplayImages(windowHeight);
                this.bridgeDisplayFont = new TuxPlanetSpeedrunAnyPercent.BridgeDisplayFont(windowHeight);
            }
        },
        methods: {
            DrawInitialLoadingScreen: function () { },
            DrawRectangle: function (x, y, width, height, color, fill) {
                this.bridgeDisplayRectangle.DrawRectangle(x, y, width, height, color, fill);
            },
            LoadImages: function () {
                var finishedLoadingImages = this.bridgeDisplayImages.LoadImages();

                if (!finishedLoadingImages) {
                    return false;
                }

                return this.bridgeDisplayFont.LoadFonts();
            },
            DrawImageRotatedClockwise$1: function (image, x, y, degreesScaled, scalingFactorScaled) {
                this.bridgeDisplayImages.DrawImageRotatedClockwise(image, x, y, degreesScaled, scalingFactorScaled);
            },
            DrawImageRotatedClockwise: function (image, imageX, imageY, imageWidth, imageHeight, x, y, degreesScaled, scalingFactorScaled) {
                this.bridgeDisplayImages.DrawImageRotatedClockwise$1(image, imageX, imageY, imageWidth, imageHeight, x, y, degreesScaled, scalingFactorScaled);
            },
            GetWidth: function (image) {
                return this.bridgeDisplayImages.GetWidth(image);
            },
            GetHeight: function (image) {
                return this.bridgeDisplayImages.GetHeight(image);
            },
            DrawText: function (x, y, text, font, color) {
                this.bridgeDisplayFont.DrawText(x, y, text, font, color);
            },
            TryDrawText: function (x, y, text, font, color) {
                this.bridgeDisplayFont.TryDrawText(x, y, text, font, color);
            },
            DisposeImages: function () { }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.CreditsFrame", {
        inherits: [DTLibrary.IFrame$4(TuxPlanetSpeedrunAnyPercentLibrary.GameImage,TuxPlanetSpeedrunAnyPercentLibrary.GameFont,TuxPlanetSpeedrunAnyPercentLibrary.GameSound,TuxPlanetSpeedrunAnyPercentLibrary.GameMusic)],
        fields: {
            globalState: null,
            sessionState: null,
            tabButtons: null,
            selectedTab: 0,
            hoverTab: null,
            clickTab: null,
            backButton: null,
            isHoverOverGitHubUrl: false
        },
        alias: [
            "GetNextFrame", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetNextFrame",
            "ProcessExtraTime", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessExtraTime",
            "GetClickUrl", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetClickUrl",
            "ProcessMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessMusic",
            "Render", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$Render",
            "RenderMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$RenderMusic"
        ],
        ctors: {
            ctor: function (globalState, sessionState) {
                this.$initialize();
                this.globalState = globalState;
                this.sessionState = sessionState;

                this.selectedTab = TuxPlanetSpeedrunAnyPercentLibrary.CreditsFrame.Tab.DesignAndCoding;
                this.hoverTab = null;
                this.clickTab = null;

                this.tabButtons = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.CreditsFrame.TabButton)).ctor();
                this.tabButtons.add(new TuxPlanetSpeedrunAnyPercentLibrary.CreditsFrame.TabButton(20, 569, 234, 40, TuxPlanetSpeedrunAnyPercentLibrary.CreditsFrame.Tab.DesignAndCoding, "Design and coding"));
                this.tabButtons.add(new TuxPlanetSpeedrunAnyPercentLibrary.CreditsFrame.TabButton(254, 569, 103, 40, TuxPlanetSpeedrunAnyPercentLibrary.CreditsFrame.Tab.Images, "Images"));
                this.tabButtons.add(new TuxPlanetSpeedrunAnyPercentLibrary.CreditsFrame.TabButton(357, 569, 82, 40, TuxPlanetSpeedrunAnyPercentLibrary.CreditsFrame.Tab.Font, "Font"));
                this.tabButtons.add(new TuxPlanetSpeedrunAnyPercentLibrary.CreditsFrame.TabButton(439, 569, 96, 40, TuxPlanetSpeedrunAnyPercentLibrary.CreditsFrame.Tab.Sound, "Sound"));
                this.tabButtons.add(new TuxPlanetSpeedrunAnyPercentLibrary.CreditsFrame.TabButton(535, 569, 90, 40, TuxPlanetSpeedrunAnyPercentLibrary.CreditsFrame.Tab.Music, "Music"));

                this.backButton = new TuxPlanetSpeedrunAnyPercentLibrary.Button(780, 20, 200, 80, TuxPlanetSpeedrunAnyPercentLibrary.Button.GetStandardPrimaryBackgroundColor(), TuxPlanetSpeedrunAnyPercentLibrary.Button.GetStandardHoverColor(), TuxPlanetSpeedrunAnyPercentLibrary.Button.GetStandardClickColor(), "Back", 67, 28, TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont20Pt);

                this.isHoverOverGitHubUrl = false;
            }
        },
        methods: {
            GetNextFrame: function (keyboardInput, mouseInput, previousKeyboardInput, previousMouseInput, displayProcessing, soundOutput, musicProcessing) {
                var $t;
                var mouseX = mouseInput.DTLibrary$IMouse$GetX();
                var mouseY = mouseInput.DTLibrary$IMouse$GetY();

                this.isHoverOverGitHubUrl = false;

                this.hoverTab = null;
                $t = Bridge.getEnumerator(this.tabButtons);
                try {
                    while ($t.moveNext()) {
                        var tabButton = $t.Current;
                        if (tabButton.X <= mouseX && mouseX <= ((tabButton.X + tabButton.Width) | 0) && tabButton.Y <= mouseY && mouseY <= ((tabButton.Y + tabButton.Height) | 0)) {
                            this.hoverTab = tabButton.Tab;
                        }
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }

                if (mouseInput.DTLibrary$IMouse$IsLeftMouseButtonPressed() && !previousMouseInput.DTLibrary$IMouse$IsLeftMouseButtonPressed()) {
                    if (this.hoverTab != null) {
                        this.clickTab = this.hoverTab;
                    }
                }

                if (this.clickTab != null && !mouseInput.DTLibrary$IMouse$IsLeftMouseButtonPressed() && previousMouseInput.DTLibrary$IMouse$IsLeftMouseButtonPressed()) {
                    if (System.Nullable.hasValue(this.hoverTab) && System.Nullable.getValue(this.hoverTab) === System.Nullable.getValue(this.clickTab)) {
                        soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$PlaySound(TuxPlanetSpeedrunAnyPercentLibrary.GameSound.Click);
                        this.selectedTab = System.Nullable.getValue(this.clickTab);
                    }

                    this.clickTab = null;
                }

                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Esc) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Esc)) {
                    soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$PlaySound(TuxPlanetSpeedrunAnyPercentLibrary.GameSound.Click);
                    return new TuxPlanetSpeedrunAnyPercentLibrary.TitleScreenFrame(this.globalState, this.sessionState);
                }

                var clickedBackButton = this.backButton.ProcessFrame(mouseInput, previousMouseInput);
                if (clickedBackButton) {
                    soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$PlaySound(TuxPlanetSpeedrunAnyPercentLibrary.GameSound.Click);
                    return new TuxPlanetSpeedrunAnyPercentLibrary.TitleScreenFrame(this.globalState, this.sessionState);
                }

                if (this.selectedTab === TuxPlanetSpeedrunAnyPercentLibrary.CreditsFrame.Tab.DesignAndCoding) {
                    this.isHoverOverGitHubUrl = TuxPlanetSpeedrunAnyPercentLibrary.Credits_DesignAndCoding.IsHoverOverGitHubUrl(new DTLibrary.TranslatedMouse(mouseInput, -20, -120), this.globalState.IsWebBrowserVersion, 960, 450);
                }

                return this;
            },
            ProcessExtraTime: function (milliseconds) { },
            GetClickUrl: function () {
                if (this.isHoverOverGitHubUrl) {
                    return "https://github.com/dtsudo";
                }

                return null;
            },
            ProcessMusic: function () {
                this.globalState.ProcessMusic();
            },
            Render: function (displayOutput) {
                var $t;
                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle(0, 0, this.globalState.WindowWidth, this.globalState.WindowHeight, new DTLibrary.DTColor.ctor(223, 220, 217), true);

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText(422, 675, "Credits", TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont32Pt, DTLibrary.DTColor.Black());

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle(20, 120, 959, 449, DTLibrary.DTColor.White(), true);

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle(20, 120, 960, 450, DTLibrary.DTColor.Black(), false);

                $t = Bridge.getEnumerator(this.tabButtons);
                try {
                    while ($t.moveNext()) {
                        var tabButton = $t.Current;
                        var backgroundColor;

                        if (tabButton.Tab === this.selectedTab) {
                            backgroundColor = DTLibrary.DTColor.White();
                        } else {
                            if (System.Nullable.hasValue(this.clickTab) && System.Nullable.getValue(this.clickTab) === tabButton.Tab) {
                                backgroundColor = TuxPlanetSpeedrunAnyPercentLibrary.Button.GetStandardClickColor();
                            } else {
                                if (System.Nullable.hasValue(this.hoverTab) && System.Nullable.getValue(this.hoverTab) === tabButton.Tab) {
                                    backgroundColor = TuxPlanetSpeedrunAnyPercentLibrary.Button.GetStandardHoverColor();
                                } else {
                                    backgroundColor = TuxPlanetSpeedrunAnyPercentLibrary.Button.GetStandardSecondaryBackgroundColor();
                                }
                            }
                        }

                        displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle(tabButton.X, tabButton.Y, ((tabButton.Width - 1) | 0), ((tabButton.Height - 1) | 0), backgroundColor, true);

                        displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle(tabButton.X, tabButton.Y, tabButton.Width, tabButton.Height, DTLibrary.DTColor.Black(), false);

                        if (this.selectedTab === tabButton.Tab) {
                            displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle(((tabButton.X + 1) | 0), ((tabButton.Y - 1) | 0), ((tabButton.Width - 2) | 0), 3, DTLibrary.DTColor.White(), true);
                        }

                        displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText(((tabButton.X + 10) | 0), ((((tabButton.Y + tabButton.Height) | 0) - 10) | 0), tabButton.TabName, TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont18Pt, DTLibrary.DTColor.Black());
                    }
                } finally {
                    if (Bridge.is($t, System.IDisposable)) {
                        $t.System$IDisposable$Dispose();
                    }
                }

                var translatedDisplay = new (DTLibrary.TranslatedDisplayOutput$2(TuxPlanetSpeedrunAnyPercentLibrary.GameImage,TuxPlanetSpeedrunAnyPercentLibrary.GameFont))(displayOutput, 20, 120);

                if (this.selectedTab === TuxPlanetSpeedrunAnyPercentLibrary.CreditsFrame.Tab.DesignAndCoding) {
                    TuxPlanetSpeedrunAnyPercentLibrary.Credits_DesignAndCoding.Render(translatedDisplay, this.isHoverOverGitHubUrl, this.globalState.IsWebBrowserVersion, 960, 450);
                }
                if (this.selectedTab === TuxPlanetSpeedrunAnyPercentLibrary.CreditsFrame.Tab.Images) {
                    TuxPlanetSpeedrunAnyPercentLibrary.Credits_Images.Render(translatedDisplay, 960, 450);
                }
                if (this.selectedTab === TuxPlanetSpeedrunAnyPercentLibrary.CreditsFrame.Tab.Font) {
                    TuxPlanetSpeedrunAnyPercentLibrary.Credits_Font.Render(translatedDisplay, 960, 450);
                }
                if (this.selectedTab === TuxPlanetSpeedrunAnyPercentLibrary.CreditsFrame.Tab.Sound) {
                    TuxPlanetSpeedrunAnyPercentLibrary.Credits_Sound.Render(translatedDisplay, 960, 450);
                }
                if (this.selectedTab === TuxPlanetSpeedrunAnyPercentLibrary.CreditsFrame.Tab.Music) {
                    TuxPlanetSpeedrunAnyPercentLibrary.Credits_Music.Render(translatedDisplay, 960, 450);
                }

                this.backButton.Render(displayOutput);
            },
            RenderMusic: function (musicOutput) {
                this.globalState.RenderMusic(musicOutput);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.GameFrame", {
        inherits: [DTLibrary.IFrame$4(TuxPlanetSpeedrunAnyPercentLibrary.GameImage,TuxPlanetSpeedrunAnyPercentLibrary.GameFont,TuxPlanetSpeedrunAnyPercentLibrary.GameSound,TuxPlanetSpeedrunAnyPercentLibrary.GameMusic)],
        statics: {
            methods: {
                GetGameFrame: function (globalState, sessionState, displayProcessing, soundOutput, musicProcessing) {
                    var gameFrame = new TuxPlanetSpeedrunAnyPercentLibrary.GameFrame(globalState, sessionState);
                    gameFrame.GetNextFrame(new DTLibrary.EmptyKeyboard(), new DTLibrary.EmptyMouse(), new DTLibrary.EmptyKeyboard(), new DTLibrary.EmptyMouse(), displayProcessing, soundOutput, musicProcessing);

                    return gameFrame;
                }
            }
        },
        fields: {
            globalState: null,
            sessionState: null,
            gameLogic: null,
            hasStartedLevelTransition: false,
            savedGameLogicState: null,
            extraElapsedMicros: 0,
            numberOfSkippedFrames: 0,
            moveHistory: null,
            lastMoveOfHistory: 0,
            useSavedMoves: false
        },
        alias: [
            "GetNextFrame", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetNextFrame",
            "ProcessExtraTime", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessExtraTime",
            "GetClickUrl", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetClickUrl",
            "ProcessMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessMusic",
            "Render", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$Render",
            "RenderMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$RenderMusic"
        ],
        ctors: {
            ctor: function (globalState, sessionState) {
                this.$initialize();
                this.globalState = globalState;
                this.sessionState = sessionState;
                this.gameLogic = sessionState.GameLogic;
                this.hasStartedLevelTransition = false;
                this.savedGameLogicState = null;
                this.extraElapsedMicros = 0;
                this.numberOfSkippedFrames = 0;
                this.moveHistory = new (System.Collections.Generic.Dictionary$2(System.Int32,TuxPlanetSpeedrunAnyPercentLibrary.Move))();
                this.lastMoveOfHistory = 0;
                this.useSavedMoves = false;
            }
        },
        methods: {
            GetNextFrame: function (keyboardInput, mouseInput, previousKeyboardInput, previousMouseInput, displayProcessing, soundOutput, musicProcessing) {
                this.sessionState.AddElapsedMillis(((Bridge.Int.div(this.globalState.ElapsedMicrosPerFrame, 1000)) | 0));

                this.extraElapsedMicros = (this.extraElapsedMicros + (this.globalState.ElapsedMicrosPerFrame % 1000)) | 0;
                if (this.extraElapsedMicros >= 1000) {
                    this.extraElapsedMicros = (this.extraElapsedMicros - 1000) | 0;
                    this.sessionState.AddElapsedMillis(1);
                }

                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Esc) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Esc) && !this.gameLogic.Tux.IsDead) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.PauseMenuFrame(this.globalState, this.sessionState, this, true, true);
                }

                var move = new TuxPlanetSpeedrunAnyPercentLibrary.Move(keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Z), keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.X), keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.LeftArrow), keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.RightArrow), keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.UpArrow), keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.DownArrow), keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Esc));

                if (move.Jumped) {
                    this.sessionState.AddRandomSeed(7);
                }
                if (move.ArrowLeft) {
                    this.sessionState.AddRandomSeed(11);
                }
                if (move.ArrowRight) {
                    this.sessionState.AddRandomSeed(17);
                }

                var shouldExecuteFrame;
                var shouldEndLevel;

                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Shift) && this.gameLogic.CanUseTimeSlowdown) {
                    this.numberOfSkippedFrames = (this.numberOfSkippedFrames + 1) | 0;
                    if (this.numberOfSkippedFrames === 5) {
                        this.numberOfSkippedFrames = 0;
                        shouldExecuteFrame = true;
                    } else {
                        shouldExecuteFrame = false;
                    }
                } else {
                    shouldExecuteFrame = true;
                }

                if (shouldExecuteFrame) {
                    var moveToUse;

                    var didUserPressKey = move.Jumped || move.Teleported || move.ArrowLeft || move.ArrowRight || move.ArrowUp || move.ArrowDown || move.Respawn;

                    if (this.useSavedMoves && !didUserPressKey && this.lastMoveOfHistory >= this.gameLogic.FrameCounter && this.moveHistory.containsKey(this.gameLogic.FrameCounter)) {
                        moveToUse = this.moveHistory.get(this.gameLogic.FrameCounter);
                    } else {
                        this.moveHistory.set(this.gameLogic.FrameCounter, move);
                        this.lastMoveOfHistory = this.gameLogic.FrameCounter;
                        moveToUse = move;
                        this.useSavedMoves = false;
                    }

                    var result = TuxPlanetSpeedrunAnyPercentLibrary.GameLogicStateProcessing.ProcessFrame(this.gameLogic, moveToUse, this.globalState.DebugMode, keyboardInput, previousKeyboardInput, displayProcessing, soundOutput, this.globalState.ElapsedMicrosPerFrame);

                    this.gameLogic = result.NewGameLogicState;

                    if (result.PlayMusic != null) {
                        this.globalState.MusicPlayer.SetMusic(System.Nullable.getValue(result.PlayMusic), 100);
                    }

                    if (result.ShouldStopMusic) {
                        this.globalState.MusicPlayer.StopMusic();
                    }

                    shouldEndLevel = result.EndLevel;
                } else {
                    shouldEndLevel = false;
                }

                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.S) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.S) && this.gameLogic.CanUseSaveStates) {
                    this.savedGameLogicState = this.gameLogic;
                }

                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.A) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.A) && this.gameLogic.CanUseSaveStates) {
                    if (this.savedGameLogicState != null) {
                        this.gameLogic = this.savedGameLogicState;
                        this.useSavedMoves = true;
                    }
                }

                if (this.globalState.DebugMode) {
                    if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.H) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.H)) {
                        this.globalState.Debug_ShowHitBoxes = !this.globalState.Debug_ShowHitBoxes;
                    }
                }

                if (!this.hasStartedLevelTransition) {
                    this.sessionState.SetGameLogic(this.gameLogic);
                }

                if (shouldEndLevel && !this.hasStartedLevelTransition) {
                    this.hasStartedLevelTransition = true;

                    var isLastLevel = TuxPlanetSpeedrunAnyPercentLibrary.LevelUtil.IsLastLevel(System.Nullable.getValue(this.sessionState.CurrentLevel));

                    this.sessionState.CompleteLevel(System.Nullable.getValue(this.sessionState.CurrentLevel), this.gameLogic.CanUseSaveStates, this.gameLogic.CanUseTimeSlowdown, this.gameLogic.CanUseTeleport);

                    this.globalState.SaveData(this.sessionState, soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$GetSoundVolume());

                    if (!isLastLevel) {
                        var newFrame = new TuxPlanetSpeedrunAnyPercentLibrary.OverworldFrame(this.globalState, this.sessionState);

                        return new TuxPlanetSpeedrunAnyPercentLibrary.LevelTransitionFrame(this.globalState, this, newFrame);
                    }

                    return new TuxPlanetSpeedrunAnyPercentLibrary.LevelTransitionFrame(this.globalState, this, new TuxPlanetSpeedrunAnyPercentLibrary.VictoryScreenFrame(this.globalState, this.sessionState));
                }

                return this;
            },
            ProcessExtraTime: function (milliseconds) { },
            GetClickUrl: function () {
                return null;
            },
            ProcessMusic: function () {
                this.globalState.ProcessMusic();
            },
            Render: function (displayOutput) {
                TuxPlanetSpeedrunAnyPercentLibrary.GameLogicStateProcessing.Render(this.gameLogic, displayOutput, this.sessionState.ElapsedMillis, this.globalState.Debug_ShowHitBoxes);
            },
            RenderMusic: function (musicOutput) {
                this.globalState.RenderMusic(musicOutput);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.InitialLoadingScreenFrame", {
        inherits: [DTLibrary.IFrame$4(TuxPlanetSpeedrunAnyPercentLibrary.GameImage,TuxPlanetSpeedrunAnyPercentLibrary.GameFont,TuxPlanetSpeedrunAnyPercentLibrary.GameSound,TuxPlanetSpeedrunAnyPercentLibrary.GameMusic)],
        fields: {
            globalState: null
        },
        alias: [
            "ProcessExtraTime", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessExtraTime",
            "GetClickUrl", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetClickUrl",
            "GetNextFrame", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetNextFrame",
            "ProcessMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessMusic",
            "Render", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$Render",
            "RenderMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$RenderMusic"
        ],
        ctors: {
            ctor: function (globalState) {
                this.$initialize();
                this.globalState = globalState;
            }
        },
        methods: {
            ProcessExtraTime: function (milliseconds) { },
            GetClickUrl: function () {
                return null;
            },
            GetNextFrame: function (keyboardInput, mouseInput, previousKeyboardInput, previousMouseInput, displayProcessing, soundOutput, musicProcessing) {
                var returnValue = this.GetNextFrameHelper(displayProcessing, soundOutput, musicProcessing);

                if (returnValue != null) {
                    return returnValue;
                }

                returnValue = this.GetNextFrameHelper(displayProcessing, soundOutput, musicProcessing);

                if (returnValue != null) {
                    return returnValue;
                }

                return this;
            },
            GetNextFrameHelper: function (displayProcessing, soundOutput, musicProcessing) {
                var isDoneLoadingImages = displayProcessing.DTLibrary$IDisplayProcessing$1$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$LoadImages();

                if (!isDoneLoadingImages) {
                    return null;
                }

                var isDoneLoadingSounds = soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$LoadSounds();

                if (!isDoneLoadingSounds) {
                    return null;
                }

                var isDoneLoadingMusic = musicProcessing.DTLibrary$IMusicProcessing$LoadMusic();

                if (!isDoneLoadingMusic) {
                    return null;
                }

                var sessionState = new TuxPlanetSpeedrunAnyPercentLibrary.SessionState(this.globalState.WindowWidth, this.globalState.WindowHeight);

                this.globalState.LoadSessionState(sessionState);

                var soundVolume = this.globalState.LoadSoundVolume();
                if (System.Nullable.hasValue(soundVolume)) {
                    soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$SetSoundVolume(System.Nullable.getValue(soundVolume));
                }

                this.globalState.LoadMusicVolume();

                return new TuxPlanetSpeedrunAnyPercentLibrary.TitleScreenFrame(this.globalState, sessionState);
            },
            ProcessMusic: function () { },
            Render: function (displayOutput) {
                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawInitialLoadingScreen();
            },
            RenderMusic: function (musicOutput) { }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.InstructionsFrame", {
        inherits: [DTLibrary.IFrame$4(TuxPlanetSpeedrunAnyPercentLibrary.GameImage,TuxPlanetSpeedrunAnyPercentLibrary.GameFont,TuxPlanetSpeedrunAnyPercentLibrary.GameSound,TuxPlanetSpeedrunAnyPercentLibrary.GameMusic)],
        fields: {
            globalState: null,
            sessionState: null,
            hasStartedGame: false
        },
        alias: [
            "ProcessExtraTime", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessExtraTime",
            "GetClickUrl", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetClickUrl",
            "GetNextFrame", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetNextFrame",
            "ProcessMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessMusic",
            "Render", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$Render",
            "RenderMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$RenderMusic"
        ],
        ctors: {
            ctor: function (globalState, sessionState) {
                this.$initialize();
                this.globalState = globalState;
                this.sessionState = sessionState;

                this.hasStartedGame = false;
            }
        },
        methods: {
            ProcessExtraTime: function (milliseconds) { },
            GetClickUrl: function () {
                return null;
            },
            GetNextFrame: function (keyboardInput, mouseInput, previousKeyboardInput, previousMouseInput, displayProcessing, soundOutput, musicProcessing) {
                if ((keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Enter) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Enter) || keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Space) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Space) || keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Z) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Z)) && !this.hasStartedGame) {
                    this.hasStartedGame = true;

                    soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$PlaySound(TuxPlanetSpeedrunAnyPercentLibrary.GameSound.Click);

                    this.globalState.SaveData(this.sessionState, soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$GetSoundVolume());

                    return new TuxPlanetSpeedrunAnyPercentLibrary.OverworldFrame(this.globalState, this.sessionState);
                }

                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Esc) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Esc)) {
                    soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$PlaySound(TuxPlanetSpeedrunAnyPercentLibrary.GameSound.Click);
                    return new TuxPlanetSpeedrunAnyPercentLibrary.PauseMenuFrame(this.globalState, this.sessionState, this, false, false);
                }

                return this;
            },
            ProcessMusic: function () {
                this.globalState.ProcessMusic();
            },
            Render: function (displayOutput) {
                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle(0, 0, this.globalState.WindowWidth, this.globalState.WindowHeight, new DTLibrary.DTColor.ctor(223, 220, 217), true);

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText(((((Bridge.Int.div(this.globalState.WindowWidth, 2)) | 0) - 130) | 0), 650, "Instructions", TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont32Pt, DTLibrary.DTColor.Black());

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText(((((Bridge.Int.div(this.globalState.WindowWidth, 2)) | 0) - 442) | 0), 500, "You are an elite speedrunner. Today, you're speedrunning the \nplatforming game Tux Planet. \n\nUnfortunately, the devs are complete morons and the level design \nis terrible. Good luck! \n\nControls: \n    Movement: Arrow keys \n    Jump: Z", TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont20Pt, DTLibrary.DTColor.Black());

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText(((((Bridge.Int.div(this.globalState.WindowWidth, 2)) | 0) - 129) | 0), 160, "Start (press enter)", TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont20Pt, DTLibrary.DTColor.Black());
            },
            RenderMusic: function (musicOutput) {
                this.globalState.RenderMusic(musicOutput);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.LevelTransitionFrame", {
        inherits: [DTLibrary.IFrame$4(TuxPlanetSpeedrunAnyPercentLibrary.GameImage,TuxPlanetSpeedrunAnyPercentLibrary.GameFont,TuxPlanetSpeedrunAnyPercentLibrary.GameSound,TuxPlanetSpeedrunAnyPercentLibrary.GameMusic)],
        statics: {
            fields: {
                DURATION_OF_FADE_OUT: 0,
                DURATION_OF_FADE_IN: 0
            },
            ctors: {
                init: function () {
                    this.DURATION_OF_FADE_OUT = 500000;
                    this.DURATION_OF_FADE_IN = 500000;
                }
            }
        },
        fields: {
            globalState: null,
            previousFrame: null,
            newFrame: null,
            elapsedMicros: 0,
            isFadingIn: false,
            hasAdvancedPreviousFrameAtLeastOnce: false
        },
        alias: [
            "ProcessExtraTime", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessExtraTime",
            "GetClickUrl", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetClickUrl",
            "GetNextFrame", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetNextFrame",
            "ProcessMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessMusic",
            "Render", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$Render",
            "RenderMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$RenderMusic"
        ],
        ctors: {
            ctor: function (globalState, previousFrame, newFrame) {
                this.$initialize();
                this.globalState = globalState;
                this.previousFrame = previousFrame;
                this.newFrame = newFrame;
                this.elapsedMicros = 0;

                this.isFadingIn = false;
                this.hasAdvancedPreviousFrameAtLeastOnce = false;
            }
        },
        methods: {
            ProcessExtraTime: function (milliseconds) { },
            GetClickUrl: function () {
                if (this.isFadingIn) {
                    return this.newFrame.DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetClickUrl();
                }

                return null;
            },
            GetNextFrame: function (keyboardInput, mouseInput, previousKeyboardInput, previousMouseInput, displayProcessing, soundOutput, musicProcessing) {
                this.elapsedMicros = (this.elapsedMicros + this.globalState.ElapsedMicrosPerFrame) | 0;

                if (!this.isFadingIn) {
                    if (this.elapsedMicros > TuxPlanetSpeedrunAnyPercentLibrary.LevelTransitionFrame.DURATION_OF_FADE_OUT) {
                        this.isFadingIn = true;
                    }
                }

                if (!this.isFadingIn || !this.hasAdvancedPreviousFrameAtLeastOnce) {
                    this.hasAdvancedPreviousFrameAtLeastOnce = true;
                    this.previousFrame = this.previousFrame.DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetNextFrame(new DTLibrary.EmptyKeyboard(), new DTLibrary.EmptyMouse(), new DTLibrary.EmptyKeyboard(), new DTLibrary.EmptyMouse(), displayProcessing, soundOutput, musicProcessing);

                    if (this.previousFrame == null) {
                        return null;
                    }
                }

                if (this.isFadingIn) {
                    this.newFrame = this.newFrame.DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetNextFrame(keyboardInput, mouseInput, previousKeyboardInput, previousMouseInput, displayProcessing, soundOutput, musicProcessing);

                    if (this.newFrame == null) {
                        return null;
                    }
                }

                if (this.elapsedMicros > 1000000) {
                    return this.newFrame;
                }

                return this;
            },
            ProcessMusic: function () {
                this.globalState.ProcessMusic();
            },
            Render: function (displayOutput) {
                if (!this.isFadingIn) {
                    this.previousFrame.DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$Render(displayOutput);

                    var elapsedMicrosLong = System.Int64(this.elapsedMicros);

                    var alpha = System.Int64.clip32(elapsedMicrosLong.mul(System.Int64(255)).div(System.Int64(TuxPlanetSpeedrunAnyPercentLibrary.LevelTransitionFrame.DURATION_OF_FADE_OUT)));

                    if (alpha > 255) {
                        alpha = 255;
                    }
                    if (alpha < 0) {
                        alpha = 0;
                    }

                    displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle(0, 0, this.globalState.WindowWidth, this.globalState.WindowHeight, new DTLibrary.DTColor.$ctor1(0, 0, 0, alpha), true);
                } else {
                    this.newFrame.DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$Render(displayOutput);

                    var elapsed = System.Int64(this.elapsedMicros - TuxPlanetSpeedrunAnyPercentLibrary.LevelTransitionFrame.DURATION_OF_FADE_OUT);

                    var alpha1 = System.Int64.clip32(System.Int64(255).sub(elapsed.mul(System.Int64(255)).div(System.Int64(TuxPlanetSpeedrunAnyPercentLibrary.LevelTransitionFrame.DURATION_OF_FADE_IN))));

                    if (alpha1 > 255) {
                        alpha1 = 255;
                    }
                    if (alpha1 < 0) {
                        alpha1 = 0;
                    }

                    displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle(0, 0, this.globalState.WindowWidth, this.globalState.WindowHeight, new DTLibrary.DTColor.$ctor1(0, 0, 0, alpha1), true);
                }
            },
            RenderMusic: function (musicOutput) {
                this.globalState.RenderMusic(musicOutput);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.OverworldFrame", {
        inherits: [DTLibrary.IFrame$4(TuxPlanetSpeedrunAnyPercentLibrary.GameImage,TuxPlanetSpeedrunAnyPercentLibrary.GameFont,TuxPlanetSpeedrunAnyPercentLibrary.GameSound,TuxPlanetSpeedrunAnyPercentLibrary.GameMusic)],
        fields: {
            globalState: null,
            sessionState: null,
            extraElapsedMicros: 0,
            overworld: null,
            hasStartedLevelTransition: false
        },
        alias: [
            "ProcessExtraTime", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessExtraTime",
            "GetClickUrl", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetClickUrl",
            "GetNextFrame", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetNextFrame",
            "ProcessMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessMusic",
            "Render", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$Render",
            "RenderMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$RenderMusic"
        ],
        ctors: {
            ctor: function (globalState, sessionState) {
                this.$initialize();
                this.globalState = globalState;
                this.sessionState = sessionState;

                this.extraElapsedMicros = 0;

                this.overworld = sessionState.Overworld;

                this.hasStartedLevelTransition = false;
            }
        },
        methods: {
            ProcessExtraTime: function (milliseconds) { },
            GetClickUrl: function () {
                return null;
            },
            GetNextFrame: function (keyboardInput, mouseInput, previousKeyboardInput, previousMouseInput, displayProcessing, soundOutput, musicProcessing) {
                this.globalState.MusicPlayer.SetMusic(TuxPlanetSpeedrunAnyPercentLibrary.GameMusic.PeaceAtLast, 100);

                this.sessionState.AddElapsedMillis(((Bridge.Int.div(this.globalState.ElapsedMicrosPerFrame, 1000)) | 0));

                this.extraElapsedMicros = (this.extraElapsedMicros + (this.globalState.ElapsedMicrosPerFrame % 1000)) | 0;
                if (this.extraElapsedMicros >= 1000) {
                    this.extraElapsedMicros = (this.extraElapsedMicros - 1000) | 0;
                    this.sessionState.AddElapsedMillis(1);
                }

                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Esc) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Esc)) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.PauseMenuFrame(this.globalState, this.sessionState, this, false, false);
                }

                var result = this.overworld.ProcessFrame(keyboardInput, previousKeyboardInput, this.globalState.WindowWidth, this.globalState.WindowHeight, this.globalState.ElapsedMicrosPerFrame);

                this.overworld = result.Overworld;
                this.sessionState.SetOverworld(this.overworld);

                var level = result.SelectedLevel;

                if (level != null && !this.hasStartedLevelTransition) {
                    this.hasStartedLevelTransition = true;

                    this.sessionState.StartLevel(System.Nullable.getValue(level), this.globalState.WindowWidth, this.globalState.WindowHeight, this.globalState.MapInfo);

                    this.globalState.SaveData(this.sessionState, soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$GetSoundVolume());

                    var newFrame = TuxPlanetSpeedrunAnyPercentLibrary.GameFrame.GetGameFrame(this.globalState, this.sessionState, displayProcessing, soundOutput, musicProcessing);

                    return new TuxPlanetSpeedrunAnyPercentLibrary.LevelTransitionFrame(this.globalState, this, newFrame);
                }

                return this;
            },
            ProcessMusic: function () {
                this.globalState.ProcessMusic();
            },
            Render: function (displayOutput) {
                this.overworld.Render(displayOutput);

                var elapsedTimeString = TuxPlanetSpeedrunAnyPercentLibrary.ElapsedTimeUtil.GetElapsedTimeString(this.sessionState.ElapsedMillis);
                var timerText = "Time: " + (elapsedTimeString || "");

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText(((this.globalState.WindowWidth - 120) | 0), ((this.globalState.WindowHeight - 10) | 0), timerText, TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont14Pt, DTLibrary.DTColor.Black());
            },
            RenderMusic: function (musicOutput) {
                this.globalState.RenderMusic(musicOutput);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.PauseMenuFrame", {
        inherits: [DTLibrary.IFrame$4(TuxPlanetSpeedrunAnyPercentLibrary.GameImage,TuxPlanetSpeedrunAnyPercentLibrary.GameFont,TuxPlanetSpeedrunAnyPercentLibrary.GameSound,TuxPlanetSpeedrunAnyPercentLibrary.GameMusic)],
        fields: {
            globalState: null,
            sessionState: null,
            selectedOption: 0,
            options: null,
            volumePicker: null,
            underlyingFrame: null
        },
        alias: [
            "GetNextFrame", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetNextFrame",
            "ProcessExtraTime", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessExtraTime",
            "GetClickUrl", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetClickUrl",
            "ProcessMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessMusic",
            "Render", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$Render",
            "RenderMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$RenderMusic"
        ],
        ctors: {
            ctor: function (globalState, sessionState, underlyingFrame, showRestartLevelOption, showBackToMapOption) {
                this.$initialize();
                this.globalState = globalState;
                this.sessionState = sessionState;
                this.volumePicker = null;
                this.underlyingFrame = underlyingFrame;

                this.selectedOption = 0;

                this.options = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.PauseMenuFrame.Option)).ctor();
                this.options.add(TuxPlanetSpeedrunAnyPercentLibrary.PauseMenuFrame.Option.Continue);
                if (showRestartLevelOption) {
                    this.options.add(TuxPlanetSpeedrunAnyPercentLibrary.PauseMenuFrame.Option.RestartLevel);
                }
                if (showBackToMapOption) {
                    this.options.add(TuxPlanetSpeedrunAnyPercentLibrary.PauseMenuFrame.Option.BackToMapScreen);
                }
                this.options.add(TuxPlanetSpeedrunAnyPercentLibrary.PauseMenuFrame.Option.BackToTitleScreen);
            }
        },
        methods: {
            GetNextFrame: function (keyboardInput, mouseInput, previousKeyboardInput, previousMouseInput, displayProcessing, soundOutput, musicProcessing) {
                if (this.volumePicker == null) {
                    this.volumePicker = new TuxPlanetSpeedrunAnyPercentLibrary.SoundAndMusicVolumePicker(0, 0, soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$GetSoundVolume(), this.globalState.MusicVolume, this.globalState.ElapsedMicrosPerFrame, TuxPlanetSpeedrunAnyPercentLibrary.SoundAndMusicVolumePicker.Color.White);
                }

                this.volumePicker.ProcessFrame(mouseInput, previousMouseInput);
                soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$SetSoundVolume(this.volumePicker.GetCurrentSoundVolume());
                this.globalState.MusicVolume = this.volumePicker.GetCurrentMusicVolume();

                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Esc) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Esc)) {
                    soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$PlaySound(TuxPlanetSpeedrunAnyPercentLibrary.GameSound.Click);
                    this.globalState.SaveData(this.sessionState, soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$GetSoundVolume());
                    return this.underlyingFrame;
                }

                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.UpArrow) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.UpArrow)) {
                    this.selectedOption = (this.selectedOption - 1) | 0;
                    if (this.selectedOption === -1) {
                        this.selectedOption = (this.options.Count - 1) | 0;
                    }
                }

                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.DownArrow) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.DownArrow)) {
                    this.selectedOption = (this.selectedOption + 1) | 0;
                    if (this.selectedOption === this.options.Count) {
                        this.selectedOption = 0;
                    }
                }

                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Enter) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Enter) || keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Space) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Space) || keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Z) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Z)) {
                    soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$PlaySound(TuxPlanetSpeedrunAnyPercentLibrary.GameSound.Click);

                    switch (this.options.getItem(this.selectedOption)) {
                        case TuxPlanetSpeedrunAnyPercentLibrary.PauseMenuFrame.Option.Continue: 
                            this.globalState.SaveData(this.sessionState, soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$GetSoundVolume());
                            return this.underlyingFrame;
                        case TuxPlanetSpeedrunAnyPercentLibrary.PauseMenuFrame.Option.RestartLevel: 
                            this.sessionState.StartLevel(System.Nullable.getValue(this.sessionState.CurrentLevel), this.globalState.WindowWidth, this.globalState.WindowHeight, this.globalState.MapInfo);
                            this.globalState.SaveData(this.sessionState, soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$GetSoundVolume());
                            return TuxPlanetSpeedrunAnyPercentLibrary.GameFrame.GetGameFrame(this.globalState, this.sessionState, displayProcessing, soundOutput, musicProcessing);
                        case TuxPlanetSpeedrunAnyPercentLibrary.PauseMenuFrame.Option.BackToMapScreen: 
                            this.sessionState.SetGameLogic(null);
                            this.globalState.SaveData(this.sessionState, soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$GetSoundVolume());
                            return new TuxPlanetSpeedrunAnyPercentLibrary.OverworldFrame(this.globalState, this.sessionState);
                        case TuxPlanetSpeedrunAnyPercentLibrary.PauseMenuFrame.Option.BackToTitleScreen: 
                            this.globalState.SaveData(this.sessionState, soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$GetSoundVolume());
                            return new TuxPlanetSpeedrunAnyPercentLibrary.TitleScreenFrame(this.globalState, this.sessionState);
                        default: 
                            throw new System.Exception();
                    }
                }

                return this;
            },
            ProcessExtraTime: function (milliseconds) { },
            GetClickUrl: function () {
                return null;
            },
            ProcessMusic: function () {
                this.globalState.ProcessMusic();
            },
            Render: function (displayOutput) {
                this.underlyingFrame.DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$Render(displayOutput);

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle(0, 0, this.globalState.WindowWidth, this.globalState.WindowHeight, new DTLibrary.DTColor.$ctor1(0, 0, 0, 215), true);

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText(((((Bridge.Int.div(this.globalState.WindowWidth, 2)) | 0) - 73) | 0), 650, "Paused", TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont32Pt, DTLibrary.DTColor.White());

                if (this.volumePicker != null) {
                    this.volumePicker.Render(displayOutput);
                }

                var selectedColor = new DTLibrary.DTColor.ctor(200, 255, 255);
                var notSelectedColor = new DTLibrary.DTColor.ctor(200, 200, 200);

                for (var i = 0; i < this.options.Count; i = (i + 1) | 0) {
                    var x = (((Bridge.Int.div(this.globalState.WindowWidth, 2)) | 0) - 105) | 0;
                    var y = (350 - Bridge.Int.mul(50, i)) | 0;
                    var text;

                    switch (this.options.getItem(i)) {
                        case TuxPlanetSpeedrunAnyPercentLibrary.PauseMenuFrame.Option.Continue: 
                            text = "Continue";
                            break;
                        case TuxPlanetSpeedrunAnyPercentLibrary.PauseMenuFrame.Option.RestartLevel: 
                            text = "Restart level";
                            break;
                        case TuxPlanetSpeedrunAnyPercentLibrary.PauseMenuFrame.Option.BackToMapScreen: 
                            text = "Quit level and return to map";
                            break;
                        case TuxPlanetSpeedrunAnyPercentLibrary.PauseMenuFrame.Option.BackToTitleScreen: 
                            text = "Back to title screen";
                            break;
                        default: 
                            throw new System.Exception();
                    }

                    displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText(x, y, text, TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont16Pt, i === this.selectedOption ? selectedColor : notSelectedColor);
                }
            },
            RenderMusic: function (musicOutput) {
                this.globalState.RenderMusic(musicOutput);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.TestingFontFrame", {
        inherits: [DTLibrary.IFrame$4(TuxPlanetSpeedrunAnyPercentLibrary.GameImage,TuxPlanetSpeedrunAnyPercentLibrary.GameFont,TuxPlanetSpeedrunAnyPercentLibrary.GameSound,TuxPlanetSpeedrunAnyPercentLibrary.GameMusic)],
        fields: {
            globalState: null,
            sessionState: null
        },
        alias: [
            "ProcessExtraTime", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessExtraTime",
            "GetClickUrl", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetClickUrl",
            "GetNextFrame", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetNextFrame",
            "ProcessMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessMusic",
            "Render", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$Render",
            "RenderMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$RenderMusic"
        ],
        ctors: {
            ctor: function (globalState, sessionState) {
                this.$initialize();
                this.globalState = globalState;
                this.sessionState = sessionState;
            }
        },
        methods: {
            ProcessExtraTime: function (milliseconds) { },
            GetClickUrl: function () {
                return null;
            },
            GetNextFrame: function (keyboardInput, mouseInput, previousKeyboardInput, previousMouseInput, displayProcessing, soundOutput, musicProcessing) {
                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Esc) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Esc)) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.TestingFrame(this.globalState, this.sessionState);
                }

                return this;
            },
            ProcessMusic: function () {
                this.globalState.ProcessMusic();
            },
            Render: function (displayOutput) {
                var red = new DTLibrary.DTColor.ctor(255, 0, 0);

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle(50, 589, 822, 60, red, false);

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText(50, 650, "Line 1 ABCDEFGHIJKLMNOPQRSTUVWXYZ ABCDEFGHIJKLMNOPQRSTUVWXYZ ABCDEFGHIJKLMNOPQRSTUVWXYZ\nLine 2\nLine 3\nLine 4", TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont12Pt, DTLibrary.DTColor.Black());

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle(51, 481, 637, 68, red, false);

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText(50, 550, "Line 1 abcdefghijklmnopqrstuvwxyz abcdefghijklmnopqrstuvwxyz\nLine 2\nLine 3\nLine 4", TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont14Pt, DTLibrary.DTColor.Black());
            },
            RenderMusic: function (musicOutput) {
                this.globalState.RenderMusic(musicOutput);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.TestingFrame", {
        inherits: [DTLibrary.IFrame$4(TuxPlanetSpeedrunAnyPercentLibrary.GameImage,TuxPlanetSpeedrunAnyPercentLibrary.GameFont,TuxPlanetSpeedrunAnyPercentLibrary.GameSound,TuxPlanetSpeedrunAnyPercentLibrary.GameMusic)],
        fields: {
            globalState: null,
            sessionState: null
        },
        alias: [
            "ProcessExtraTime", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessExtraTime",
            "GetClickUrl", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetClickUrl",
            "GetNextFrame", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetNextFrame",
            "ProcessMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessMusic",
            "Render", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$Render",
            "RenderMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$RenderMusic"
        ],
        ctors: {
            ctor: function (globalState, sessionState) {
                this.$initialize();
                this.globalState = globalState;
                this.sessionState = sessionState;
            }
        },
        methods: {
            ProcessExtraTime: function (milliseconds) { },
            GetClickUrl: function () {
                return null;
            },
            GetNextFrame: function (keyboardInput, mouseInput, previousKeyboardInput, previousMouseInput, displayProcessing, soundOutput, musicProcessing) {
                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Esc) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Esc)) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.TitleScreenFrame(this.globalState, this.sessionState);
                }

                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.One) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.One)) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.TestingKeyboardFrame(this.globalState, this.sessionState);
                }

                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Two) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Two)) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.TestingMouseFrame(this.globalState, this.sessionState);
                }

                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Three) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Three)) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.TestingFontFrame(this.globalState, this.sessionState);
                }

                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Four) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Four)) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.TestingSoundFrame(this.globalState, this.sessionState);
                }

                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Five) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Five)) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.TestingMusicFrame(this.globalState, this.sessionState);
                }

                return this;
            },
            ProcessMusic: function () {
                this.globalState.ProcessMusic();
            },
            Render: function (displayOutput) {
                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText(50, ((this.globalState.WindowHeight - 50) | 0), "1) Test keyboard\n2) Test mouse\n3) Test font\n4) Test sound\n5) Test music", TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont14Pt, DTLibrary.DTColor.Black());
            },
            RenderMusic: function (musicOutput) {
                this.globalState.RenderMusic(musicOutput);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.TestingKeyboardFrame", {
        inherits: [DTLibrary.IFrame$4(TuxPlanetSpeedrunAnyPercentLibrary.GameImage,TuxPlanetSpeedrunAnyPercentLibrary.GameFont,TuxPlanetSpeedrunAnyPercentLibrary.GameSound,TuxPlanetSpeedrunAnyPercentLibrary.GameMusic)],
        fields: {
            globalState: null,
            sessionState: null,
            x: 0,
            y: 0
        },
        alias: [
            "ProcessExtraTime", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessExtraTime",
            "GetClickUrl", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetClickUrl",
            "GetNextFrame", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetNextFrame",
            "ProcessMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessMusic",
            "Render", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$Render",
            "RenderMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$RenderMusic"
        ],
        ctors: {
            ctor: function (globalState, sessionState) {
                this.$initialize();
                this.globalState = globalState;
                this.sessionState = sessionState;

                this.x = 50;
                this.y = 50;
            }
        },
        methods: {
            ProcessExtraTime: function (milliseconds) { },
            GetClickUrl: function () {
                return null;
            },
            GetNextFrame: function (keyboardInput, mouseInput, previousKeyboardInput, previousMouseInput, displayProcessing, soundOutput, musicProcessing) {
                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Esc) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Esc)) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.TestingFrame(this.globalState, this.sessionState);
                }

                var delta = (Bridge.Int.div(this.globalState.ElapsedMicrosPerFrame, 2000)) | 0;

                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.LeftArrow)) {
                    this.x = (this.x - delta) | 0;
                }
                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.RightArrow)) {
                    this.x = (this.x + delta) | 0;
                }
                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.DownArrow)) {
                    this.y = (this.y - delta) | 0;
                }
                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.UpArrow)) {
                    this.y = (this.y + delta) | 0;
                }

                if (this.x < 0) {
                    this.x = 0;
                }
                if (this.x > this.globalState.WindowWidth) {
                    this.x = this.globalState.WindowWidth;
                }
                if (this.y < 0) {
                    this.y = 0;
                }
                if (this.y > this.globalState.WindowHeight) {
                    this.y = this.globalState.WindowHeight;
                }

                return this;
            },
            ProcessMusic: function () {
                this.globalState.ProcessMusic();
            },
            Render: function (displayOutput) {
                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle(((this.x - 5) | 0), ((this.y - 5) | 0), 11, 11, DTLibrary.DTColor.Black(), true);
            },
            RenderMusic: function (musicOutput) {
                this.globalState.RenderMusic(musicOutput);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.TestingMouseFrame", {
        inherits: [DTLibrary.IFrame$4(TuxPlanetSpeedrunAnyPercentLibrary.GameImage,TuxPlanetSpeedrunAnyPercentLibrary.GameFont,TuxPlanetSpeedrunAnyPercentLibrary.GameSound,TuxPlanetSpeedrunAnyPercentLibrary.GameMusic)],
        fields: {
            globalState: null,
            sessionState: null,
            x: 0,
            y: 0,
            color: 0,
            shouldFill: false
        },
        alias: [
            "ProcessExtraTime", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessExtraTime",
            "GetClickUrl", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetClickUrl",
            "GetNextFrame", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetNextFrame",
            "ProcessMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessMusic",
            "Render", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$Render",
            "RenderMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$RenderMusic"
        ],
        ctors: {
            ctor: function (globalState, sessionState) {
                this.$initialize();
                this.globalState = globalState;
                this.sessionState = sessionState;

                this.x = 0;
                this.y = 0;
                this.color = 0;
                this.shouldFill = true;
            }
        },
        methods: {
            ProcessExtraTime: function (milliseconds) { },
            GetClickUrl: function () {
                return null;
            },
            GetNextFrame: function (keyboardInput, mouseInput, previousKeyboardInput, previousMouseInput, displayProcessing, soundOutput, musicProcessing) {
                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Esc) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Esc)) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.TestingFrame(this.globalState, this.sessionState);
                }

                this.x = mouseInput.DTLibrary$IMouse$GetX();
                this.y = mouseInput.DTLibrary$IMouse$GetY();

                if (mouseInput.DTLibrary$IMouse$IsLeftMouseButtonPressed() && !previousMouseInput.DTLibrary$IMouse$IsLeftMouseButtonPressed()) {
                    this.color = (this.color + 1) | 0;
                    if (this.color === 4) {
                        this.color = 0;
                    }
                }

                if (mouseInput.DTLibrary$IMouse$IsRightMouseButtonPressed() && !previousMouseInput.DTLibrary$IMouse$IsRightMouseButtonPressed()) {
                    this.shouldFill = !this.shouldFill;
                }

                return this;
            },
            ProcessMusic: function () {
                this.globalState.ProcessMusic();
            },
            Render: function (displayOutput) {
                var dtColor;

                switch (this.color) {
                    case 0: 
                        dtColor = DTLibrary.DTColor.Black();
                        break;
                    case 1: 
                        dtColor = new DTLibrary.DTColor.ctor(255, 0, 0);
                        break;
                    case 2: 
                        dtColor = new DTLibrary.DTColor.ctor(0, 255, 0);
                        break;
                    case 3: 
                        dtColor = new DTLibrary.DTColor.ctor(0, 0, 255);
                        break;
                    default: 
                        throw new System.Exception();
                }

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle(((this.x - 5) | 0), ((this.y - 5) | 0), 11, 11, dtColor, this.shouldFill);
            },
            RenderMusic: function (musicOutput) {
                this.globalState.RenderMusic(musicOutput);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.TestingMusicFrame", {
        inherits: [DTLibrary.IFrame$4(TuxPlanetSpeedrunAnyPercentLibrary.GameImage,TuxPlanetSpeedrunAnyPercentLibrary.GameFont,TuxPlanetSpeedrunAnyPercentLibrary.GameSound,TuxPlanetSpeedrunAnyPercentLibrary.GameMusic)],
        fields: {
            globalState: null,
            sessionState: null,
            volumePicker: null
        },
        alias: [
            "ProcessExtraTime", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessExtraTime",
            "GetClickUrl", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetClickUrl",
            "GetNextFrame", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetNextFrame",
            "ProcessMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessMusic",
            "Render", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$Render",
            "RenderMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$RenderMusic"
        ],
        ctors: {
            ctor: function (globalState, sessionState) {
                this.$initialize();
                this.globalState = globalState;
                this.sessionState = sessionState;

                this.volumePicker = null;
            }
        },
        methods: {
            ProcessExtraTime: function (milliseconds) { },
            GetClickUrl: function () {
                return null;
            },
            GetNextFrame: function (keyboardInput, mouseInput, previousKeyboardInput, previousMouseInput, displayProcessing, soundOutput, musicProcessing) {
                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Esc) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Esc)) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.TestingFrame(this.globalState, this.sessionState);
                }

                if (this.volumePicker == null) {
                    this.volumePicker = new TuxPlanetSpeedrunAnyPercentLibrary.SoundAndMusicVolumePicker(0, 0, soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$GetSoundVolume(), this.globalState.MusicVolume, this.globalState.ElapsedMicrosPerFrame, TuxPlanetSpeedrunAnyPercentLibrary.SoundAndMusicVolumePicker.Color.Black);
                }

                this.volumePicker.ProcessFrame(mouseInput, previousMouseInput);
                soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$SetSoundVolume(this.volumePicker.GetCurrentSoundVolume());
                this.globalState.MusicVolume = this.volumePicker.GetCurrentMusicVolume();

                var music = null;
                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.One) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.One)) {
                    music = TuxPlanetSpeedrunAnyPercentLibrary.GameMusic.Theme;
                }
                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Two) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Two)) {
                    music = TuxPlanetSpeedrunAnyPercentLibrary.GameMusic.Airship2;
                }

                if (music != null) {
                    this.globalState.MusicPlayer.SetMusic(System.Nullable.getValue(music), 100);
                }

                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Three) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Three)) {
                    this.globalState.MusicPlayer.StopMusic();
                }

                return this;
            },
            ProcessMusic: function () {
                this.globalState.ProcessMusic();
            },
            Render: function (displayOutput) {
                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle(0, 0, this.globalState.WindowWidth, this.globalState.WindowHeight, new DTLibrary.DTColor.ctor(128, 128, 128), true);

                if (this.volumePicker != null) {
                    this.volumePicker.Render(displayOutput);
                }

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText(50, ((this.globalState.WindowHeight - 50) | 0), "Press 1/2 to switch music tracks.\nPress 3 to stop music.", TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont14Pt, DTLibrary.DTColor.Black());
            },
            RenderMusic: function (musicOutput) {
                this.globalState.RenderMusic(musicOutput);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.TestingSoundFrame", {
        inherits: [DTLibrary.IFrame$4(TuxPlanetSpeedrunAnyPercentLibrary.GameImage,TuxPlanetSpeedrunAnyPercentLibrary.GameFont,TuxPlanetSpeedrunAnyPercentLibrary.GameSound,TuxPlanetSpeedrunAnyPercentLibrary.GameMusic)],
        fields: {
            globalState: null,
            sessionState: null,
            volumePicker: null,
            cooldownInMicroseconds: 0
        },
        alias: [
            "ProcessExtraTime", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessExtraTime",
            "GetClickUrl", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetClickUrl",
            "GetNextFrame", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetNextFrame",
            "ProcessMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessMusic",
            "Render", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$Render",
            "RenderMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$RenderMusic"
        ],
        ctors: {
            ctor: function (globalState, sessionState) {
                this.$initialize();
                this.globalState = globalState;
                this.sessionState = sessionState;

                this.volumePicker = null;

                this.cooldownInMicroseconds = 0;
            }
        },
        methods: {
            ProcessExtraTime: function (milliseconds) { },
            GetClickUrl: function () {
                return null;
            },
            GetNextFrame: function (keyboardInput, mouseInput, previousKeyboardInput, previousMouseInput, displayProcessing, soundOutput, musicProcessing) {
                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Esc) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Esc)) {
                    return new TuxPlanetSpeedrunAnyPercentLibrary.TestingFrame(this.globalState, this.sessionState);
                }

                if (this.volumePicker == null) {
                    this.volumePicker = new TuxPlanetSpeedrunAnyPercentLibrary.SoundAndMusicVolumePicker(0, 0, soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$GetSoundVolume(), this.globalState.MusicVolume, this.globalState.ElapsedMicrosPerFrame, TuxPlanetSpeedrunAnyPercentLibrary.SoundAndMusicVolumePicker.Color.Black);
                }

                this.volumePicker.ProcessFrame(mouseInput, previousMouseInput);
                soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$SetSoundVolume(this.volumePicker.GetCurrentSoundVolume());
                this.globalState.MusicVolume = this.volumePicker.GetCurrentMusicVolume();

                this.cooldownInMicroseconds = (this.cooldownInMicroseconds - this.globalState.ElapsedMicrosPerFrame) | 0;

                if (this.cooldownInMicroseconds <= 0) {
                    soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$PlaySound(TuxPlanetSpeedrunAnyPercentLibrary.GameSound.Click);

                    this.cooldownInMicroseconds = (this.cooldownInMicroseconds + (1000000)) | 0;

                    if (this.cooldownInMicroseconds < 0) {
                        this.cooldownInMicroseconds = 0;
                    }
                }

                return this;
            },
            ProcessMusic: function () {
                this.globalState.ProcessMusic();
            },
            Render: function (displayOutput) {
                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle(0, 0, this.globalState.WindowWidth, this.globalState.WindowHeight, new DTLibrary.DTColor.ctor(128, 128, 128), true);

                if (this.volumePicker != null) {
                    this.volumePicker.Render(displayOutput);
                }
            },
            RenderMusic: function (musicOutput) {
                this.globalState.RenderMusic(musicOutput);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.TitleScreenFrame", {
        inherits: [DTLibrary.IFrame$4(TuxPlanetSpeedrunAnyPercentLibrary.GameImage,TuxPlanetSpeedrunAnyPercentLibrary.GameFont,TuxPlanetSpeedrunAnyPercentLibrary.GameSound,TuxPlanetSpeedrunAnyPercentLibrary.GameMusic)],
        statics: {
            methods: {
                CanContinueCurrentGame: function (sessionState) {
                    return sessionState.HasStarted();
                }
            }
        },
        fields: {
            globalState: null,
            sessionState: null,
            volumePicker: null,
            creditsButton: null,
            versionString: null,
            selectedOption: 0,
            options: null
        },
        alias: [
            "ProcessExtraTime", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessExtraTime",
            "GetClickUrl", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetClickUrl",
            "GetNextFrame", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetNextFrame",
            "ProcessMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessMusic",
            "Render", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$Render",
            "RenderMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$RenderMusic"
        ],
        ctors: {
            ctor: function (globalState, sessionState) {
                this.$initialize();
                this.globalState = globalState;
                this.sessionState = sessionState;
                this.volumePicker = null;

                this.versionString = TuxPlanetSpeedrunAnyPercentLibrary.VersionInfo.GetVersionInfo().Version;

                this.creditsButton = new TuxPlanetSpeedrunAnyPercentLibrary.Button(((globalState.WindowWidth - 105) | 0), 5, 100, 35, TuxPlanetSpeedrunAnyPercentLibrary.Button.GetStandardSecondaryBackgroundColor(), TuxPlanetSpeedrunAnyPercentLibrary.Button.GetStandardHoverColor(), TuxPlanetSpeedrunAnyPercentLibrary.Button.GetStandardClickColor(), "Credits", 15, 10, TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont14Pt);

                this.selectedOption = 0;

                this.options = new (System.Collections.Generic.List$1(TuxPlanetSpeedrunAnyPercentLibrary.TitleScreenFrame.Option)).ctor();

                if (TuxPlanetSpeedrunAnyPercentLibrary.TitleScreenFrame.CanContinueCurrentGame(sessionState)) {
                    this.options.add(TuxPlanetSpeedrunAnyPercentLibrary.TitleScreenFrame.Option.ContinueGame);
                }

                this.options.add(TuxPlanetSpeedrunAnyPercentLibrary.TitleScreenFrame.Option.NewGame);

                if (!globalState.IsWebBrowserVersion) {
                    this.options.add(TuxPlanetSpeedrunAnyPercentLibrary.TitleScreenFrame.Option.Quit);
                }
            }
        },
        methods: {
            ProcessExtraTime: function (milliseconds) { },
            GetClickUrl: function () {
                return null;
            },
            GetNextFrame: function (keyboardInput, mouseInput, previousKeyboardInput, previousMouseInput, displayProcessing, soundOutput, musicProcessing) {
                this.sessionState.AddRandomSeed(17);

                if (this.volumePicker == null) {
                    this.volumePicker = new TuxPlanetSpeedrunAnyPercentLibrary.SoundAndMusicVolumePicker(0, 0, soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$GetSoundVolume(), this.globalState.MusicVolume, this.globalState.ElapsedMicrosPerFrame, TuxPlanetSpeedrunAnyPercentLibrary.SoundAndMusicVolumePicker.Color.Black);
                }

                this.volumePicker.ProcessFrame(mouseInput, previousMouseInput);
                soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$SetSoundVolume(this.volumePicker.GetCurrentSoundVolume());
                this.globalState.MusicVolume = this.volumePicker.GetCurrentMusicVolume();

                this.globalState.MusicPlayer.SetMusic(TuxPlanetSpeedrunAnyPercentLibrary.GameMusic.Theme, 100);

                if (this.globalState.DebugMode) {
                    if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.T) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.T)) {
                        this.globalState.SaveData(this.sessionState, soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$GetSoundVolume());
                        return new TuxPlanetSpeedrunAnyPercentLibrary.TestingFrame(this.globalState, this.sessionState);
                    }
                }

                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.UpArrow) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.UpArrow)) {
                    this.selectedOption = (this.selectedOption - 1) | 0;
                    if (this.selectedOption === -1) {
                        this.selectedOption = (this.options.Count - 1) | 0;
                    }
                }

                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.DownArrow) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.DownArrow)) {
                    this.selectedOption = (this.selectedOption + 1) | 0;
                    if (this.selectedOption === this.options.Count) {
                        this.selectedOption = 0;
                    }
                }

                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Enter) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Enter) || keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Space) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Space) || keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Z) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Z)) {
                    soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$PlaySound(TuxPlanetSpeedrunAnyPercentLibrary.GameSound.Click);

                    switch (this.options.getItem(this.selectedOption)) {
                        case TuxPlanetSpeedrunAnyPercentLibrary.TitleScreenFrame.Option.NewGame: 
                            this.sessionState.ClearData(this.globalState.WindowWidth, this.globalState.WindowHeight);
                            this.globalState.SaveData(this.sessionState, soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$GetSoundVolume());
                            return new TuxPlanetSpeedrunAnyPercentLibrary.InstructionsFrame(this.globalState, this.sessionState);
                        case TuxPlanetSpeedrunAnyPercentLibrary.TitleScreenFrame.Option.ContinueGame: 
                            this.globalState.SaveData(this.sessionState, soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$GetSoundVolume());
                            if (this.sessionState.GameLogic != null) {
                                return TuxPlanetSpeedrunAnyPercentLibrary.GameFrame.GetGameFrame(this.globalState, this.sessionState, displayProcessing, soundOutput, musicProcessing);
                            }
                            return new TuxPlanetSpeedrunAnyPercentLibrary.OverworldFrame(this.globalState, this.sessionState);
                        case TuxPlanetSpeedrunAnyPercentLibrary.TitleScreenFrame.Option.Quit: 
                            this.globalState.SaveData(this.sessionState, soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$GetSoundVolume());
                            return null;
                        default: 
                            throw new System.Exception();
                    }
                }

                var clickedCreditsButton = this.creditsButton.ProcessFrame(mouseInput, previousMouseInput);
                if (clickedCreditsButton) {
                    this.globalState.SaveData(this.sessionState, soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$GetSoundVolume());
                    soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$PlaySound(TuxPlanetSpeedrunAnyPercentLibrary.GameSound.Click);
                    return new TuxPlanetSpeedrunAnyPercentLibrary.CreditsFrame(this.globalState, this.sessionState);
                }

                return this;
            },
            ProcessMusic: function () {
                this.globalState.ProcessMusic();
            },
            Render: function (displayOutput) {
                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle(0, 0, this.globalState.WindowWidth, this.globalState.WindowHeight, new DTLibrary.DTColor.ctor(223, 220, 217), true);

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText(((this.globalState.WindowWidth - 42) | 0), 55, "v" + (this.versionString || ""), TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont12Pt, DTLibrary.DTColor.Black());

                this.creditsButton.Render(displayOutput);

                if (this.volumePicker != null) {
                    this.volumePicker.Render(displayOutput);
                }

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText(((((Bridge.Int.div(this.globalState.WindowWidth, 2)) | 0) - 280) | 0), 510, "Tux Planet Speedrun Any%", TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont32Pt, DTLibrary.DTColor.Black());

                for (var i = 0; i < this.options.Count; i = (i + 1) | 0) {
                    var x = (((Bridge.Int.div(this.globalState.WindowWidth, 2)) | 0) - 75) | 0;

                    if (this.options.Count === 1) {
                        x = (((Bridge.Int.div(this.globalState.WindowWidth, 2)) | 0) - 129) | 0;
                    }

                    var y = (350 - Bridge.Int.mul(50, i)) | 0;
                    var text;

                    switch (this.options.getItem(i)) {
                        case TuxPlanetSpeedrunAnyPercentLibrary.TitleScreenFrame.Option.ContinueGame: 
                            text = "Continue";
                            break;
                        case TuxPlanetSpeedrunAnyPercentLibrary.TitleScreenFrame.Option.NewGame: 
                            if (TuxPlanetSpeedrunAnyPercentLibrary.TitleScreenFrame.CanContinueCurrentGame(this.sessionState)) {
                                text = "Start new game";
                            } else {
                                text = this.options.Count === 1 ? "Start (press enter)" : "Start";
                            }
                            break;
                        case TuxPlanetSpeedrunAnyPercentLibrary.TitleScreenFrame.Option.Quit: 
                            text = "Quit";
                            break;
                        default: 
                            throw new System.Exception();
                    }

                    displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText(x, ((y + (i === this.selectedOption ? 3 : 0)) | 0), text, i === this.selectedOption ? TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont20Pt : TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont14Pt, i === this.selectedOption ? new DTLibrary.DTColor.ctor(0, 0, 0) : new DTLibrary.DTColor.ctor(64, 64, 64));
                }
            },
            RenderMusic: function (musicOutput) {
                this.globalState.RenderMusic(musicOutput);
            }
        }
    });

    Bridge.define("TuxPlanetSpeedrunAnyPercentLibrary.VictoryScreenFrame", {
        inherits: [DTLibrary.IFrame$4(TuxPlanetSpeedrunAnyPercentLibrary.GameImage,TuxPlanetSpeedrunAnyPercentLibrary.GameFont,TuxPlanetSpeedrunAnyPercentLibrary.GameSound,TuxPlanetSpeedrunAnyPercentLibrary.GameMusic)],
        fields: {
            globalState: null,
            sessionState: null,
            updatedSession: false
        },
        alias: [
            "ProcessExtraTime", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessExtraTime",
            "GetClickUrl", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetClickUrl",
            "GetNextFrame", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$GetNextFrame",
            "ProcessMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$ProcessMusic",
            "Render", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$Render",
            "RenderMusic", "DTLibrary$IFrame$4$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$TuxPlanetSpeedrunAnyPercentLibrary$GameMusic$RenderMusic"
        ],
        ctors: {
            ctor: function (globalState, sessionState) {
                this.$initialize();
                this.globalState = globalState;
                this.sessionState = sessionState;

                this.updatedSession = false;
            }
        },
        methods: {
            ProcessExtraTime: function (milliseconds) { },
            GetClickUrl: function () {
                return null;
            },
            GetNextFrame: function (keyboardInput, mouseInput, previousKeyboardInput, previousMouseInput, displayProcessing, soundOutput, musicProcessing) {
                if (!this.updatedSession) {
                    this.updatedSession = true;
                    this.sessionState.WinGame();
                    this.globalState.SaveData(this.sessionState, soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$GetSoundVolume());
                }

                if (keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Z) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Z) || keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Enter) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Enter) || keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Space) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Space) || keyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Esc) && !previousKeyboardInput.DTLibrary$IKeyboard$IsPressed(DTLibrary.Key.Esc)) {
                    soundOutput.DTLibrary$ISoundOutput$1$TuxPlanetSpeedrunAnyPercentLibrary$GameSound$PlaySound(TuxPlanetSpeedrunAnyPercentLibrary.GameSound.Click);
                    return new TuxPlanetSpeedrunAnyPercentLibrary.TitleScreenFrame(this.globalState, this.sessionState);
                }

                return this;
            },
            ProcessMusic: function () {
                this.globalState.ProcessMusic();
            },
            Render: function (displayOutput) {
                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawRectangle(0, 0, this.globalState.WindowWidth, this.globalState.WindowHeight, new DTLibrary.DTColor.ctor(223, 220, 217), true);

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText(((((Bridge.Int.div(this.globalState.WindowWidth, 2)) | 0) - 78) | 0), 650, "Victory", TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont32Pt, DTLibrary.DTColor.Black());

                var elapsedTimeString = TuxPlanetSpeedrunAnyPercentLibrary.ElapsedTimeUtil.GetElapsedTimeString(this.sessionState.ElapsedMillis);

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText(((((Bridge.Int.div(this.globalState.WindowWidth, 2)) | 0) - 115) | 0), 450, "You win!\nFinal time: " + (elapsedTimeString || ""), TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont20Pt, DTLibrary.DTColor.Black());

                displayOutput.DTLibrary$IDisplayOutput$2$TuxPlanetSpeedrunAnyPercentLibrary$GameImage$TuxPlanetSpeedrunAnyPercentLibrary$GameFont$DrawText(((((Bridge.Int.div(this.globalState.WindowWidth, 2)) | 0) - 131) | 0), 225, "Back to title screen", TuxPlanetSpeedrunAnyPercentLibrary.GameFont.DTSimpleFont20Pt, DTLibrary.DTColor.Black());
            },
            RenderMusic: function (musicOutput) {
                this.globalState.RenderMusic(musicOutput);
            }
        }
    });
});
